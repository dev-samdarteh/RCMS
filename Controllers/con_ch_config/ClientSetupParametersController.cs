using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using RhemaCMS.Models;
using System.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Http;
using RhemaCMS.Models.MSTRModels;
using RhemaCMS.Models.CLNTModels;
using RhemaCMS.Controllers.con_adhc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using RhemaCMS.Models.Adhoc;
using Microsoft.AspNetCore.Hosting;
using RhemaCMS.Models.ViewModels.vm_cl;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.IO;
using System.Globalization;
using Newtonsoft.Json; 

namespace RhemaCMS.Controllers.con_ch_config
{
    public class ClientSetupParametersController : Controller
    {
        private readonly MSTR_DbContext _masterContext;
        private ChurchModelContext _context;
        private readonly IWebHostEnvironment _hostingEnvironment;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly ITempDataDictionaryFactory _tempDataDictionaryFactory;
        ///
     //   private string _strClientConn;
        private string _clientDBConnString;
        private UserProfile _oLoggedUser;
       // private UserRole _oLoggedRole;
        private MSTRChurchBody _oLoggedCB_MSTR;
        private MSTRAppGlobalOwner _oLoggedAGO_MSTR;

        // private bool isCurrValid = false;
        private UserSessionPrivilege oUserLogIn_Priv = null;

        /// localized
        private ChurchBody _oLoggedCB;
        private AppGlobalOwner _oLoggedAGO;
        ///
        private string strCountryCode_dflt = (string)null; 
        private string strCountryName_dflt = ""; 
        private string strCountryCURR1_dflt = ""; 
        private string strCountryCURR2_dflt = "";


        ///        
        private List<DiscreteLookup> dlCBDivOrgTypes = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlShareStatus = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlOwnerStatus = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlGenStatuses = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlOfficeTermType = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlChuWorkStats = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlNVPCodes = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlNVPValTypes = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlNVPCategories = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlPeriodTypes = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlIntervalFreqs = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlSemesters = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlQuarters = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlMonths = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlDays = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlActivityTypes = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlGenderStatuses = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlMemTypeCodes = new List<DiscreteLookup>();


        private readonly IConfiguration _configuration;
        private string _clientDBConn;


        public ClientSetupParametersController(MSTR_DbContext masterContext, IWebHostEnvironment hostingEnvironment, 
            IHttpContextAccessor httpContextAccessor, ITempDataDictionaryFactory tempDataDictionaryFactory, ChurchModelContext clientCtx, IConfiguration configuration)
        {
            _hostingEnvironment = hostingEnvironment;
            _masterContext = masterContext;
            _configuration = configuration;


            _httpContextAccessor = httpContextAccessor;
            _tempDataDictionaryFactory = tempDataDictionaryFactory;


            // get user logon info... authenticate else logout
            if (!SetUserLogged())
                RedirectToAction("LoginUserAcc", "UserLogin");


            // get user logon details... from memory
            // _oLoggedRole = oUserLogIn_Priv.UserRole; 

            var isAuth = this.oUserLogIn_Priv != null;
            //  if (!isAuth) isAuth = SetUserLogged();

            if (isAuth)
            {
                this._oLoggedUser = this.oUserLogIn_Priv.UserProfile;
                this._oLoggedCB_MSTR = this.oUserLogIn_Priv.ChurchBody;
                this._oLoggedAGO_MSTR = this.oUserLogIn_Priv.AppGlobalOwner;
                this._oLoggedUser.strChurchCode_AGO = this._oLoggedAGO_MSTR != null ? this._oLoggedAGO_MSTR.GlobalChurchCode : "";
                this._oLoggedUser.strChurchCode_CB = this._oLoggedCB_MSTR != null ? this._oLoggedCB_MSTR.GlobalChurchCode : "";
                ///
                this._oLoggedCB = this.oUserLogIn_Priv.ChurchBody_CLNT;
                this._oLoggedAGO = this.oUserLogIn_Priv.AppGlobalOwner_CLNT;
            }


            if (this._oLoggedUser == null)
                RedirectToAction("LoginUserAcc", "UserLogin");

            if (this._oLoggedUser.AppGlobalOwnerId == null || this._oLoggedUser.ChurchBodyId == null)
                RedirectToAction("LoginUserAcc", "UserLogin");


            // _context = context;
            //  this._context = clientCtx;

            this._clientDBConn = AppUtilties.GetNewDBConnString_CL(_masterContext, _configuration, this._oLoggedUser.AppGlobalOwnerId);

            if (clientCtx == null)
                _context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser.AppGlobalOwnerId);

            //else
            //{
            //    var cs = clientCtx.Database.GetDbConnection().ConnectionString;
            //    if (string.IsNullOrEmpty(cs))
            //        _context = GetClientDBContext();
            //    else
            //    {
            //        var conn = new SqlConnectionStringBuilder(cs);
            //        if (conn.DataSource == "_BLNK" || conn.InitialCatalog == "_BLNK") // (string.IsNullOrEmpty(this._clientDBConnString) || this.oUserLogIn_Priv.UserProfile == null)
            //            _context = GetClientDBContext();
            //        else
            //        {
            //            _context = clientCtx;
            //            this._clientDBConnString = clientCtx.Database.GetDbConnection().ConnectionString;
            //        }
            //    }
            //}


            /// synchronize AGO, CL, CB, CTRY  or @login 
            // this._clientDBConnString = _context.Database.GetDbConnection().ConnectionString;

            /// get the localized data... using the MSTR data
            if (this._context != null && (this._oLoggedAGO == null || this._oLoggedCB == null))
            {
                this._oLoggedAGO = this._context.AppGlobalOwner.AsNoTracking()
                                    .Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.GlobalChurchCode == this._oLoggedUser.strChurchCode_AGO).FirstOrDefault();  // one record table...
                this._oLoggedCB = this._context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                                    .Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.MSTR_ChurchBodyId == this._oLoggedUser.ChurchBodyId && c.GlobalChurchCode == this._oLoggedUser.strChurchCode_CB).FirstOrDefault();
            }


            ////load the dash
            //LoadClientDashboardValues();


            ///
            dlGenStatuses.Add(new DiscreteLookup() { Category = "GenStatus", Val = "A", Desc = "Active" });
            dlGenStatuses.Add(new DiscreteLookup() { Category = "GenStatus", Val = "P", Desc = "Pending" });
            dlGenStatuses.Add(new DiscreteLookup() { Category = "GenStatus", Val = "B", Desc = "Blocked" });
            dlGenStatuses.Add(new DiscreteLookup() { Category = "GenStatus", Val = "D", Desc = "Deactive" });
            dlGenStatuses.Add(new DiscreteLookup() { Category = "GenStatus", Val = "E", Desc = "Expired" });

            //SharingStatus { get; set; }  // A - Share with all sub-congregations, C - Share with child congregations only, N - Do not share
            dlShareStatus.Add(new DiscreteLookup() { Category = "ShrStat", Val = "N", Desc = "Do not roll-down (share)" });
            dlShareStatus.Add(new DiscreteLookup() { Category = "ShrStat", Val = "C", Desc = "Roll-down (share) for direct child congregations" });
            dlShareStatus.Add(new DiscreteLookup() { Category = "ShrStat", Val = "A", Desc = "Roll-down (share) for all sub-congregations" });

            // OwnershipStatus { get; set; }  // I -- Inherited, O -- Originated   i.e. currChurchBody == OwnedByChurchBody
            dlOwnerStatus.Add(new DiscreteLookup() { Category = "OwnStat", Val = "O", Desc = "Originated" });
            dlOwnerStatus.Add(new DiscreteLookup() { Category = "OwnStat", Val = "I", Desc = "Shared" });
                        
            dlChuWorkStats.Add(new DiscreteLookup() { Category = "ChuWorkStat", Val = "OP", Desc = "Operational" });
            dlChuWorkStats.Add(new DiscreteLookup() { Category = "ChuWorkStat", Val = "ST", Desc = "Structure only" });

            dlGenderStatuses .Add(new DiscreteLookup() { Category = "GenderStat", Val = "M", Desc = "Male" });
            dlGenderStatuses .Add(new DiscreteLookup() { Category = "GenderStat", Val = "F", Desc = "Female" });
            dlGenderStatuses .Add(new DiscreteLookup() { Category = "GenderStat", Val = "X", Desc = "Mixed" });

            // case "T": return "Tenure";    case "Y": return " Person Age (years)"; //years
            dlOfficeTermType.Add(new DiscreteLookup() { Category = "OfficeTermType", Val = "T", Desc = "Tenure" });
            dlOfficeTermType.Add(new DiscreteLookup() { Category = "OfficeTermType", Val = "Y", Desc = "Person Age (years)" });

            dlPeriodTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "CP", Desc = "Church Calendar Period" });
            dlPeriodTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "AP", Desc = "Accounting Period" });
          //  dlPeriodTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "DF", Desc = "Default Period" });
            dlPeriodTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "CS", Desc = "Custom Period" });
            dlPeriodTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "DF", Desc = "Interval Definition" });

            dlIntervalFreqs.Add(new DiscreteLookup() { Category = "Interval", Val = "D", Desc = "Day" });
            dlIntervalFreqs.Add(new DiscreteLookup() { Category = "Interval", Val = "W", Desc = "Week" });
            dlIntervalFreqs.Add(new DiscreteLookup() { Category = "Interval", Val = "M", Desc = "Month" });
            dlIntervalFreqs.Add(new DiscreteLookup() { Category = "Interval", Val = "S", Desc = "Semester" });
            dlIntervalFreqs.Add(new DiscreteLookup() { Category = "Interval", Val = "Y", Desc = "Year" });

            // pair with the specific year... ex. 2021-Sem-1, 2021-Sem-2, 2023-Sem-2
            dlSemesters.Add(new DiscreteLookup() { Category = "CPR-Sem", Val = "S1", Desc = "Semester-1" });
            dlSemesters.Add(new DiscreteLookup() { Category = "CPR-Sem", Val = "S2", Desc = "Semester-2" });

            // pair with the specific year... ex. 2021-Qtr-1, 2022-Qtr-2, 2023-Qtr-4  // 2021-Quarter-1
            dlQuarters.Add(new DiscreteLookup() { Category = "CPR-Qtr", Val = "Q1", Desc = "Quarter-1" });
            dlQuarters.Add(new DiscreteLookup() { Category = "CPR-Qtr", Val = "Q2", Desc = "Quarter-2" });
            dlQuarters.Add(new DiscreteLookup() { Category = "CPR-Qtr", Val = "Q3", Desc = "Quarter-3" });
            dlQuarters.Add(new DiscreteLookup() { Category = "CPR-Qtr", Val = "Q4", Desc = "Quarter-4" });

            // pair with the specific year... ex. 2021-Jan, 2022-Feb, 2023-Dec  ... 2021-January
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M1", Desc = "Jan" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M2", Desc = "Feb" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M3", Desc = "Mar" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M4", Desc = "Apr" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M5", Desc = "May" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M6", Desc = "Jun" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M7", Desc = "Jul" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M8", Desc = "Aug" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M9", Desc = "Sep" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M10", Desc = "Oct" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M11", Desc = "Nov" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M12", Desc = "Dec" });
                    

            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CR", Desc = "Church Head (Apex)" }); //--CB[church body]  ... General CB
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "GB", Desc = "Governing Body" }); //... General CB
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "IB", Desc = "Independent Unit" }); //... General CB

            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CH", Desc = "Congregation Head-unit" });  // oversight directly on congregations ... General CB
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CN", Desc = "Congregation" });  // to look up congregation by church code [short or full path]  -- ... General CB

            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "DP", Desc = "Department" });  //   Ministry -- CSU [church sector unit] ... department with units, offices, cttees or church groupings
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CE", Desc = "Church Enterprise" }); //...   -- CSU 
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CO", Desc = "Church Office" }); //...  CSU [church sector unit] ... office setup ex. President, Secretary or Moderator
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CG", Desc = "Church Grouping" }); //-- groups, associations   --CSU  ... grouping of members as a unit incl clubs, unions
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "SC", Desc = "Standing Committee" }); // Working Committee   -- CSU 

            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CP", Desc = "Position/Role" });  
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "TM", Desc = "Team/Batch" });   // Working Team .. group of roles/pos or other teams ex. Session = presbyters + agents [ minister + catechist]  -- CR  [church roles]  // -- CR    
            
            // NVP Tags            
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CLA", Desc = "Churchlife Activity" });  //17 and Procedure
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CLARD", Desc = "Churchlife Activity Requirement Definition" });  //18         

            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "TTL", Desc = "Title" });
            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "UOM", Desc = "Unit of Measure" });
            //
            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "LSPK", Desc = "Language Spoken" });  // 8
            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "NIDT", Desc = "National ID Type" });  // 10
            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "INST", Desc = "Institution Type" });  // 11
            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CTT", Desc = "Certificate Type" }); // 12
            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CR", Desc = "Church Rank" });  //15
            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CMT", Desc = "Church Member Type" });  // 19
            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CMS", Desc = "Church Member Status" });  //20           
            //       
           // dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CH_TRNF", Desc = "Church Transfer Settings" });
           // dlNVPCodes.Add(new DiscreteLookup() { Category = "CT", Val = "CT", Desc = "Church Transfer Settings" });  //21
           // dlNVPCodes.Add(new DiscreteLookup() { Category = "CT", Val = "CT", Desc = "Church Transfer Settings" });  //21

            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "VIS_AGE_BRC", Desc = "Visitor Age Bracket" });
          //  dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CLA_BAP_CNF", Desc = "Baptism and Confirmation Details" });  //CLA_BAP_PRC, CLA_CNF_PRC   [...Practice] = Y/N
            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "ASS_CATEG", Desc = "Asset Category" });

            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "GEN_AGE_GRP_C", Desc = "Age Group - Children" });
            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "GEN_AGE_GRP_Y", Desc = "Age Group - Youth" });
            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "GEN_AGE_GRP_YA", Desc = "Age Group - Young Adult" });
            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "GEN_AGE_GRP_MA", Desc = "Age Group - Mid-Aged" }); 
            dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "GEN_AGE_GRP_AA", Desc = "Age Group - Aged" });


            dlNVPValTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "T", Desc = "String (Text)" }); 
            dlNVPValTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "N", Desc = "Numeric" }); 
            dlNVPValTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "D", Desc = "Date" });
           // dlNVPValTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "B", Desc = "Bool" });

            /// ... 
            dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "INST_ELE", Desc = "Basic /Elementary" });
            dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "INST_SEC", Desc = "Secondary /Second-Cycle" });
            dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "INST_PSEC", Desc = "Post Secondary /Pre-Tertiary" });
            dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "INST_TER", Desc = "Tertiary /Advanced Study" });
            ///
            //  MA - Member Activity, GA - General Activity, EV - Event-related, MR - Member Related  
            dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_MA", Desc = "General Churchlife" });  // baptism, confirmation etc.
            dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_MR", Desc = "Member-related" });   // naming, funeral, wedding
            dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_EV", Desc = "Event-related" });   // calendar programs
            dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_GA", Desc = "Adhoc Activity" });  // Others

            // MA - Member Activity, GA - General Activity, EV - Event-related, MR - Member related
            //dlActivityTypes.Add(new DiscreteLookup() { Category = "ActivityType", Val = "MA", Desc = "Member Activity" });
            //dlActivityTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "GA", Desc = "General Activity" });
            //dlActivityTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "EV", Desc = "Event-related" });
            //dlActivityTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "GA", Desc = "Member-related" });

            dlActivityTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_MA", Desc = "General Churchlife" });  // baptism, confirmation etc.
            dlActivityTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_MR", Desc = "Member-related" });   // naming, funeral, wedding
            dlActivityTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_EV", Desc = "Event-related" });   // calendar programs
            dlActivityTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_GA", Desc = "Adhoc Activity" });  // Others  



            dlMemTypeCodes.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "G", Desc = "Guest /Visitor" }); /// Regular Visitor 
            dlMemTypeCodes.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "A", Desc = "Affiliate" });  // visiting missionaries, workers can be assigned temporal membership status -- MBD, MCI, MCP, MCL
            dlMemTypeCodes.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "N", Desc = "New Convert" }); // FULLY automate... MBD, MCI, MLS, MCP, MCL, MCLAc, MCET, MS [ MT, MS -- unassigned ], MCA, MTP    add New convert as *special Visitor [ on diff interface ]  ... [Member data] to be linked with [New Convert data] ... New Convert Class
        //    dlMemTypeCodes.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "T", Desc = "In-Transit" }); // jux like the Congregant ... only that he has not reported physically yet --> result of TRANSFERS
            dlMemTypeCodes.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "C", Desc = "Member" }); // has all modules [21] -- MBD, MCI, MLS, MFR, MCP, MED, MPB, MWE --- MCL [MCL, MCLAc, MCET], MCM [MS, MT, MS], MCG, MCR, MRR, MCA, MCT, MTP, MCV [visits** when sick or regular checkups]
                                                                                                              //dlMemTypeCode.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "L", Desc = "Church Leader" });  /// Mainstream church leadership [elders abd the like]
                                                                                                              //dlMemTypeCode.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "P", Desc = "Lay Pastor" });   /// lay [P]astor
                                                                                                              //dlMemTypeCode.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "M", Desc = "Minister" });   // Ordained...

            ///


        }


        //private ChurchModelContext GetClientDBContext() //UserProfile oUserLogged = null)
        //{
        //    var isAuth = this.oUserLogIn_Priv != null;
        //    if (!isAuth) isAuth = SetUserLogged();
        //    //else
        //    //{
        //    if (!isAuth) { 
        //        RedirectToAction("LoginUserAcc", "UserLogin"); return null;
        //    } 
        //    else
        //    {
        //        if (this.oUserLogIn_Priv == null){ 
        //            RedirectToAction("LoginUserAcc", "UserLogin"); return null;
        //        }
        //        else
        //        {
        //            if (this.oUserLogIn_Priv.UserProfile == null){ 
        //                RedirectToAction("LoginUserAcc", "UserLogin"); return null;
        //            }
        //            else
        //            {
        //                var oClientConfig = _masterContext.ClientAppServerConfig.Where(c => c.AppGlobalOwnerId == this.oUserLogIn_Priv.UserProfile.AppGlobalOwnerId && c.Status == "A").FirstOrDefault();
        //                //var oClientConfig = _masterContext.ClientAppServerConfig.Where(c => c.AppGlobalOwnerId == 4 && c.Status == "A").FirstOrDefault();
        //                if (oClientConfig != null)
        //                {
        //                    //// get and mod the conn
        //                    //var _clientDBConnString = "";
        //                    //var conn = new SqlConnectionStringBuilder(_masterContext.Database.GetDbConnection().ConnectionString);
        //                    //conn.DataSource = oClientConfig.ServerName; conn.InitialCatalog = oClientConfig.DbaseName; conn.UserID = oClientConfig.SvrUserId; conn.Password = oClientConfig.SvrPassword; conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;
        //                    //_clientDBConnString = conn.ConnectionString;

        //                    //// test the NEW DB conn
        //                    //var _clientContext = new ChurchModelContext(_clientDBConnString);

        //                    // var _clientDBConnString = "";
        //                    var conn = new SqlConnectionStringBuilder(_masterContext.Database.GetDbConnection().ConnectionString);
        //                    conn.DataSource = oClientConfig.ServerName; conn.InitialCatalog = oClientConfig.DbaseName;
        //                    conn.UserID = oClientConfig.SvrUserId; conn.Password = oClientConfig.SvrPassword;
        //                    conn.IntegratedSecurity = false; conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;

        //                    this._clientDBConnString = conn.ConnectionString;

        //                    // test the NEW DB conn
        //                    var _clientContext = new ChurchModelContext(_clientDBConnString);

        //                    if (!_clientContext.Database.CanConnect()) 
        //                        RedirectToAction("LoginUserAcc", "UserLogin");

        //                    //// _oLoggedRole = oUserLogIn_Priv.UserRole; 
        //                    //this._oLoggedUser = this.oUserLogIn_Priv.UserProfile;
        //                    //this._oLoggedCB_MSTR = this.oUserLogIn_Priv.ChurchBody;
        //                    //this._oLoggedAGO_MSTR = this.oUserLogIn_Priv.AppGlobalOwner;
        //                    //this._oLoggedUser.strChurchCode_AGO = this._oLoggedAGO_MSTR != null ? this._oLoggedAGO_MSTR.GlobalChurchCode : "";
        //                    //this._oLoggedUser.strChurchCode_CB = this._oLoggedCB_MSTR != null ? this._oLoggedCB_MSTR.GlobalChurchCode : "";

        //                    ///// synchronize AGO, CL, CB, CTRY  or @login 
        //                    //// this._clientDBConnString = _context.Database.GetDbConnection().ConnectionString;

        //                    ///// get the localized data... using the MSTR data
        //                    //this._oLoggedAGO = _clientContext.AppGlobalOwner.AsNoTracking().Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.GlobalChurchCode == this._oLoggedUser.strChurchCode_AGO).FirstOrDefault();  // one record table...
        //                    //this._oLoggedCB = _clientContext.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId &&
        //                    //                        c.MSTR_ChurchBodyId == this._oLoggedUser.ChurchBodyId && c.GlobalChurchCode == this._oLoggedUser.strChurchCode_CB).FirstOrDefault();


        //                    // load the dash b/f
        //                   // LoadClientDashboardValues();

        //                    return _clientContext;
        //                }
        //                else
        //                { // db config not found             
        //                    RedirectToAction("LoginUserAcc", "UserLogin"); return null;
        //                } 
        //            }
        //        } 
        //    }  
        //}

        // private bool isUserAuthorized = false;  


        //private string GetCL_DBConnString()
        //{
        //    var isAuth = this.oUserLogIn_Priv != null;
        //    if (!isAuth) isAuth = SetUserLogged();

        //    if (!isAuth)
        //        RedirectToAction("LoginUserAcc", "UserLogin");

        //    if (this.oUserLogIn_Priv == null)
        //        RedirectToAction("LoginUserAcc", "UserLogin");

        //    if (this.oUserLogIn_Priv.UserProfile == null)
        //        RedirectToAction("LoginUserAcc", "UserLogin");


        //    if (string.IsNullOrEmpty(this._clientDBConn))
        //        this._clientDBConn = AppUtilties.GetNewDBConnString_CL(_masterContext, _configuration, (this._oLoggedUser != null ? this._oLoggedUser.AppGlobalOwnerId : (int?)null));

        //    var _clientContext = new ChurchModelContext(this._clientDBConn);
        //    if (_clientContext.Database.CanConnect()) return this._clientDBConn;
        //    else
        //    {
        //        this._clientDBConn = AppUtilties.GetNewDBConnString_CL(_masterContext, _configuration, this._oLoggedUser.AppGlobalOwnerId);
        //        _clientContext = new ChurchModelContext(this._clientDBConn);
        //        if (_clientContext.Database.CanConnect()) return this._clientDBConn;
        //        else
        //        {
        //            var oClientConfig = _masterContext.ClientAppServerConfig.Where(c => c.AppGlobalOwnerId == this.oUserLogIn_Priv.UserProfile.AppGlobalOwnerId && c.Status == "A").FirstOrDefault();
        //            if (oClientConfig != null)
        //            {
        //                var _cs = _configuration.GetConnectionString("DefaultConnection");
        //                // get and mod the conn                        
        //                var conn = new SqlConnectionStringBuilder(_cs); /// this._configuration.GetConnectionString("DefaultConnection") _context.Database.GetDbConnection().ConnectionString
        //                conn.DataSource = oClientConfig.ServerName; conn.InitialCatalog = oClientConfig.DbaseName;
        //                conn.UserID = oClientConfig.SvrUserId; conn.Password = oClientConfig.SvrPassword;
        //                /// conn.IntegratedSecurity = false; 
        //                conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;

        //                this._clientDBConn = conn.ConnectionString;

        //                _clientContext = new ChurchModelContext(this._clientDBConn);
        //                if (_clientContext.Database.CanConnect()) return this._clientDBConn;
        //                else
        //                { return null; }
        //            }
        //            else
        //            { return null; }
        //        }
        //    }
        //}

        //private ChurchModelContext GetClientDBContext()  ///(UserProfile oUserLogged)
        //{
        //    var isAuth = this.oUserLogIn_Priv != null;
        //    if (!isAuth) isAuth = SetUserLogged();

        //    if (!isAuth)
        //        RedirectToAction("LoginUserAcc", "UserLogin");

        //    if (this.oUserLogIn_Priv == null)
        //        RedirectToAction("LoginUserAcc", "UserLogin");

        //    if (this.oUserLogIn_Priv.UserProfile == null)
        //        RedirectToAction("LoginUserAcc", "UserLogin");


        //    if (string.IsNullOrEmpty(this._clientDBConn))
        //        this._clientDBConn = AppUtilties.GetNewDBConnString_CL(_masterContext, _configuration, (this._oLoggedUser != null ? this._oLoggedUser.AppGlobalOwnerId : (int?)null));

        //    var _clientContext = new ChurchModelContext(this._clientDBConn);
        //    if (_clientContext.Database.CanConnect()) return _clientContext;
        //    else
        //    {
        //        this._clientDBConn = AppUtilties.GetNewDBConnString_CL(_masterContext, _configuration, this._oLoggedUser.AppGlobalOwnerId);
        //        _clientContext = new ChurchModelContext(this._clientDBConn);
        //        if (_clientContext.Database.CanConnect()) return _clientContext;
        //        else
        //        {
        //            var oClientConfig = _masterContext.ClientAppServerConfig.Where(c => c.AppGlobalOwnerId == this.oUserLogIn_Priv.UserProfile.AppGlobalOwnerId && c.Status == "A").FirstOrDefault();
        //            if (oClientConfig != null)
        //            {
        //                var _cs = _configuration.GetConnectionString("DefaultConnection");
        //                // get and mod the conn                        
        //                var conn = new SqlConnectionStringBuilder(_cs); /// this._configuration.GetConnectionString("DefaultConnection") _context.Database.GetDbConnection().ConnectionString
        //                conn.DataSource = oClientConfig.ServerName; conn.InitialCatalog = oClientConfig.DbaseName;
        //                conn.UserID = oClientConfig.SvrUserId; conn.Password = oClientConfig.SvrPassword;
        //                /// conn.IntegratedSecurity = false; 
        //                conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;

        //                this._clientDBConn = conn.ConnectionString;

        //                _clientContext = new ChurchModelContext(this._clientDBConn);
        //                if (_clientContext.Database.CanConnect()) return _clientContext;
        //                else
        //                { return null; }
        //            }
        //            else
        //            { return null; }
        //        }
        //    }

        //    //var oClientConfig = _masterContext.ClientAppServerConfig.Where(c => c.AppGlobalOwnerId == oUserLogged.AppGlobalOwnerId && c.Status == "A").FirstOrDefault();
        //    //if (oClientConfig != null)
        //    //{
        //    //    //// get and mod the conn
        //    //    //var _clientDBConnString = "";
        //    //    //var conn = new SqlConnectionStringBuilder(_masterContext.Database.GetDbConnection().ConnectionString);
        //    //    //conn.DataSource = oClientConfig.ServerName; conn.InitialCatalog = oClientConfig.DbaseName; conn.UserID = oClientConfig.SvrUserId; conn.Password = oClientConfig.SvrPassword; conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;
        //    //    //_clientDBConnString = conn.ConnectionString;

        //    //    //// test the NEW DB conn
        //    //    //var _clientContext = new ChurchModelContext(_clientDBConnString);

        //    //    //var _clientDBConnString = "";
        //    //    var conn = new SqlConnectionStringBuilder(_masterContext.Database.GetDbConnection().ConnectionString);
        //    //    conn.DataSource = oClientConfig.ServerName; conn.InitialCatalog = oClientConfig.DbaseName;
        //    //    conn.UserID = oClientConfig.SvrUserId; conn.Password = oClientConfig.SvrPassword;
        //    //    /// conn.IntegratedSecurity = false; 
        //    //    conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;

        //    //    this._clientDBConnString = conn.ConnectionString;

        //    //    // test the NEW DB conn
        //    //    var _clientContext = new ChurchModelContext(_context, _connstr_CL);

        //    //    if (_clientContext.Database.CanConnect())
        //    //        return _clientContext;
        //    //}

        //    //
        //    // return null;
        //}



        private async Task LogUserActivity_AppMainUserAuditTrail(UserAuditTrail oUserTrail)  //, MSTR_DbContext currContext = null, string strTempConn = "")
        { // var oUserTrail = _masterContext.UserAuditTrail.Where(c => ((c.AppGlobalOwnerId == null && c.ChurchBodyId == null && churchCode=="000000") || (c.AppGlobalOwnerId== oAppGloOwnId && c.ChurchBodyId == oCurrChuBodyId))
            if (oUserTrail != null)
            {
                // MSTR_DbContext currContext = null, string strTempConn = ""
                //var _cs = strTempConn;
                //if (string.IsNullOrEmpty(_cs))

                var _cs = AppUtilties.GetNewDBConnString_MS(_configuration);  /// this._configuration.GetConnectionString("DefaultConnection"); //["ConnectionStrings:DefaultConnection"]; /// _masterContext.Database.GetDbConnection().ConnectionString

                if (!string.IsNullOrEmpty(_cs))
                {
                    using (var logCtx = new MSTR_DbContext(_cs)) // ("Server=RHEMA-SDARTEH;Database=DBRCMS_MS_TEST;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true") ) // AppUtilties.GetNewDBContext_MS(_context, "DBRCMS_CL_TEST"))  // MSTR_DbContext()) //
                    {
                        if (logCtx.Database.CanConnect() == false)
                            logCtx.Database.OpenConnection();
                        else if (logCtx.Database.GetDbConnection().State != System.Data.ConnectionState.Open)
                            logCtx.Database.OpenConnection();

                        // var a = logCtx.Database.GetDbConnection().ConnectionString;
                        // var b = _masterContext.Database.GetDbConnection().ConnectionString;

                        /// 
                        logCtx.UserAuditTrail.Add(oUserTrail);
                        await logCtx.SaveChangesAsync();

                        //logCtx.SaveChanges();

                        logCtx.Entry(oUserTrail).State = EntityState.Detached;
                        ///
                        //DetachAllEntities(logCtx);

                        // close connection
                        logCtx.Database.CloseConnection();

                        //logCtx.Dispose();
                    }
                }

            }
        }

        private async Task LogUserActivity_ClientUserAuditTrail(UserAuditTrail_CL oUserTrail)  //, string strTempConn = ""
        { // var oUserTrail = _masterContext.UserAuditTrail.Where(c => ((c.AppGlobalOwnerId == null && c.ChurchBodyId == null && churchCode=="000000") || (c.AppGlobalOwnerId== oAppGloOwnId && c.ChurchBodyId == oCurrChuBodyId))
            if (oUserTrail != null)
            {
                // var tempCtx = _context;
                //  if (!string.IsNullOrEmpty(clientDBConnString))
                // {

                //// refreshValues... 
                //this._clientDBConn = AppUtilties.GetNewDBConnString_CL(_masterContext, _configuration, this._oLoggedUser.AppGlobalOwnerId);
                //_context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser.AppGlobalOwnerId);

                var _connstr_CL = AppUtilties.GetNewDBConnString_CL(_masterContext, _configuration, this._oLoggedUser.AppGlobalOwnerId); /// this.GetCL_DBConnString();
                if (!string.IsNullOrEmpty(_connstr_CL))
                {
                    using (var logCtx = new ChurchModelContext(_connstr_CL)) // ("Server=RHEMA-SDARTEH;Database=DBRCMS_MS_TEST;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true") ) // AppUtilties.GetNewDBContext_MS(_context, "DBRCMS_CL_TEST"))  // MSTR_DbContext()) //
                    {
                        //logCtx = _context;
                        //var conn = new Microsoft.Data.SqlClient.SqlConnectionStringBuilder(_context.Database.GetDbConnection().ConnectionString);
                        ////  "DefaultConnection": "Server=RHEMA-SDARTEH;Database=DBRCMS_MS_DEV;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true"
                        //conn.DataSource = "RHEMA-SDARTEH"; conn.InitialCatalog = "DBRCMS_CL_TEST"; conn.UserID = "sa"; conn.Password = "sadmin"; conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;
                        /////
                        //logCtx.Database.GetDbConnection().ConnectionString = conn.ConnectionString;

                        try
                        {
                            if (logCtx.Database.CanConnect() == false)
                                logCtx.Database.OpenConnection();
                            else if (logCtx.Database.GetDbConnection().State != System.Data.ConnectionState.Open)
                                logCtx.Database.OpenConnection();

                            // var a = logCtx.Database.GetDbConnection().ConnectionString;
                            // var b = _masterContext.Database.GetDbConnection().ConnectionString;

                            /// 
                            logCtx.UserAuditTrail_CL.Add(oUserTrail);
                            await logCtx.SaveChangesAsync();

                            //logCtx.SaveChanges();

                            logCtx.Entry(oUserTrail).State = EntityState.Detached;
                            ///
                            //DetachAllEntities(logCtx);

                            // close connection
                            logCtx.Database.CloseConnection();

                            //logCtx.Dispose();

                        }

                        catch (Exception ex)
                        {
                            throw;
                        }
                    }
                }


                //   }
            }
        }
         

        private async Task LoadClientDashboardValues()  //string clientDBConnString) //, UserProfile oLoggedUser)
        {

            /// Load basic values...
            ///
            /// master control DB
            ViewData["strAppName"] = "Rhema-CMS";
            ViewData["strAppNameMod"] = "Church Dashboard";
            ViewData["strAppCurrUser"] = !string.IsNullOrEmpty(this._oLoggedUser.UserDesc) ? this._oLoggedUser.UserDesc : "[Current user]";
            ViewData["oMSTR_AppGloOwnId_Logged"] = this._oLoggedUser.AppGlobalOwnerId;
            ViewData["oMSTR_ChurchBodyId_Logged"] = this._oLoggedUser.ChurchBodyId;

            ViewData["oCBOrgType_Logged"] = this._oLoggedCB.OrgType;  // CH, CN but subscriber may come from other units like Church Office or Church Group HQ

            ViewData["strModCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedModCodes);
            ViewData["bl_IsModAccessVAA0"] = this.oUserLogIn_Priv.IsModAccessVAA0;
            ViewData["bl_IsModAccessDS00"] = this.oUserLogIn_Priv.IsModAccessDS00;
            ViewData["bl_IsModAccessAC01"] = this.oUserLogIn_Priv.IsModAccessAC01;
            ViewData["bl_IsModAccessMR02"] = this.oUserLogIn_Priv.IsModAccessMR02;
            ViewData["bl_IsModAccessCL03"] = this.oUserLogIn_Priv.IsModAccessCL03;
            ViewData["bl_IsModAccessCA04"] = this.oUserLogIn_Priv.IsModAccessCA04;
            ViewData["bl_IsModAccessFM05"] = this.oUserLogIn_Priv.IsModAccessFM05;
            ViewData["bl_IsModAccessRA06"] = this.oUserLogIn_Priv.IsModAccessRA06;
            ///                
            ViewData["strAssignedRoleCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleCodes);
            ViewData["strAssignedRoleNames"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleNames);
            ViewData["strAssignedGroupNames"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedGroupNames);
            //  ViewData["strAssignedGroupDesc"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedGroupsDesc);
            ViewData["strAssignedPermCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedPermCodes);


            //ViewData["strAppCurrUser_ChRole"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRolesDesc);  //_oLoggedRole.RoleName; // "System Adminitrator";
            //ViewData["strAppCurrUser_RoleCateg"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleCodes);  //_oLoggedRole.RoleName; // "SUP_ADMN";  // CH_ADMN | CF_ADMN | CH_RGTR | CF_RGTR | CH_ACCT | CF_ACCT | CH_CUST | CH_CUST

            ViewData["strAppCurrUserPhoto_Filename"] = this._oLoggedUser.UserPhoto;
            ///
            /// client control DB
            ViewData["oAppGloOwnId_Logged"] = this._oLoggedAGO.Id;
            ViewData["oChurchBodyId_Logged"] = this._oLoggedCB.Id;
            ViewData["oChurchBodyOrgType_Logged"] = this._oLoggedCB.OrgType;
            ViewData["strClientLogo_Filename"] = this._oLoggedAGO?.ChurchLogo;
            ViewData["strAppLogo_Filename"] = "~/frontend/dist/img/rhema_logo.png"; // oAppGloOwn?.ChurchLogo;
            ViewData["strClientChurchName"] = this._oLoggedAGO.OwnerName;
            ViewData["strClientBranchName"] = this._oLoggedCB.Name;
            ViewData["strClientChurchLevel"] = !string.IsNullOrEmpty(this._oLoggedCB.ChurchLevel?.CustomName) ? this._oLoggedCB.ChurchLevel?.CustomName : this._oLoggedCB.ChurchLevel?.Name;  // Assembly, Presbytery etc
            ViewData["strClientBranchParentName"] = this._oLoggedCB.ParentChurchBody != null ? this._oLoggedCB.ParentChurchBody.Name : "";


            ViewData["CB_SubCongCount"] = String.Format("{0:N0}", 50);
            ViewData["CB_MemListCount"] = String.Format("{0:N0}", 50); // res[0].cnt_tcm); //
            ViewData["CBWeek_NewMemListCount"] = String.Format("{0:N0}", 50); // res[0].cnt_tsubs);
            ViewData["CBWeek_NewConvertsCount"] = String.Format("{0:N0}", 75); //res[0].cnt_tdb);
            ViewData["CBWeek_VisitorsCount"] = String.Format("{0:N0}", 50); //res[0].cnt_tcln_a);
            ViewData["CBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 50); //res[0].cnt_tcln_d);
            ViewData["CBWeek_PaymentsAmt"] = String.Format("{0:N0}", 50); //res[0].cnt_tcln_d); 
            ViewData["TodaysAuditCount"] = String.Format("{0:N0}", 50);



            //using (var _clientContext = new ChurchModelContext(clientDBConnString)) // ("Server=RHEMA-SDARTEH;Database=DBRCMS_MS_TEST;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true") ) // AppUtilties.GetNewDBContext_MS(_context, "DBRCMS_CL_TEST"))  // MSTR_DbContext()) //
            //{
            //    var result = _clientContext.ChurchBody.Where(c => c.Status == "A" && (c.OrgType == "CH" || c.OrgType == "CN") &&
            //                                             c.AppGlobalOwnerId == this._oLoggedAGO.Id //&& c.ParentChurchBodyId == this._oLoggedCB.Id
            //                                             ).ToList();

            //    //ViewData["CB_SubCongCount"] = String.Format("{0:N0}", (result != null ? result.Count : 999));
            //    ViewData["CB_MemListCount"] = String.Format("{0:N0}", (result != null ? result.Count : 999));

            //    //if (_clientContext.Database.CanConnect() == false) _clientContext.Database.OpenConnection();
            //    //else if (_clientContext.Database.GetDbConnection().State != System.Data.ConnectionState.Open) _clientContext.Database.OpenConnection();

            //    //get Currency
            //    //var curr = _clientContext.Currency.Where(c => c.AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.ChurchBodyId == this._oLoggedUser.ChurchBodyId && c.IsBaseCurrency == true).FirstOrDefault();
            //    //ViewData["CB_CurrUsed"] = curr != null ? curr.Acronym : ""; // "GHS"

            //    //var clientAGO = _clientContext.AppGlobalOwner.Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.Status == "A").FirstOrDefault();
            //    //var clientCB = _clientContext.ChurchBody.Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.MSTR_ChurchBodyId == this._oLoggedUser.ChurchBodyId && c.Status == "A").FirstOrDefault();
            //    ///
            //    //var qrySuccess = false;

            //    //if (clientAGO != null && clientCB != null)
            //    //{

            //    var res = await (from dummyRes in new List<string> { "X" }
            //                         join tcb_sb in _clientContext.ChurchBody.Where(c => c.Status == "A" && (c.OrgType == "CH" || c.OrgType == "CN") &&
            //                                             c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.ParentChurchBodyId == this._oLoggedCB.Id) on 1 equals 1 into _tcb_sb

            //                         // join tcb in clientContext.MSTRChurchBody.Where(c => c.Status == "A" && (c.OrgType == "CH" || c.OrgType == "CN")) on 1 equals 1 into _tcb
            //                         // join tsr in clientContext.UserRole.Where(c => c.RoleStatus == "A" && c.AppGlobalOwnerId == null && c.ChurchBodyId == null) on 1 equals 1 into _tsr
            //                         //join tcm in clientContext.ChurchMember.Where(c => c.Status == "A" &&
            //                         //                    c.AppGlobalOwnerId == clientAGO.Id && c.ChurchBodyId == clientCB.Id) on 1 equals 1 into _tcm
            //                         // join tms in clientContext.UserProfile.Where(c => c.ProfileScope == "V" && c.UserStatus == "A") on 1 equals 1 into _tms
            //                         // join tsubs in clientContext.AppSubscription.Where(c => c.Slastatus == "A") on 1 equals 1 into _tsubs
            //                         // join ttc in clientContext.UserAuditTrail.Where(c => c.EventDate.Date == DateTime.Now.Date) on 1 equals 1 into _ttc
            //                         // join tdb in clientContext.ClientAppServerConfig.Select(c => c.DbaseName).Distinct() on 1 equals 1 into _tdb

            //                         select new
            //                         {
            //                             cnt_tcb_sb = _tcb_sb.Count(),
            //                             // cnt_tcm = _tcm.Count(),
            //                             ///
            //                             //cnt_tms = _tms.Count(),
            //                             //cnt_tsubs = _tsubs.Count(),
            //                             //cnt_tdb = _tdb.Count(),
            //                             // cnt_ttc = _ttc.Count(),
            //                             //cnt_tcln_d = _tcln_d.Count(),
            //                             //cnt_tcln_a = _tcln_a.Count()
            //                         })
            //                .ToList().ToListAsync();
            //        //.ToListAsync();

            //        ///
            //        if (res.Count() > 0)
            //        {
            //           // qrySuccess = true;
            //            ViewData["CB_SubCongCount"] = String.Format("{0:N0}", res[0].cnt_tcb_sb);
            //           // ViewData["CB_MemListCount"] = String.Format("{0:N0}", 100); // res[0].cnt_tcm); //
            //            ViewData["CBWeek_NewMemListCount"] = String.Format("{0:N0}", 100); // res[0].cnt_tsubs);
            //         //   ViewData["CBWeek_NewConvertsCount"] = String.Format("{0:N0}", 100); //res[0].cnt_tdb);
            //            ViewData["CBWeek_VisitorsCount"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_a);
            //            ViewData["CBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_d);
            //            ViewData["CBWeek_PaymentsAmt"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_d); 
            //        }
            //        else
            //        {
            //           ViewData["numCB_SubCongCount"] = String.Format("{0:N0}", 0);
            //          // ViewData["numCB_MemListCount"] = String.Format("{0:N0}", 0);
            //           ViewData["numCBWeek_NewMemListCount"] = String.Format("{0:N0}", 0);
            //          //  ViewData["numCBWeek_NewConvertsCount"] = String.Format("{0:N0}", 0);
            //            ViewData["numCBWeek_VisitorsCount"] = String.Format("{0:N0}", 0);
            //            ViewData["numCBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 0);
            //            ViewData["numCBWeek_PaymentsAmt"] = String.Format("{0:N0}", 0);
            //            ///
            //            ViewData["numCBToday_AuditCount"] = String.Format("{0:N0}", 0);
            //        }

            //       //// var resAudits = _masterContext.UserAuditTrail.Where(c => c.EventDate.Date == DateTime.Now.Date);
            //       // var resAudits = await _masterContext.UserAuditTrail.AsNoTracking().Where(c => c.EventDate.Date == DateTime.Now.Date).ToListAsync();

            //       // // var cnt_ttc = resAudits.Count();
            //       // ViewData["TodaysAuditCount"] = String.Format("{0:N0}", resAudits.Count());


            //        ////String.Format(1234 % 1 == 0 ? "{0:N0}" : "{0:N2}", 1234);
            //        //var curr = _clientContext.Currency.Where(c => c.AppGlobalOwnerId == oAppGloOwnId_Logged && c.ChurchBodyId == oChuBodyId_Logged && c.IsBaseCurrency == true).FirstOrDefault(); 
            //        //oHomeDash.strCurrUsed = curr != null ? curr.Acronym : ""; // "GHS";
            //        //oHomeDash.SupCongCount = String.Format("{0:N0}", 25);
            //        //oHomeDash.MemListCount = String.Format("{0:N0}", 4208); ViewBag.MemListCount = oHomeDash.MemListCount;
            //        //oHomeDash.NewMemListCount = String.Format("{0:N0}", 17); ViewBag.NewMemListCount = oHomeDash.NewMemListCount;
            //        //oHomeDash.NewConvertsCount = String.Format("{0:N0}", 150); ViewBag.NewConvertsCount = oHomeDash.NewConvertsCount;
            //        //oHomeDash.VisitorsCount = String.Format("{0:N0}", 9); ViewBag.VisitorsCount = oHomeDash.VisitorsCount;
            //        //oHomeDash.ReceiptsAmt = String.Format("{0:N2}", 1700);
            //        //oHomeDash.PaymentsAmt = String.Format("{0:N2}", 105.491); 
            //   // }

            //    //if (!qrySuccess)
            //    //{
            //    //    ViewData["numCB_SubCongCount"] = String.Format("{0:N0}", 0);
            //    //    ViewData["numCB_MemListCount"] = String.Format("{0:N0}", 0);
            //    //    ViewData["numCBWeek_NewMemListCount"] = String.Format("{0:N0}", 0);
            //    //    ViewData["numCBWeek_NewConvertsCount"] = String.Format("{0:N0}", 0);
            //    //    ViewData["numCBWeek_VisitorsCount"] = String.Format("{0:N0}", 0);
            //    //    ViewData["numCBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 0);
            //    //    ViewData["numCBWeek_PaymentsAmt"] = String.Format("{0:N0}", 0);
            //    //    ///
            //    //    ViewData["numCBToday_AuditCount"] = String.Format("{0:N0}", 0);
            //    //}




            //    //// close connection
            //    //_clientContext.Database.CloseConnection();

            //}


            //using (var _masContext = new MSTR_DbContext(_context.Database.GetDbConnection().ConnectionString))
            //{
            //    if (_masContext.Database.CanConnect() == false) _masContext.Database.OpenConnection();
            //    else if (_masContext.Database.GetDbConnection().State != System.Data.ConnectionState.Open) _masContext.Database.OpenConnection();

            //    var resAudits = await _masContext.UserAuditTrail.AsNoTracking().Where(c => c.EventDate.Date == DateTime.Now.Date).ToListAsync();
            //    // var cnt_ttc = resAudits.Count();
            //    ViewData["TodaysAuditCount"] = String.Format("{0:N0}", resAudits.Count());


            //    _masContext.Database.CloseConnection();
            //}



            //return new RhemaCMS.Models.ViewModels.vm_app_ven.UserProfileModel();
        }




        private bool SetUserLogged()
        {
            var isUserAuthorized = false;
            if (TempData == null)
            {
                var httpContext = _httpContextAccessor.HttpContext;
                var tempData = _tempDataDictionaryFactory.GetTempData(httpContext);

                if (tempData.ContainsKey("UserLogIn_oUserPrivCol"))
                {
                    var tempPrivList = tempData["UserLogIn_oUserPrivCol"] as string;
                    if (string.IsNullOrEmpty(tempPrivList)) RedirectToAction("LoginUserAcc", "UserLogin");
                    // De-serialize the string to object
                    this.oUserLogIn_Priv = Newtonsoft.Json.JsonConvert.DeserializeObject<UserSessionPrivilege>(tempPrivList);
                    isUserAuthorized = this.oUserLogIn_Priv != null;

                    if (!tempData.ContainsKey("_bckUserLogIn_oUserPrivCol"))
                    {
                        tempData["_bckUserLogIn_oUserPrivCol"] = tempData["UserLogIn_oUserPrivCol"];
                        tempData.Keep(); 
                    }
                     
                    ////
                    //isCurrValid = oUserLogIn_Priv.UserSessionPermList?.Count > 0;
                    //if (isCurrValid)
                    //{
                    //    this._oLoggedUser = this.oUserLogIn_Priv.UserProfile;

                    //    // check permission for Core life...  given the sets of permissions
                    //     isUserAuthorized = true;
                    //}
                }

                else if (tempData.ContainsKey("_bckUserLogIn_oUserPrivCol"))
                {
                    var tempPrivList = tempData["_bckUserLogIn_oUserPrivCol"] as string;
                    if (string.IsNullOrEmpty(tempPrivList)) RedirectToAction("LoginUserAcc", "UserLogin");
                    // De-serialize the string to object
                    this.oUserLogIn_Priv = Newtonsoft.Json.JsonConvert.DeserializeObject<UserSessionPrivilege>(tempPrivList);
                    isUserAuthorized = this.oUserLogIn_Priv != null;
                    tempData["UserLogIn_oUserPrivCol"] = tempData["_bckUserLogIn_oUserPrivCol"];
                    tempData.Keep();
                }

                else  isUserAuthorized = false; // RedirectToAction("LoginUserAcc", "UserLogin");
            }
            else
            {
                if (TempData.ContainsKey("UserLogIn_oUserPrivCol"))
                {
                    var tempPrivList = TempData["UserLogIn_oUserPrivCol"] as string;
                    if (string.IsNullOrEmpty(tempPrivList)) RedirectToAction("LoginUserAcc", "UserLogin");
                    // De serialize the string to object
                    this.oUserLogIn_Priv = Newtonsoft.Json.JsonConvert.DeserializeObject<UserSessionPrivilege>(tempPrivList);
                    isUserAuthorized = this.oUserLogIn_Priv != null;

                    if (!TempData.ContainsKey("_bckUserLogIn_oUserPrivCol"))
                    {
                        TempData["_bckUserLogIn_oUserPrivCol"] = TempData["UserLogIn_oUserPrivCol"];
                        TempData.Keep();
                    }

                    //
                    //isCurrValid = oUserLogIn_Priv.UserSessionPermList?.Count > 0;
                    //if (isCurrValid)
                    //{
                    //    this._oLoggedUser = this.oUserLogIn_Priv.UserProfile;

                    //    // check permission for Core life...  given the sets of permissions
                    //     isUserAuthorized = true; 
                    //}
                }

                else if (TempData.ContainsKey("_bckUserLogIn_oUserPrivCol"))
                {
                    var tempPrivList = TempData["_bckUserLogIn_oUserPrivCol"] as string;
                    if (string.IsNullOrEmpty(tempPrivList)) RedirectToAction("LoginUserAcc", "UserLogin");
                    // De-serialize the string to object
                    this.oUserLogIn_Priv = Newtonsoft.Json.JsonConvert.DeserializeObject<UserSessionPrivilege>(tempPrivList);
                    isUserAuthorized = this.oUserLogIn_Priv != null;
                }

                else  isUserAuthorized = false; // RedirectToAction("LoginUserAcc", "UserLogin");
            }

            return isUserAuthorized;
        }

       


        public static string GetStatusDesc(string oCode)
        {
            switch (oCode)
            {
                case "A": return "Active";
                case "B": return "Blocked";
                case "D": return "Deactive";
                case "P": return "Pending";
                case "E": return "Expired";

                default: return oCode;
            }
        }

        public static string GetGenderDesc(string oCode)
        {
            switch (oCode)
            {
                case "M": return "Male";
                case "F": return "Female";
                case "X": return "Mixed";
              //  case "O": return "Other"; 

                default: return oCode;
            }
        }     

        public static string GetChurchActivityDesc(string oCode)   
        {
            switch (oCode)
            {
                case "MA": return "Member Activity";
                case "GA": return "General Activity";
                case "EV": return "Event-related";
                case "MR": return "Member-related"; 

                default: return oCode;
            }
        }



        public static string GetMemTypeDesc(string oCode)
        {
            switch (oCode)
            {
                //case "M": return "Minister";   // Ordained...
                //case "P": return "Lay Pastor";  /// lay [P]astor
                //case "L": return "Church Leader";
                ///
                case "C": return "Member";   // Congregant
                case "T": return "In-Transit";      // Transfer states 
                case "N": return "New Convert";      // Transfer states 
                case "A": return "Affiliate";
                case "V": return "Guest /Visitor";  /// Regular Visitor

                default: return oCode;
            }
        }

        public static string GetSharingStatusDesc(string oCode)
        {
            switch (oCode)
            {
                case "N": return "Do not roll-down (share)";
                case "C": return "Roll-down (share) for direct child congregations";
                case "A": return "Roll-down (share) for all sub-congregations";

                default: return oCode;
            }
        }

        public static string GetNVPTagDesc(string oCode)
        {
            switch (oCode)
            {
                case "UOM": return "Unit of Measure";
                case "TTL": return "Title";
                case "ASS_CATEG": return "Asset Category";
                case "CH_TRNF": return "Church Transfer Setting";
                case "VIS_AGE_BRC": return "Visitor Age Bracket";
                // case "CLA_BAP_CNF": return "Baptism and Confirmation Settings";  // churchlife--mdl
                
                                                                          ///
                case "CLA": return "Churchlife Activity";
                case "CLARD": return "Churchlife Activity Step";
                case "LSPK": return "Language Spoken";
                case "NIDT": return "National ID Type";
                case "INST": return "Institution Type";
                case "CTT": return "Certificate Type";
                case "CR": return "Church Rank";
                case "CMT": return "Church Member Type";
                case "CMS": return "Church Member Status";
                    ///
                case "CPRD": return "Church Period Definition";
                case "MCCF": return "Custom Member Code Format";
                case "CTS": return "Church Transfer Settings";

                case "GEN_AGE_GRP_C": return "Age Group - Children";        /// "GEN_AGE_GRP_CHLD", Desc = "Age Group - Children"
                case "GEN_AGE_GRP_Y": return "Age Group - Youth";        /// "GEN_AGE_GRP_YTH", Desc = "Age Group - Youth" });
                case "GEN_AGE_GRP_YA": return "Age Group - Young Adult";        /// "GEN_AGE_GRP_YTH", Desc = "Age Group - Youth" });
                case "GEN_AGE_GRP_MA": return "Age Group - Mid-Aged";        /// "GEN_AGE_GRP_ADLT", Desc = "Age Group - Adult" })
                case "GEN_AGE_GRP_AA": return "Age Group - Aged";        /// "GEN_AGE_GRP_AGD", Desc = "Age Group - Aged" }); 

                case "GEN_AGE_GRP": return "General Age Group";

                default: return oCode;
                     
            }
        }

        public static string GetNVPSubTagDesc(string oCode)
        {
            switch (oCode)
            {  
                /// INST .. 11
               // case "INST_PRE": return "Pre-School";
                case "INST_ELE": return "Basic /Elementary";   // Class/Basic 1 - 9
                case "INST_SEC": return  "Secondary /Second-Cycle" ;
                case "INST_PSEC": return  "Post Secondary /Pre-Tertiary" ;
                case "INST_TER": return  "Tertiary /Advanced Study";

                /// CLA .. 17
                case "CLA_MA": return "General Churchlife";
                case "CLA_MR": return "Member-related";
                case "CLA_EV": return "Event-related";
                case "CLA_GA": return "Adhoc Activity";

                // CPRD .........   ...  ...   ...    ...    ...
                case "CPRD_ST_CP": return "Church Period Starting Date";
                case "CPRD_INT_CP": return "Church Period Interval";
               // case "CPRD_PIF_CP": return "Period Interval Frequency";
                case "CPRD_DAYS_CP": return "Church Period Interval-Days";
                    ///
                case "CPEQLAP": return "Church Period same as Account Period";
                    ///
                case "CPRD_ST_AP": return "Accounting Period Starting Date";
                case "CPRD_INT_AP": return "Accounting Period Interval";
               // case "CPRD_PIF_AP": return "Accounting Interval Frequency";
                case "CPRD_DAYS_AP": return "Accounting Period Interval-Days";
                ///
                // MCCF .........   ...  ...   ...    ...    ...
                case "AUT_GN": return "Auto-generate Member Custom Code"; 
                case "PFX": return "Member Custom Code - Prefix"; 
                case "SFX": return "Member Custom Code - Suffix"; 
                case "LDZR": return "Member Custom Code - Leading Zero(0)"; 


                /// others

                default: return oCode;

            }
        }

        public static int GetNVPSetIndex(string oNVPCode)
        {
            switch (oNVPCode)
            {                
                case "LSPK": return 8; 
                case "CPR": return 9; 
                case "NIDT": return 10;
                case "INST": return 11;
                case "CTT": return 12;
                case "CR": return 15;
                case "CLA": return 17;
                case "CLARD": return 18;
                case "CMT": return 19;
                case "CMS": return 20;
                case "CPRD": return 21;                 
                case "MCCF": return 22;                 
                case "CTS": return 23;                 

                default: return 6; // case "NVP": return 6; 
            }
        }



        //AuditType -- TRANSACTIONAL = T, NAVIGATIONAL = N, LOGIN /LOGOUT = L 
        public static string GetAuditTypeDesc(string oCode)
        {
            switch (oCode)
            {
                case "L": return "Login/Logout";
                case "N": return "Navigational";
                case "T": return "Transactional";

                default: return oCode;
            }
        }

        public static string GetChuOrgTypeDesc(string oCode)
        {
            switch (oCode)
            {
                case "CR": return "Church Head (Apex)";
                case "GB": return "Governing Body";
                case "CO": return "Church Office";
                case "DP": return "Church Department";
                case "CG": return "Church Grouping";
                case "SC": return "Standing Committee";
                case "CE": return "Church Enterprise";                
                case "CP": return "Position/Role";
                case "TM": return "Team/Batch";
                case "IB": return "Independent Unit";
                case "CH": return "Congregation Head-unit";
                case "CN": return "Congregation";

                default: return oCode;
            }
        }

        public static object GetChuOrgTypeDetail(string oCode, bool returnSetIndex)
        {
            switch (oCode)
            {
                case "CR": if (returnSetIndex) return 0; else return "Church Head (Apex)"; 
                case "GB": if (returnSetIndex) return 1; else return "Governing Body";
                case "CO": if (returnSetIndex) return 2; else return "Church Office";
                case "DP": if (returnSetIndex) return 3; else return "Church Department";
                case "CG": if (returnSetIndex) return 4; else return "Church Grouping";
                case "SC": if (returnSetIndex) return 5; else return "Standing Committee";
                case "CE": if (returnSetIndex) return 6; else return "Church Enterprise";
                case "CP": if (returnSetIndex) return 7; else return "Position/Role";
                case "TM": if (returnSetIndex) return 8; else return "Batch/Team";
                case "IB": if (returnSetIndex) return 9; else return "Independent Unit";  // Independent Body e.g. Boards, Trustees
                case "CH": if (returnSetIndex) return 10; else return "Congregation Head-unit";
                case "CN": if (returnSetIndex) return 11; else return "Congregation";

                default: return oCode;
            }
        }

        public static string GetChuOrgTypeCode(int setIndex)
        {
            switch (setIndex)
            {
                case 0: return "CR";
                case 1: return "GB";
                case 2: return "CO";
                case 3: return "DP";
                case 4: return "CG";
                case 5: return "SC";
                case 6: return "CE";
                case 7: return "TM";
                case 8: return "CP";
                case 9: return "IB";
                case 10: return "CH";
                case 11: return "CN";

                default: return "";
            }
        }

        public static string GetAdhocStatusDesc(string oCode)
        {
            switch (oCode)
            { 
                case "T": return "Tenure";
                case "Y": return "Age (years)"; //years

                //OwnershipStatus
                case "O": return "Owned";  // Originated";
                case "I": return "Shared"; // "Inherited"; "Shared";

                //ChurchWorkStatus
                case "ST": return "Structure only";
                case "OP": return "Operational";

                //case "GA": return "General Activity";//GA-- General activ, ER-Event Role,  MC--Member Churchlife Activity related, EV-Church E-vent related
                //case "ER": return "Event Role";
                //case "MC": return "Member Churchlife";
                //case "EV": return "Event";

                default: return oCode;
            }
        }

        public static string GetDayOfWeeksDesc(string oCode, bool days = false)
        {
            switch (oCode)
            {
                case "Su": return "Sunday";
                case "Mo": if (days) return "Monday"; else return "Monthly";
                case "Tu": return "Tuesday";
                case "We": return "Wednesday";
                case "Th": return "Thursday";
                case "Fr": return "Friday";
                case "Sa": return "Saturday";

                case "Da": return "Daily";
                case "Wk": return "Weekly";
                case "Bw": return "Bi-Weekly";
                //case "Mo": return "Monthly";
                case "Bm": return "Bi-Monthly";
                case "Qt": return "Quarterly";
                case "Yr": return "Yearly";

                default: return oCode;
            }
        }

        public static string GetPeriodDesc(string oCode)
        {
            switch (oCode)
            {
                case "AP": return "Accounting Period";
                case "CP": return "Church Calendar Period";

                case "Y": return "Year";
                case "S": return "Semester";
                case "M": return "Month";
                case "W": return "Week";
                case "D": return "Day";

                case "S1": return "Semester-1";
                case "S2": return "Semester-2";
                case "Q1": return "Quarter-1";
                case "Q2": return "Quarter-2";
                case "Q3": return "Quarter-3";
                case "Q4": return "Quarter-4";
                case "M1": return "January";
                case "M2": return "February";
                case "M3": return "March";
                case "M4": return "April";
                case "M5": return "May";
                case "M6": return "June";
                case "M7": return "July";
                case "M8": return "August";
                case "M9": return "September";
                case "M10": return "October";
                case "M11": return "November";
                case "M12": return "December";

                default: return oCode;
            }
        }

         

        //private async Task LoadClientDashboardValues(string clientDBConnString) //, UserProfile oLoggedUser)
        //{

        //    /// Load basic values...
        //    ///
        //    /// master control DB
        //    ViewData["strAppName"] = "Rhema-CMS";
        //    ViewData["strAppNameMod"] = "Church Dashboard";
        //    ViewData["strAppCurrUser"] = !string.IsNullOrEmpty(this._oLoggedUser.UserDesc) ? this._oLoggedUser.UserDesc : "[Current user]";
        //    ViewData["oMSTR_AppGloOwnId_Logged"] = this._oLoggedUser.AppGlobalOwnerId;
        //    ViewData["oMSTR_ChurchBodyId_Logged"] = this._oLoggedUser.ChurchBodyId;

        //    ViewData["oCBOrgType_Logged"] = this._oLoggedCB.OrgType;  // CH, CN but subscriber may come from other units like Church Office or Church Group HQ

        //    ViewData["strModCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedModCodes);
        //    ViewData["bl_IsModAccessVAA0"] = this.oUserLogIn_Priv.IsModAccessVAA0;
        //    ViewData["bl_IsModAccessDS00"] = this.oUserLogIn_Priv.IsModAccessDS00;
        //    ViewData["bl_IsModAccessAC01"] = this.oUserLogIn_Priv.IsModAccessAC01;
        //    ViewData["bl_IsModAccessMR02"] = this.oUserLogIn_Priv.IsModAccessMR02;
        //    ViewData["bl_IsModAccessCL03"] = this.oUserLogIn_Priv.IsModAccessCL03;
        //    ViewData["bl_IsModAccessCA04"] = this.oUserLogIn_Priv.IsModAccessCA04;
        //    ViewData["bl_IsModAccessFM05"] = this.oUserLogIn_Priv.IsModAccessFM05;
        //    ViewData["bl_IsModAccessRA06"] = this.oUserLogIn_Priv.IsModAccessRA06;
        //    ///                
        //    ViewData["strAssignedRoleCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleCodes);
        //    ViewData["strAssignedRoleNames"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleNames);
        //    ViewData["strAssignedGroupNames"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedGroupNames);
        //    //  ViewData["strAssignedGroupDesc"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedGroupsDesc);
        //    ViewData["strAssignedPermCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedPermCodes);


        //    //ViewData["strAppCurrUser_ChRole"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRolesDesc);  //_oLoggedRole.RoleName; // "System Adminitrator";
        //    //ViewData["strAppCurrUser_RoleCateg"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleCodes);  //_oLoggedRole.RoleName; // "SUP_ADMN";  // CH_ADMN | CF_ADMN | CH_RGTR | CF_RGTR | CH_ACCT | CF_ACCT | CH_CUST | CH_CUST

        //    ViewData["strAppCurrUserPhoto_Filename"] = this._oLoggedUser.UserPhoto;
        //    ///
        //    /// client control DB
        //    ViewData["oAppGloOwnId_Logged"] = this._oLoggedAGO.Id;
        //    ViewData["oChurchBodyId_Logged"] = this._oLoggedCB.Id;
        //    ViewData["oChurchBodyOrgType_Logged"] = this._oLoggedCB.OrgType;
        //    ViewData["strClientLogo_Filename"] = this._oLoggedAGO?.ChurchLogo;
        //    ViewData["strAppLogo_Filename"] = "~/frontend/dist/img/rhema_logo.png"; // oAppGloOwn?.ChurchLogo;
        //    ViewData["strClientChurchName"] = this._oLoggedAGO.OwnerName;
        //    ViewData["strClientBranchName"] = this._oLoggedCB.Name;
        //    ViewData["strClientChurchLevel"] = !string.IsNullOrEmpty(this._oLoggedCB.ChurchLevel?.CustomName) ? this._oLoggedCB.ChurchLevel?.CustomName : this._oLoggedCB.ChurchLevel?.Name;  // Assembly, Presbytery etc
        //    ViewData["strClientBranchParentName"] = this._oLoggedCB.ParentChurchBody != null ? this._oLoggedCB.ParentChurchBody.Name : "";


        //    ViewData["CB_SubCongCount"] = String.Format("{0:N0}", 50);
        //    ViewData["CB_MemListCount"] = String.Format("{0:N0}", 50); // res[0].cnt_tcm); //
        //    ViewData["CBWeek_NewMemListCount"] = String.Format("{0:N0}", 50); // res[0].cnt_tsubs);
        //    ViewData["CBWeek_NewConvertsCount"] = String.Format("{0:N0}", 75); //res[0].cnt_tdb);
        //    ViewData["CBWeek_VisitorsCount"] = String.Format("{0:N0}", 50); //res[0].cnt_tcln_a);
        //    ViewData["CBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 50); //res[0].cnt_tcln_d);
        //    ViewData["CBWeek_PaymentsAmt"] = String.Format("{0:N0}", 50); //res[0].cnt_tcln_d); 
        //    ViewData["TodaysAuditCount"] = String.Format("{0:N0}", 50);



        //    //using (var _clientContext = new ChurchModelContext(clientDBConnString)) // ("Server=RHEMA-SDARTEH;Database=DBRCMS_MS_TEST;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true") ) // AppUtilties.GetNewDBContext_MS(_context, "DBRCMS_CL_TEST"))  // MSTR_DbContext()) //
        //    //{
        //    //    var result = _clientContext.ChurchBody.Where(c => c.Status == "A" && (c.OrgType == "CH" || c.OrgType == "CN") &&
        //    //                                             c.AppGlobalOwnerId == this._oLoggedAGO.Id //&& c.ParentChurchBodyId == this._oLoggedCB.Id
        //    //                                             ).ToList();

        //    //    //ViewData["CB_SubCongCount"] = String.Format("{0:N0}", (result != null ? result.Count : 999));
        //    //    ViewData["CB_MemListCount"] = String.Format("{0:N0}", (result != null ? result.Count : 999));

        //    //    //if (_clientContext.Database.CanConnect() == false) _clientContext.Database.OpenConnection();
        //    //    //else if (_clientContext.Database.GetDbConnection().State != System.Data.ConnectionState.Open) _clientContext.Database.OpenConnection();

        //    //    //get Currency
        //    //    //var curr = _clientContext.Currency.Where(c => c.AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.ChurchBodyId == this._oLoggedUser.ChurchBodyId && c.IsBaseCurrency == true).FirstOrDefault();
        //    //    //ViewData["CB_CurrUsed"] = curr != null ? curr.Acronym : ""; // "GHS"

        //    //    //var clientAGO = _clientContext.AppGlobalOwner.Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.Status == "A").FirstOrDefault();
        //    //    //var clientCB = _clientContext.ChurchBody.Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.MSTR_ChurchBodyId == this._oLoggedUser.ChurchBodyId && c.Status == "A").FirstOrDefault();
        //    //    ///
        //    //    //var qrySuccess = false;

        //    //    //if (clientAGO != null && clientCB != null)
        //    //    //{

        //    //    var res = await (from dummyRes in new List<string> { "X" }
        //    //                         join tcb_sb in _clientContext.ChurchBody.Where(c => c.Status == "A" && (c.OrgType == "CH" || c.OrgType == "CN") &&
        //    //                                             c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.ParentChurchBodyId == this._oLoggedCB.Id) on 1 equals 1 into _tcb_sb

        //    //                         // join tcb in clientContext.MSTRChurchBody.Where(c => c.Status == "A" && (c.OrgType == "CH" || c.OrgType == "CN")) on 1 equals 1 into _tcb
        //    //                         // join tsr in clientContext.UserRole.Where(c => c.RoleStatus == "A" && c.AppGlobalOwnerId == null && c.ChurchBodyId == null) on 1 equals 1 into _tsr
        //    //                         //join tcm in clientContext.ChurchMember.Where(c => c.Status == "A" &&
        //    //                         //                    c.AppGlobalOwnerId == clientAGO.Id && c.ChurchBodyId == clientCB.Id) on 1 equals 1 into _tcm
        //    //                         // join tms in clientContext.UserProfile.Where(c => c.ProfileScope == "V" && c.UserStatus == "A") on 1 equals 1 into _tms
        //    //                         // join tsubs in clientContext.AppSubscription.Where(c => c.Slastatus == "A") on 1 equals 1 into _tsubs
        //    //                         // join ttc in clientContext.UserAuditTrail.Where(c => c.EventDate.Date == DateTime.Now.Date) on 1 equals 1 into _ttc
        //    //                         // join tdb in clientContext.ClientAppServerConfig.Select(c => c.DbaseName).Distinct() on 1 equals 1 into _tdb

        //    //                         select new
        //    //                         {
        //    //                             cnt_tcb_sb = _tcb_sb.Count(),
        //    //                             // cnt_tcm = _tcm.Count(),
        //    //                             ///
        //    //                             //cnt_tms = _tms.Count(),
        //    //                             //cnt_tsubs = _tsubs.Count(),
        //    //                             //cnt_tdb = _tdb.Count(),
        //    //                             // cnt_ttc = _ttc.Count(),
        //    //                             //cnt_tcln_d = _tcln_d.Count(),
        //    //                             //cnt_tcln_a = _tcln_a.Count()
        //    //                         })
        //    //                .ToList().ToListAsync();
        //    //        //.ToListAsync();

        //    //        ///
        //    //        if (res.Count() > 0)
        //    //        {
        //    //           // qrySuccess = true;
        //    //            ViewData["CB_SubCongCount"] = String.Format("{0:N0}", res[0].cnt_tcb_sb);
        //    //           // ViewData["CB_MemListCount"] = String.Format("{0:N0}", 100); // res[0].cnt_tcm); //
        //    //            ViewData["CBWeek_NewMemListCount"] = String.Format("{0:N0}", 100); // res[0].cnt_tsubs);
        //    //         //   ViewData["CBWeek_NewConvertsCount"] = String.Format("{0:N0}", 100); //res[0].cnt_tdb);
        //    //            ViewData["CBWeek_VisitorsCount"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_a);
        //    //            ViewData["CBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_d);
        //    //            ViewData["CBWeek_PaymentsAmt"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_d); 
        //    //        }
        //    //        else
        //    //        {
        //    //           ViewData["numCB_SubCongCount"] = String.Format("{0:N0}", 0);
        //    //          // ViewData["numCB_MemListCount"] = String.Format("{0:N0}", 0);
        //    //           ViewData["numCBWeek_NewMemListCount"] = String.Format("{0:N0}", 0);
        //    //          //  ViewData["numCBWeek_NewConvertsCount"] = String.Format("{0:N0}", 0);
        //    //            ViewData["numCBWeek_VisitorsCount"] = String.Format("{0:N0}", 0);
        //    //            ViewData["numCBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 0);
        //    //            ViewData["numCBWeek_PaymentsAmt"] = String.Format("{0:N0}", 0);
        //    //            ///
        //    //            ViewData["numCBToday_AuditCount"] = String.Format("{0:N0}", 0);
        //    //        }

        //    //       //// var resAudits = _masterContext.UserAuditTrail.Where(c => c.EventDate.Date == DateTime.Now.Date);
        //    //       // var resAudits = await _masterContext.UserAuditTrail.AsNoTracking().Where(c => c.EventDate.Date == DateTime.Now.Date).ToListAsync();

        //    //       // // var cnt_ttc = resAudits.Count();
        //    //       // ViewData["TodaysAuditCount"] = String.Format("{0:N0}", resAudits.Count());


        //    //        ////String.Format(1234 % 1 == 0 ? "{0:N0}" : "{0:N2}", 1234);
        //    //        //var curr = _clientContext.Currency.Where(c => c.AppGlobalOwnerId == oAppGloOwnId_Logged && c.ChurchBodyId == oChuBodyId_Logged && c.IsBaseCurrency == true).FirstOrDefault(); 
        //    //        //oHomeDash.strCurrUsed = curr != null ? curr.Acronym : ""; // "GHS";
        //    //        //oHomeDash.SupCongCount = String.Format("{0:N0}", 25);
        //    //        //oHomeDash.MemListCount = String.Format("{0:N0}", 4208); ViewBag.MemListCount = oHomeDash.MemListCount;
        //    //        //oHomeDash.NewMemListCount = String.Format("{0:N0}", 17); ViewBag.NewMemListCount = oHomeDash.NewMemListCount;
        //    //        //oHomeDash.NewConvertsCount = String.Format("{0:N0}", 150); ViewBag.NewConvertsCount = oHomeDash.NewConvertsCount;
        //    //        //oHomeDash.VisitorsCount = String.Format("{0:N0}", 9); ViewBag.VisitorsCount = oHomeDash.VisitorsCount;
        //    //        //oHomeDash.ReceiptsAmt = String.Format("{0:N2}", 1700);
        //    //        //oHomeDash.PaymentsAmt = String.Format("{0:N2}", 105.491); 
        //    //   // }

        //    //    //if (!qrySuccess)
        //    //    //{
        //    //    //    ViewData["numCB_SubCongCount"] = String.Format("{0:N0}", 0);
        //    //    //    ViewData["numCB_MemListCount"] = String.Format("{0:N0}", 0);
        //    //    //    ViewData["numCBWeek_NewMemListCount"] = String.Format("{0:N0}", 0);
        //    //    //    ViewData["numCBWeek_NewConvertsCount"] = String.Format("{0:N0}", 0);
        //    //    //    ViewData["numCBWeek_VisitorsCount"] = String.Format("{0:N0}", 0);
        //    //    //    ViewData["numCBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 0);
        //    //    //    ViewData["numCBWeek_PaymentsAmt"] = String.Format("{0:N0}", 0);
        //    //    //    ///
        //    //    //    ViewData["numCBToday_AuditCount"] = String.Format("{0:N0}", 0);
        //    //    //}




        //    //    //// close connection
        //    //    //_clientContext.Database.CloseConnection();

        //    //}


        //    //using (var _masContext = new MSTR_DbContext(_context.Database.GetDbConnection().ConnectionString))
        //    //{
        //    //    if (_masContext.Database.CanConnect() == false) _masContext.Database.OpenConnection();
        //    //    else if (_masContext.Database.GetDbConnection().State != System.Data.ConnectionState.Open) _masContext.Database.OpenConnection();

        //    //    var resAudits = await _masContext.UserAuditTrail.AsNoTracking().Where(c => c.EventDate.Date == DateTime.Now.Date).ToListAsync();
        //    //    // var cnt_ttc = resAudits.Count();
        //    //    ViewData["TodaysAuditCount"] = String.Format("{0:N0}", resAudits.Count());


        //    //    _masContext.Database.CloseConnection();
        //    //}



        //    //return new RhemaCMS.Models.ViewModels.vm_app_ven.UserProfileModel();
        //}





        //private bool InitializeUserLogging()
        //{
        //    try
        //    {
        //        //SetUserLogged();
        //        if (!SetUserLogged())
        //        {
        //            ViewData["strUserLoginFailMess"] = "Client user profile validation unsuccessful.";
        //            //RedirectToAction("LoginUserAcc", "UserLogin"); 
        //            return false;
        //        }

        //        if (oUserLogIn_Priv.UserProfile == null)
        //        {
        //            ViewData["strUserLoginFailMess"] = "Client user profile not found. Please try again or contact System Admin";
        //            // RedirectToAction("LoginUserAcc", "UserLogin"); 
        //            return false;
        //        }

        //        // store login in session 
        //        var _oUserPrivilegeCol = oUserLogIn_Priv;
        //        var privList = Newtonsoft.Json.JsonConvert.SerializeObject(_oUserPrivilegeCol);
        //        TempData["UserLogIn_oUserPrivCol"] = privList; TempData.Keep();

        //        ///
        //        // _oLoggedRole = oUserLogIn_Priv.UserRole; 
        //        _oLoggedUser = oUserLogIn_Priv.UserProfile;
        //        _oLoggedCB_MSTR = oUserLogIn_Priv.ChurchBody;
        //        _oLoggedAGO_MSTR = oUserLogIn_Priv.AppGlobalOwner;
        //        _oLoggedUser.strChurchCode_AGO = _oLoggedAGO_MSTR != null ? _oLoggedAGO_MSTR.GlobalChurchCode : "";
        //        _oLoggedUser.strChurchCode_CB = _oLoggedCB_MSTR != null ? _oLoggedCB_MSTR.GlobalChurchCode : "";

        //        this._context = GetClientDBContext();//_oLoggedUser);

        //        if (this._context == null)
        //        {
        //            ViewData["strUserLoginFailMess"] = "Client database connection unsuccessful. Please try again or contact System Admin";
        //            // // return RedirectToAction("LoginUserAcc", "UserLogin"); 
        //            ModelState.AddModelError("", "Client database connection unsuccessful. Please try again or contact System Admin");
        //            ///
        //            return false;
        //            // RedirectToAction("Index", "Home");  //return View(oHomeDash);
        //        }

        //        this._clientDBConnString = _context.Database.GetDbConnection().ConnectionString;

        //        //// store ctx in session 
        //        //var _tempContext = this._context;
        //        //var _ctx = Newtonsoft.Json.JsonConvert.SerializeObject(_tempContext);
        //        //TempData["UserLogIn_oDBContext_Client"] = _ctx; TempData.Keep();

        //        /// synchronize AGO, CL, CB, CTRY  or @login 

        //        /// get the localized data... using the MSTR data
        //        _oLoggedAGO = _context.AppGlobalOwner.AsNoTracking().Where(c => c.MSTR_AppGlobalOwnerId == _oLoggedUser.AppGlobalOwnerId && c.GlobalChurchCode == _oLoggedUser.strChurchCode_AGO).FirstOrDefault();  // one record table...
        //        _oLoggedCB = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
        //                                    .Where(c => c.MSTR_AppGlobalOwnerId == _oLoggedUser.AppGlobalOwnerId && c.MSTR_ChurchBodyId == _oLoggedUser.ChurchBodyId &&
        //                                                c.GlobalChurchCode == _oLoggedUser.strChurchCode_CB).FirstOrDefault();

        //        if (_oLoggedAGO == null || _oLoggedCB == null)
        //        {
        //            ViewData["strUserLoginFailMess"] = "Client Church unit details could not be verified. Please try again or contact System Admin";
        //            ///
        //            // RedirectToAction("LoginUserAcc", "UserLogin"); 
        //            return false;
        //        }

        //        /// master control DB
        //        ViewData["strAppName"] = "Rhema-CMS";
        //        ViewData["strAppNameMod"] = "Church Dashboard";
        //        ViewData["strAppCurrUser"] = !string.IsNullOrEmpty(_oLoggedUser.UserDesc) ? _oLoggedUser.UserDesc : "[Current user]";
        //        ViewData["oMSTR_AppGloOwnId_Logged"] = _oLoggedUser.AppGlobalOwnerId;
        //        ViewData["oMSTR_ChurchBodyId_Logged"] = _oLoggedUser.ChurchBodyId;

        //        ViewData["oCBOrgType_Logged"] = _oLoggedCB.OrgType;  // CH, CN but subscriber may come from other units like Church Office or Church Group HQ

        //        ViewData["strModCodes"] = String.Join(", ", oUserLogIn_Priv.arrAssignedModCodes);
        //        ViewData["bl_IsModAccessVAA0"] = oUserLogIn_Priv.IsModAccessVAA0;
        //        ViewData["bl_IsModAccessDS00"] = oUserLogIn_Priv.IsModAccessDS00;
        //        ViewData["bl_IsModAccessAC01"] = oUserLogIn_Priv.IsModAccessAC01;
        //        ViewData["bl_IsModAccessMR02"] = oUserLogIn_Priv.IsModAccessMR02;
        //        ViewData["bl_IsModAccessCL03"] = oUserLogIn_Priv.IsModAccessCL03;
        //        ViewData["bl_IsModAccessCA04"] = oUserLogIn_Priv.IsModAccessCA04;
        //        ViewData["bl_IsModAccessFM05"] = oUserLogIn_Priv.IsModAccessFM05;
        //        ViewData["bl_IsModAccessRA06"] = oUserLogIn_Priv.IsModAccessRA06;
        //        ///                
        //        ViewData["strAssignedRoleCodes"] = String.Join(", ", oUserLogIn_Priv.arrAssignedRoleCodes);
        //        ViewData["strAssignedRoleNames"] = String.Join(", ", oUserLogIn_Priv.arrAssignedRoleNames);
        //        ViewData["strAssignedGroupNames"] = String.Join(", ", oUserLogIn_Priv.arrAssignedGroupNames);
        //        //  ViewData["strAssignedGroupDesc"] = String.Join(", ", oUserLogIn_Priv.arrAssignedGroupsDesc);
        //        ViewData["strAssignedPermCodes"] = String.Join(", ", oUserLogIn_Priv.arrAssignedPermCodes);


        //        //ViewData["strAppCurrUser_ChRole"] = String.Join(", ", oUserLogIn_Priv.arrAssignedRolesDesc);  //_oLoggedRole.RoleName; // "System Adminitrator";
        //        //ViewData["strAppCurrUser_RoleCateg"] = String.Join(", ", oUserLogIn_Priv.arrAssignedRoleCodes);  //_oLoggedRole.RoleName; // "SUP_ADMN";  // CH_ADMN | CF_ADMN | CH_RGTR | CF_RGTR | CH_ACCT | CF_ACCT | CH_CUST | CH_CUST

        //        ViewData["strAppCurrUserPhoto_Filename"] = _oLoggedUser.UserPhoto;
        //        ///
        //        /// client control DB
        //        ViewData["oAppGloOwnId_Logged"] = _oLoggedAGO.Id;
        //        ViewData["oChurchBodyId_Logged"] = _oLoggedCB.Id;
        //        ViewData["oChurchBodyOrgType_Logged"] = _oLoggedCB.OrgType;
        //        ViewData["strClientLogo_Filename"] = _oLoggedAGO?.ChurchLogo;
        //        ViewData["strAppLogo_Filename"] = "~/frontend/dist/img/rhema_logo.png"; // oAppGloOwn?.ChurchLogo;
        //        ViewData["strClientChurchName"] = _oLoggedAGO.OwnerName;
        //        ViewData["strClientBranchName"] = _oLoggedCB.Name;
        //        ViewData["strClientChurchLevel"] = !string.IsNullOrEmpty(_oLoggedCB.ChurchLevel?.CustomName) ? _oLoggedCB.ChurchLevel?.CustomName : _oLoggedCB.ChurchLevel?.Name;  // Assembly, Presbytery etc

        //        // refreshValues...
        //        // LoadClientDashboardValues(this._clientDBConnString, this._oLoggedUser);

        //        return true;
        //    }

        //    catch (Exception)
        //    {
        //        throw;
        //    }
        //}

        //private bool CheckCurrentClientDBContext()
        //{
        //    try
        //    {
        //        SetUserLogged();
        //        if (!isCurrValid)
        //        {
        //            ViewData["strUserLoginFailMess"] = "Client user profile validation unsuccessful.";
        //            //RedirectToAction("LoginUserAcc", "UserLogin"); 
        //            return false;
        //        }

        //        if (oUserLogIn_Priv.UserProfile == null)
        //        {
        //            ViewData["strUserLoginFailMess"] = "Client user profile not found. Please try again or contact System Admin";
        //            // RedirectToAction("LoginUserAcc", "UserLogin"); 
        //            return false;
        //        }

        //        if (TempData == null)
        //        {
        //            var httpContext = _httpContextAccessor.HttpContext;
        //            var tempData = _tempDataDictionaryFactory.GetTempData(httpContext);

        //            if (tempData.ContainsKey("UserLogIn_oDBContext_Client"))
        //            {
        //                var _con = tempData["UserLogIn_oDBContext_Client"] as string;
        //                if (string.IsNullOrEmpty(_con)) RedirectToAction("LoginUserAcc", "UserLogin");
        //                // De serialize the string to object
        //                this._context = Newtonsoft.Json.JsonConvert.DeserializeObject<ChurchModelContext>(_con);
        //                if (this._context == null)
        //                    this._context = GetClientDBContext(this._oLoggedUser);
        //            }

        //            else 
        //            {
        //                this._context = GetClientDBContext(this._oLoggedUser);
        //            }
        //        }
        //        else
        //        {
        //            if (TempData.ContainsKey("UserLogIn_oDBContext_Client"))
        //            {
        //                var _con1 = TempData["UserLogIn_oDBContext_Client"] as string;
        //                if (string.IsNullOrEmpty(_con1)) RedirectToAction("LoginUserAcc", "UserLogin");
        //                // De serialize the string to object
        //                this._context = Newtonsoft.Json.JsonConvert.DeserializeObject<ChurchModelContext>(_con1);
        //                //
        //                if (this._context == null)
        //                    this._context = GetClientDBContext(this._oLoggedUser);
        //            }

        //            else
        //            {
        //                this._context = GetClientDBContext(this._oLoggedUser);
        //            }

        //        }

        //        //// store ctx in session 
        //        //var _tempContext = this._context; 
        //        //var _ctx = Newtonsoft.Json.JsonConvert.SerializeObject(_tempContext);
        //        //TempData["UserLogIn_oDBContext_Client"] = _ctx; TempData.Keep();

        //        if (this._context != null) this._clientDBConnString = _context.Database.GetDbConnection().ConnectionString;
        //        ///
        //        return (this._context != null);
        //    }

        //    catch (Exception)
        //    {
        //        throw;
        //    }
        //}

        //private async Task<UserProfileModel> _____LoadClientDashboardValues(string clientDBConnString, UserProfile oLoggedUser)
        //{
        //    using (var _clientContext = new ChurchModelContext(clientDBConnString)) // ("Server=RHEMA-SDARTEH;Database=DBRCMS_MS_TEST;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true") ) // AppUtilties.GetNewDBContext_MS(_context, "DBRCMS_CL_TEST"))  // MSTR_DbContext()) //
        //    {
        //        if (_clientContext.Database.CanConnect() == false) _clientContext.Database.OpenConnection();
        //        else if (_clientContext.Database.GetDbConnection().State != System.Data.ConnectionState.Open) _clientContext.Database.OpenConnection();

        //        //get Currency
        //        var curr = _clientContext.Currency.Where(c => c.AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.ChurchBodyId == this._oLoggedUser.ChurchBodyId && c.IsBaseCurrency == true).FirstOrDefault();
        //        ViewData["CB_CurrUsed"] = curr != null ? curr.Acronym : ""; // "GHS"

        //        var clientAGO = _clientContext.AppGlobalOwner.Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.Status == "A").FirstOrDefault();
        //        var clientCB = _clientContext.ChurchBody.Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.MSTR_ChurchBodyId == this._oLoggedUser.ChurchBodyId && c.Status == "A").FirstOrDefault();
        //        ///
        //        var qrySuccess = false;
        //        if (clientAGO != null && clientCB != null)
        //        {
        //            var res = await (from dummyRes in new List<string> { "X" }
        //                       join tcb_sb in _clientContext.ChurchBody.Where(c => c.Status == "A" && (c.OrgType == "CH" || c.OrgType == "CN") &&
        //                                           c.AppGlobalOwnerId == clientAGO.Id && c.ParentChurchBodyId == clientCB.Id) on 1 equals 1 into _tcb_sb
        //                       // join tcb in clientContext.MSTRChurchBody.Where(c => c.Status == "A" && (c.OrgType == "CH" || c.OrgType == "CN")) on 1 equals 1 into _tcb
        //                       // join tsr in clientContext.UserRole.Where(c => c.RoleStatus == "A" && c.AppGlobalOwnerId == null && c.ChurchBodyId == null) on 1 equals 1 into _tsr
        //                       //join tcm in clientContext.ChurchMember.Where(c => c.Status == "A" &&
        //                       //                    c.AppGlobalOwnerId == clientAGO.Id && c.ChurchBodyId == clientCB.Id) on 1 equals 1 into _tcm
        //                       // join tms in clientContext.UserProfile.Where(c => c.ProfileScope == "V" && c.UserStatus == "A") on 1 equals 1 into _tms
        //                       // join tsubs in clientContext.AppSubscription.Where(c => c.Slastatus == "A") on 1 equals 1 into _tsubs
        //                       // join ttc in clientContext.UserAuditTrail.Where(c => c.EventDate.Date == DateTime.Now.Date) on 1 equals 1 into _ttc
        //                       // join tdb in clientContext.ClientAppServerConfig.Select(c => c.DbaseName).Distinct() on 1 equals 1 into _tdb

        //                       select new
        //                       {
        //                           cnt_tcb_sb = _tcb_sb.Count(),
        //                           // cnt_tcm = _tcm.Count(),
        //                           ///
        //                           //cnt_tms = _tms.Count(),
        //                           //cnt_tsubs = _tsubs.Count(),
        //                           //cnt_tdb = _tdb.Count(),
        //                           // cnt_ttc = _ttc.Count(),
        //                           //cnt_tcln_d = _tcln_d.Count(),
        //                           //cnt_tcln_a = _tcln_a.Count()
        //                       })
        //                    .ToList().ToListAsync();

        //            //.ToListAsync();

        //            ///
        //            if (res.Count() > 0)
        //            {
        //                qrySuccess = true;
        //                ViewData["CB_SubCongCount"] = String.Format("{0:N0}", res[0].cnt_tcb_sb);
        //                ViewData["CB_MemListCount"] = String.Format("{0:N0}", 100); // res[0].cnt_tcm); 
        //                ViewData["CBWeek_NewMemListCount"] = String.Format("{0:N0}", 100); // res[0].cnt_tsubs);
        //                ViewData["CBWeek_NewConvertsCount"] = String.Format("{0:N0}", 100); //res[0].cnt_tdb);
        //                ViewData["CBWeek_VisitorsCount"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_a);
        //                ViewData["CBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_d);
        //                ViewData["CBWeek_PaymentsAmt"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_d); 
        //            }

        //            var resAudits = _masterContext.UserAuditTrail.Where(c => c.EventDate.Date == DateTime.Now.Date);
        //            // var cnt_ttc = resAudits.Count();
        //            ViewData["TodaysAuditCount"] = String.Format("{0:N0}", resAudits.Count());


        //            ////String.Format(1234 % 1 == 0 ? "{0:N0}" : "{0:N2}", 1234);
        //            //var curr = _clientContext.Currency.Where(c => c.AppGlobalOwnerId == oAppGloOwnId_Logged && c.ChurchBodyId == oChuBodyId_Logged && c.IsBaseCurrency == true).FirstOrDefault(); 
        //            //oHomeDash.strCurrUsed = curr != null ? curr.Acronym : ""; // "GHS";
        //            //oHomeDash.SupCongCount = String.Format("{0:N0}", 25);
        //            //oHomeDash.MemListCount = String.Format("{0:N0}", 4208); ViewBag.MemListCount = oHomeDash.MemListCount;
        //            //oHomeDash.NewMemListCount = String.Format("{0:N0}", 17); ViewBag.NewMemListCount = oHomeDash.NewMemListCount;
        //            //oHomeDash.NewConvertsCount = String.Format("{0:N0}", 150); ViewBag.NewConvertsCount = oHomeDash.NewConvertsCount;
        //            //oHomeDash.VisitorsCount = String.Format("{0:N0}", 9); ViewBag.VisitorsCount = oHomeDash.VisitorsCount;
        //            //oHomeDash.ReceiptsAmt = String.Format("{0:N2}", 1700);
        //            //oHomeDash.PaymentsAmt = String.Format("{0:N2}", 105.491); 
        //        }

        //        if (!qrySuccess)
        //        {
        //            ViewData["numCB_SubCongCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCB_MemListCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_NewMemListCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_NewConvertsCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_VisitorsCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_PaymentsAmt"] = String.Format("{0:N0}", 0);
        //            ///
        //            ViewData["numCBToday_AuditCount"] = String.Format("{0:N0}", 0);
        //        }


        //        /// Load basic values...
        //        ///
        //        /// master control DB
        //        ViewData["strAppName"] = "Rhema-CMS";
        //        ViewData["strAppNameMod"] = "Church Dashboard";
        //        ViewData["strAppCurrUser"] = !string.IsNullOrEmpty(this._oLoggedUser.UserDesc) ? this._oLoggedUser.UserDesc : "[Current user]";
        //        ViewData["oMSTR_AppGloOwnId_Logged"] = this._oLoggedUser.AppGlobalOwnerId;
        //        ViewData["oMSTR_ChurchBodyId_Logged"] = this._oLoggedUser.ChurchBodyId;

        //        ViewData["oCBOrgType_Logged"] = _oLoggedCB.OrgType;  // CH, CN but subscriber may come from other units like Church Office or Church Group HQ

        //        ViewData["strModCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedModCodes);
        //        ViewData["bl_IsModAccessVAA0"] = this.oUserLogIn_Priv.IsModAccessVAA0;
        //        ViewData["bl_IsModAccessDS00"] = this.oUserLogIn_Priv.IsModAccessDS00;
        //        ViewData["bl_IsModAccessAC01"] = this.oUserLogIn_Priv.IsModAccessAC01;
        //        ViewData["bl_IsModAccessMR02"] = this.oUserLogIn_Priv.IsModAccessMR02;
        //        ViewData["bl_IsModAccessCL03"] = this.oUserLogIn_Priv.IsModAccessCL03;
        //        ViewData["bl_IsModAccessCA04"] = this.oUserLogIn_Priv.IsModAccessCA04;
        //        ViewData["bl_IsModAccessFM05"] = this.oUserLogIn_Priv.IsModAccessFM05;
        //        ViewData["bl_IsModAccessRA06"] = this.oUserLogIn_Priv.IsModAccessRA06;
        //        ///                
        //        ViewData["strAssignedRoleCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleCodes);
        //        ViewData["strAssignedRoleNames"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleNames);
        //        ViewData["strAssignedGroupNames"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedGroupNames);
        //        //  ViewData["strAssignedGroupDesc"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedGroupsDesc);
        //        ViewData["strAssignedPermCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedPermCodes);


        //        //ViewData["strAppCurrUser_ChRole"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRolesDesc);  //_oLoggedRole.RoleName; // "System Adminitrator";
        //        //ViewData["strAppCurrUser_RoleCateg"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleCodes);  //_oLoggedRole.RoleName; // "SUP_ADMN";  // CH_ADMN | CF_ADMN | CH_RGTR | CF_RGTR | CH_ACCT | CF_ACCT | CH_CUST | CH_CUST

        //        ViewData["strAppCurrUserPhoto_Filename"] = this._oLoggedUser.UserPhoto;
        //        ///
        //        /// client control DB
        //        ViewData["oAppGloOwnId_Logged"] = this._oLoggedAGO.Id;
        //        ViewData["oChurchBodyId_Logged"] = this._oLoggedCB.Id;
        //        ViewData["oChurchBodyOrgType_Logged"] = this._oLoggedCB.OrgType;
        //        ViewData["strClientLogo_Filename"] = this._oLoggedAGO?.ChurchLogo;
        //        ViewData["strAppLogo_Filename"] = "~/frontend/dist/img/rhema_logo.png"; // oAppGloOwn?.ChurchLogo;
        //        ViewData["strClientChurchName"] = this._oLoggedAGO.OwnerName;
        //        ViewData["strClientBranchName"] = this._oLoggedCB.Name;
        //        ViewData["strClientChurchLevel"] = !string.IsNullOrEmpty(this._oLoggedCB.ChurchLevel?.CustomName) ? this._oLoggedCB.ChurchLevel?.CustomName : this._oLoggedCB.ChurchLevel?.Name;  // Assembly, Presbytery etc



        //        // close connection
        //         _clientContext.Database.CloseConnection();
        //    }


        //    return new UserProfileModel();
        //}


        //private void ____LoadClientDashboardValues(string clientDBConnString, UserProfile oLoggedUser)
        //{
        //    // using (var dashContext = new ChurchModelContext(clientDBConnString))
        //    using (var clientContext = new ChurchModelContext(clientDBConnString)) // ("Server=RHEMA-SDARTEH;Database=DBRCMS_MS_TEST;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true") ) // AppUtilties.GetNewDBContext_MS(_context, "DBRCMS_CL_TEST"))  // MSTR_DbContext()) //
        //    {
        //        if (clientContext.Database.CanConnect() == false) clientContext.Database.OpenConnection();
        //        else if (clientContext.Database.GetDbConnection().State != System.Data.ConnectionState.Open) clientContext.Database.OpenConnection();

        //        //get Currency
        //        var curr = clientContext.Currency.Where(c => c.AppGlobalOwnerId == oLoggedUser.AppGlobalOwnerId && c.ChurchBodyId == oLoggedUser.ChurchBodyId && c.IsBaseCurrency == true).FirstOrDefault();
        //        ViewData["CB_CurrUsed"] = curr != null ? curr.Acronym : ""; // "GHS"

        //        var clientAGO = clientContext.AppGlobalOwner.Where(c => c.MSTR_AppGlobalOwnerId == oLoggedUser.AppGlobalOwnerId && c.Status == "A").FirstOrDefault();
        //        var clientCB = clientContext.ChurchBody.Where(c => c.MSTR_AppGlobalOwnerId == oLoggedUser.AppGlobalOwnerId && c.MSTR_ChurchBodyId == oLoggedUser.ChurchBodyId && c.Status == "A").FirstOrDefault();
        //        ///
        //        var qrySuccess = false;
        //        if (clientAGO != null && clientCB != null)
        //        {
        //            var res = (from dummyRes in new List<string> { "X" }
        //                       join tcb_sb in clientContext.ChurchBody.Where(c => c.Status == "A" && (c.OrgType == "CH" || c.OrgType == "CN") &&
        //                                           c.AppGlobalOwnerId == clientAGO.Id && c.ParentChurchBodyId == clientCB.Id) on 1 equals 1 into _tcb_sb
        //                       // join tcb in clientContext.MSTRChurchBody.Where(c => c.Status == "A" && (c.OrgType == "CH" || c.OrgType == "CN")) on 1 equals 1 into _tcb
        //                       // join tsr in clientContext.UserRole.Where(c => c.RoleStatus == "A" && c.AppGlobalOwnerId == null && c.ChurchBodyId == null) on 1 equals 1 into _tsr
        //                       //join tcm in clientContext.ChurchMember.Where(c => c.Status == "A" &&
        //                       //                    c.AppGlobalOwnerId == clientAGO.Id && c.ChurchBodyId == clientCB.Id) on 1 equals 1 into _tcm
        //                       // join tms in clientContext.UserProfile.Where(c => c.ProfileScope == "V" && c.UserStatus == "A") on 1 equals 1 into _tms
        //                       // join tsubs in clientContext.AppSubscription.Where(c => c.Slastatus == "A") on 1 equals 1 into _tsubs
        //                       // join ttc in clientContext.UserAuditTrail.Where(c => c.EventDate.Date == DateTime.Now.Date) on 1 equals 1 into _ttc
        //                       // join tdb in clientContext.ClientAppServerConfig.Select(c => c.DbaseName).Distinct() on 1 equals 1 into _tdb

        //                       select new
        //                       {
        //                           cnt_tcb_sb = _tcb_sb.Count(),
        //                           // cnt_tcm = _tcm.Count(),
        //                           ///
        //                           //cnt_tms = _tms.Count(),
        //                           //cnt_tsubs = _tsubs.Count(),
        //                           //cnt_tdb = _tdb.Count(),
        //                           // cnt_ttc = _ttc.Count(),
        //                           //cnt_tcln_d = _tcln_d.Count(),
        //                           //cnt_tcln_a = _tcln_a.Count()
        //                       })
        //                    .ToList();
        //            //.ToListAsync();

        //            ///
        //            if (res.Count() > 0)
        //            {
        //                qrySuccess = true;
        //                ViewData["CB_SubCongCount"] = String.Format("{0:N0}", res[0].cnt_tcb_sb);
        //                ViewData["CB_MemListCount"] = String.Format("{0:N0}", 100); // res[0].cnt_tcm); 
        //                ViewData["CBWeek_NewMemListCount"] = String.Format("{0:N0}", 100); // res[0].cnt_tsubs);
        //                ViewData["CBWeek_NewConvertsCount"] = String.Format("{0:N0}", 100); //res[0].cnt_tdb);
        //                ViewData["CBWeek_VisitorsCount"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_a);
        //                ViewData["CBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_d);
        //                ViewData["CBWeek_PaymentsAmt"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_d); 
        //            }

        //            var resAudits = _masterContext.UserAuditTrail.Where(c => c.EventDate.Date == DateTime.Now.Date);
        //            // var cnt_ttc = resAudits.Count();
        //            ViewData["TodaysAuditCount"] = String.Format("{0:N0}", resAudits.Count());


        //            ////String.Format(1234 % 1 == 0 ? "{0:N0}" : "{0:N2}", 1234);
        //            //var curr = _context.Currency.Where(c => c.AppGlobalOwnerId == oAppGloOwnId_Logged && c.ChurchBodyId == oChuBodyId_Logged && c.IsBaseCurrency == true).FirstOrDefault(); 
        //            //oHomeDash.strCurrUsed = curr != null ? curr.Acronym : ""; // "GHS";
        //            //oHomeDash.SupCongCount = String.Format("{0:N0}", 25);
        //            //oHomeDash.MemListCount = String.Format("{0:N0}", 4208); ViewBag.MemListCount = oHomeDash.MemListCount;
        //            //oHomeDash.NewMemListCount = String.Format("{0:N0}", 17); ViewBag.NewMemListCount = oHomeDash.NewMemListCount;
        //            //oHomeDash.NewConvertsCount = String.Format("{0:N0}", 150); ViewBag.NewConvertsCount = oHomeDash.NewConvertsCount;
        //            //oHomeDash.VisitorsCount = String.Format("{0:N0}", 9); ViewBag.VisitorsCount = oHomeDash.VisitorsCount;
        //            //oHomeDash.ReceiptsAmt = String.Format("{0:N2}", 1700);
        //            //oHomeDash.PaymentsAmt = String.Format("{0:N2}", 105.491); 
        //        }

        //        if (!qrySuccess)
        //        {
        //            ViewData["numCB_SubCongCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCB_MemListCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_NewMemListCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_NewConvertsCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_VisitorsCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_PaymentsAmt"] = String.Format("{0:N0}", 0);
        //            ///
        //            ViewData["numCBToday_AuditCount"] = String.Format("{0:N0}", 0);
        //        }

        //        // close connection
        //        clientContext.Database.CloseConnection();
        //    }
        //}

        //private void _____LoadClientDashboardValues()
        //{
        //    //get Currency
        //    var curr = _context.Currency.Where(c => c.AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.ChurchBodyId == this._oLoggedUser.ChurchBodyId && c.IsBaseCurrency == true).FirstOrDefault();
        //    ViewData["CB_CurrUsed"] = curr != null ? curr.Acronym : ""; // "GHS"

        //    var clientAGO = _context.AppGlobalOwner.Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.Status == "A").FirstOrDefault();
        //    var clientCB = _context.ChurchBody.Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.MSTR_ChurchBodyId == this._oLoggedUser.ChurchBodyId && c.Status == "A").FirstOrDefault();
        //    ///
        //    var qrySuccess = false;
        //    if (clientAGO != null && clientCB != null)
        //    {
        //        var res = (from dummyRes in new List<string> { "X" }
        //                   join tcb_sb in _context.ChurchBody.Where(c => c.Status == "A" && (c.OrgType == "CH" || c.OrgType == "CN") &&
        //                                       c.AppGlobalOwnerId == clientAGO.Id && c.ParentChurchBodyId == clientCB.Id) on 1 equals 1 into _tcb_sb
        //                   // join tcb in clientContext.MSTRChurchBody.Where(c => c.Status == "A" && (c.OrgType == "CH" || c.OrgType == "CN")) on 1 equals 1 into _tcb
        //                   // join tsr in clientContext.UserRole.Where(c => c.RoleStatus == "A" && c.AppGlobalOwnerId == null && c.ChurchBodyId == null) on 1 equals 1 into _tsr
        //                   //join tcm in clientContext.ChurchMember.Where(c => c.Status == "A" &&
        //                   //                    c.AppGlobalOwnerId == clientAGO.Id && c.ChurchBodyId == clientCB.Id) on 1 equals 1 into _tcm
        //                   // join tms in clientContext.UserProfile.Where(c => c.ProfileScope == "V" && c.UserStatus == "A") on 1 equals 1 into _tms
        //                   // join tsubs in clientContext.AppSubscription.Where(c => c.Slastatus == "A") on 1 equals 1 into _tsubs
        //                   // join ttc in clientContext.UserAuditTrail.Where(c => c.EventDate.Date == DateTime.Now.Date) on 1 equals 1 into _ttc
        //                   // join tdb in clientContext.ClientAppServerConfig.Select(c => c.DbaseName).Distinct() on 1 equals 1 into _tdb

        //                   select new
        //                   {
        //                       cnt_tcb_sb = _tcb_sb.Count(),
        //                       // cnt_tcm = _tcm.Count(),
        //                       ///
        //                       //cnt_tms = _tms.Count(),
        //                       //cnt_tsubs = _tsubs.Count(),
        //                       //cnt_tdb = _tdb.Count(),
        //                       // cnt_ttc = _ttc.Count(),
        //                       //cnt_tcln_d = _tcln_d.Count(),
        //                       //cnt_tcln_a = _tcln_a.Count()
        //                   })
        //                .ToList();
        //        //.ToListAsync();

        //        ///
        //        if (res.Count() > 0)
        //        {
        //            qrySuccess = true;
        //            ViewData["CB_SubCongCount"] = String.Format("{0:N0}", res[0].cnt_tcb_sb);
        //            ViewData["CB_MemListCount"] = String.Format("{0:N0}", 100); // res[0].cnt_tcm); 
        //            ViewData["CBWeek_NewMemListCount"] = String.Format("{0:N0}", 100); // res[0].cnt_tsubs);
        //            ViewData["CBWeek_NewConvertsCount"] = String.Format("{0:N0}", 100); //res[0].cnt_tdb);
        //            ViewData["CBWeek_VisitorsCount"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_a);
        //            ViewData["CBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_d);
        //            ViewData["CBWeek_PaymentsAmt"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_d); 
        //        }

        //        var resAudits = _masterContext.UserAuditTrail.Where(c => c.EventDate.Date == DateTime.Now.Date);
        //        // var cnt_ttc = resAudits.Count();
        //        ViewData["TodaysAuditCount"] = String.Format("{0:N0}", resAudits.Count());


        //        ////String.Format(1234 % 1 == 0 ? "{0:N0}" : "{0:N2}", 1234);
        //        //var curr = _context.Currency.Where(c => c.AppGlobalOwnerId == oAppGloOwnId_Logged && c.ChurchBodyId == oChuBodyId_Logged && c.IsBaseCurrency == true).FirstOrDefault(); 
        //        //oHomeDash.strCurrUsed = curr != null ? curr.Acronym : ""; // "GHS";
        //        //oHomeDash.SupCongCount = String.Format("{0:N0}", 25);
        //        //oHomeDash.MemListCount = String.Format("{0:N0}", 4208); ViewBag.MemListCount = oHomeDash.MemListCount;
        //        //oHomeDash.NewMemListCount = String.Format("{0:N0}", 17); ViewBag.NewMemListCount = oHomeDash.NewMemListCount;
        //        //oHomeDash.NewConvertsCount = String.Format("{0:N0}", 150); ViewBag.NewConvertsCount = oHomeDash.NewConvertsCount;
        //        //oHomeDash.VisitorsCount = String.Format("{0:N0}", 9); ViewBag.VisitorsCount = oHomeDash.VisitorsCount;
        //        //oHomeDash.ReceiptsAmt = String.Format("{0:N2}", 1700);
        //        //oHomeDash.PaymentsAmt = String.Format("{0:N2}", 105.491); 
        //    }

        //    if (!qrySuccess)
        //    {
        //        ViewData["numCB_SubCongCount"] = String.Format("{0:N0}", 0);
        //        ViewData["numCB_MemListCount"] = String.Format("{0:N0}", 0);
        //        ViewData["numCBWeek_NewMemListCount"] = String.Format("{0:N0}", 0);
        //        ViewData["numCBWeek_NewConvertsCount"] = String.Format("{0:N0}", 0);
        //        ViewData["numCBWeek_VisitorsCount"] = String.Format("{0:N0}", 0);
        //        ViewData["numCBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 0);
        //        ViewData["numCBWeek_PaymentsAmt"] = String.Format("{0:N0}", 0);
        //        ///
        //        ViewData["numCBToday_AuditCount"] = String.Format("{0:N0}", 0);
        //    }


        //    /// Load basic values...
        //    ///
        //    /// master control DB
        //    ViewData["strAppName"] = "Rhema-CMS";
        //    ViewData["strAppNameMod"] = "Church Dashboard";
        //    ViewData["strAppCurrUser"] = !string.IsNullOrEmpty(this._oLoggedUser.UserDesc) ? this._oLoggedUser.UserDesc : "[Current user]";
        //    ViewData["oMSTR_AppGloOwnId_Logged"] = this._oLoggedUser.AppGlobalOwnerId;
        //    ViewData["oMSTR_ChurchBodyId_Logged"] = this._oLoggedUser.ChurchBodyId;

        //    ViewData["oCBOrgType_Logged"] = _oLoggedCB.OrgType;  // CH, CN but subscriber may come from other units like Church Office or Church Group HQ

        //    ViewData["strModCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedModCodes);
        //    ViewData["bl_IsModAccessVAA0"] = this.oUserLogIn_Priv.IsModAccessVAA0;
        //    ViewData["bl_IsModAccessDS00"] = this.oUserLogIn_Priv.IsModAccessDS00;
        //    ViewData["bl_IsModAccessAC01"] = this.oUserLogIn_Priv.IsModAccessAC01;
        //    ViewData["bl_IsModAccessMR02"] = this.oUserLogIn_Priv.IsModAccessMR02;
        //    ViewData["bl_IsModAccessCL03"] = this.oUserLogIn_Priv.IsModAccessCL03;
        //    ViewData["bl_IsModAccessCA04"] = this.oUserLogIn_Priv.IsModAccessCA04;
        //    ViewData["bl_IsModAccessFM05"] = this.oUserLogIn_Priv.IsModAccessFM05;
        //    ViewData["bl_IsModAccessRA06"] = this.oUserLogIn_Priv.IsModAccessRA06;
        //    ///                
        //    ViewData["strAssignedRoleCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleCodes);
        //    ViewData["strAssignedRoleNames"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleNames);
        //    ViewData["strAssignedGroupNames"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedGroupNames);
        //    //  ViewData["strAssignedGroupDesc"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedGroupsDesc);
        //    ViewData["strAssignedPermCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedPermCodes);


        //    //ViewData["strAppCurrUser_ChRole"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRolesDesc);  //_oLoggedRole.RoleName; // "System Adminitrator";
        //    //ViewData["strAppCurrUser_RoleCateg"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleCodes);  //_oLoggedRole.RoleName; // "SUP_ADMN";  // CH_ADMN | CF_ADMN | CH_RGTR | CF_RGTR | CH_ACCT | CF_ACCT | CH_CUST | CH_CUST

        //    ViewData["strAppCurrUserPhoto_Filename"] = this._oLoggedUser.UserPhoto;
        //    ///
        //    /// client control DB
        //    ViewData["oAppGloOwnId_Logged"] = this._oLoggedAGO.Id;
        //    ViewData["oChurchBodyId_Logged"] = this._oLoggedCB.Id;
        //    ViewData["oChurchBodyOrgType_Logged"] = this._oLoggedCB.OrgType;
        //    ViewData["strClientLogo_Filename"] = this._oLoggedAGO?.ChurchLogo;
        //    ViewData["strAppLogo_Filename"] = "~/frontend/dist/img/rhema_logo.png"; // oAppGloOwn?.ChurchLogo;
        //    ViewData["strClientChurchName"] = this._oLoggedAGO.OwnerName;
        //    ViewData["strClientBranchName"] = this._oLoggedCB.Name;
        //    ViewData["strClientChurchLevel"] = !string.IsNullOrEmpty(this._oLoggedCB.ChurchLevel?.CustomName) ? this._oLoggedCB.ChurchLevel?.CustomName : this._oLoggedCB.ChurchLevel?.Name;  // Assembly, Presbytery etc

        //}



        private string GetDefaultCountryInfo()   // GHA--Ghana--GHC--GHS
        {
            try
            {

                this.strCountryCode_dflt = (string)null; this.strCountryName_dflt = ""; this.strCountryCURR1_dflt = ""; this.strCountryCURR2_dflt = "";
                var strCTRYInfo = "";
                if (TempData.ContainsKey("oDefaultCountryInfo"))
                {
                    strCTRYInfo = TempData["oDefaultCountryInfo"] as string;
                    var isSuccess = oUserLogIn_Priv.UserSessionPermList?.Count > 0;
                    if (isSuccess)
                    {
                        strCTRYInfo = this.strCountryCode_dflt + "--" + this.strCountryName_dflt + "--" + this.strCountryCURR1_dflt + "--" + this.strCountryCURR2_dflt;  // GHA--Ghana--GHC--GHS
                        TempData["oDefaultCountryInfo"] = strCTRYInfo; TempData.Keep();
                        return strCTRYInfo;  // GHA--Ghana--GHC--GHS
                    }
                }

                // country -- default if not specified
                var oCTRY_List = _context.CountryCustom.AsNoTracking().Include(t => t.Country).Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.ChurchBodyId == this._oLoggedCB.Id).ToList();
                var oCTRY_List_d = oCTRY_List.Where(c => c.IsDefaultCountry == true).FirstOrDefault();
                if (oCTRY_List_d == null && oCTRY_List.Count > 0) oCTRY_List_d = oCTRY_List[0];
                if (oCTRY_List_d != null)
                {
                    this.strCountryCode_dflt = oCTRY_List_d.CtryAlpha3Code;
                    this.strCountryName_dflt = oCTRY_List_d.Country != null ? (!string.IsNullOrEmpty(oCTRY_List_d.Country.EngName) ? oCTRY_List_d.Country.EngName : oCTRY_List_d.Country.CtryAlpha3Code) : "";
                    this.strCountryCURR1_dflt = oCTRY_List_d.Country != null ? oCTRY_List_d.Country.CurrSymbol : "";
                    this.strCountryCURR2_dflt = oCTRY_List_d.Country != null ? oCTRY_List_d.Country.Curr3LISOSymbol : "";
                }
                //strCountryCode_dflt = oCTRY_List_d != null ? oCTRY_List_d.CtryAlpha3Code : "";
                //strCountry_dflt = oCTRY_List_d != null ? (oCTRY_List_d.Country != null ? (!string.IsNullOrEmpty(oCTRY_List_d.Country.EngName) ? oCTRY_List_d.Country.EngName : oCTRY_List_d.Country.CtryAlpha3Code) : "") : "";

                //  ...
                strCTRYInfo = this.strCountryCode_dflt + "--" + this.strCountryName_dflt + "--" + this.strCountryCURR1_dflt + "--" + this.strCountryCURR2_dflt;  // GHA--Ghana--GHC--GHS
                TempData["oDefaultCountryInfo"] = strCTRYInfo; TempData.Keep();
                return strCTRYInfo;  // GHA--Ghana--GHC--GHS
            }

            catch (Exception ex)
            {
                throw;
            }
        }

        //private async Task LogUserActivity_AppMainUserAuditTrail(UserAuditTrail oUserTrail)
        //{ // var oUserTrail = _masterContext.UserAuditTrail.Where(c => ((c.AppGlobalOwnerId == null && c.ChurchBodyId == null && churchCode=="000000") || (c.AppGlobalOwnerId== oAppGloOwnId && c.ChurchBodyId == oCurrChuBodyId))
        //    if (oUserTrail != null)
        //    {
        //        // var tempCtx = _context;
        //        using (var logCtx = new MSTR_DbContext(_masterContext.Database.GetDbConnection().ConnectionString)) // ("Server=RHEMA-SDARTEH;Database=DBRCMS_MS_TEST;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true") ) // AppUtilties.GetNewDBContext_MS(_context, "DBRCMS_CL_TEST"))  // MSTR_DbContext()) //
        //        {
        //            if (logCtx.Database.CanConnect() == false) logCtx.Database.OpenConnection();
        //            else if (logCtx.Database.GetDbConnection().State != System.Data.ConnectionState.Open) logCtx.Database.OpenConnection();

        //            // var a = logCtx.Database.GetDbConnection().ConnectionString;
        //            // var b = _masterContext.Database.GetDbConnection().ConnectionString;

        //            /// 
        //            logCtx.UserAuditTrail.Add(oUserTrail);
        //            await logCtx.SaveChangesAsync();

        //            //logCtx.SaveChanges();

        //            logCtx.Entry(oUserTrail).State = EntityState.Detached;
        //            ///
        //            //DetachAllEntities(logCtx);

        //            // close connection
        //            logCtx.Database.CloseConnection();

        //            //logCtx.Dispose();
        //        }
        //    }
        //}
        //private async Task LogUserActivity_ClientUserAuditTrail(UserAuditTrail_CL oUserTrail, string clientDBConnString)
        //{ // var oUserTrail = _masterContext.UserAuditTrail.Where(c => ((c.AppGlobalOwnerId == null && c.ChurchBodyId == null && churchCode=="000000") || (c.AppGlobalOwnerId== oAppGloOwnId && c.ChurchBodyId == oCurrChuBodyId))
        //    if (oUserTrail != null)
        //    {
        //        // var tempCtx = _context;
        //        if (!string.IsNullOrEmpty(clientDBConnString))
        //        {
        //            using (var logCtx = new ChurchModelContext(clientDBConnString)) // ("Server=RHEMA-SDARTEH;Database=DBRCMS_MS_TEST;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true") ) // AppUtilties.GetNewDBContext_MS(_context, "DBRCMS_CL_TEST"))  // MSTR_DbContext()) //
        //            {
        //                //logCtx = _context;
        //                //var conn = new Microsoft.Data.SqlClient.SqlConnectionStringBuilder(_context.Database.GetDbConnection().ConnectionString);
        //                ////  "DefaultConnection": "Server=RHEMA-SDARTEH;Database=DBRCMS_MS_DEV;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true"
        //                //conn.DataSource = "RHEMA-SDARTEH"; conn.InitialCatalog = "DBRCMS_CL_TEST"; conn.UserID = "sa"; conn.Password = "sadmin"; conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;
        //                /////
        //                //logCtx.Database.GetDbConnection().ConnectionString = conn.ConnectionString;

        //                if (logCtx.Database.CanConnect() == false) logCtx.Database.OpenConnection();
        //                else if (logCtx.Database.GetDbConnection().State != System.Data.ConnectionState.Open) logCtx.Database.OpenConnection();

        //                // var a = logCtx.Database.GetDbConnection().ConnectionString;
        //                // var b = _masterContext.Database.GetDbConnection().ConnectionString;

        //                ///
        //                logCtx.UserAuditTrail_CL.Add(oUserTrail);
        //                await logCtx.SaveChangesAsync();

        //                //logCtx.SaveChanges();

        //                logCtx.Entry(oUserTrail).State = EntityState.Detached;
        //                ///
        //                //DetachAllEntities(logCtx);

        //                // close connection
        //                logCtx.Database.CloseConnection();

        //                //logCtx.Dispose();
        //            }
        //        }
        //    }

        //}


        public void DetachAllEntities(MSTR_DbContext ctx)
        {
            var changedEntriesCopy = ctx.ChangeTracker.Entries()
                .Where(e => e.State == EntityState.Added ||
                            e.State == EntityState.Modified ||
                            e.State == EntityState.Deleted)
                .ToList();

            foreach (var entry in changedEntriesCopy)
                entry.State = EntityState.Detached;
        }
        public void DetachAllEntities(ChurchModelContext ctx)
        {
            var changedEntriesCopy = ctx.ChangeTracker.Entries()
                .Where(e => e.State == EntityState.Added ||
                            e.State == EntityState.Modified ||
                            e.State == EntityState.Deleted)
                .ToList();

            foreach (var entry in changedEntriesCopy)
                entry.State = EntityState.Detached;
        }


        private static bool IsAncestor_ChurchBody(ChurchBody oAncestorChurchBody, ChurchBody oCurrChurchBody)
        {
            if (oAncestorChurchBody == null || oCurrChurchBody == null) return false;
            //string ChurchCodeFullPath { get; set; }  //R0000-0000-0000-0000-0000-0000 

            if (oAncestorChurchBody.Id == oCurrChurchBody.ParentChurchBodyId) return true;
            if (string.IsNullOrEmpty(oAncestorChurchBody.RootChurchCode) || string.IsNullOrEmpty(oCurrChurchBody.RootChurchCode)) return false;
            if (string.Compare(oAncestorChurchBody.RootChurchCode, oCurrChurchBody.RootChurchCode) == 0) return true;

            string[] arr = new string[] { oCurrChurchBody.RootChurchCode };
            if (oCurrChurchBody.RootChurchCode.Contains("--")) arr = oCurrChurchBody.RootChurchCode.Split("--");  // else it should be the ROOT... and would not get this far

            if (arr.Length > 0)
            {
                var ancestorCode = oAncestorChurchBody.RootChurchCode;
                var tempCode = oCurrChurchBody.RootChurchCode;

                if (string.Compare(ancestorCode, tempCode) == 0) return true;
                var k = arr.Length - 1;
                for (var i = arr.Length - 1; i >= 0; i--)
                {
                    if (tempCode.Contains("--" + arr[i])) tempCode = tempCode.Replace("--" + arr[i], "");
                    if (string.Compare(ancestorCode, tempCode) == 0) return true;
                }
            }

            return false;
        }
        private static bool IsAncestor_ChurchBody(string strAncestorRootCode, string strCurrChurchBodyRootCode, int? ancestorChurchBodyId = null, int? currChurchBodyId = null)
        {
            // if (oAncestorChurchBody == null) return false;
            //string ChurchCodeFullPath { get; set; }  //R0000-0000-0000-0000-0000-0000 

            if (currChurchBodyId != null && ancestorChurchBodyId == currChurchBodyId) return true;

            if (string.IsNullOrEmpty(strAncestorRootCode) || string.IsNullOrEmpty(strCurrChurchBodyRootCode)) return false;
            if (string.Compare(strAncestorRootCode, strCurrChurchBodyRootCode) == 0) return true;

            string[] arr = new string[] { strCurrChurchBodyRootCode };
            if (strCurrChurchBodyRootCode.Contains("--")) arr = strCurrChurchBodyRootCode.Split("--");

            if (arr.Length > 0)
            {
                var ancestorCode = strAncestorRootCode;
                var tempCode = strCurrChurchBodyRootCode;

                var k = arr.Length - 1;
                for (var i = arr.Length - 1; i >= 0; i--)
                {
                    if (tempCode.Contains("--" + arr[i])) tempCode = tempCode.Replace("--" + arr[i], "");
                    if (string.Compare(ancestorCode, tempCode) == 0) return true;
                }
            }

            return false;
        }

        private ClientSetupParametersModel GetInitialClientSetupList()
        {
            try
            {
                var arrData = "";
                arrData = TempData.ContainsKey("oVmCSPModel") ? TempData["oVmCSPModel"] as string : arrData;
                var vm = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<ClientSetupParametersModel>(arrData) : null;
                ///
                if (vm != null) return vm;


                /// once it gets to this point... then the details not found!
                return new ClientSetupParametersModel();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private ClientSetupParametersModel LoadClientSetupList(int setIndex = 0, int subSetIndex = 0, int filterIndex = 1, int? numCodeCriteria_1 = (int?)null, string strCodeCriteria_2 = null) //, bool loadSectionOnly=false string clientDBConnString, UserProfile oLoggedUser)  
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return null; // View("_ErrorPage");
                    }
                }

                if (this._oLoggedAGO_MSTR == null || this._oLoggedCB_MSTR == null || this._oLoggedAGO == null || this._oLoggedCB == null)
                { RedirectToAction("LoginUserAcc", "UserLogin"); }



                var oCSPModel = GetInitialClientSetupList(); // new ClientSetupParametersModel();

                // AGO
                if (setIndex == 0 || setIndex == 1)
                { 
                    //var oAGO_List = _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == _oLoggedAGO.Id).ToList();
                    //if (oAGO_List.Count() == 0) return null;
                    /////
                    //var oCFTC_MSTRList = _masterContext.ChurchFaithType.AsNoTracking().Where(c => c.Category == "FC").ToList();
                    //var oCFTS_MSTRList = _masterContext.ChurchFaithType.AsNoTracking().Where(c => c.Category == "FS").ToList(); 
                    ///
                    var oAGO_MDL = (
                              from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == _oLoggedAGO.Id) // oAGO_List.Take(1).ToList()
                              //from t_cftc in oCFTC_MSTRList.Where(c => c.Id == t_ago.FaithTypeCategoryId).DefaultIfEmpty()
                              //from t_cfts in oCFTS_MSTRList.Where(c => c.Id == t_cftc.FaithTypeClassId).DefaultIfEmpty()
                              from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_ago.CtryAlpha3Code).DefaultIfEmpty()

                                  // from t_cft in _context.ChurchFaithType.Include(t => t.FaithTypeClass).AsNoTracking().Where(c => c.Category == "FC" && c.Id == t_ago.FaithTypeCategoryId).DefaultIfEmpty()

                            select new AppGlobalOwnerModel()
                              {
                                  oAppGlobalOwn = t_ago,
                                // lsChurchLevels = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == t_ago.Id).ToList(),
                                //       
                                numTotalChurchLevelsConfig = _context.ChurchLevel.Count(c => c.AppGlobalOwnerId == t_ago.Id),
                                //TotalCongregations = _context.ChurchBody.Count(c => c.AppGlobalOwnerId == t_ago.Id && c.Status == "A"),
                                // && c.IsActivated==true && c.ChurchWorkStatus=="O" &&    c.OrgType=="CN"),  //c.OrgType=="CH" && 
                               
                                  strAppGloOwn = t_ago.OwnerName, 
                                  //strFaithTypeCategory = t_cftc != null ? t_ago.strFaithTypeCategory : "",
                                  //strChurchStream = t_ago.strFaithTypeStream,
                                  strCountry = t_ctry != null ? (!string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code) : "",
                                  strSlogan = t_ago.Slogan.Contains("*|*") ? (t_ago.Slogan.Substring(0, t_ago.Slogan.IndexOf("*|*"))).Replace("*|*", "") : t_ago.Slogan,
                                  strSloganResponse = t_ago.Slogan.Contains("*|*") ? (t_ago.Slogan.Substring(t_ago.Slogan.IndexOf("*|*"))).Replace("*|*", "") : "",
                               // strFaithTypeCategory = t_ago != null ? ((!string.IsNullOrEmpty(t_ago.strFaithTypeCategory) && !string.IsNullOrEmpty(t_ago.strFaithTypeStream) ? t_ago.strFaithTypeCategory + ", " + t_ago.strFaithTypeStream : t_ago.strFaithTypeCategory + t_ago.strFaithTypeStream).Trim()) : "",
                                
                                blStatusActivated = t_ago.Status == "A",
                                strStatus = GetStatusDesc(t_ago.Status),
                                strChurchLogo = t_ago.ChurchLogo
                            })
                          .FirstOrDefault();

                    // oCSPModel.oAppGlobalOwnModel = oAGO_MDL; // GetAddOrEdit_AGO(_oLoggedAGO.Id, _oLoggedAGO.Id, _oLoggedCB.Id, _oLoggedUser.Id);
                    oCSPModel.oAppGlobalOwnModel = oAGO_MDL != null ? oAGO_MDL : new AppGlobalOwnerModel();


                    /// specific parameter...
                    if (setIndex != 0) return oCSPModel;
                }


                // CL    
                if (setIndex == 0 || setIndex == 2)
                {
                    var oCL_List = (
                         from t_cl in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oLoggedAGO.Id)
                         from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == t_cl.AppGlobalOwnerId).DefaultIfEmpty()
                         from t_ci_ago in _context.ContactInfo.Include(t => t.Country).AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cl.AppGlobalOwnerId && c.ChurchBodyId == null && c.Id == t_ago.ContactInfoId).DefaultIfEmpty()

                         select new ChurchLevelModel()
                         {
                             oChurchLevel = t_cl,
                             numChurchLevel = t_cl.LevelIndex,
                             strChurchLevelName = !string.IsNullOrEmpty(t_cl.CustomName) ? t_cl.CustomName : t_cl.Name,
                             strAppGloOwn = t_ago.OwnerName + (!string.IsNullOrEmpty(t_ago.OwnerName) && t_ci_ago.Country != null ? ", " + t_ci_ago.Country.EngName : (t_ci_ago.Country != null ? t_ci_ago.Country.EngName : "")),
                         })
                         .OrderBy(c => c.numChurchLevel)
                         .ToList();


                    oCSPModel.lsChurchLevelModels = oCL_List; 
                    //ViewData["oSetupData_CL_List"] = oCL_List;

                    /// specific parameter...
                    if (setIndex != 0) return oCSPModel;
                }


                //CB
                if (setIndex == 0 || setIndex == 3)
                {  // view only the subscribed CB
                    //var oCB_List = (
                    //    from t_cb in _context.ChurchBody.Include(t => t.CountryRegion).Include(t => t.Country).AsNoTracking()
                    //            .Where(c => c.AppGlobalOwnerId == _oLoggedAGO.Id && c.Id == _oLoggedCB.Id) // && (c.OrgType == "CH" || c.OrgType == "CN")c.OrgType == "CR" ||  // jux for structure

                    var oCB_List_1 = _context.ChurchBody.Include(t => t.CountryRegion).Include(t => t.Country).AsNoTracking()
                            .Where(c => c.AppGlobalOwnerId == _oLoggedAGO.Id && c.Id == _oLoggedCB.Id && (c.OrgType == "CR" || c.OrgType == "CH" || c.OrgType == "CN"))
                            .ToList(); //c.OrgType == "CR" || c.OrgType == "GB" || c.OrgType == "IB" ||  jux for structure

                    //oCB_List_1 = oCB_List_1.Where(c =>
                    //                   (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    //   var oCB_List_1 = _context.ChurchBody.Include(t => t.CountryRegion).Include(t => t.Country).AsNoTracking()
                    //.Where(c => c.AppGlobalOwnerId == _oLoggedAGO.Id && c.Id == id &&
                    //(c.OrgType == "CR" || c.OrgType == "GB" || c.OrgType == "IB" || c.OrgType == "CH" || c.OrgType == "CN")).ToList(); // jux for structure

                    //oCB_List_1 = oCB_List_1.Where(c =>
                    //                   (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    var oCB_List = (
                        from t_cb in oCB_List_1
                        from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == t_cb.AppGlobalOwnerId)
                        from t_cl in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.Id == t_cb.ChurchLevelId) //.DefaultIfEmpty()
                        from t_cb_p in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.Id == t_cb.ParentChurchBodyId && (c.OrgType != "CN")).DefaultIfEmpty()  // (c.OrgType != "CR" || c.OrgType == "CH" || c.OrgType == "CN")
                        from t_ci in _context.ContactInfo.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.ChurchBodyId == t_cb.Id && c.Id == t_cb.ContactInfoId).DefaultIfEmpty()
                        from t_cb_sp in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.Id == t_cb.SupervisedByChurchBodyId).DefaultIfEmpty()
                        from t_cl_p in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.Id == (t_cb_p != null ? t_cb_p.ChurchLevelId : (int?)null)).DefaultIfEmpty()
                        from t_ci_ago in _context.ContactInfo.Include(t => t.Country).AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cl.AppGlobalOwnerId && c.ChurchBodyId == null && c.Id == t_ago.ContactInfoId).DefaultIfEmpty()
                            //  from t_cb_sp in _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.SupervisedByUnitId).DefaultIfEmpty()

                        select new ChurchBodyModel()
                        {
                            oAppGloOwnId = t_cb.AppGlobalOwnerId,
                            oAppGlobalOwn = t_ago, //t_cb.AppGlobalOwner,
                            oChurchBodyId = t_cb.Id,
                            ///
                            //oAppGloOwnId_MSTR = t_cb.MSTR_AppGlobalOwnerId,
                            //oChurchBodyId_MSTR = t_cb.MSTR_ChurchBodyId,
                            //oParentChurchBodyId_MSTR = t_cb.MSTR_ParentChurchBodyId,
                            //oChurchLevelId_MSTR = t_cb.MSTR_ChurchLevelId,  
                            /// 
                            oChurchBody = t_cb,
                            strChurchBody = t_cb.Name,
                            strAppGlobalOwn = t_ago.OwnerName + (!string.IsNullOrEmpty(t_ago.OwnerName) ? (t_ci_ago != null ? (t_ci_ago.Country != null ? t_ci_ago.Country.EngName : "") : "") : ""),
                            //                                      
                           // strOwnedByChurchBody = t_cb.OwnedByChurchBody != null ? t_cb.OwnedByChurchBody.Name : "",

                            strParentChurchBody = t_cb_p != null ? t_cb_p.Name : "None. [choose church body]",
                            numParentChurchBodyId = t_cb_p != null ? t_cb_p.Id : (int?)null,
                            numParentBodyCLId = t_cb_p != null ? t_cb_p.ChurchLevelId : (int?)null,
                            strParentCBLevel = t_cb_p != null ? (t_cb_p.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_p.ChurchLevel.CustomName) ? t_cb_p.ChurchLevel.CustomName : t_cb_p.ChurchLevel.Name) : "") : "",

                            strSupervisedByChurchBody = t_cb_sp != null ? t_cb_sp.Name : "None. [choose supervising body]",
                            numSupervisedByCBId = t_cb_sp != null ? t_cb_sp.Id : (int?)null,
                            numSupervisedByBodyCLId = t_cb_sp != null ? t_cb_sp.ChurchLevelId : (int?)null,
                            strCBLevel_sup = t_cb_sp != null ? (t_cb_sp.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_sp.ChurchLevel.CustomName) ? t_cb_sp.ChurchLevel.CustomName : t_cb_sp.ChurchLevel.Name) : "") : "",

                            arrRootChurchCodes = t_cb != null ? t_cb.RootChurchCode.Split("--").ToList<string>() : new List<string>(),
                            arrRootChurchCodes_par = t_cb_p != null ? t_cb_p.RootChurchCode.Split("--").ToList<string>() : new List<string>(),
                            arrRootChurchCodes_sup = t_cb_sp != null ? t_cb_sp.RootChurchCode.Split("--").ToList<string>() : new List<string>(),

                            numChurchLevel_Index = t_cl.LevelIndex,
                            strCBLevel = t_cl != null ? (!string.IsNullOrEmpty(t_cl.CustomName) ? t_cl.CustomName : t_cl.Name) : "",
                            strChurchLevel = (t_cb.ChurchLevelId == null && t_cb.OrgType == "CR") ? "Church Root" : (!string.IsNullOrEmpty(t_cl.CustomName) ? t_cl.CustomName : t_cl.Name),
                            strDateFormed = t_cb.DateFormed != null ? DateTime.Parse(t_cb.DateFormed.ToString()).ToString("d MMMM yyyy", CultureInfo.InvariantCulture) : "",
                            strDateInnaug = t_cb.DateInnaug != null ? DateTime.Parse(t_cb.DateInnaug.ToString()).ToString("d MMMM yyyy", CultureInfo.InvariantCulture) : "",
                            //strDateDeactive = t_cb.DateDeactive != null ? DateTime.Parse(t_cb.DateDeactive.ToString()).ToString("d MMM, yyyy", CultureInfo.InvariantCulture) : "",
                            strOrgType = GetChuOrgTypeDesc(t_cb.OrgType),
                            strFaithTypeCategory = t_ago.strFaithTypeCategory, // t_ago != null ? ((!string.IsNullOrEmpty(t_ago.strFaithTypeCategory) && !string.IsNullOrEmpty(t_ago.strFaithTypeStream) ? t_ago.strFaithTypeCategory + ", " + t_ago.strFaithTypeStream : t_ago.strFaithTypeCategory + t_ago.strFaithTypeStream).Trim()) : "",
                            strCountry = t_cb.Country != null ? (!string.IsNullOrEmpty(t_cb.Country.EngName) ? t_cb.Country.EngName : t_cb.Country.CtryAlpha3Code) : t_cb.CtryAlpha3Code,  //t_cb.Country != null ? t_cb.Country.EngName : "",
                            strCountryRegion = t_cb.CountryRegion != null ? t_cb.CountryRegion.Name : "",
                            strParentCB_HeaderDesc = t_cl_p != null ? (!string.IsNullOrEmpty(t_cl_p.CustomName) ? "Parent Body (" + t_cl_p.CustomName + ")" : "Parent Body") : "Parent Body",
                            strCongLoc = t_ci != null ? (!string.IsNullOrEmpty(t_ci.Location) && !string.IsNullOrEmpty(t_ci.City) ? t_ci.Location + ", " + t_ci.City : t_ci.Location + t_ci.City).Trim() : "",
                            strCongLoc2 = (t_cb.CountryRegion != null && t_cb.Country != null ? t_cb.CountryRegion.Name + ", " + t_cb.Country.EngName : (t_cb.CountryRegion != null ? t_cb.CountryRegion.Name : "") + (t_cb.Country != null ? t_cb.Country.EngName : "")).Trim(),
                            bl_IsActivated = t_cb.Status == "A",

                            // bl_IsFullAutonomy = t_cb.IsFullAutonomy,
                            //
                            dtCreated = t_cb.Created,
                            //    
                            strStatus = GetStatusDesc(t_cb.Status),
                            strOwnershipCode = t_cb.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I",  //t_cb.Id == t_cb.OwnedByChurchBodyId ? "O" : "I",
                            strChurchWorkStatus = GetAdhocStatusDesc(t_cb.ChurchWorkStatus),
                            strOwnershipStatus = GetAdhocStatusDesc(t_cb.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),                            
                            strSharingStatus = GetSharingStatusDesc(t_cb.SharingStatus),
                            strChurchLogo = t_cb.ChurchBodyLogo
                        })
                        .OrderByDescending(c => c.dtCreated) //.OrderBy(c => c.strCountry).OrderBy(c => c.numCLIndex).OrderBy(c => c.strChurchBody)
                        .ToList();

                    // oCSPModel.lsChurchBodyModels = oCB_List; 

                    //if (oCB_List.Count() == 0)
                    //    return oCSPModel;



                    var oCBModel = oCB_List.Count() > 0 ? oCB_List[0] : new ChurchBodyModel() ;
                    oCBModel.oUserId_Logged = _oLoggedUser.Id;  
                    oCBModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                    oCBModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                    ///
                    //oCBModel.oChurchBodyId = oCBModel.oChurchBodyId_Logged;

                    oCBModel.pageIndex = 1;
                    oCBModel.setIndex = (int)setIndex;
                    // oCBModel.tempSetIndex = tempSetIndex;
                    oCBModel.subSetIndex = (int)subSetIndex;

                    /// 
                    //if (oCB_List.Count() > 0) { 
                    //        /// load the respective church structure tree                    
                    //        oCBModel.oCBLevelCount = oCBModel.numChurchLevel_Index - 1;        // oCBLevelCount -= 2;  // less requesting CB
                    //    List<ChurchLevel> oCBLevelList = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == oCBModel.oChurchBody.AppGlobalOwnerId && c.LevelIndex > 0 && c.LevelIndex < oCBModel.numChurchLevel_Index).ToList().OrderBy(c => c.LevelIndex).ToList();
                    //    ///
                    //    if (oCBModel.oCBLevelCount > 0 && oCBLevelList.Count > 0)
                    //    {
                    //        oCBModel.strChurchLevel_1 = !string.IsNullOrEmpty(oCBLevelList[0].CustomName) ? oCBLevelList[0].CustomName : oCBLevelList[0].Name;
                    //        ViewBag.strChurchLevel_1 = oCBModel.strChurchLevel_1;
                    //        ///
                    //        var oCB_1 = _context.ChurchBody.Include(t => t.ChurchLevel)
                    //                          .Where(c => c.AppGlobalOwnerId == oCBModel.oChurchBody.AppGlobalOwnerId && // c.Status == "A" && 
                    //                                c.ChurchLevel.LevelIndex == 1 && c.OrgType == "CR") //c.ChurchLevelId == oCBLevelList[0].Id &&
                    //                          .FirstOrDefault();

                    //        if (oCB_1 != null)
                    //        { oCBModel.ChurchBodyId_1 = oCB_1.Id; oCBModel.strChurchBody_1 = oCB_1.Name + " [Church Root]"; }

                    //        ViewBag.ChurchBodyId_1 = oCBModel.ChurchBodyId_1;
                    //        ViewBag.strChurchBody_1 = oCBModel.strChurchBody_1;

                    //        ///
                    //        if (oCBModel.oCBLevelCount > 1)
                    //        {
                    //            oCBModel.strChurchLevel_2 = !string.IsNullOrEmpty(oCBLevelList[1].CustomName) ? oCBLevelList[1].CustomName : oCBLevelList[1].Name;
                    //            ViewBag.strChurchLevel_2 = oCBModel.strChurchLevel_2;
                    //            ///
                    //            var lsCB_2 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCBModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[1].Id).ToList();
                    //            var oCB_2 = lsCB_2.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCBModel.oChurchBody.RootChurchCode, c.Id, oCBModel.oChurchBody.ParentChurchBodyId)).ToList();
                    //            if (oCB_2.Count() != 0)
                    //            { oCBModel.ChurchBodyId_2 = oCB_2[0].Id; oCBModel.strChurchBody_2 = oCB_2[0].Name; }
                    //            ViewBag.ChurchBodyId_2 = oCBModel.ChurchBodyId_2; ViewBag.strChurchBody_2 = oCBModel.strChurchBody_2;

                    //            if (oCBModel.oCBLevelCount > 2)
                    //            {
                    //                oCBModel.strChurchLevel_3 = !string.IsNullOrEmpty(oCBLevelList[2].CustomName) ? oCBLevelList[2].CustomName : oCBLevelList[2].Name;
                    //                ViewBag.strChurchLevel_3 = oCBModel.strChurchLevel_3;

                    //                var lsCB_3 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCBModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[2].Id).ToList();
                    //                var oCB_3 = lsCB_3.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCBModel.oChurchBody.RootChurchCode, c.Id, oCBModel.oChurchBody.ParentChurchBodyId)).ToList();
                    //                if (oCB_3.Count() != 0)
                    //                { oCBModel.ChurchBodyId_3 = oCB_3[0].Id; oCBModel.strChurchBody_3 = oCB_3[0].Name; }
                    //                ViewBag.ChurchBodyId_3 = oCBModel.ChurchBodyId_3; ViewBag.strChurchBody_3 = oCBModel.strChurchBody_3;


                    //                if (oCBModel.oCBLevelCount > 3)
                    //                {
                    //                    oCBModel.strChurchLevel_4 = !string.IsNullOrEmpty(oCBLevelList[3].CustomName) ? oCBLevelList[3].CustomName : oCBLevelList[3].Name;
                    //                    ViewBag.strChurchLevel_4 = oCBModel.strChurchLevel_4;

                    //                    var lsCB_4 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCBModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[3].Id).ToList();
                    //                    var oCB_4 = lsCB_4.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCBModel.oChurchBody.RootChurchCode, c.Id, oCBModel.oChurchBody.ParentChurchBodyId)).ToList();
                    //                    if (oCB_4.Count() != 0)
                    //                    { oCBModel.ChurchBodyId_4 = oCB_4[0].Id; oCBModel.strChurchBody_4 = oCB_4[0].Name; }
                    //                    ViewBag.ChurchBodyId_4 = oCBModel.ChurchBodyId_4; ViewBag.strChurchBody_4 = oCBModel.strChurchBody_4;


                    //                    if (oCBModel.oCBLevelCount > 4)
                    //                    {
                    //                        oCBModel.strChurchLevel_5 = !string.IsNullOrEmpty(oCBLevelList[4].CustomName) ? oCBLevelList[4].CustomName : oCBLevelList[4].Name;
                    //                        ViewBag.strChurchLevel_5 = oCBModel.strChurchLevel_4;

                    //                        var lsCB_5 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCBModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[4].Id).ToList();
                    //                        var oCB_5 = lsCB_5.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCBModel.oChurchBody.RootChurchCode, c.Id, oCBModel.oChurchBody.ParentChurchBodyId)).ToList();
                    //                        if (oCB_5.Count() != 0)
                    //                        { oCBModel.ChurchBodyId_5 = oCB_5[0].Id; oCBModel.strChurchBody_5 = oCB_5[0].Name; }
                    //                        ViewBag.ChurchBodyId_5 = oCBModel.ChurchBodyId_5; ViewBag.strChurchBody_5 = oCBModel.strChurchBody_5;
                    //                    }
                    //                }
                    //            }
                    //        }
                    //    }


                    //}

                    oCSPModel.oChurchBodyModel = oCBModel;
                    ViewData["oChurchBodyModel"] = oCBModel;
                    oCSPModel.oChurchBodyModel = oCBModel;

                    /// specific parameter...
                    if (setIndex != 0) return oCSPModel;
                }
                 

                ////CBA ... Church Body Units  ... part of CU (14)
                //if (setIndex == 0 || setIndex == 4)
                //{  // view only the subscribed CB
                //    var oCB_List_1 = _context.ChurchBody.Include(t => t.CountryRegion).Include(t => t.Country).AsNoTracking()
                //            .Where(c => c.AppGlobalOwnerId == _oLoggedAGO.Id && c.ChurchLevel.LevelIndex >= this._oLoggedCB.ChurchLevel.LevelIndex &&
                //            (c.OrgType == "CR" || c.OrgType == "GB" || c.OrgType == "IB" || c.OrgType == "CH" || c.OrgType == "CN")).ToList(); // jux for structure
                          
                //    oCB_List_1 = oCB_List_1.Where(c =>
                //                       (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                //    var oCB_List = (
                //        from t_cb in oCB_List_1
                //        from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == t_cb.AppGlobalOwnerId)
                //        from t_cl in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.Id == t_cb.ChurchLevelId) //.DefaultIfEmpty()
                //        from t_cb_p in _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.Id == t_cb.ParentChurchBodyId && (c.OrgType != "CN")).DefaultIfEmpty()  // (c.OrgType != "CR" || c.OrgType == "CH" || c.OrgType == "CN")
                //        from t_ci in _context.ContactInfo.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.ChurchBodyId == t_cb.Id && c.Id == t_cb.ContactInfoId).DefaultIfEmpty()
                //        from t_cb_sp in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.Id == t_cb.SupervisedByChurchBodyId).DefaultIfEmpty()
                //        from t_cl_p in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.Id == (t_cb_p != null ? t_cb_p.ChurchLevelId : (int?)null)).DefaultIfEmpty()
                //        from t_ci_ago in _context.ContactInfo.Include(t => t.Country).AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cl.AppGlobalOwnerId && c.ChurchBodyId == null && c.Id == t_ago.ContactInfoId).DefaultIfEmpty()
                //            //  from t_cb_sp in _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.SupervisedByUnitId).DefaultIfEmpty()

                //        select new ChurchBodyModel()
                //        {
                //            oAppGloOwnId = t_cb.AppGlobalOwnerId,
                //            oAppGlobalOwn = t_ago, //t_cb.AppGlobalOwner,
                //            oChurchBodyId = t_cb.Id,
                //            /// 
                //            oChurchBody = t_cb,
                //            strChurchBody = t_cb.Name,
                //            strAppGlobalOwn = t_ago.OwnerName + (!string.IsNullOrEmpty(t_ago.OwnerName) ? (t_ci_ago != null ? (t_ci_ago.Country != null ? t_ci_ago.Country.EngName : "") : "") : ""),
                //            //                                      
                //          //  strOwnedByChurchBody = t_cb.OwnedByChurchBody != null ? t_cb.OwnedByChurchBody.Name : "",
                //            strParentChurchBody = t_cb_p != null ? t_cb_p.Name : "",
                //            strSupervisedByChurchBody = t_cb_sp != null ? t_cb_sp.Name : "",
                //            // strCBLevel_sup  = (t_cb_sp.ChurchLevelId == null && t_cb.OrgType == "CR") ? "Church Root" : (!string.IsNullOrEmpty(t_cl.CustomName) ? t_cl.CustomName : t_cl.Name),
                //            strCBLevel_sup = t_cb_sp != null ? (t_cb_sp.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_sp.ChurchLevel.CustomName) ? t_cb_sp.ChurchLevel.CustomName : t_cb_sp.ChurchLevel.Name) : "") : "",

                //            numChurchLevel_Index = t_cl.LevelIndex,
                //            strCBLevel = t_cl != null ? (!string.IsNullOrEmpty(t_cl.CustomName) ? t_cl.CustomName : t_cl.Name) : "",
                //            strChurchLevel = (t_cb.ChurchLevelId == null && t_cb.OrgType == "CR") ? "Church Root" : (!string.IsNullOrEmpty(t_cl.CustomName) ? t_cl.CustomName : t_cl.Name),
                //            strDateFormed = t_cb.DateFormed != null ? DateTime.Parse(t_cb.DateFormed.ToString()).ToString("d MMM, yyyy", CultureInfo.InvariantCulture) : "",
                //            strDateInnaug = t_cb.DateInnaug != null ? DateTime.Parse(t_cb.DateInnaug.ToString()).ToString("d MMM, yyyy", CultureInfo.InvariantCulture) : "",
                //            //strDateDeactive = t_cb.DateDeactive != null ? DateTime.Parse(t_cb.DateDeactive.ToString()).ToString("d MMM, yyyy", CultureInfo.InvariantCulture) : "",
                //            strOrgType = GetChuOrgTypeDesc(t_cb.OrgType),
                //            strFaithTypeCategory = t_ago.strFaithTypeCategory, // t_ago != null ? ((!string.IsNullOrEmpty(t_ago.strFaithTypeCategory) && !string.IsNullOrEmpty(t_ago.strFaithTypeStream) ? t_ago.strFaithTypeCategory + ", " + t_ago.strFaithTypeStream : t_ago.strFaithTypeCategory + t_ago.strFaithTypeStream).Trim()) : "",
                //            strCountry = t_cb.Country != null ? (!string.IsNullOrEmpty(t_cb.Country.EngName) ? t_cb.Country.EngName : t_cb.Country.CtryAlpha3Code) : t_cb.CtryAlpha3Code,  //t_cb.Country != null ? t_cb.Country.EngName : "",
                //            strCountryRegion = t_cb.CountryRegion != null ? t_cb.CountryRegion.Name : "",
                //            strParentCB_HeaderDesc = t_cl_p != null ? (!string.IsNullOrEmpty(t_cl_p.CustomName) ? "Parent Congregation (" + t_cl_p.CustomName + ")" : "Parent Congregation") : "Parent Congregation",
                //            strCongLoc = t_ci != null ? (!string.IsNullOrEmpty(t_ci.Location) && !string.IsNullOrEmpty(t_ci.City) ? t_ci.Location + ", " + t_ci.City : t_ci.Location + t_ci.City).Trim() : "",
                //            strCongLoc2 = (t_cb.CountryRegion != null && t_cb.Country != null ? t_cb.CountryRegion.Name + ", " + t_cb.Country.EngName : (t_cb.CountryRegion != null ? t_cb.CountryRegion.Name : "") + (t_cb.Country != null ? t_cb.Country.EngName : "")).Trim(),
                //            bl_IsActivated = t_cb.Status == "A",
                //            // bl_IsFullAutonomy = t_cb.IsFullAutonomy,
                //            //
                //            dtCreated = t_cb.Created,
                //            //    
                //            strStatus = GetStatusDesc(t_cb.Status),
                //            strOwnershipCode = t_cb.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", // t_cb.Id == t_cb.OwnedByChurchBodyId ? "O" : "I",
                //            strOwnershipStatus = GetAdhocStatusDesc(t_cb.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                //            strChurchWorkStatus = GetAdhocStatusDesc(t_cb.ChurchWorkStatus),
                //            strSharingStatus = GetSharingStatusDesc(t_cb.SharingStatus),
                //        })
                //        .OrderByDescending(c => c.dtCreated) //.OrderBy(c => c.strCountry).OrderBy(c => c.numCLIndex).OrderBy(c => c.strChurchBody)
                //        .ToList();

                    
                //    var oCBModel = new ChurchBodyModel();
                //    oCBModel.oUserId_Logged = _oLoggedUser.Id;
                //    oCBModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                //    oCBModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                //    oCBModel.pageIndex = 1;
                //    // oCBModel.filterIndex = filterIndex;
                //    oCBModel.setIndex = (int)setIndex;
                //    // oCBModel.tempSetIndex = tempSetIndex;
                //    oCBModel.subSetIndex = (int)subSetIndex;
                //    ///
                //    oCBModel.lsChurchBodyModels = oCB_List;
                //    ViewData["oSetupData_CBA_List"] = oCB_List;
                //    oCSPModel.oChurchBodyAdhocModel = oCBModel;
                //  //  oCSPModel.tempSetIndex = oNVPModel.tempSetIndex;
                //    ViewData["oChurchBodyAdhocModel"] = oCBModel;
                                  

                //    /// specific parameter...
                //    if (setIndex != 0) return oCSPModel;
                //}



                //CB structure ...   5 ... display both [tree] and [org chart]
                ///
                if (setIndex == 0 || setIndex == 5)
                {
                    var items = _context.ChurchBody.AsNoTracking().Where(c=> c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Status == "A").ToList();
                    IList<CBNetworkModel> nodes = new List<CBNetworkModel>();

                    foreach (var item in items)
                    {
                        nodes.Add(new CBNetworkModel
                        {
                            id = item.Id.ToString(),
                            parent = item.ParentChurchBodyId == null ? "#" : item.ParentChurchBodyId.ToString(),
                            text = item.Name
                        });
                    }

                    //Serialize to JSON string.
                    //ViewBag.Json = JsonSerializer.Serialize(nodes);

                    ViewBag.Json = JsonConvert.SerializeObject(nodes); //  .SerializeXNode(node);                     

                    var oCBNModel = new CBNetworkModel();
                    oCBNModel.oUserId_Logged = _oLoggedUser.Id;
                    oCBNModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                    //oNVPModel.oChurchBodyId = this._oLoggedCB.Id;
                    //oNVPModel.oChurchBody = this._oLoggedCB;
                    oCBNModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                    oCBNModel.oAppGloOwnId = this._oLoggedAGO.Id;
                    //oCBNModel.oAppGlobalOwn = this._oLoggedAGO;
                    //oNVPModel.pageIndex = 1;

                    //oNVPModel.filterIndex = filterIndex;
                    oCBNModel.setIndex = (int)setIndex;
                    //oNVPModel.tempSetIndex = tempSetIndex;
                    //oNVPModel.subSetIndex = (int)subSetIndex;
                     
                    oCBNModel.lsCBNetworkModels = nodes;
                    ///
                    oCSPModel.oCBNetworkModel = oCBNModel;

                    /// specific parameter...
                    if (setIndex != 0) return oCSPModel;
                }
                 

                // NVP  ...6    
                if (setIndex == 0 || setIndex == 6 || setIndex == 8 || setIndex == 10 || setIndex == 11 || setIndex == 12 || setIndex == 15 || setIndex == 17 || setIndex == 18 || setIndex == 19 || setIndex == 20)
                { 
                    //if (strCodeCriteria == "LSPK" || strCodeCriteria == "NIDT" || strCodeCriteria == "CTT")
                    //{
                    //    this.GetDefaultCountryInfo();
                    //    oNVP_Model.strCountry = this.strCountryName_dflt;
                    //    oNVP_Model.oAppUtilityNVP.CtryAlpha3Code = this.strCountryCode_dflt;
                    //}

                    var tempSetIndex = GetNVPSetIndex(strCodeCriteria_2); // _currNVPCategoryId

                    // load the first param....
                    if (string.IsNullOrEmpty(strCodeCriteria_2) && dlNVPCodes.Count > 0) 
                        strCodeCriteria_2 = this.dlNVPCodes[0].Val;
                         
                    // var oNVPCateg_List = new List<AppUtilityNVP>();

                    //if (tempSetIndex == 18 && numCodeCriteria_1 == null) // for CLARD
                    //{
                    //    var strCode = "CLA";    // c.Id != oCurrNVP.Id && 
                    //    oNVPCateg_List = _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner) //.Include(t => t.OwnedByChurchBody)
                    //                                       .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.NVPCode == strCode).ToList();

                    //    oNVPCateg_List = oNVPCateg_List.Where(c =>
                    //                       (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                    //                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                    //                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    //    numCodeCriteria_1 = oNVPCateg_List[0].Id;
                    //}

                    ///

                    var oNVP_List_All = _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.OwnedByChurchBody)
                                        .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && //c.NVPCode == strCodeCriteria_2 &&
                                        ((c.OwnedByChurchBodyId == this._oLoggedCB.Id) || (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus != "N"))).ToList();  // exclude all non-shared and not owned

                    if (setIndex != 0)
                    {
                        oNVP_List_All = oNVP_List_All  //_context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner) //.Include(t => t.OwnedByChurchBody)
                                        .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.NVPCode == strCodeCriteria_2 &&
                                        (tempSetIndex != 18 || (tempSetIndex == 18 && c.NVPCategoryId == numCodeCriteria_1))).ToList();
                    }

                    oNVP_List_All = oNVP_List_All.Where(c =>
                                       (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    var oNVPModels_All = (
                                    from t_nvp in oNVP_List_All.ToList()  // from t_nvp in _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner).Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.ChurchBodyId == this._oLoggedCB.Id)
                                    from t_nvp_c in _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_nvp.AppGlobalOwnerId && c.Id == t_nvp.NVPCategoryId).DefaultIfEmpty()
                                    from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_nvp.CtryAlpha3Code).DefaultIfEmpty()
                                    from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_nvp.OwnedByChurchBodyId).DefaultIfEmpty()

                                    select new AppUtilityNVPModel()
                                    {
                                        oAppGloOwnId = t_nvp.AppGlobalOwnerId,
                                        oAppGlobalOwn = t_nvp.AppGlobalOwner,
                                        oChurchBodyId = t_nvp.OwnedByChurchBodyId,
                                        oChurchBody = t_nvp.OwnedByChurchBody,
                                        ///
                                        oAppUtilityNVP = t_nvp,
                                        strAppUtilityNVP = t_nvp.ValueType=="T" || t_nvp.ValueType==null ? t_nvp.NVPValue : (t_nvp.ValueType == "N" ? t_nvp.NVPNumVal.ToString() : (t_nvp.ValueType == "D" ? (t_nvp.NVPFromDate != null && t_nvp.NVPToDate != null ? (String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPFromDate) + " - " + String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPToDate)) : ((t_nvp.NVPFromDate != null ? String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPFromDate) : "") + ((t_nvp.NVPToDate != null ? String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPToDate) : "")))) : null)),
                                        //
                                        strNVPValue = t_nvp.ValueType=="T" ? t_nvp.NVPValue : null,  
                                        numAppUtilityNVP = t_nvp.ValueType == "N" ? t_nvp.NVPNumVal : (int?)null,  
                                        dt1AppUtilityNVP = t_nvp.ValueType == "D" ? t_nvp.NVPFromDate : (DateTime?)null,
                                        dt2AppUtilityNVP = t_nvp.ValueType == "D" ? t_nvp.NVPToDate : (DateTime?)null,  
                                        ///
                                        strNVPCode = t_nvp.NVPCode,
                                        strNVPSubCode = t_nvp.NVPSubCode,  // categorization
                                        strNVPTag = GetNVPTagDesc(t_nvp.NVPCode),
                                        strNVPSubTag = GetNVPSubTagDesc(t_nvp.NVPSubCode),
                                        numOrderIndex = t_nvp.OrderIndex,
                                        strNVPCategory = t_nvp_c != null ? t_nvp_c.NVPValue : "",                                        
                                        strCountry = t_ctry != null ? (!string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code) : "",
                                        strOccurFrequency = GetPeriodDesc(t_nvp.OccurFreqCode), 
                                        strNVPStatus = GetStatusDesc(t_nvp.NVPStatus),
                                        bl_NVPStatus_Active= t_nvp.NVPStatus=="A",

                                        //strChurchLevel_OwnedByCB = t_nvp.OwnedByChurchBody != null ? (t_nvp.OwnedByChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(t_nvp.OwnedByChurchBody.ChurchLevel.CustomName) ? t_nvp.OwnedByChurchBody.ChurchLevel.CustomName : t_nvp.OwnedByChurchBody.ChurchLevel.Name) : "") : "",
                                        //strOwnedByChurchBody = t_nvp.OwnedByChurchBody != null ? t_nvp.OwnedByChurchBody.Name : "",
                                        //strOwnershipCode = t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", // t_nvp.OwnedByChurchBodyId != null ? (t_nvp.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                                        //strOwnershipStatus = GetAdhocStatusDesc(t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I") +
                                        //                     (t_nvp.OwnedByChurchBodyId != this._oLoggedCB.Id ? t_nvp.OwnedByChurchBody?.ChurchLevel?.Acronym : ""),



                                        // bl_ApplyToClergyOnly = t_nvp.ApplyToClergyOnly,
                                        // bl_IsAvailable = t_nvp.IsAvailable,
                                        // bl_IsDeceased = t_nvp.IsDeceased, 
                                        //
                                        strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                                        strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
                                        strOwnershipCode = t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", // t_nvp.OwnedByChurchBodyId != null ? (t_nvp.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                                        strOwnershipStatus = GetAdhocStatusDesc(t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I") +
                                                             (t_nvp.OwnedByChurchBodyId != this._oLoggedCB.Id ? " (" + t_cb_o?.ChurchLevel?.Acronym  + ")": ""),
                                        strSharingStatus = GetSharingStatusDesc(t_nvp.SharingStatus)
                                    })
                                    .OrderBy(c => c.strNVPCode).ThenBy(c => c.numOrderIndex)
                                    .ThenBy(c => c.strNVPValue).ThenBy(c => c.numAppUtilityNVP).ThenByDescending(c => c.dt1AppUtilityNVP).ThenByDescending(c => c.dt2AppUtilityNVP)
                                    .ToList();
                     
                    var oNVPModel = new AppUtilityNVPModel();
                    oNVPModel.oUserId_Logged = _oLoggedUser.Id;
                    oNVPModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                    oNVPModel.oChurchBodyId = this._oLoggedCB.Id;
                    oNVPModel.oChurchBody = this._oLoggedCB;
                    oNVPModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                    oNVPModel.oAppGloOwnId = this._oLoggedAGO.Id;
                    oNVPModel.oAppGlobalOwn = this._oLoggedAGO;
                    oNVPModel.pageIndex = 1;
                    
                    oNVPModel.filterIndex = filterIndex;
                    oNVPModel.setIndex = (int)setIndex;
                    oNVPModel.tempSetIndex = tempSetIndex;
                    oNVPModel.subSetIndex = (int)subSetIndex;
                    ///
                    var lsNVPCurrParam = setIndex != 0 ? oNVPModels_All : oNVPModels_All.Where(c => c.oAppUtilityNVP.NVPCode == strCodeCriteria_2).ToList();
                    oNVPModel.lsAppUtilityNVPModels_All = oNVPModels_All;
                    oNVPModel.lsAppUtilityNVPModels = lsNVPCurrParam;
                   // ViewData["oSetupData_NVP_List"] = oNVPModel.lsAppUtilityNVPModels;
                    
                    oCSPModel.tempSetIndex = oNVPModel.tempSetIndex;
                   // ViewData["oAppUtilityNVPModel"] = oNVPModel;

                    oNVPModel.strCurrNVPCode = strCodeCriteria_2;
                    oNVPModel.numNVP_ParentCategoryId = numCodeCriteria_1;

                    // populate the entries
                    if (setIndex == 0 || setIndex == 6)
                    {
                        oNVPModel.lkpAppParameterTags = new List<SelectListItem>();
                        foreach (var dl in dlNVPCodes)
                        { 
                            if (dl.Val != "CLA" && dl.Val != "CLARD") //(setIndex == 0 || dl.Val == oNVPModel.strCurrNVPCode )
                                oNVPModel.lkpAppParameterTags.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); 
                        }
                    }
                                                           
                   
                    //
                    //if (tempSetIndex == 18) // for CLARD
                    //{
                    //    var oNVPCateg_List = new List<AppUtilityNVP>();
                    //    var strCode = "CLA";    // c.Id != oCurrNVP.Id && 
                    //    oNVPCateg_List = _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner) //.Include(t => t.OwnedByChurchBody)
                    //                                       .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.NVPCode == strCode).ToList();

                    //    oNVPCateg_List = oNVPCateg_List.Where(c =>
                    //                       (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                    //                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                    //                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    //    // oNVPCateg_List already loaded...
                    //    oNVPModel.lkpNVP_ParentCategories = oNVPCateg_List //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                    //                                .OrderBy(c => c.OrderIndex)
                    //                                .ThenBy(c => c.NVPValue)
                    //                                .Select(c => new SelectListItem()
                    //                                {
                    //                                    Value = c.Id.ToString(),
                    //                                    Text = c.NVPValue
                    //                                })
                    //                                .ToList();

                    //    // GetAdhocStatusDesc(t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I") +
                    //     //  (t_nvp.OwnedByChurchBodyId != this._oLoggedCB.Id ? " (" + t_cb_o?.ChurchLevel?.Acronym + ")" : "")

                    //    // oNVPModel.numNVP_ParentCategoryId = numCodeCriteria_1;
                    //}


                    oCSPModel.oAppUtilityNVPModel = oNVPModel;

                    /// specific parameter...
                    if (setIndex != 0 ) return oCSPModel;
                }


                // CRC_CTRY, CRC_CURR   ...7
                if (setIndex == 0 || setIndex == 7)
                { 
                    // CRC_ctry  - customized to CB ... using the default country config with AGO/CB
                    if (setIndex == 0 || subSetIndex == 1 ) // CTRY ..all/cus : 1/2
                    {
                        var oCRC_CTRY_List = (
                                               from t_ctry in _context.Country.AsNoTracking() 
                                               from t_ctry_c in _context.CountryCustom.AsNoTracking() //.Include(t => t.AppGlobalOwner)
                                                                   .Where(c => (c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.ChurchBodyId == this._oLoggedCB.Id && c.CtryAlpha3Code == t_ctry.CtryAlpha3Code) &&
                                                                   (filterIndex == 1 || (filterIndex == 2 && c.IsDisplay==true) || (filterIndex == 3 && c.IsChurchCountry == true) || (filterIndex == 4 && c.IsDefaultCountry == true))
                                                                   ).DefaultIfEmpty()
                                              
                                               select new CountryModel()
                                               {
                                                   oCountry = t_ctry,
                                                   strCountry = !string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code,
                                                   bl_IsCustomDisplay = t_ctry_c != null ? t_ctry_c.IsDisplay : false,
                                                   bl_IsCustomChurchCountry = t_ctry_c != null ? t_ctry_c.IsChurchCountry : false,
                                                   bl_IsCustomDefaultCountry = t_ctry_c != null ? t_ctry_c.IsDefaultCountry : false,
                                                   
                                               })
                                               .OrderBy(c => c.strCountry)
                                               .ToList();

                        var oCTRYModel = new CountryModel(); 
                        oCTRYModel.oUserId_Logged = _oLoggedUser.Id;
                        oCTRYModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                        oCTRYModel.oChurchBodyId  = this._oLoggedCB.Id;
                        oCTRYModel.oChurchBody  = this._oLoggedCB;
                        oCTRYModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                        oCTRYModel.oAppGloOwnId = this._oLoggedAGO.Id;
                        oCTRYModel.oAppGlobalOwn = this._oLoggedAGO;                            
                        oCTRYModel.pageIndex = 1;
                        oCTRYModel.filterIndex = filterIndex;
                        oCTRYModel.setIndex = (int)setIndex;
                        oCTRYModel.subSetIndex = (int)subSetIndex;

                        oCTRYModel.lsCountryModels = oCRC_CTRY_List;
                        ViewData["oSetupData_CRC_CTRY_List"] = oCRC_CTRY_List;
                        oCSPModel.oCountryModel = oCTRYModel;
                        ViewData["oCountryModel"] = oCTRYModel;                        
                    }
                     
                    if (subSetIndex == 0 || subSetIndex == 2  ) // RGN ..all/cus : 1/2  - customized to CB ... using the default country config with AGO/CB
                    {
                        if (string.IsNullOrEmpty(strCodeCriteria_2))  // country -- default if not specified
                        {
                            var oCTRY_List = _context.CountryCustom.AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.ChurchBodyId == this._oLoggedCB.Id).ToList();
                            var oCTRY_List_d = oCTRY_List.Where(c => c.IsDefaultCountry == true).FirstOrDefault();
                            if (oCTRY_List_d != null) strCodeCriteria_2 = oCTRY_List_d.CtryAlpha3Code;
                            else strCodeCriteria_2 = oCTRY_List.Count > 0 ? oCTRY_List[0].CtryAlpha3Code : ""; 
                        }
                        
                        var oCTRY_RGN_List_1 = _context.CountryRegion.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.OwnedByChurchBody)
                                               .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.CtryAlpha3Code == strCodeCriteria_2).ToList();

                        oCTRY_RGN_List_1 = oCTRY_RGN_List_1.Where(c =>
                                           (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                           (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                           (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList(); 

                        var oCRC_CTRY_RGN_List = (
                                                    from t_ctry_regn in oCTRY_RGN_List_1.ToList()
                                                    from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking() .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id== t_ctry_regn.OwnedByChurchBodyId).DefaultIfEmpty()
                                                    from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_ctry_regn.CtryAlpha3Code)
                                                    from t_ctry_regn_c in _context.CountryRegionCustom.AsNoTracking().Include(t => t.AppGlobalOwner)
                                                        .Where(c => (c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.ChurchBodyId == this._oLoggedCB.Id && c.CountryRegionId == t_ctry_regn.Id) &&
                                                                        (filterIndex == 1 || (filterIndex == 2 && c.IsDisplay == true) || (filterIndex == 3 && c.IsChurchRegion == true) || (filterIndex == 4 && c.IsDefaultRegion == true))
                                                                        ).DefaultIfEmpty() 

                                                    select new CountryRegionModel()
                                                    {
                                                        oAppGloOwnId = t_ctry_regn.AppGlobalOwnerId,
                                                        oAppGlobalOwn = t_ctry_regn.AppGlobalOwner,
                                                        oChurchBodyId = t_ctry_regn.OwnedByChurchBodyId, 
                                                        oChurchBody = t_ctry_regn.OwnedByChurchBody, 
                                                        ///
                                                        strCountryRegion = t_ctry_regn != null ? t_ctry_regn.Name : "",
                                                        strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                                                        strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",

                                                        oCountryRegion = t_ctry_regn,
                                                        strCountry = t_ctry != null ? (!string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code) : "",
                                                        bl_IsCustomDisplay = t_ctry_regn_c != null ? t_ctry_regn_c.IsDisplay : false,
                                                        bl_IsCustomChurchRegion = t_ctry_regn_c != null ? t_ctry_regn_c.IsChurchRegion : false,
                                                        bl_IsCustomDefaultRegion = t_ctry_regn_c != null ? t_ctry_regn_c.IsDefaultRegion : false,
                                                        strOwnershipCode = t_ctry_regn.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", // t_ctry_regn.OwnedByChurchBodyId != null ? (t_ctry_regn.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_ctry_regn.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                                                        strOwnershipStatus = GetAdhocStatusDesc(t_ctry_regn.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"), // t_ctry_regn.OwnedByChurchBodyId != null ? (t_ctry_regn.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_ctry_regn.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                                                        strSharingStatus = GetSharingStatusDesc(t_ctry_regn.SharingStatus)
                                                    })
                                                    .OrderBy(c => c.strCountryRegion)
                                                    .ToList();

                        var oCTRY_RGNModel = new CountryRegionModel();                        
                        oCTRY_RGNModel.oUserId_Logged = _oLoggedUser.Id;
                        oCTRY_RGNModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                        oCTRY_RGNModel.oChurchBodyId = this._oLoggedCB.Id;
                        oCTRY_RGNModel.oChurchBody = this._oLoggedCB;
                        oCTRY_RGNModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                        oCTRY_RGNModel.oAppGloOwnId = this._oLoggedAGO.Id;
                        oCTRY_RGNModel.oAppGlobalOwn = this._oLoggedAGO;
                        oCTRY_RGNModel.pageIndex = 1;
                        oCTRY_RGNModel.filterIndex = filterIndex;
                        oCTRY_RGNModel.setIndex = (int)setIndex;
                        oCTRY_RGNModel.subSetIndex = (int)subSetIndex;

                        // populate the countries...
                        oCTRY_RGNModel.lkpCountries = _context.Country.ToList()  //.Where(c => c.Display == true)
                                           .Select(c => new SelectListItem()
                                           {
                                               Value = c.CtryAlpha3Code, //.ToString(),
                                               Text = c.EngName
                                           })
                                           .OrderBy(c => c.Text)
                                           .ToList();

                        oCTRY_RGNModel.currCountryCode = strCodeCriteria_2;
                        //
                        oCTRY_RGNModel.lsCountryRegionModels = oCRC_CTRY_RGN_List;
                        ViewData["oSetupData_CRC_CTRY_RGN_List"] = oCRC_CTRY_RGN_List;
                        oCSPModel.oCountryRegionModel = oCTRY_RGNModel;
                        ViewData["oCountryRegionModel"] = oCTRY_RGNModel;
                    }

                    if (subSetIndex == 0 || subSetIndex == 3)   // CURR
                    {
                        //var oCURR_CUS_List = _context.Country.AsNoTracking()
                        //                        .GroupBy(c => c.Curr3LISOSymbol)
                        //                        .Select(c => c.Key) //.First())
                        //                        .ToList();


                        var oCURR_CUS_List = _context.Country.AsNoTracking().ToList();  
                       // oCURR_CUS_List = oCURR_CUS_List.GroupBy(a => a.Curr3LISOSymbol).Select(a => a.FirstOrDefault()).ToList();  // allow all currencies
                        var oCRC_CURR_CUS_List = (
                                                from t_ctry in oCURR_CUS_List //from t_ctry in _context.Country.AsNoTracking()
                                                from t_curr_c in _context.CurrencyCustom.AsNoTracking().Include(t => t.AppGlobalOwner)  //.DefaultIfEmpty()
                                                    .Where(c => (c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.ChurchBodyId == this._oLoggedCB.Id && c.CtryAlpha3Code == t_ctry.CtryAlpha3Code) &&
                                                                    (filterIndex == 1 || (filterIndex == 2 && c.IsDisplay == true) || (filterIndex == 4 && c.IsBaseCurrency == true))
                                                                    ).DefaultIfEmpty() 

                                                select new CurrencyCustomModel()
                                                {
                                                    oAppGloOwnId = t_curr_c != null ? t_curr_c.AppGlobalOwnerId : null,
                                                    oAppGlobalOwn = t_curr_c != null ? t_curr_c.AppGlobalOwner : null,
                                                    oChurchBodyId = t_curr_c != null ? t_curr_c.ChurchBodyId : null,
                                                    oChurchBody = t_curr_c != null ? t_curr_c.ChurchBody : null,
                                                        ///
                                                    oCurrencyCustom = t_curr_c != null ? t_curr_c : null, // pick the currency related stuff 
                                                    oCountry = t_ctry,
                                                    strAppGloOwn = t_curr_c != null ? (t_curr_c.AppGlobalOwner != null ? t_curr_c.AppGlobalOwner.OwnerName : "") : "",
                                                    strCurrEngName = t_ctry.CurrEngName,
                                                    strCurrSymbol = t_ctry.CurrSymbol,
                                                    strCurr3LISOSymbol = t_ctry.Curr3LISOSymbol,
                                                    strCountry = !string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code,
                                                    bl_IsCustomDisplay = t_curr_c != null ? t_curr_c.IsDisplay : false, 
                                                    bl_IsBaseCurrency  = t_curr_c != null ? t_curr_c.IsBaseCurrency : false,
                                                    strBaseRate  =  String.Format("{0:0.0000}", (t_curr_c != null ? t_curr_c.BaseRate : 0)),
                                                    numBaseRate = Math.Round((t_curr_c != null ? t_curr_c.BaseRate : 0), 4)

                                                })
                                                .OrderBy(c => c.strCountry)
                                                .ToList();

                        var oCURRModel = new CurrencyCustomModel();                        
                        oCURRModel.oUserId_Logged = _oLoggedUser.Id;
                        oCURRModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                        oCURRModel.oChurchBodyId = this._oLoggedCB.Id;
                        oCURRModel.oChurchBody = this._oLoggedCB;
                        oCURRModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                        oCURRModel.oAppGloOwnId = this._oLoggedAGO.Id;
                        oCURRModel.oAppGlobalOwn = this._oLoggedAGO;
                        oCURRModel.pageIndex = 1;
                        oCURRModel.filterIndex = filterIndex;
                        oCURRModel.setIndex = (int)setIndex;
                        oCURRModel.subSetIndex = (int)subSetIndex;

                        oCURRModel.lsCurrencyCustomModels = oCRC_CURR_CUS_List;
                        ViewData["oSetupData_CRC_CURR_CUS_List"] = oCRC_CURR_CUS_List;
                        oCSPModel.oCurrencyCustomModel = oCURRModel;
                        ViewData["oCurrencyCustomModel"] = oCURRModel;
                    }
                     
                    /// specific parameter...
                    if (setIndex != 0) return oCSPModel;
                }


                //// LSPK - customized to CB  ...8
                //if (setIndex == 0 || setIndex == 1008)
                //{
                //    var oLSPK_List_1 = _context.LanguageSpoken.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).AsNoTracking()
                //                        .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id ).ToList();  //&& c.ChurchBodyId == this._oLoggedCB.Id
                //    oLSPK_List_1 = oLSPK_List_1.Where(c =>
                //                                 (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                //    var oLSPK_List = (                            
                //                from t_lskp in oLSPK_List_1.ToList()
                //                from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_lskp.CtryAlpha3Code)
                //                from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_lskp.OwnedByChurchBodyId).DefaultIfEmpty()

                //                select new LanguageSpokenModel()
                //                {
                //                    oAppGloOwnId = t_lskp.AppGlobalOwnerId,
                //                    oAppGlobalOwn = t_lskp.AppGlobalOwner,
                //                    oChurchBodyId = t_lskp.ChurchBodyId,
                //                    oChurchBody = t_lskp.ChurchBody,
                //                    ///
                //                    oLanguageSpoken = t_lskp, 
                //                    strLanguageSpoken = t_lskp.Name,
                //                    strCountry = t_ctry != null ? (!string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code) : "", 
                //                    //
                //                    strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                //                    strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",  
                //                    strOwnershipCode = t_lskp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", // t_lskp.OwnedByChurchBodyId != null ? (t_lskp.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_lskp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                //                    strOwnershipStatus = GetAdhocStatusDesc(t_lskp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"), // t_lskp.OwnedByChurchBodyId != null ? (t_lskp.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_lskp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                //                    strSharingStatus = GetSharingStatusDesc(t_lskp.SharingStatus)
                //                })
                //                .OrderBy(c => c.strCountry).ThenBy(c => c.strLanguageSpoken)
                //                .ToList();

                //    oCSPModel.lsLanguageSpokenModels = oLSPK_List;
                //    ViewData["oSetupData_LSPK_List"] = oLSPK_List;

                //    /// specific parameter...
                //    if (setIndex != 0) return oCSPModel;
                //}


                // CPR    ...9
                if (setIndex == 0 || setIndex == 9)
                {
                    var oCPR_List_1 = _context.ChurchPeriod.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).AsNoTracking()
                        .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id ).ToList();
                    oCPR_List_1 = oCPR_List_1.Where(c =>
                                                 (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();
                    var oCPR_List = (
                                      from t_cpr in oCPR_List_1.ToList()
                                      from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_cpr.OwnedByChurchBodyId).DefaultIfEmpty()

                                      select new ChurchPeriodModel()
                                      {
                                          oAppGloOwnId = t_cpr.AppGlobalOwnerId,
                                          oAppGlobalOwn = t_cpr.AppGlobalOwner,
                                          oChurchBodyId = t_cpr.ChurchBodyId,
                                          oChurchBody = t_cpr.ChurchBody,
                                          ///
                                          oChurchPeriod = t_cpr, 
                                          strChurchPeriod = t_cpr.PeriodDesc,
                                          strFrom = t_cpr.FromDate != null ? String.Format("{0:d MMM yyyy}", (DateTime)t_cpr.FromDate) : "N/A",
                                          strTo = t_cpr.ToDate != null ? String.Format("{0:d MMM yyyy}", (DateTime)t_cpr.ToDate) : "N/A",
                                          strInterval = GetPeriodDesc(t_cpr.IntervalFreq),
                                          strPeriodType = GetPeriodDesc(t_cpr.PeriodType),
                                          strYear = t_cpr.Year.ToString(),

                                          //// only for definition
                                          //strYear = t_cpr.Status == "D" && t_cpr.Month != null ? t_cpr.Year.ToString() : "",
                                          //strSemester = t_cpr.Status == "D" && t_cpr.Month != null ? (t_cpr.Month >=1 && t_cpr.Month <= 6 ? "Semester 1" : t_cpr.Month >= 7 && t_cpr.Month <= 12 ? "Semester 2" : "") : "",
                                          //strQuarter = t_cpr.Status == "D" && t_cpr.Month != null ? (t_cpr.Month >= 1 && t_cpr.Month <= 3 ? "Quarter 1" : t_cpr.Month >= 4 && t_cpr.Month <= 6 ? "Quarter 2" : t_cpr.Month >= 7 && t_cpr.Month <= 9 ? "Quarter 3" : t_cpr.Month >= 10 && t_cpr.Month <= 12 ? "Quarter 4" : "") : "",
                                          //strMonth = t_cpr.Status == "D" && t_cpr.Month != null ? CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName((int)t_cpr.Month) : "",
                                          //strWeek = t_cpr.Status == "D" && t_cpr.Week != null ? "Week " + t_cpr.Week : "",
                                          // bl_IsIntervalDefinition = t_cpr.Status == "D",
                                          //  

                                          // bl_IsStartingPeriod = t_cpr.IsStartingPeriod,
                                          
                                          bl_IsPeriodActive = t_cpr.Status == "A",                                                                                    
                                          strStatus = GetStatusDesc(t_cpr.Status),  
                                          //
                                          strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                                          strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
                                          strOwnershipCode = t_cpr.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", // t_cpr.OwnedByChurchBodyId != null ? (t_cpr.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_cpr.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                                          strOwnershipStatus = GetAdhocStatusDesc(t_cpr.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"), // t_cpr.OwnedByChurchBodyId != null ? (t_cpr.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_cpr.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                                          strSharingStatus = GetSharingStatusDesc(t_cpr.SharingStatus)
                                      })
                                      .OrderBy(c => (c.oChurchPeriod != null ? c.oChurchPeriod.FromDate : (DateTime?)null)).ThenBy(c => (c.oChurchPeriod != null ? c.oChurchPeriod.ToDate : (DateTime?)null)).ThenBy(c => c.strStatus).ThenBy(c => c.strChurchPeriod)
                                      .ToList();

                    /// store the whole set
                    oCSPModel.lsChurchPeriodModels = oCPR_List;
                    ViewData["oSetupData_CPR_List"] = oCPR_List;

                    var oCPRModel = new ChurchPeriodModel();
                    oCPRModel.oUserId_Logged = _oLoggedUser.Id;
                    oCPRModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                    oCPRModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                    oCPRModel.pageIndex = 1;
                    // oCPRModel.filterIndex = filterIndex;
                    oCPRModel.setIndex = (int)setIndex;
                    // oCPRModel.tempSetIndex = tempSetIndex;
                    oCPRModel.subSetIndex = (int)subSetIndex;
                    ///
                    oCPRModel.lsChurchPeriodModels = oCPR_List;
                    ViewData["oSetupData_CPR_List"] = oCPR_List;
                    oCSPModel.oChurchPeriodModel = oCPRModel;

                    //  oCSPModel.tempSetIndex = oNVPModel.tempSetIndex;
                    ViewData["oRelationshipTypeModel"] = oCPRModel;


                    // CPR_CY
                    var oCPR_CY_List = new List<ChurchPeriodModel>();
                    if (subSetIndex == 0 || subSetIndex == 1 || subSetIndex == 2)
                    { 
                        oCPR_CY_List = oCPR_List.Count > 0 ? oCPR_List.Where(c => c.oChurchPeriod.PeriodType == "CY").ToList() : new List<ChurchPeriodModel>(); 
                        var oCPRModel_CY = new ChurchPeriodModel(); 
                        oCPRModel_CY.oUserId_Logged = _oLoggedUser.Id; 
                        oCPRModel_CY.oChurchBodyId_Logged = this._oLoggedCB.Id; 
                        oCPRModel_CY.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                        oCPRModel_CY.pageIndex = 1; 
                        oCPRModel_CY.setIndex = (int)setIndex; 
                        oCPRModel_CY.subSetIndex = (int)subSetIndex;
                        oCPRModel.lsChurchPeriodModels_CY = oCPR_CY_List;
                        ViewData["oSetupData_CPR_CY_List"] = oCPR_CY_List;
                        oCSPModel.oChurchPeriodModel_CY = oCPRModel;
                        ViewData["oRelationshipTypeModel_CY"] = oCPRModel_CY;
                    }
                    
                    // CPR_AY
                    var oCPR_AY_List = new List<ChurchPeriodModel>();
                    if (subSetIndex == 0 || subSetIndex == 1 || subSetIndex == 3)
                    {
                        oCPR_AY_List = oCPR_List.Count > 0 ? oCPR_List.Where(c => c.oChurchPeriod.PeriodType == "AP").ToList() : new List<ChurchPeriodModel>();
                        var oCPRModel_AY = new ChurchPeriodModel();
                        oCPRModel_AY.oUserId_Logged = _oLoggedUser.Id;
                        oCPRModel_AY.oChurchBodyId_Logged = this._oLoggedCB.Id;
                        oCPRModel_AY.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                        oCPRModel_AY.pageIndex = 1;
                        oCPRModel_AY.setIndex = (int)setIndex;
                        oCPRModel_AY.subSetIndex = (int)subSetIndex;
                        oCPRModel.lsChurchPeriodModels_AY = oCPR_AY_List;
                        ViewData["oSetupData_CPR_AY_List"] = oCPR_AY_List;
                        oCSPModel.oChurchPeriodModel_AY = oCPRModel;                        
                        ViewData["oRelationshipTypeModel_AY"] = oCPRModel_AY;
                    }                                            
                           
                    /// specific parameter...
                    if (setIndex != 0) return oCSPModel;
                }


                //// NIDT   ...10 ... any CB within AGO allowed to OWN -- add/edit/delete/share (none| some | all) 
                //if (setIndex == 0 || setIndex == 10010)
                //{
                //    var oNIDT_List_1 = _context.National_IdType.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).AsNoTracking()
                //        .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id ).ToList();
                //    oNIDT_List_1 = oNIDT_List_1.Where(c =>
                //                                 (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                //    var oNIDT_List = (
                //                from t_nidt in oNIDT_List_1.ToList()
                //                from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_nidt.CtryAlpha3Code)
                //                from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_nidt.OwnedByChurchBodyId).DefaultIfEmpty()

                //                select new National_IdTypeModel()
                //                {
                //                    oAppGloOwnId = t_nidt.AppGlobalOwnerId, 
                //                    oAppGlobalOwn = t_nidt.AppGlobalOwner,
                //                    oChurchBodyId = t_nidt.ChurchBodyId,
                //                    oChurchBody = t_nidt.ChurchBody,  
                //                    ///
                //                    oNational_IdType = t_nidt,
                //                    strNational_IdType = t_nidt.IdTypeName, 
                //                    strCountry = t_ctry != null ? (!string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code) : "",
                //                    //
                //                    strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                //                    strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
                //                    strOwnershipCode = t_nidt.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", // t_nidt.OwnedByChurchBodyId != null ? (t_nidt.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_nidt.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                //                    strOwnershipStatus = GetAdhocStatusDesc(t_nidt.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"), // t_nidt.OwnedByChurchBodyId != null ? (t_nidt.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_nidt.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                //                    strSharingStatus = GetSharingStatusDesc(t_nidt.SharingStatus)

                //                })
                //                 .OrderBy(c => c.strNational_IdType)
                //                .ToList();

                //    oCSPModel.lsNational_IdTypeModels = oNIDT_List;
                //    ViewData["oSetupData_NIDT_List"] = oNIDT_List;

                //    /// specific parameter...
                //    if (setIndex != 0) return oCSPModel;
                //}


                //// INST   11... any CB within AGO allowed to OWN -- add/edit/delete/share (none| some | all) 
                //if (setIndex == 0 || setIndex == 10011)
                //{
                //    var oINST_List_1 = _context.InstitutionType.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).AsNoTracking()
                //        .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id).ToList();
                //    oINST_List_1 = oINST_List_1.Where(c =>
                //                                 (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                //    var oINST_List = (
                //                from t_inst in oINST_List_1.ToList()
                //                from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_inst.OwnedByChurchBodyId).DefaultIfEmpty()

                //                select new InstitutionTypeModel()
                //                {
                //                    oAppGloOwnId = t_inst.AppGlobalOwnerId,
                //                    oAppGlobalOwn = t_inst.AppGlobalOwner ,
                //                    oChurchBodyId = t_inst.ChurchBodyId,
                //                    oChurchBody = t_inst.ChurchBody,
                //                    ///
                //                    oInstitutionType = t_inst, 
                //                    strInstitutionType = t_inst.Name, 
                //                    //
                //                    strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                //                    strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
                //                    strOwnershipCode = t_inst.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", // t_inst.OwnedByChurchBodyId != null ? (t_inst.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_inst.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                //                    strOwnershipStatus = GetAdhocStatusDesc(t_inst.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"), // t_inst.OwnedByChurchBodyId != null ? (t_inst.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_inst.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                //                    strSharingStatus = GetSharingStatusDesc(t_inst.SharingStatus)

                //                })
                //                .OrderBy(c => (c.oInstitutionType != null ? c.oInstitutionType.EduLevelIndex : (int?)null)).ThenBy(c => c.strInstitutionType)
                //                .ToList();

                //    oCSPModel.lsInstitutionTypeModels = oINST_List;
                //    ViewData["oSetupData_INST_List"] = oINST_List;

                //    /// specific parameter...
                //    if (setIndex != 0) return oCSPModel;
                //}


                //// CTT   12... any CB within AGO allowed to OWN -- add/edit/delete/share (none| some | all) 
                //if (setIndex == 0 || setIndex == 10012)
                //{
                //    var oCTT_List_1 = _context.CertificateType.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).AsNoTracking()
                //        .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id).ToList();
                //    oCTT_List_1 = oCTT_List_1.Where(c =>
                //                                 (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                //    var oCTT_List = (
                //                from t_ctt in oCTT_List_1.ToList()
                //                from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_ctt.OwnedByChurchBodyId).DefaultIfEmpty()

                //                select new CertificateTypeModel()
                //                {
                //                    oAppGloOwnId = t_ctt.AppGlobalOwnerId,
                //                    oAppGlobalOwn = t_ctt.AppGlobalOwner,
                //                    oChurchBodyId = t_ctt.ChurchBodyId,
                //                    oChurchBody = t_ctt.ChurchBody,
                //                    ///
                //                    oCertificateType = t_ctt,
                //                    strCertificateType = t_ctt.CertName,
                //                    //
                //                    strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                //                    strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
                //                    strOwnershipCode = t_ctt.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", // t_ctt.OwnedByChurchBodyId != null ? (t_ctt.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_ctt.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                //                    strOwnershipStatus = GetAdhocStatusDesc(t_ctt.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"), // t_ctt.OwnedByChurchBodyId != null ? (t_ctt.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_ctt.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                //                    strSharingStatus = GetSharingStatusDesc(t_ctt.SharingStatus)

                //                })
                //                .OrderBy(c => (c.oCertificateType != null ? c.oCertificateType.CertLevel : (int?)null)).ThenBy(c => c.strCertificateType)
                //                .ToList();

                //    oCSPModel.lsCertificateTypeModels = oCTT_List;
                //    ViewData["oSetupData_CTT_List"] = oCTT_List;

                //    /// specific parameter...
                //    if (setIndex != 0) return oCSPModel;
                //}


                // RLT   13... any CB within AGO allowed to OWN -- add/edit/delete/share (none| some | all) 
                if (setIndex == 0 || setIndex == 13)
                {
                    var oRLT_List_1 = _context.RelationshipType.AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id).ToList();                    
                    var oRLT_List = (
                                from t_rlt in oRLT_List_1.ToList()
                                from t_rlt_m in oRLT_List_1.ToList().Where(c => c.RelationCode == t_rlt.RelationshipTypeMalePairCode).DefaultIfEmpty()
                                from t_rlt_f in oRLT_List_1.ToList().Where(c => c.RelationCode == t_rlt.RelationshipTypeFemalePairCode).DefaultIfEmpty()
                                from t_rlt_g in oRLT_List_1.ToList().Where(c => c.RelationCode == t_rlt.RelationshipTypeGenericPairCode).DefaultIfEmpty()

                                select new RelationshipTypeModel()
                                {
                                    oAppGloOwnId = t_rlt.AppGlobalOwnerId,
                                    oAppGlobalOwn = t_rlt.AppGlobalOwner,
                                    oChurchBodyId = t_rlt.ChurchBodyId,
                                    oChurchBody = t_rlt.ChurchBody,
                                    ///
                                    oRelationshipType = t_rlt,
                                    strRelationshipType = t_rlt.Name,
                                    strRelationshipTypeMalePairId = t_rlt_m != null ? t_rlt_m.Name : "",
                                    strRelationshipTypeFemalePairId = t_rlt_f != null ? t_rlt_f.Name : "",
                                    strRelationshipTypeGenericPairId = t_rlt_g != null ? t_rlt_g.Name : "",
                                    //bl_IsChild = t_rlt.IsChild,
                                    //bl_IsSpouse = t_rlt.IsSpouse,
                                    //bl_IsParent = t_rlt.IsParent
                                    
                                })
                                .OrderBy(c => (c.oRelationshipType != null ? c.oRelationshipType.LevelIndex : (int?)null))
                                .ThenBy(c => (c.oRelationshipType != null ? c.oRelationshipType.RelationCode : (int?)null))
                                .ThenBy(c => c.strRelationshipType)
                                .ToList();
 

                    var oRLTModel = new RelationshipTypeModel();
                    oRLTModel.oUserId_Logged = _oLoggedUser.Id;
                    oRLTModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                    oRLTModel.oChurchBodyId_Logged = this._oLoggedCB.Id;                    
                    oRLTModel.oUserId_Logged = this._oLoggedUser.Id;                    
                    oRLTModel.pageIndex = 1;
                    // oRLTModel.filterIndex = filterIndex;
                    oRLTModel.setIndex = (int)setIndex;
                    // oRLTModel.tempSetIndex = tempSetIndex;
                    oRLTModel.subSetIndex = (int)subSetIndex;
                    ///
                    oRLTModel.lsRelationshipTypeModels = oRLT_List;
                    ViewData["oSetupData_RLT_List"] = oRLT_List;
                    oCSPModel.oRelationshipTypeModel = oRLTModel;
                    //  oCSPModel.tempSetIndex = oNVPModel.tempSetIndex;
                    ViewData["oRelationshipTypeModel"] = oRLTModel;


                    /// specific parameter...
                    if (setIndex != 0) return oCSPModel;
                }


                // CU   14... any CB within AGO allowed to OWN -- add/edit/delete/share (none| some | all) 
                //CBA ... Church Body Units
                if (setIndex == 0 || setIndex == 4 || setIndex == 14)
                {  // view only the subscribed CB

                    //var oNVP_List_All = _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner) //.Include(t => t.OwnedByChurchBody)
                    //                    .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id &&
                    //                    ((c.SharingStatus == "N" && c.OwnedByChurchBodyId == this._oLoggedCB.Id) || c.SharingStatus != "N")).ToList();  // exclude all non-shared and not owned


                    //oNVP_List_All = oNVP_List_All.Where(c =>
                    //                   (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();



                    var oCU_List_All = _context.ChurchUnit.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.ContactInfo).Include(t => t.Country)
                                        .Where(c => c.AppGlobalOwnerId == _oLoggedAGO.Id && (numCodeCriteria_1 == null || (numCodeCriteria_1 != null && c.ParentUnitId == numCodeCriteria_1)) && // (c.ParentUnitCBId == null || (c.ParentUnitCBId != null && c.ParentUnitCBId == numCodeCriteria_1)) &&
                                            (c.SharingStatus == "N" && c.OwnedByChurchBodyId == this._oLoggedCB.Id || c.SharingStatus != "N") &&
                                            (c.OrgType == "GB" || c.OrgType == "IB" || c.OrgType == "DP" || c.OrgType == "CE" || c.OrgType == "CO" || c.OrgType == "CG" || c.OrgType == "SC"))                            
                                        .ToList();
                     
                    oCU_List_All = oCU_List_All.Where(c =>
                                           (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                           (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                           (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB))))
                                        .ToList();
                    
                    var tmpCU_List_All = oCU_List_All.ToList();

                    var oCUModel_List_All = (
                        from t_cu in oCU_List_All
                        from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == t_cu.AppGlobalOwnerId)
                        from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.OwnedByChurchBodyId)
                        from t_cl in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.TargetChurchLevelId)
                        from t_cu_p in _context.ChurchUnit.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.ParentUnitId).DefaultIfEmpty()
                        from t_cb_p in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.ParentUnitCBId).DefaultIfEmpty()
                        from t_ci in _context.ContactInfo.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.ChurchBodyId == t_cu.Id && c.Id == t_cu.ContactInfoId).DefaultIfEmpty()
                        from t_cl_p in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == (t_cu_p != null ? t_cu_p.TargetChurchLevelId : (int?)null)).DefaultIfEmpty()
                        from t_ci_ago in _context.ContactInfo.Include(t => t.Country).AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cl.AppGlobalOwnerId && c.ChurchBodyId == null && c.Id == t_ago.ContactInfoId).DefaultIfEmpty()
                        from t_cu_sp in _context.ChurchUnit.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.SupervisedByUnitId).DefaultIfEmpty()
                        from t_cb_sp in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.SupervisedByUnitCBId).DefaultIfEmpty()

                            // from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_cu.OwnedByChurchBodyId).DefaultIfEmpty()

                        select new ChurchUnitModel()
                        {
                            oAppGloOwnId = t_cu.AppGlobalOwnerId,
                            oAppGlobalOwn = t_ago,
                            oChurchBody = t_cb, // t_cu.OwnedByChurchBody,
                            oChurchBodyId = t_cb != null ? t_cb.Id : (int?)null,
                            /// 
                            oChurchUnit = t_cu,
                            strChurchUnit = t_cu.Name,
                            strAppGlobalOwn = t_ago.OwnerName + (!string.IsNullOrEmpty(t_ago.OwnerName) ? (t_ci_ago != null ? (t_ci_ago.Country != null ? t_ci_ago.Country.EngName : "") : "") : ""),
                            numSubUnitsCount = tmpCU_List_All.Count(c=> c.ParentUnitId == t_cu.Id), // > 0, // has subunits
                            //                            
                            strParentChurchUnit = t_cu_p != null ? t_cu_p.Name : "",
                            strParentUnitOrgType = t_cu_p != null ? GetChuOrgTypeDesc(t_cu_p.OrgType) : "",
                            strParentUnitCB = t_cb_p != null ? t_cb_p.Name : string.Empty,
                            // numParentUnitCBId = t_cu_p != null ? (t_cu_p.OwnedByChurchBody != null ? t_cu_p.OwnedByChurchBody.Id : (int?)null) : (int?)null, 
                            numParentUnitCLId = t_cb_p != null ? t_cb_p.ChurchLevelId : (int?)null,
                            ///
                            strChurchBody = t_cb != null ? t_cb.Name : "",
                            strRootChurchBodyCode = t_cb != null ? t_cb.RootChurchCode : "",
                            strCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                            //strCBLevel_sup = t_cb_sp != null ? (t_cb_sp.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_sp.ChurchLevel.CustomName) ? t_cb_sp.ChurchLevel.CustomName : t_cb_sp.ChurchLevel.Name) : "") : "",
                            ///
                            strSupervisedByUnit = t_cu_sp != null ? t_cu_sp.Name : "None. (choose supervising unit)",
                            strSupervisedByUnitOrgType = t_cu_sp != null ? GetChuOrgTypeDesc(t_cu_sp.OrgType) : "",
                            strSupervisedByUnitCB = t_cb_sp != null ? t_cb_sp.Name : "None. (choose unit congregation)",
                            numSupervisedByUnitCLId = t_cb_sp != null ? t_cb_sp.ChurchLevelId : (int?)null,
                            strCBLevel_sup = t_cb_sp != null ? (t_cb_sp.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_sp.ChurchLevel.CustomName) ? t_cb_sp.ChurchLevel.CustomName : t_cb_sp.ChurchLevel.Name) : "") : "",
                            ///
                            numChurchLevel_Index = t_cl.LevelIndex,
                            strTargetChurchLevel = (t_cu.TargetChurchLevelId == null && t_cu.OrgType == "CR") ? "Church Root" : (!string.IsNullOrEmpty(t_cl.CustomName) ? t_cl.CustomName : t_cl.Name),
                            strDateFormed = t_cu.DateFormed != null ? DateTime.Parse(t_cu.DateFormed.ToString()).ToString("d MMM, yyyy", CultureInfo.InvariantCulture) : "",
                            strDateInnaug = t_cu.DateInnaug != null ? DateTime.Parse(t_cu.DateInnaug.ToString()).ToString("d MMM, yyyy", CultureInfo.InvariantCulture) : "",
                            strDateDeactive = t_cu.DateDeactive != null ? DateTime.Parse(t_cu.DateDeactive.ToString()).ToString("d MMM, yyyy", CultureInfo.InvariantCulture) : "",
                            strOrgType = GetChuOrgTypeDesc(t_cu.OrgType),
                            strGenderStatus = GetGenderDesc(t_cu.GenderStatus),

                            //strFaithTypeCategory = t_ago.strFaithTypeCategory, // t_ago != null ? ((!string.IsNullOrEmpty(t_ago.strFaithTypeCategory) && !string.IsNullOrEmpty(t_ago.strFaithTypeStream) ? t_ago.strFaithTypeCategory + ", " + t_ago.strFaithTypeStream : t_ago.strFaithTypeCategory + t_ago.strFaithTypeStream).Trim()) : "",
                            //strCountry = t_cu.Country != null ? (!string.IsNullOrEmpty(t_cu.Country.EngName) ? t_cu.Country.EngName : t_cu.Country.CtryAlpha3Code) : t_cu.CtryAlpha3Code,  //t_cu.Country != null ? t_cu.Country.EngName : "",
                            //strCountryRegion = t_cu.CountryRegion != null ? t_cu.CountryRegion.Name : "",
                            strParentUnit_HeaderDesc = t_cl_p != null ? (!string.IsNullOrEmpty(t_cl_p.CustomName) ? t_cl_p.CustomName : "Parent Unit") : "Parent Unit",
                            strCongLoc = t_ci != null ? (!string.IsNullOrEmpty(t_ci.Location) && !string.IsNullOrEmpty(t_ci.City) ? t_ci.Location + ", " + t_ci.City : t_ci.Location + t_ci.City).Trim() : "",
                            // strCongLoc2 = (t_cu.CountryRegion != null && t_cu.Country != null ? t_cu.CountryRegion.Name + ", " + t_cu.Country.EngName : (t_cu.CountryRegion != null ? t_cu.CountryRegion.Name : "") + (t_cu.Country != null ? t_cu.Country.EngName : "")).Trim(),
                            // bl_IsActivated = t_cu.Status == "A",
                            //bl_IsUnitGen = t_cu.IsUnitGen != null ? (bool)t_cu.IsUnitGen : false,
                            //bl_IsAgeBracketOverlaps = t_cu.IsAgeBracketOverlaps != null ? (bool)t_cu.IsAgeBracketOverlaps : false,
                            //
                            dtCreated = t_cu.Created,
                            //     
                            strStatus = GetStatusDesc(t_cu.Status),
                            strOwnershipCode = t_cu.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", //t_cb.Id == t_cu.OwnedByChurchBodyId ? "O" : "I",
                            strOwnershipStatus = GetAdhocStatusDesc(t_cu.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                            strChurchWorkStatus = GetAdhocStatusDesc(t_cu.ChurchWorkStatus),
                            strSharingStatus = GetSharingStatusDesc(t_cu.SharingStatus),

                            strChurchLevel_OwnedByCB = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",
                            strOwnedByChurchBody = t_cb != null ? t_cb.Name : "",
                            strUnitLogo = t_cu.UnitLogo

                        })
                        .OrderBy(c => (c.oChurchUnit != null ? c.oChurchUnit.OrgType : null))
                            .ThenBy(c => (c.oChurchUnit != null ? c.oChurchUnit.OrderIndex : (int?)null)) 
                            .ThenBy(c => (c.oChurchUnit != null ? c.oChurchUnit.Name : null)) 
                        .ToList();


                    var oCUModel = new ChurchUnitModel();
                    oCUModel.oUserId_Logged = _oLoggedUser.Id;
                    oCUModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                    oCUModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                    oCUModel.pageIndex = 1;
                    // oCUModel.filterIndex = filterIndex;
                    oCUModel.setIndex = (int)setIndex;
                    // oCUModel.tempSetIndex = tempSetIndex;
                    oCUModel.subSetIndex = (int)subSetIndex;
                    ///
                    var lsCUCurrParam = oCUModel_List_All; // setIndex != 0 ? oCUModel_List_All : oCUModel_List_All.Where(c => c.oAppUtilityNVP.NVPCode == strCodeCriteria_2).ToList();
                    if (setIndex != 0)
                    {
                        lsCUCurrParam = lsCUCurrParam.Where(c =>    
                                                       ((setIndex == 4 && (c.oChurchUnit.OrgType == "GB" || c.oChurchUnit.OrgType == "IB")) ||
                                                        (setIndex == 14 && (c.oChurchUnit.OrgType == "DP" || c.oChurchUnit.OrgType == "CE" || c.oChurchUnit.OrgType == "CO" || c.oChurchUnit.OrgType == "CG" || c.oChurchUnit.OrgType == "SC"))))
                                                     .ToList();
                    }

                    oCUModel.lsChurchUnitModels_All = oCUModel_List_All;
                    oCUModel.lsChurchUnitModels = lsCUCurrParam; // oCU_List;
                    ViewData["oSetupData_CU_List"] = oCUModel_List_All;
                    oCSPModel.oChurchUnitModel = oCUModel;
                    //  oCSPModel.tempSetIndex = oNVPModel.tempSetIndex;
                    ViewData["oChurchUnitModel"] = oCUModel;


                    /// specific parameter...
                    if (setIndex != 0) return oCSPModel;
                }
                 

                //// CR   15... any CB within AGO allowed to OWN -- add/edit/delete/share (none| some | all) 
                //if (setIndex == 0 || setIndex == 10015)
                //{
                //    var oCR_List_1 = _context.ChurchRank.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).AsNoTracking()
                //        .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id).ToList();
                //    oCR_List_1 = oCR_List_1.Where(c =>
                //                                 (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                //    var oCR_List = (
                //                from t_cr in oCR_List_1.ToList()
                //                from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_cr.OwnedByChurchBodyId).DefaultIfEmpty()

                //                select new ChurchRankModel()
                //                {
                //                    oAppGloOwnId = t_cr.AppGlobalOwnerId,
                //                    oAppGlobalOwn = t_cr.AppGlobalOwner,
                //                    oChurchBodyId = t_cr.ChurchBodyId,
                //                    oChurchBody = t_cr.ChurchBody,
                //                    ///
                //                    oChurchRank = t_cr,
                //                    strChurchRank = t_cr.RankName, 
                //                    //
                //                    strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                //                    strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
                //                    strOwnershipCode = t_cr.OwnedByChurchBodyId != null ? (t_cr.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_cr.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                //                    strOwnershipStatus = t_cr.OwnedByChurchBodyId != null ? (t_cr.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_cr.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                //                    strSharingStatus = GetSharingStatusDesc(t_cr.SharingStatus)

                //                })
                //                .OrderBy(c => (c.oChurchRank != null ? c.oChurchRank.RankIndex : (int?)null)).ThenBy(c => c.strChurchRank)
                //                .ToList();

                //    oCSPModel.lsChurchRankModels = oCR_List;
                //    ViewData["oSetupData_CR_List"] = oCR_List;

                //    /// specific parameter...
                //    if (setIndex != 0) return oCSPModel;
                //}


                // CRL   16... any CB within AGO allowed to OWN -- add/edit/delete/share (none| some | all) 
                if (setIndex == 0 || setIndex == 16)
                {
                    var oCRL_List_1 = _context.ChurchRole.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.ContactInfo).Include(t => t.Country)
                            .Where(c => c.AppGlobalOwnerId == _oLoggedAGO.Id && (numCodeCriteria_1 == null || (numCodeCriteria_1 != null && c.ParentRoleId == numCodeCriteria_1)) && // c.TargetChurchLevel.LevelIndex >= this._oLoggedCB.ChurchLevel.LevelIndex &&
                                       (c.OrgType == "CP" || c.OrgType == "TM")).ToList();

                    oCRL_List_1 = oCRL_List_1.Where(c =>
                                       (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();
                    var tmpCRL_List_1 = oCRL_List_1;

                    var oCRL_List = (
                        from t_crl in oCRL_List_1
                        from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == t_crl.AppGlobalOwnerId)
                        from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_crl.AppGlobalOwnerId && c.Id == t_crl.OwnedByChurchBodyId)
                        from t_cl in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_crl.AppGlobalOwnerId && c.Id == t_crl.TargetChurchLevelId)
                        from t_cu_apl in _context.ChurchUnit.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_crl.AppGlobalOwnerId && c.Id == t_crl.ApplyToChurchUnitId).DefaultIfEmpty()
                        from t_crl_p in _context.ChurchRole.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_crl.AppGlobalOwnerId && c.Id == t_crl.ParentRoleId).DefaultIfEmpty()
                        from t_cb_p in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_crl.AppGlobalOwnerId && c.Id == t_crl.ParentRoleCBId).DefaultIfEmpty()
                        from t_cl_p in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_crl.AppGlobalOwnerId && c.Id == (t_crl_p != null ? t_crl_p.TargetChurchLevelId : (int?)null)).DefaultIfEmpty()

                        select new ChurchRoleModel()
                        {
                            oAppGloOwnId = t_crl.AppGlobalOwnerId,
                            oAppGlobalOwn = t_ago,
                            oChurchBody = t_cb, // t_crl.OwnedByChurchBody,
                            oChurchBodyId = t_cb != null ? t_cb.Id : (int?)null,
                            /// 
                            oChurchRole = t_crl,
                            strChurchRole = t_crl.Name,
                            //strAppGlobalOwn = t_ago.OwnerName + (!string.IsNullOrEmpty(t_ago.OwnerName) ? (t_ci_ago != null ? (t_ci_ago.Country != null ? t_ci_ago.Country.EngName : "") : "") : ""),
                            //                            
                            strParentRole = t_crl_p != null ? t_crl_p.Name : "",   //None. (choose supervising role)
                            strParentRoleOrgType = t_crl_p != null ? GetChuOrgTypeDesc(t_crl_p.OrgType) : "",
                            strParentRoleCB = t_cb_p != null ? t_cb_p.Name : "",
                            // numParentUnitCBId = t_crl_p != null ? (t_crl_p.OwnedByChurchBody != null ? t_crl_p.OwnedByChurchBody.Id : (int?)null) : (int?)null, 
                            numParentRoleCLId = t_cb_p != null ? t_cb_p.ChurchLevelId : (int?)null,
                            bl_IsParentRole = t_crl.OrgType == "TM" || tmpCRL_List_1.Count(c => c.ParentRoleId == t_crl.Id) > 0, // has subroles
                            numSubRolesCount = tmpCRL_List_1.Count(c => c.ParentRoleId == t_crl.Id),
                            ///
                            strChurchBody = t_cb != null ? t_cb.Name : "",
                            strRootChurchBodyCode = t_cb != null ? t_cb.RootChurchCode : "",
                            strCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",
                            ///
                            numChurchLevel_Index = t_cl.LevelIndex,
                            strTargetChurchLevel = (t_crl.TargetChurchLevelId == null && t_crl.OrgType == "CR") ? "Church Root" : (!string.IsNullOrEmpty(t_cl.CustomName) ? t_cl.CustomName : t_cl.Name),
                            strOrgType = GetChuOrgTypeDesc(t_crl.OrgType),
                            strGenderStatus = GetGenderDesc(t_crl.ApplyToGender),

                            strApplyToChurchUnit = t_crl.IsApplyToMainstreamUnit ? "Mainstream" : (t_cu_apl != null ? t_cu_apl.Name : ""),

                            //strFaithTypeCategory = t_ago.strFaithTypeCategory, // t_ago != null ? ((!string.IsNullOrEmpty(t_ago.strFaithTypeCategory) && !string.IsNullOrEmpty(t_ago.strFaithTypeStream) ? t_ago.strFaithTypeCategory + ", " + t_ago.strFaithTypeStream : t_ago.strFaithTypeCategory + t_ago.strFaithTypeStream).Trim()) : "",
                            //strCountry = t_crl.Country != null ? (!string.IsNullOrEmpty(t_crl.Country.EngName) ? t_crl.Country.EngName : t_crl.Country.CtryAlpha3Code) : t_crl.CtryAlpha3Code,  //t_crl.Country != null ? t_crl.Country.EngName : "",
                            //strCountryRegion = t_crl.CountryRegion != null ? t_crl.CountryRegion.Name : "",
                            strParentUnit_HeaderDesc = t_cl_p != null ? (!string.IsNullOrEmpty(t_cl_p.CustomName) ? t_cl_p.CustomName : "Supervising Role") : "Supervising Role",
                            bl_IsActivated = t_crl.Status == "A",

                            strStatus = GetStatusDesc(t_crl.Status),
                            strOwnershipCode = t_crl.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", //t_cb.Id == t_crl.OwnedByChurchBodyId ? "O" : "I",
                            strOwnershipStatus = GetAdhocStatusDesc(t_crl.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                            strChurchWorkStatus = GetAdhocStatusDesc(t_crl.ChurchWorkStatus),
                            strSharingStatus = GetSharingStatusDesc(t_crl.SharingStatus),

                            strChurchLevel_OwnedByCB = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",
                            strOwnedByChurchBody = t_cb != null ? t_cb.Name : "",

                        })
                            .OrderBy(c => (c.oChurchRole != null ? c.oChurchRole.RankIndex : (int?)null))
                            .ThenBy(c => c.strParentRole).ThenBy(c => c.strChurchRole)
                            .ToList();
                     

                    var oCRLModel = new ChurchRoleModel();
                    oCRLModel.oUserId_Logged = _oLoggedUser.Id;
                    oCRLModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                    oCRLModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                    oCRLModel.pageIndex = 1;
                    // oCRLModel.filterIndex = filterIndex;
                    oCRLModel.setIndex = (int)setIndex;
                    // oCRLModel.tempSetIndex = tempSetIndex;
                    oCRLModel.subSetIndex = (int)subSetIndex;
                    ///
                    oCRLModel.lsChurchRoleModels = oCRL_List;
                    ViewData["oSetupData_CRL_List"] = oCRL_List;
                    oCSPModel.oChurchRoleModel = oCRLModel;
                    //  oCSPModel.tempSetIndex = oNVPModel.tempSetIndex;
                    ViewData["oChurchRoleModel"] = oCRLModel;
                     

                    /// specific parameter...
                    if (setIndex != 0) return oCSPModel;
                }


                //// CLA   17... any CB within AGO allowed to OWN -- add/edit/delete/share (none| some | all) 
                //if (setIndex == 0 || setIndex == 10017)
                //{
                //    var oCLA_List_1 = _context.ChurchlifeActivity.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).AsNoTracking()
                //        .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id).ToList();
                //    oCLA_List_1 = oCLA_List_1.Where(c =>
                //                                 (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                //    var oCLA_List = (
                //                from t_cla in oCLA_List_1.ToList()
                //                from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_cla.OwnedByChurchBodyId).DefaultIfEmpty()

                //                select new ChurchlifeActivityModel()
                //                {
                //                    oAppGloOwnId = t_cla.AppGlobalOwnerId,
                //                    oAppGlobalOwn = t_cla.AppGlobalOwner,
                //                    oChurchBodyId = t_cla.ChurchBodyId,
                //                    oChurchBody = t_cla.ChurchBody,
                //                    ///
                //                    oChurchlifeActivity = t_cla,
                //                    strChurchlifeActivity = t_cla.Name,
                //                    strActivityType = GetChurchActivityDesc(t_cla.ActivityType), 
                //                    //bl_IsMainline = t_cla.IsMainlineActivity,
                //                    //bl_IsService = t_cla.IsChurchService,
                //                     //
                //                    strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                //                    strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
                //                    strOwnershipCode = t_cla.OwnedByChurchBodyId != null ? (t_cla.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_cla.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                //                    strOwnershipStatus = t_cla.OwnedByChurchBodyId != null ? (t_cla.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_cla.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                //                    strSharingStatus = GetSharingStatusDesc(t_cla.SharingStatus)
                //                })
                //                .OrderBy(c => c.strActivityType).ThenBy(c => c.strChurchlifeActivity)
                //                .ToList();

                //    oCSPModel.lsChurchlifeActivityModels = oCLA_List;
                //    ViewData["oSetupData_CLA_List"] = oCLA_List;

                //    /// specific parameter...
                //    if (setIndex != 0) return oCSPModel;
                //}


                //// CLARD   18... any CB within AGO allowed to OWN -- add/edit/delete/share (none| some | all) 
                //if (setIndex == 0 || setIndex == 10018)
                //{
                //    var oCLARD_List_1 = _context.ChurchlifeActivityReqDef.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).AsNoTracking()
                //        .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id).ToList();
                //    oCLARD_List_1 = oCLARD_List_1.Where(c =>
                //                                 (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                //    var oCLARD_List = (
                //                from t_clard in oCLARD_List_1.ToList()
                //                from t_cla in _context.ChurchlifeActivity.AsNoTracking()  .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_clard.ChurchlifeActivityId)
                //                from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_clard.OwnedByChurchBodyId).DefaultIfEmpty()

                //                select new ChurchlifeActivityReqDefModel()
                //                {
                //                    oAppGloOwnId = t_clard.AppGlobalOwnerId,
                //                    oAppGlobalOwn = t_clard.AppGlobalOwner,
                //                    oChurchBodyId = t_clard.ChurchBodyId,
                //                    oChurchBody = t_clard.ChurchBody,
                //                    ///
                //                    oChurchlifeActivityReqDef = t_clard,
                //                    strChurchlifeActivityReqDef = t_clard.RequirementDesc,
                //                    strChurchlifeActivity = t_cla != null ? t_cla.Name : "",
                //                    strFrequency = GetPeriodDesc(t_clard.OccurFreqCode), 
                //                    //bl_IsRequired  = t_clard.IsRequired, 
                //                    //bl_IsSequenced = t_clard.IsSequenced,
                //                    ///
                //                    strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                //                    strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
                //                    strOwnershipCode = t_clard.OwnedByChurchBodyId != null ? (t_clard.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_clard.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                //                    strOwnershipStatus = t_clard.OwnedByChurchBodyId != null ? (t_clard.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_clard.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                //                    strSharingStatus = GetSharingStatusDesc(t_clard.SharingStatus)
                //                })
                //                .OrderBy(c => (c.oChurchlifeActivityReqDef != null ? c.oChurchlifeActivityReqDef.OrderIndex : (int?)null)).ThenBy(c => c.strChurchlifeActivityReqDef)
                //                .ToList();

                //    oCSPModel.lsChurchlifeActivityReqDefModels = oCLARD_List;
                //    ViewData["oSetupData_CLARD_List"] = oCLARD_List;

                //    /// specific parameter...
                //    if (setIndex != 0) return oCSPModel;
                //}


                //// CMT   19... any CB within AGO allowed to OWN -- add/edit/delete/share (none| some | all) 
                //if (setIndex == 0 || setIndex == 10019)
                //{
                //    var oCMT_List_1 = _context.ChurchMemType.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).AsNoTracking()
                //        .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id).ToList();
                //    oCMT_List_1 = oCMT_List_1.Where(c =>
                //                                 (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                //    var oCMT_List = (
                //                from t_cmt in oCMT_List_1.ToList()
                //                from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_cmt.OwnedByChurchBodyId).DefaultIfEmpty()

                //                select new ChurchMemTypeModel()
                //                {
                //                    oAppGloOwnId = t_cmt.AppGlobalOwnerId,
                //                    oAppGlobalOwn = t_cmt.AppGlobalOwner,
                //                    oChurchBodyId = t_cmt.ChurchBodyId,
                //                    oChurchBody = t_cmt.ChurchBody,
                //                    ///
                //                    oChurchMemType = t_cmt,
                //                    strChurchMemType = t_cmt.Name,
                //                    bl_ApplyToClergyOnly = t_cmt.ApplyToClergyOnly,
                //                    //
                //                    strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                //                    strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
                //                    strOwnershipCode = t_cmt.OwnedByChurchBodyId != null ? (t_cmt.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_cmt.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                //                    strOwnershipStatus = t_cmt.OwnedByChurchBodyId != null ? (t_cmt.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_cmt.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                //                    strSharingStatus = GetSharingStatusDesc(t_cmt.SharingStatus)

                //                })
                //                .OrderBy(c => (c.oChurchMemType != null ? c.oChurchMemType.TypeLevelIndex : (int?)null)).ThenBy(c => c.strChurchMemType)
                //                .ToList();

                //    oCSPModel.lsChurchMemTypeModels = oCMT_List;
                //    ViewData["oSetupData_CMT_List"] = oCMT_List;

                //    /// specific parameter...
                //    if (setIndex != 0) return oCSPModel;
                //}


                //// CMS   20... any CB within AGO allowed to OWN -- add/edit/delete/share (none| some | all) 
                //if (setIndex == 0 || setIndex == 10020)
                //{
                //    var oCMS_List_1 = _context.ChurchMemStatus.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).AsNoTracking()
                //        .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id).ToList();
                //    oCMS_List_1 = oCMS_List_1.Where(c =>
                //                                 (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                //    var oCMS_List = (
                //                from t_cms in oCMS_List_1.ToList()
                //                from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_cms.OwnedByChurchBodyId).DefaultIfEmpty()

                //                select new ChurchMemStatusModel()
                //                {
                //                    oAppGloOwnId = t_cms.AppGlobalOwnerId,
                //                    oAppGlobalOwn = t_cms.AppGlobalOwner,
                //                    oChurchBodyId = t_cms.ChurchBodyId,
                //                    oChurchBody = t_cms.ChurchBody,
                //                    ///
                //                    oChurchMemStatus = t_cms,
                //                    strChurchMemStatus = t_cms.Name,
                //                    bl_IsAvailable  = t_cms.IsAvailable,
                //                    bl_IsDeceased  = t_cms.IsDeceased,
                //                    //
                //                    strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                //                    strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
                //                    strOwnershipCode = t_cms.OwnedByChurchBodyId != null ? (t_cms.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_cms.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                //                    strOwnershipStatus = t_cms.OwnedByChurchBodyId != null ? (t_cms.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_cms.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                //                    strSharingStatus = GetSharingStatusDesc(t_cms.SharingStatus)

                //                })
                //                .OrderBy(c => (c.oChurchMemStatus != null ? c.oChurchMemStatus.OrderIndex : (int?)null)).ThenBy(c => c.strChurchMemStatus)
                //                .ToList();

                //    oCSPModel.lsChurchMemStatusModels = oCMS_List;
                //    ViewData["oSetupData_CMS_List"] = oCMS_List;

                //    /// specific parameter...
                //    if (setIndex != 0) return oCSPModel;
                //}




                // CPRD  21 --- similar to NVP


                // MCCF  ---  CT  22 --- similar to NVP 25 --- any of the submodule
                if (setIndex == 0 || setIndex == 25 || setIndex == 21)
                { 
                    var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.OwnedByChurchBody)
                                       .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id &&
                                               (c.NVPCode == "MCCF" || c.NVPCode == "CPRD" || c.NVPCode == "CTS")).ToList();

                    oNVP_List_1 = oNVP_List_1.Where(c =>
                                       (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    var oNVP_List = (
                                    from t_nvp in oNVP_List_1.ToList()
                                    from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == t_nvp.AppGlobalOwnerId)
                                        // from t_nvp_c in _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_nvp.AppGlobalOwnerId && c.Id == t_nvp.NVPCategoryId).DefaultIfEmpty()
                                        // from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_nvp.CtryAlpha3Code).DefaultIfEmpty()
                                    from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_nvp.OwnedByChurchBodyId).DefaultIfEmpty()

                                    select new AppUtilityNVPModel()
                                    {
                                        oAppGloOwnId = t_nvp.AppGlobalOwnerId,
                                        oAppGlobalOwn = t_ago, //t_nvp.AppGlobalOwner,
                                        oChurchBodyId = t_nvp.OwnedByChurchBodyId,
                                        oChurchBody = t_nvp.OwnedByChurchBody,
                                        ///
                                        oAppUtilityNVP = t_nvp,
                                        modOwnedByChurchBody = t_cb_o,

                                        // strAppUtilityNVP = t_nvp.ValueType == "T" || t_nvp.ValueType == null ? t_nvp.NVPValue : (t_nvp.ValueType == "N" ? t_nvp.NVPNumVal.ToString() : (t_nvp.ValueType == "D" ? (t_nvp.NVPFromDate != null && t_nvp.NVPToDate != null ? (String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPFromDate) + " - " + String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPToDate)) : ((t_nvp.NVPFromDate != null ? String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPFromDate) : "") + ((t_nvp.NVPToDate != null ? String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPToDate) : "")))) : null)),
                                        //
                                        strNVPValue_Cumm = t_nvp.ValueType == "T" ? t_nvp.NVPValue :
                                                     (t_nvp.ValueType == "N" ? String.Format("{0:N0}", t_nvp.NVPNumVal) + (" " + GetPeriodDesc(t_nvp.OccurFreqCode)).ToLower() + (t_nvp.NVPNumVal > 1 && !string.IsNullOrEmpty(t_nvp.OccurFreqCode) ? "s" : "") :
                                                     (t_nvp.ValueType == "D" ? ((t_nvp.NVPFromDate != null ? DateTime.Parse(t_nvp.NVPFromDate.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "") +
                                                     (t_nvp.NVPToDate != null ? "-" + DateTime.Parse(t_nvp.NVPFromDate.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "")) : null)),

                                        strNVPValue = t_nvp.NVPValue,
                                        numAppUtilityNVP = t_nvp.ValueType == "N" ? t_nvp.NVPNumVal : (int?)null,
                                        dt1AppUtilityNVP = t_nvp.ValueType == "D" ? t_nvp.NVPFromDate : (DateTime?)null,
                                        dt2AppUtilityNVP = t_nvp.ValueType == "D" ? t_nvp.NVPToDate : (DateTime?)null,
                                        ///
                                        strNVPCode = t_nvp.NVPCode,  // MCCF
                                        strNVPSubCode = t_nvp.NVPSubCode,  // AUTO=Y/N, PFX, PFX_DLM, SFX, SFX_DLM, LDZR
                                        strNVPTag = GetNVPTagDesc(t_nvp.NVPCode),
                                        strNVPSubTag = GetNVPSubTagDesc(t_nvp.NVPSubCode),

                                        //numOrderIndex = t_nvp.OrderIndex,
                                        //strNVPCategory = t_nvp_c != null ? t_nvp_c.NVPValue : "",
                                        //strCountry = t_ctry != null ? (!string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code) : "",
                                        // strOccurFrequency = GetPeriodDesc(t_nvp.OccurFreqCode),
                                        //strNVPStatus = GetStatusDesc(t_nvp.NVPStatus),

                                        bl_NVPStatus_Active = t_nvp.NVPStatus == "A",
                                        // bl_ApplyToClergyOnly = t_nvp.ApplyToClergyOnly,
                                        // bl_IsAvailable = t_nvp.IsAvailable,
                                        // bl_IsDeceased = t_nvp.IsDeceased, 
                                        //
                                        strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                                        strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
                                        strOwnershipCode = t_nvp.OwnedByChurchBodyId != null ? (t_nvp.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                                        strOwnershipStatus = t_nvp.OwnedByChurchBodyId != null ? (t_nvp.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                                        strSharingStatus = GetSharingStatusDesc(t_nvp.SharingStatus)
                                    })
                                    .OrderBy(c => c.strNVPCode).ThenBy(c => c.numOrderIndex)
                                    .ThenBy(c => c.strNVPTag) //.ThenBy(c => c.strNVPSubTag)
                                    //.ThenBy(c => c.numAppUtilityNVP).ThenByDescending(c => c.dt1AppUtilityNVP).ThenByDescending(c => c.dt2AppUtilityNVP)
                                    .ToList();

                    // create the MCCF model from the List on the fly...
                    var oADHCModel = new AdhocParameterModel();

                    // var oNVPModel = new AppUtilityNVPModel();
                    oADHCModel.oUserId_Logged = _oLoggedUser.Id;
                    oADHCModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                    oADHCModel.oChurchBodyId = this._oLoggedCB.Id;
                    oADHCModel.oChurchBody = this._oLoggedCB;
                    oADHCModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                    oADHCModel.oAppGloOwnId = this._oLoggedAGO.Id;
                    oADHCModel.oAppGlobalOwn = this._oLoggedAGO;
                    oADHCModel.pageIndex = 1;
                    oADHCModel.filterIndex = filterIndex;
                    oADHCModel.setIndex = (int)setIndex;
                    oADHCModel.tempSetIndex = (int)setIndex;
                    oADHCModel.subSetIndex = (int)subSetIndex;


                    // oMCCFModel.lsMemberCustomCodeFormatModels = oNVP_List;
                    oADHCModel.lsAppUtilityNVPModels = oNVP_List;
                   // ViewData["oSetupData_MCCF_List"] = oNVP_List;
                    oCSPModel.oAdhocParameterModel = oADHCModel;
                    oCSPModel.tempSetIndex = oADHCModel.tempSetIndex;
                   // ViewData["oAppUtilityMCCFModel"] = oMCCFModel;

                    var _oADHCModel = Newtonsoft.Json.JsonConvert.SerializeObject(oADHCModel);
                    TempData["oVmCurrMod"] = _oADHCModel; TempData.Keep();

                    /// specific parameter...
                    if (setIndex != 0) return oCSPModel;
                }



                /// all parameters...
                return oCSPModel;

            }

            catch (Exception ex)
            {
                throw;
            }
        }
                 

        // Setup...
     //   public ActionResult Index(int? setIndex = 0, int? subSetIndex = 0, bool loadSectionOnly = false, int filterIndex = 1, int pageIndex = 1, int? numCodeCriteria_1 = (int?)null, string strCodeCriteria_2 = null)  // , int? subSetIndex = 0  int? oAppGloOwnId = null, int? oCurrChuBodyId = null, int setIndex = 0, int subSetIndex = 0) //, int? oParentId = null, int? id = null, int pageIndex = 1)             
       
        public IActionResult Index(int? setIndex = 0, int? subSetIndex = 0, bool loadSectionOnly = false, int filterIndex = 1, int pageIndex = 1, 
            int? numCodeCriteria_1 = (int?)null, string strCodeCriteria_2 = null)  // , int? subSetIndex = 0  int? oAppGloOwnId = null, int? oCurrChuBodyId = null, int setIndex = 0, int subSetIndex = 0) //, int? oParentId = null, int? id = null, int pageIndex = 1)             
        {  // async Task<IActionResult>
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return View("_ErrorPage");
                    }
                }

                if (this._oLoggedAGO_MSTR == null || this._oLoggedCB_MSTR == null || this._oLoggedAGO == null || this._oLoggedCB == null)
                { RedirectToAction("LoginUserAcc", "UserLogin"); }


                if (!loadSectionOnly)
                    _ = this.LoadClientDashboardValues(); //// this._clientDBConnString);

                //var arrData = TempData.ContainsKey("UserLogIn_oUserPrivCol") ? TempData["UserLogIn_oUserPrivCol"] as string : "";
                //var httpContext = _httpContextAccessor.HttpContext;
                //var tempData = _tempDataDictionaryFactory.GetTempData(httpContext);

                // SetUserLogged();

                //load the dash  ... main layout stuff
                // _LoadClientDashboardValues(this._clientDBConnString, this._oLoggedUser);
                // _ = await LoadClientDashboardValues(this._clientDBConnString, oLoggedUser); 

                //  _ = this.LoadClientDashboardValues(this._clientDBConnString, this._oLoggedUser);


                //if (!loadSectionOnly)
                //    _ = this.LoadClientDashboardValues(_connstr_CL); //, this._oLoggedUser);  //await


                //var result = _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id).ToList();

                ////ViewData["CB_SubCongCount"] = String.Format("{0:N0}", (result != null ? result.Count : 999));
                //ViewData["CBWeek_NewConvertsCount"] = String.Format("{0:N0}", (result != null ? result.Count : 321));


                // return View("Index", new ClientSetupParametersModel());


                //if (!InitializeUserLogging())
                //    return RedirectToAction("LoginUserAcc", "UserLogin");


                // return View();

                // check permission --- checked in constructor   -- class vaiables: logger details
                // var oUserId_Logged = this._oLoggedUser.Id;
                //var lsCSPMdl = (
                //    from t_CSP in _context.MSTRAppGlobalOwner.AsNoTracking() //.Include(t => t.ChurchLevels)
                //     from t_cft in _context.ChurchFaithType.AsNoTracking().Where(c => c.Category == "FC" && c.Id == t_CSP.FaithTypeCategoryId).DefaultIfEmpty()  //.Include(t => t.FaithTypeClass)
                //     from t_ctry in _context.MSTRCountry.AsNoTracking().Where(c => c.CtryAlpha3Code == t_CSP.CtryAlpha3Code).DefaultIfEmpty()

                //    select new ClientSetupParametersModel()
                //    {
                //        oAppGlobalOwn = t_CSP,
                //         // lsChurchLevels = t_CSP.ChurchLevels,
                //         //       
                //         TotalChurchLevels = _context.MSTRChurchLevel.Count(c => c.AppGlobalOwnerId == t_CSP.Id),
                //        TotalCongregations = _context.MSTRChurchBody.Count(c => c.AppGlobalOwnerId == t_CSP.Id && c.Status == "A"),
                //         // && c.IsActivated==true && c.ChurchWorkStatus=="O" &&    c.OrgType=="CN"),  //c.OrgType=="CH" && 
                //         strAppGloOwn = t_CSP.OwnerName,
                //        strFaithCategory = t_cft != null ? t_cft.FaithDescription : "",
                //        strCountry = t_ctry != null ? t_ctry.Name : "",
                //        strSlogan = t_CSP.Slogan.Contains("|") ? (t_CSP.Slogan.Substring(0, t_CSP.Slogan.IndexOf("|"))).Replace("|", "") : t_CSP.Slogan,
                //        strSloganResponse = t_CSP.Slogan.Contains("|") ? (t_CSP.Slogan.Substring(t_CSP.Slogan.IndexOf("|"))).Replace("|", "") : "",
                //         //strChurchStream = t_cft.FaithTypeClass != null ? t_cft.FaithTypeClass.FaithDescription : "",
                //         //   
                //         blStatusActivated = t_CSP.Status == "A",
                //        strStatus = GetStatusDesc(t_CSP.Status)
                //    })
                //    .OrderBy(c => c.strCountry).OrderBy(c => c.strAppGloOwn)
                //    .ToList();

                //oCSPModel.lsAppGlobalOwnModels = lsCSPMdl;



                var oCSPModel =  LoadClientSetupList((int)setIndex, (int)subSetIndex, filterIndex, numCodeCriteria_1, strCodeCriteria_2);  //new ClientSetupParametersModel();//

                //
                oCSPModel.oUserId_Logged = _oLoggedUser.Id;
                oCSPModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                oCSPModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                oCSPModel.pageIndex = pageIndex;
                // oCSPModel.filterIndex = filterIndex;
                oCSPModel.setIndex = (int)setIndex;
                // oCSPModel.tempSetIndex  = (int)setIndex;
                oCSPModel.subSetIndex = (int)subSetIndex;

                if (loadSectionOnly && setIndex != 0)
                {
                    switch (setIndex)
                    {
                        case 1: return PartialView("_vwParamAGO", oCSPModel.oAppGlobalOwnModel);
                        case 2: return PartialView("_vwParamCL", oCSPModel.oChurchLevel);
                        case 3: return PartialView("_vwParamCB", oCSPModel.oChurchBodyModel);
                        case 5: return PartialView("_vwParamCBN", oCSPModel.oCBNetworkModel);
                        case 4 : 
                        case 14:
                            if (setIndex == 4) { return PartialView("_vwParamCBA", oCSPModel.oChurchUnitModel); }
                            else if (setIndex == 14) { return PartialView("_vwParamCU", oCSPModel.oChurchUnitModel); }
                            else return PartialView("_vwParamCU", null);

                        //: return PartialView("_vwParamCBA", oCSPModel.oChurchBodyAdhocModel);
                        ///
                        /// case 6: case 8: case 10: case 11: case 12: case 15: case 17: case 18: case 19: 
                        /// 
                        case 6: return PartialView("_vwParamNVP", oCSPModel.oAppUtilityNVPModel);

                        case 7:
                            if (subSetIndex == 1) { if (oCSPModel.oCountryModel != null) oCSPModel.oCountryModel.pageIndex = pageIndex; return PartialView("_vwParamCTRY", oCSPModel.oCountryModel); }
                            else if (subSetIndex == 2) { if (oCSPModel.oCountryRegionModel != null) oCSPModel.oCountryRegionModel.pageIndex = pageIndex; return PartialView("_vwParamCTRY_RGN", oCSPModel.oCountryRegionModel); }
                            else if (subSetIndex == 3) { if (oCSPModel.oCurrencyCustomModel != null) oCSPModel.oCurrencyCustomModel.pageIndex = pageIndex; return PartialView("_vwParamCURR", oCSPModel.oCurrencyCustomModel); }
                            else return View();

                        // case 20: return PartialView("_vwParamNVP", oCSPModel.oAppUtilityNVPModel);
                        //  case 17:
                        // case 18: return PartialView("_vwParamCLA", oCSPModel.oAppUtilityNVPModel);

                        ///
                        case 8: return PartialView("_vwParamLSPK", oCSPModel.oAppUtilityNVPModel);

                        case 9: return PartialView("_vwParamCPR", oCSPModel.oChurchPeriodModel);

                        case 10: return PartialView("_vwParamNIDT", oCSPModel.oAppUtilityNVPModel);
                        case 11: return PartialView("_vwParamINST", oCSPModel.oAppUtilityNVPModel);
                        case 12: return PartialView("_vwParamCTT", oCSPModel.oAppUtilityNVPModel);

                        case 13: return PartialView("_vwParamRLT", oCSPModel.oRelationshipTypeModel);

                        case 15: return PartialView("_vwParamLSPK", oCSPModel.oAppUtilityNVPModel);
                             
                        case 16: return PartialView("_vwParamCRL", oCSPModel.oChurchRoleModel);

                        case 17: case 18: return PartialView("_vwParamCLA", oCSPModel.oAppUtilityNVPModel);

                        case 19: return PartialView("_vwParamCMT", oCSPModel.oAppUtilityNVPModel);
                        case 20: return PartialView("_vwParamCMS", oCSPModel.oAppUtilityNVPModel);
                             
                        //25 handles all -- 21, 22, 23
                        case 21: case 22: case 23: case 25: return PartialView("_vwParamADHC", oCSPModel.oAdhocParameterModel);
                        //  case 22: return PartialView("_AddOrEdit_MCCF", oCSPModel.oMemberCustomCodeFormatModel);


                        default: return View();
                    }
                }

                //if (oCB_List.Count() == 0)
                //{
                //    
                //    return PartialView("_ErrorPage");
                //}


                //  var oCSPModel = new ClientSetupParametersModel();


                var strDesc = "Client Setup Parameters";
                var _userTask = "Viewed " + strDesc.ToLower() + " list";
                oCSPModel.strCurrTask = strDesc;

                //oCSPModel.oAppGloOwnId = oAppGloOwnId;
                //oCSPModel.oChurchBodyId = oCurrChuBodyId;

                //var tm = DateTime.Now;
                //_ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "N",
                //                 "RCMS-Admin: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id));
                 

                /////
                var _oCSPModel = Newtonsoft.Json.JsonConvert.SerializeObject(oCSPModel);
                TempData["oVmCSPModel"] = _oCSPModel; TempData.Keep();


                //arrData = TempData.ContainsKey("UserLogIn_oUserPrivCol") ? TempData["UserLogIn_oUserPrivCol"] as string : arrData;
                //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<UserSessionPrivilege>(arrData) : null;

                //var _oUserLog = Newtonsoft.Json.JsonConvert.SerializeObject(oCSPModel);
                //TempData["UserLogIn_oUserPrivCol"] = _oUserLog; TempData.Keep();


                return View("Index", oCSPModel);

                // return PartialView("_vwIndex", oCSPModel);
                // return PartialView("_vwParamCB", oCSPModel.oChurchBodyModel);
            }

            catch (Exception ex)
            {
                throw;

                ////page not found error
                //
                //return View("_ErrorPage");
            }
        }



        public ActionResult Index_test(int? setIndex = 0, int? subSetIndex = 0, bool loadSectionOnly = false, int filterIndex = 1, int pageIndex = 1, int? numCodeCriteria_1 = (int?)null, string strCodeCriteria_2 = null)  // , int? subSetIndex = 0  int? oAppGloOwnId = null, int? oCurrChuBodyId = null, int setIndex = 0, int subSetIndex = 0) //, int? oParentId = null, int? id = null, int pageIndex = 1)             
        {
            try
            {
                // if (!InitializeUserLogging())
                    // return RedirectToAction("LoginUserAcc", "UserLogin");

                //new ClientSetupParametersModel();  //
                var oCSPModel =  LoadClientSetupList((int)setIndex, (int)subSetIndex, filterIndex, numCodeCriteria_1, strCodeCriteria_2);
                //
                oCSPModel.oUserId_Logged = _oLoggedUser.Id;
                oCSPModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                oCSPModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                oCSPModel.pageIndex = pageIndex;
                // oCSPModel.filterIndex = filterIndex;
                oCSPModel.setIndex = (int)setIndex;
                // oCSPModel.tempSetIndex  = (int)setIndex;
                oCSPModel.subSetIndex = (int)subSetIndex;
                  


                var strDesc = "Client Setup Parameters";
                var _userTask = "Viewed " + strDesc.ToLower() + " list";
                oCSPModel.strCurrTask = strDesc;

                //oCSPModel.oAppGloOwnId = oAppGloOwnId;
                //oCSPModel.oChurchBodyId = oCurrChuBodyId;

                var tm = DateTime.Now;
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "N",
                                 "RCMS-Admin: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id));

                ///
                var _oCSPModel = Newtonsoft.Json.JsonConvert.SerializeObject(oCSPModel);
                TempData["oVmCSPModel"] = _oCSPModel; TempData.Keep();


                return View("Index_test", oCSPModel);
            }

            catch (Exception ex)
            {
                throw;
                ////page not found error
                //
                //return View("_ErrorPage");
            }
        }









        // AGO .. 1
        //[HttpGet]
        public AppGlobalOwnerModel GetAddOrEdit_AGO(int id = 0, int? oAGOId_Logged = null, int? oCBId_Logged = null, int? oUserId_Logged = null) // (int? oAppGloOwnId = null, int? oCurrChuBodyId = null, int id = 0, int? oParentId = null, int setIndex = 0, int subSetIndex = 0, int? oAGOId_Logged = null, int? oCBId_Logged = null, int? oUserId_Logged = null)
        {
            try
            {
                //var oCurrChuBodyLogOn_Logged = oUserLogIn_Priv.ChurchBody;
                //var oUserProfile_Logged = oUserLogIn_Priv.UserProfile;
                //// int? oAppGloOwnId_Logged = oCurrChuBodyLogOn_Logged != null ? oCurrChuBodyLogOn_Logged.AppGlobalOwnerId : (int?)null;
                ////int? oChurchBodyId_Logged = oCurrChuBodyLogOn_Logged != null ? oCurrChuBodyLogOn_Logged.Id : (int?)null;
                //// int? oUserId_Logged = oUserProfile_Logged != null ? oUserProfile_Logged.Id : (int?)null;
                //oUserId_Logged = oUserProfile_Logged != null ? oUserProfile_Logged.Id : oUserId_Logged;
                //oCBId_Logged = oCurrChuBodyLogOn_Logged != null ? oCurrChuBodyLogOn_Logged.Id : oCBId_Logged;
                //oAGOId_Logged = oCurrChuBodyLogOn_Logged != null ? oCurrChuBodyLogOn_Logged.AppGlobalOwnerId : oAGOId_Logged;

                var strDesc = "Denomination (Church)";
                var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();  // _userTask = "Attempted creating new denomination (church)"; // _userTask = "Opened denomination (church)-" + oCFT_MDL.oChurchFaithType.FaithDescription;

                // var oAGO_MDL = new AppGlobalOwnerModel();
                //if (id == 0)
                //{
                //    //create user and init... 
                //    oAGO_MDL.oAppGlobalOwn = new AppGlobalOwner();
                //    oAGO_MDL.oAppGlobalOwn.TotalLevels = 1;
                //    //oAGO_MDL.oAppGlobalOwn.Status = "A";
                //    oAGO_MDL.blStatusActivated = true;

                //    _userTask = "Attempted creating new " + strDesc.ToLower();
                //}

                //else
                //{ 
                //var oAGO_MDL_List = (
                //        from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(x => x.Id == id)
                //        from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_ago.CtryAlpha3Code).DefaultIfEmpty()

                //             // from t_cft in _context.ChurchFaithType.Include(t => t.FaithTypeClass).AsNoTracking().Where(c => c.Category == "FC" && c.Id == t_ago.FaithTypeCategoryId).DefaultIfEmpty()

                //         select new AppGlobalOwnerModel()
                //        {
                //            oAppGlobalOwn = t_ago,
                //            lsChurchLevels = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == t_ago.Id).ToList(),
                //             //       
                //             TotalChurchLevels = _context.ChurchLevel.Count(c => c.AppGlobalOwnerId == t_ago.Id),
                //            TotalCongregations = _context.ChurchBody.Count(c => c.AppGlobalOwnerId == t_ago.Id && c.Status == "A"),
                //             // && c.IsActivated==true && c.ChurchWorkStatus=="O" &&    c.OrgType=="CN"),  //c.OrgType=="CH" && 
                //             strAppGloOwn = t_ago.OwnerName,
                //            //strFaithCategory = t_cftc != null ? t_cftc.FaithDescription : "",
                //            //strChurchStream = t_cfts.FaithTypeClass != null ? t_cfts.FaithTypeClass.FaithDescription : "",
                //            strCountry = t_ctry != null ? t_ctry.Name : "",
                //            strSlogan = t_ago.Slogan.Contains("|") ? (t_ago.Slogan.Substring(0, t_ago.Slogan.IndexOf("|"))).Replace("|", "") : t_ago.Slogan,
                //            strSloganResponse = t_ago.Slogan.Contains("|") ? (t_ago.Slogan.Substring(t_ago.Slogan.IndexOf("|"))).Replace("|", "") : "",
                //             //   
                //             blStatusActivated = t_ago.Status == "A",
                //            strStatus = GetStatusDesc(t_ago.Status)
                //        })
                //    .ToList();



                //var oAGO_List = _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == _oLoggedAGO.Id).ToList();
                //if (oAGO_List.Count() == 0) return null;
                /////
                //var oCFTC_MSTRList = _masterContext.ChurchFaithType.AsNoTracking().Where(c => c.Category == "FC").ToList();
                //var oCFTS_MSTRList = _masterContext.ChurchFaithType.AsNoTracking().Where(c => c.Category == "FS").ToList();
                ///
                var oAGO_MDL = (
                              from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == _oLoggedAGO.Id) 
                              from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_ago.CtryAlpha3Code).DefaultIfEmpty()

                                  // from t_cft in _context.ChurchFaithType.Include(t => t.FaithTypeClass).AsNoTracking().Where(c => c.Category == "FC" && c.Id == t_ago.FaithTypeCategoryId).DefaultIfEmpty()

                              select new AppGlobalOwnerModel()
                              {
                                  oAppGlobalOwn = t_ago,
                                  // lsChurchLevels = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == t_ago.Id).ToList(),
                                  //       
                                  numTotalChurchLevelsConfig = _context.ChurchLevel.Count(c => c.AppGlobalOwnerId == t_ago.Id),
                                  //TotalCongregations = _context.ChurchBody.Count(c => c.AppGlobalOwnerId == t_ago.Id && c.Status == "A"),
                                  // && c.IsActivated==true && c.ChurchWorkStatus=="O" &&    c.OrgType=="CN"),  //c.OrgType=="CH" && 

                                  strAppGloOwn = t_ago.OwnerName,
                                  //strFaithTypeCategory = t_cftc != null ? t_ago.strFaithTypeCategory : "",
                                  //strChurchStream = t_ago.strFaithTypeStream,
                                  strCountry = t_ctry != null ? (!string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code) : t_ago.CtryAlpha3Code,
                                  strSlogan = t_ago.Slogan.Contains("*|*") ? (t_ago.Slogan.Substring(0, t_ago.Slogan.IndexOf("*|*"))).Replace("*|*", "") : t_ago.Slogan,
                                  strSloganResponse = t_ago.Slogan.Contains("*|*") ? (t_ago.Slogan.Substring(t_ago.Slogan.IndexOf("*|*"))).Replace("*|*", "") : "",
                                  // strFaithTypeCategory = t_ago != null ? ((!string.IsNullOrEmpty(t_ago.strFaithTypeCategory) && !string.IsNullOrEmpty(t_ago.strFaithTypeStream) ? t_ago.strFaithTypeCategory + ", " + t_ago.strFaithTypeStream : t_ago.strFaithTypeCategory + t_ago.strFaithTypeStream).Trim()) : "",
                                  //   
                                  blStatusActivated = t_ago.Status == "A",
                                  strStatus = GetStatusDesc(t_ago.Status)
                              })
                          .FirstOrDefault();



                /////
                //oAGO_MDL = (
                //         from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(x => x.Id == id)                             
                //         from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_ago.CtryAlpha3Code).DefaultIfEmpty()
                //         from t_cftc in oCFTC_MSTRList.Where(c => c.Id == t_ago.FaithTypeCategoryId).DefaultIfEmpty()
                //         from t_cfts in oCFTS_MSTRList.Where(c => c.Id == t_cftc.FaithTypeClassId).DefaultIfEmpty()

                //         // from t_cft in _context.ChurchFaithType.Include(t => t.FaithTypeClass).AsNoTracking().Where(c => c.Category == "FC" && c.Id == t_ago.FaithTypeCategoryId).DefaultIfEmpty()

                //     select new AppGlobalOwnerModel()
                //     {
                //         oAppGlobalOwn = t_ago,
                //         lsChurchLevels = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == t_ago.Id).ToList(),
                //             //       
                //         TotalChurchLevels = _context.ChurchLevel.Count(c => c.AppGlobalOwnerId == t_ago.Id),
                //         TotalCongregations = _context.ChurchBody.Count(c => c.AppGlobalOwnerId == t_ago.Id && c.Status == "A"),
                //             // && c.IsActivated==true && c.ChurchWorkStatus=="O" &&    c.OrgType=="CN"),  //c.OrgType=="CH" && 
                //         strAppGloOwn = t_ago.OwnerName,
                //         strFaithCategory = t_cftc != null ? t_cftc.FaithDescription : "",
                //         strChurchStream = t_cfts.FaithTypeClass != null ? t_cfts.FaithTypeClass.FaithDescription : "",
                //         strCountry = t_ctry != null ? t_ctry.Name : "",
                //         strSlogan = t_ago.Slogan.Contains("|") ? (t_ago.Slogan.Substring(0, t_ago.Slogan.IndexOf("|"))).Replace("|", "") : t_ago.Slogan,
                //         strSloganResponse = t_ago.Slogan.Contains("|") ? (t_ago.Slogan.Substring(t_ago.Slogan.IndexOf("|"))).Replace("|", "") : "", 
                //             //   
                //         blStatusActivated = t_ago.Status == "A",
                //         strStatus = GetStatusDesc(t_ago.Status)  
                //     })
                //     .FirstOrDefault();



                if (oAGO_MDL.oAppGlobalOwn == null) return null;

                    //if (string.IsNullOrEmpty(oAGO_MDL.oAppGlobalOwn.PrefixKey))
                    //{
                    //    var template = new { taskSuccess = String.Empty, strRes = String.Empty };   // var definition = new { Name = "" };
                    //    var jsCode = GetNextCodePrefixByAcronym_jsonString(oAGO_MDL.oAppGlobalOwn.Acronym);  // string json1 = @"{'Name':'James'}";
                    //    var jsOut = JsonConvert.DeserializeAnonymousType(jsCode, template);

                    //    if (jsOut != null)
                    //        if (bool.Parse(jsOut.taskSuccess) == true)
                    //            oAGO_MDL.oAppGlobalOwn.PrefixKey = jsOut.strRes;
                    //}


                    //if (string.IsNullOrEmpty(oAGO_MDL.oAppGlobalOwn.PrefixKey))
                    //    oAGO_MDL.oAppGlobalOwn.PrefixKey = GetNextCodePrefixByAcronym_jsonString(oAGO_MDL.oAppGlobalOwn.Acronym);

                    ////church code  
                    //if (string.IsNullOrEmpty(oAGO_MDL.oAppGlobalOwn.GlobalChurchCode) && !string.IsNullOrEmpty(oAGO_MDL.oAppGlobalOwn.PrefixKey))
                    //{
                    //    oAGO_MDL.oAppGlobalOwn.GlobalChurchCode = oAGO_MDL.oAppGlobalOwn.PrefixKey + string.Format("{0:D3}", 0);
                    //    oAGO_MDL.oAppGlobalOwn.RootChurchCode = oAGO_MDL.oAppGlobalOwn.GlobalChurchCode;
                    //}

                    ////root church code  
                    //if (string.IsNullOrEmpty(oAGO_MDL.oAppGlobalOwn.RootChurchCode) && !string.IsNullOrEmpty(oAGO_MDL.oAppGlobalOwn.GlobalChurchCode))
                    //    oAGO_MDL.oAppGlobalOwn.RootChurchCode = oAGO_MDL.oAppGlobalOwn.GlobalChurchCode;


                    _userTask = "Opened " + strDesc.ToLower() + ", " + oAGO_MDL.oAppGlobalOwn.OwnerName;
                //}


                // oAGO_MDL.setIndex = setIndex;
                // oAGO_MDL.subSetIndex = subSetIndex;

                oAGO_MDL.oUserId_Logged = oUserId_Logged;
                oAGO_MDL.oAppGloOwnId_Logged = oAGOId_Logged;
                oAGO_MDL.oChurchBodyId_Logged = oCBId_Logged;
                //
                // oAGO_MDL.oAppGloOwnId = oAppGloOwnId;
                // oAGO_MDL.oChurchBodyId = oCurrChuBodyId;
                //  var oCurrChuBody = _context.MSTRChurchBody.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oCurrChuBodyId).FirstOrDefault();
                // oAGO_MDL.oChurchBody = oCurrChuBody != null ? oCurrChuBody : null;

                //   if (oAGO_MDL.subSetIndex == 2) // Denomination classes av church sects

                oAGO_MDL = this.popLookups_AGO(oAGO_MDL, oAGO_MDL.oAppGlobalOwn);

                var tm = DateTime.Now;

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");  ///, _context, _connstr_CL


                // record ... @client
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, _oLoggedAGO.Id, _oLoggedCB.Id, "N",
                                 "RCMS-Client: Denomination", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id)
                                );

                //var _oAGO_MDL = Newtonsoft.Json.JsonConvert.SerializeObject(oAGO_MDL);
                //TempData["oVmCurrMod"] = _oAGO_MDL; TempData.Keep();

                return oAGO_MDL;
                // return View("_AddOrEdit_AGO", oAGO_MDL);
            }

            catch (Exception ex)
            {
                return null;

                ////page not found error
                //
                //return View("_ErrorPage");
            }
        }

        [HttpGet]
        public IActionResult AddOrEdit_AGO(int id = 0, int? oAGOId_Logged = null, int? oCBId_Logged = null, int? oUserId_Logged = null) // (int? oAppGloOwnId = null, int? oCurrChuBodyId = null, int id = 0, int? oParentId = null, int setIndex = 0, int subSetIndex = 0, int? oAGOId_Logged = null, int? oCBId_Logged = null, int? oUserId_Logged = null)
        {
            try
            {
                if (id > 0)
                {
                    // if (!InitializeUserLogging())
                        // return RedirectToAction("LoginUserAcc", "UserLogin");

                    //var oCurrChuBodyLogOn_Logged = oUserLogIn_Priv.ChurchBody;
                    //var oUserProfile_Logged = oUserLogIn_Priv.UserProfile;
                    //// int? oAppGloOwnId_Logged = oCurrChuBodyLogOn_Logged != null ? oCurrChuBodyLogOn_Logged.AppGlobalOwnerId : (int?)null;
                    ////int? oChurchBodyId_Logged = oCurrChuBodyLogOn_Logged != null ? oCurrChuBodyLogOn_Logged.Id : (int?)null;
                    //// int? oUserId_Logged = oUserProfile_Logged != null ? oUserProfile_Logged.Id : (int?)null;
                    //oUserId_Logged = oUserProfile_Logged != null ? oUserProfile_Logged.Id : oUserId_Logged;
                    //oCBId_Logged = oCurrChuBodyLogOn_Logged != null ? oCurrChuBodyLogOn_Logged.Id : oCBId_Logged;
                    //oAGOId_Logged = oCurrChuBodyLogOn_Logged != null ? oCurrChuBodyLogOn_Logged.AppGlobalOwnerId : oAGOId_Logged;

                    var strDesc = "Denomination (Church)";
                    var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();  // _userTask = "Attempted creating new denomination (church)"; // _userTask = "Opened denomination (church)-" + oCFT_MDL.oChurchFaithType.FaithDescription;

               // var oAGO_MDL = new AppGlobalOwnerModel();
                    //if (id == 0)
                    //{
                    //    //create user and init... 
                    //    oAGO_MDL.oAppGlobalOwn = new AppGlobalOwner();
                    //    oAGO_MDL.oAppGlobalOwn.TotalLevels = 1;
                    //    //oAGO_MDL.oAppGlobalOwn.Status = "A";
                    //    oAGO_MDL.blStatusActivated = true;

                    //    _userTask = "Attempted creating new " + strDesc.ToLower();
                    //}


                    //var oAGO_List = _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == _oLoggedAGO.Id).ToList();
                    //if (oAGO_List.Count() == 0) return null;
                    /////
                    //var oCFTC_MSTRList = _masterContext.ChurchFaithType.AsNoTracking().Where(c => c.Category == "FC").ToList();
                    //var oCFTS_MSTRList = _masterContext.ChurchFaithType.AsNoTracking().Where(c => c.Category == "FS").ToList();
                    ///

                    var oAGO_MDL = (
                              from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == _oLoggedAGO.Id)
                              from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_ago.CtryAlpha3Code).DefaultIfEmpty()

                                  // from t_cft in _context.ChurchFaithType.Include(t => t.FaithTypeClass).AsNoTracking().Where(c => c.Category == "FC" && c.Id == t_ago.FaithTypeCategoryId).DefaultIfEmpty()

                              select new AppGlobalOwnerModel()
                              {
                                  oAppGlobalOwn = t_ago,
                                  // lsChurchLevels = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == t_ago.Id).ToList(),
                                  //       
                                  numTotalChurchLevelsConfig = _context.ChurchLevel.Count(c => c.AppGlobalOwnerId == t_ago.Id),
                                  //TotalCongregations = _context.ChurchBody.Count(c => c.AppGlobalOwnerId == t_ago.Id && c.Status == "A"),
                                  // && c.IsActivated==true && c.ChurchWorkStatus=="O" &&    c.OrgType=="CN"),  //c.OrgType=="CH" && 

                                  strAppGloOwn = t_ago.OwnerName,
                                  //strFaithTypeCategory = t_cftc != null ? t_ago.strFaithTypeCategory : "",
                                  //strChurchStream = t_ago.strFaithTypeStream,
                                  strCountry = t_ctry != null ? (!string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code) : t_ago.CtryAlpha3Code,
                                  strSlogan = t_ago.Slogan.Contains("*|*") ? (t_ago.Slogan.Substring(0, t_ago.Slogan.IndexOf("*|*"))).Replace("*|*", "") : t_ago.Slogan,
                                  strSloganResponse = t_ago.Slogan.Contains("*|*") ? (t_ago.Slogan.Substring(t_ago.Slogan.IndexOf("*|*"))).Replace("*|*", "") : "",
                                  // strFaithTypeCategory = t_ago != null ? ((!string.IsNullOrEmpty(t_ago.strFaithTypeCategory) && !string.IsNullOrEmpty(t_ago.strFaithTypeStream) ? t_ago.strFaithTypeCategory + ", " + t_ago.strFaithTypeStream : t_ago.strFaithTypeCategory + t_ago.strFaithTypeStream).Trim()) : "",
                                  //   
                                  blStatusActivated = t_ago.Status == "A", 
                                  strStatus = GetStatusDesc(t_ago.Status),
                                  strChurchLogo = t_ago.ChurchLogo
                              })
                          .FirstOrDefault();


                    /////
                    //oAGO_MDL = (
                    //         from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(x => x.Id == id)                             
                    //         from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_ago.CtryAlpha3Code).DefaultIfEmpty()
                    //         from t_cftc in oCFTC_MSTRList.Where(c => c.Id == t_ago.FaithTypeCategoryId).DefaultIfEmpty()
                    //         from t_cfts in oCFTS_MSTRList.Where(c => c.Id == t_cftc.FaithTypeClassId).DefaultIfEmpty()

                    //         // from t_cft in _context.ChurchFaithType.Include(t => t.FaithTypeClass).AsNoTracking().Where(c => c.Category == "FC" && c.Id == t_ago.FaithTypeCategoryId).DefaultIfEmpty()

                    //     select new AppGlobalOwnerModel()
                    //     {
                    //         oAppGlobalOwn = t_ago,
                    //         lsChurchLevels = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == t_ago.Id).ToList(),
                    //             //       
                    //         TotalChurchLevels = _context.ChurchLevel.Count(c => c.AppGlobalOwnerId == t_ago.Id),
                    //         TotalCongregations = _context.ChurchBody.Count(c => c.AppGlobalOwnerId == t_ago.Id && c.Status == "A"),
                    //             // && c.IsActivated==true && c.ChurchWorkStatus=="O" &&    c.OrgType=="CN"),  //c.OrgType=="CH" && 
                    //         strAppGloOwn = t_ago.OwnerName,
                    //         strFaithCategory = t_cftc != null ? t_cftc.FaithDescription : "",
                    //         strChurchStream = t_cfts.FaithTypeClass != null ? t_cfts.FaithTypeClass.FaithDescription : "",
                    //         strCountry = t_ctry != null ? t_ctry.Name : "",
                    //         strSlogan = t_ago.Slogan.Contains("|") ? (t_ago.Slogan.Substring(0, t_ago.Slogan.IndexOf("|"))).Replace("|", "") : t_ago.Slogan,
                    //         strSloganResponse = t_ago.Slogan.Contains("|") ? (t_ago.Slogan.Substring(t_ago.Slogan.IndexOf("|"))).Replace("|", "") : "", 
                    //             //   
                    //         blStatusActivated = t_ago.Status == "A",
                    //         strStatus = GetStatusDesc(t_ago.Status)  
                    //     })
                    //     .FirstOrDefault();



                    if (oAGO_MDL.oAppGlobalOwn == null)
                    {
                        //page not found error
                        
                        return View("_ErrorPage");
                    }

                    //if (string.IsNullOrEmpty(oAGO_MDL.oAppGlobalOwn.PrefixKey))
                    //{
                    //    var template = new { taskSuccess = String.Empty, strRes = String.Empty };   // var definition = new { Name = "" };
                    //    var jsCode = GetNextCodePrefixByAcronym_jsonString(oAGO_MDL.oAppGlobalOwn.Acronym);  // string json1 = @"{'Name':'James'}";
                    //    var jsOut = JsonConvert.DeserializeAnonymousType(jsCode, template);

                    //    if (jsOut != null)
                    //        if (bool.Parse(jsOut.taskSuccess) == true)
                    //            oAGO_MDL.oAppGlobalOwn.PrefixKey = jsOut.strRes;
                    //}


                    //if (string.IsNullOrEmpty(oAGO_MDL.oAppGlobalOwn.PrefixKey))
                    //    oAGO_MDL.oAppGlobalOwn.PrefixKey = GetNextCodePrefixByAcronym_jsonString(oAGO_MDL.oAppGlobalOwn.Acronym);

                    ////church code  
                    //if (string.IsNullOrEmpty(oAGO_MDL.oAppGlobalOwn.GlobalChurchCode) && !string.IsNullOrEmpty(oAGO_MDL.oAppGlobalOwn.PrefixKey))
                    //{
                    //    oAGO_MDL.oAppGlobalOwn.GlobalChurchCode = oAGO_MDL.oAppGlobalOwn.PrefixKey + string.Format("{0:D3}", 0);
                    //    oAGO_MDL.oAppGlobalOwn.RootChurchCode = oAGO_MDL.oAppGlobalOwn.GlobalChurchCode;
                    //}

                    ////root church code  
                    //if (string.IsNullOrEmpty(oAGO_MDL.oAppGlobalOwn.RootChurchCode) && !string.IsNullOrEmpty(oAGO_MDL.oAppGlobalOwn.GlobalChurchCode))
                    //    oAGO_MDL.oAppGlobalOwn.RootChurchCode = oAGO_MDL.oAppGlobalOwn.GlobalChurchCode;


                    _userTask = "Opened " + strDesc.ToLower() + ", " + oAGO_MDL.oAppGlobalOwn.OwnerName;
                

                    oAGO_MDL.setIndex = 1;
                    // oAGO_MDL.subSetIndex = subSetIndex;

                    oAGO_MDL.oUserId_Logged = oUserId_Logged;
                    oAGO_MDL.oAppGloOwnId_Logged = oAGOId_Logged;
                    oAGO_MDL.oChurchBodyId_Logged = oCBId_Logged;
                    //
                    // oAGO_MDL.oAppGloOwnId = oAppGloOwnId;
                    // oAGO_MDL.oChurchBodyId = oCurrChuBodyId;
                    //  var oCurrChuBody = _context.MSTRChurchBody.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oCurrChuBodyId).FirstOrDefault();
                    // oAGO_MDL.oChurchBody = oCurrChuBody != null ? oCurrChuBody : null;

                    //   if (oAGO_MDL.subSetIndex == 2) // Denomination classes av church sects

                    oAGO_MDL = this.popLookups_AGO(oAGO_MDL, oAGO_MDL.oAppGlobalOwn);



                    var tm = DateTime.Now;

                    //// refreshValues...
                    //var _connstr_CL = this.GetCL_DBConnString();
                    //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");  ///, _context, _connstr_CL

                    // record ... @client
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, _oLoggedAGO.Id, _oLoggedCB.Id, "N",
                                     "RCMS-Client: Denomination", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id)
                                    );

                    //var _oAGO_MDL = Newtonsoft.Json.JsonConvert.SerializeObject(oAGO_MDL);
                    //TempData["oVmCurrMod"] = _oAGO_MDL; TempData.Keep();

                  //  return oAGO_MDL;.


                    return PartialView("_AddOrEdit_AGO", oAGO_MDL);

                }


                // shouldn't get this far
                //page not found error
                
                return View("_ErrorPage");
            }

            catch (Exception ex)
            {
                //page not found error
                
                return View("_ErrorPage");
            }
        }
        public AppGlobalOwnerModel popLookups_AGO(AppGlobalOwnerModel vm, AppGlobalOwner oCurrAGO)
        {
            if (vm == null || oCurrAGO == null) return vm;
            //
            vm.lkpStatuses = new List<SelectListItem>();
            foreach (var dl in dlGenStatuses) { vm.lkpStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            //vm.lkpFaithCategories = _context.ChurchFaithType.Where(c => c.Category == "FC" && !string.IsNullOrEmpty(c.FaithDescription))
            //                              .OrderBy(c => c.FaithDescription).ToList()
            //                              .Select(c => new SelectListItem()
            //                              {
            //                                  Value = c.Id.ToString(),
            //                                  Text = c.FaithDescription
            //                              })
            //                              .ToList();
            //  vm.lkpFaithCategories.Insert(0, new SelectListItem { Value = "", Text = "Select" });

            vm.lkpCountries = _context.Country.AsNoTracking().ToList()  //.Where(c => c.Display == true)
                                          .Select(c => new SelectListItem()
                                          {
                                              Value = c.CtryAlpha3Code, // .ToString(),
                                              Text = c.EngName
                                          })
                                          .OrderBy(c => c.Value)
                                          .ToList();
            // vm.lkpCountries.Insert(0, new SelectListItem { Value = "", Text = "Select" });


            return vm;
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddOrEdit_AGO(AppGlobalOwnerModel vm)
        {
            // if (!InitializeUserLogging())
                // return RedirectToAction("LoginUserAcc", "UserLogin");

            var strDesc = "Denomination (Church)";
            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oAppGlobalOwn == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            AppGlobalOwner _oChanges = vm.oAppGlobalOwn;  // vmMod = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as UserProfileModel : vmMod; TempData.Keep();
             
            //check if the configured levels <= total levels under AppGloOwn
            var lsCL = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == _oChanges.Id).ToList();
            var countCL = lsCL.Count();
            if (countCL > _oChanges.TotalLevels)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Total church levels allowed for denomination, " + _oChanges.OwnerName + " [" + _oChanges.TotalLevels + "] exceeded. Hint: You may adjust either way [Denomination or Church level details]" });

            foreach (var oCL in lsCL)
            {
                if (oCL.LevelIndex <= 0 || oCL.LevelIndex > _oChanges.TotalLevels)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please indicate correct level index. Hint: Must be within total church levels [" + _oChanges.TotalLevels + "]. Hint: You may adjust either way [Denomination or Church level details]" });
            }

            if (string.IsNullOrEmpty(_oChanges.OwnerName)) // || string.IsNullOrEmpty(_oChanges.Pwd))  //Congregant... ChurcCodes required
            {
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please provide name for " + strDesc.ToLower() });
            }

            //check if the configured levels <= total levels under AppGloOwn
            var lsCBs = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == _oChanges.Id).ToList();

            if ((_oChanges.Id == 0 || (_oChanges.Id > 0 && lsCBs.Count() == 0)) && string.IsNullOrEmpty(_oChanges.PrefixKey) && string.IsNullOrEmpty(_oChanges.Acronym)) // || string.IsNullOrEmpty(_oChanges.Pwd))  //Congregant... ChurcCodes required
            {
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please provide acronym or church prefix for " + strDesc.ToLower() });
            }
            //if (_oChanges.FaithTypeCategoryId == null)  // you can create 'Others' to cater for non-category
            //{
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please provide the church faith stream or category." });
            //}

            if (_oChanges.CtryAlpha3Code == null)  // you can create 'Others' to cater for non-category
            {
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please provide the base country." });
            }


            //validations done!
            var arrData = "";
            arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<AppGlobalOwnerModel>(arrData) : vm;

            var oAGO = vmMod.oAppGlobalOwn;
            // oAGO.ChurchBody = vmMod.oChurchBody;

            try
            {
                ModelState.Remove("oAppGlobalOwn.CtryAlpha3Code");
                ModelState.Remove("oAppGlobalOwn.FaithTypeCategoryId");
                ModelState.Remove("oAppGlobalOwn.CreatedByUserId");
                ModelState.Remove("oAppGlobalOwn.LastModByUserId");

                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed to load the data to save. Please refresh and try again." });

                // church logo
                if (vm.ChurchLogoFile != null) // _oChanges.ChurchBodyLogo != null)
                {
                    if (string.Compare(_oChanges.ChurchLogo, (Guid.NewGuid().ToString() + "_" + vm.ChurchLogoFile.FileName)) != 0)
                    {
                        string strFilename = null;
                        if (vm.ChurchLogoFile.Length > 0) // vm.ChurchLogoFile != null && 
                        {
                            string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");
                            strFilename = Guid.NewGuid().ToString() + "_" + vm.ChurchLogoFile.FileName;
                            string filePath = Path.Combine(uploadFolder, strFilename);
                            vm.ChurchLogoFile.CopyTo(new FileStream(filePath, FileMode.Create));
                        }
                        else
                        {
                            if (vm.oAppGlobalOwn.Id != 0) strFilename = vm.strChurchLogo;
                        }

                        _oChanges.ChurchLogo = strFilename;
                    }
                }

                //if (vm.ChurchLogoFile != null) //&& _oChanges.ChurchLogo != null
                //{
                //    if (_oChanges.ChurchLogo != vm.ChurchLogoFile.FileName)
                //    {
                //        string strFilename = null;
                //        if (vm.ChurchLogoFile != null && vm.ChurchLogoFile.Length > 0)
                //        {
                //            string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");
                //            strFilename = Guid.NewGuid().ToString() + "_" + vm.ChurchLogoFile.FileName;
                //            string filePath = Path.Combine(uploadFolder, strFilename);
                //            vm.ChurchLogoFile.CopyTo(new FileStream(filePath, FileMode.Create));
                //        }
                //        else
                //        {
                //            if (vm.oAppGlobalOwn.Id != 0) strFilename = vm.strChurchLogo;
                //        }

                //        _oChanges.ChurchLogo = strFilename;
                //    }
                //}

                //
                var tm = DateTime.Now;
                _oChanges.LastMod = tm;
                _oChanges.LastModByUserId = vm.oUserId_Logged;
                //_oChanges.Status = vm.blStatusActivated ? "A" : "D";

                //
                _oChanges.Slogan = (!string.IsNullOrEmpty(vm.strSlogan) ? vm.strSlogan : "") +
                                                    (!string.IsNullOrEmpty(vm.strSlogan) && !string.IsNullOrEmpty(vm.strSloganResponse) ? "*|*" : "") +
                                                                                (!string.IsNullOrEmpty(vm.strSloganResponse) ? vm.strSloganResponse : "");
                //
                ////get the prefix, church code, root code from acronym
                ////get the prefix code  
                //if (string.IsNullOrEmpty(_oChanges.PrefixKey))
                //{
                //    //var template = new { taskSuccess = String.Empty, strRes = String.Empty };   // var definition = new { Name = "" };
                //    //var jsCode = GetNextCodePrefixByAcronym_jsonString(_oChanges.Acronym);  // string json1 = @"{'Name':'James'}";
                //    //var jsOut = JsonConvert.DeserializeAnonymousType(jsCode, template);

                //    //if (jsOut != null)
                //    //    if (bool.Parse(jsOut.taskSuccess) == true)
                //    //        _oChanges.PrefixKey = jsOut.strRes;

                //    _oChanges.PrefixKey = GetNextCodePrefixByAcronym_jsonString(_oChanges.Acronym);
                //}

                ////church code  
                //if (string.IsNullOrEmpty(_oChanges.GlobalChurchCode) && !string.IsNullOrEmpty(_oChanges.PrefixKey))
                //{
                //    _oChanges.GlobalChurchCode = _oChanges.PrefixKey + string.Format("{0:D3}", 0);
                //    _oChanges.RootChurchCode = _oChanges.GlobalChurchCode;
                //}

                //var template = new { taskSuccess = String.Empty, strRes = String.Empty };   // var definition = new { Name = "" };
                //jsCode = GetNextGlobalChurchCodeByAcronym_jsonString(_oChanges.PrefixKey, _oChanges.Id);  // string json1 = @"{'Name':'James'}";
                //jsOut = JsonConvert.DeserializeAnonymousType(jsCode, template);

                //if (jsOut != null)
                //    if (bool.Parse(jsOut.taskSuccess) == true)
                //        _oChanges.GlobalChurchCode = jsOut.strRes;



                ////root church code  
                //if (string.IsNullOrEmpty(_oChanges.RootChurchCode) && !string.IsNullOrEmpty(_oChanges.GlobalChurchCode))
                //{
                //    _oChanges.RootChurchCode = _oChanges.GlobalChurchCode;
                //}

                //jsCode = GetNextRootChurchCodeByParentCB_jsonString(_oChanges.PrefixKey, _oChanges.Id, null);  // string json1 = @"{'Name':'James'}";
                //jsOut = JsonConvert.DeserializeAnonymousType(jsCode, template);

                //if (jsOut != null)
                //    if (bool.Parse(jsOut.taskSuccess) == true)
                //        _oChanges.RootChurchCode = jsOut.strRes;

                if (string.IsNullOrEmpty(_oChanges.PrefixKey) || string.IsNullOrEmpty(_oChanges.GlobalChurchCode) || string.IsNullOrEmpty(_oChanges.RootChurchCode)) // || string.IsNullOrEmpty(_oChanges.Pwd))  //Congregant... ChurcCodes required
                {
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Prefix code, Church code and Root church code for " + strDesc.ToLower() + " must be specified" });
                }


                //validate...
                var _userTask = "Attempted saving " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper();  // _userTask = "Added new " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";   //  _userTask = "Updated " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
                var _reset = _oChanges.Id == 0;


                //using (var _agoCtx = new ChurchModelContext(_context.Database.GetDbConnection().ConnectionString))
                //{
                    if (_oChanges.Id > 0)
                    //{
                    //    var existAGO = _context.AppGlobalOwner.Where(c => c.OwnerName.ToLower() == _oChanges.OwnerName.ToLower()).ToList();
                    //    if (existAGO.Count() > 0)
                    //    { return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- " + _oChanges.OwnerName + " already exist." }); }

                    //    _oChanges.Created = tm;
                    //    _oChanges.CreatedByUserId = vm.oUserId_Logged;

                    //_context.Add(_oChanges);

                    //    ViewBag.UserMsg = "Saved " + strDesc.ToLower() + " " + (!string.IsNullOrEmpty(_oChanges.OwnerName) ? " -- " + _oChanges.OwnerName : "") + " successfully.";
                    //    _userTask = "Added new " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
                    //}

                    //else

                    {
                        var existAGO = _context.AppGlobalOwner.Where(c => c.Id != _oChanges.Id && c.OwnerName.ToLower() == _oChanges.OwnerName.ToLower()).ToList();
                        if (existAGO.Count() > 0) 
                            return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- " + _oChanges.OwnerName + " already exist." });

                        if (_oChanges.MSTR_AppGlobalOwnerId == null)
                            _oChanges.MSTR_AppGlobalOwnerId = _oLoggedAGO.Id;

                        if (string.IsNullOrEmpty(_oChanges.strFaithTypeCategory) || string.IsNullOrEmpty(_oChanges.strFaithStream))
                        {
                            var oAGO_MSTR = _masterContext.MSTRAppGlobalOwner.AsNoTracking().Include(t => t.FaithTypeCategory).ThenInclude(t => t.FaithTypeClass)
                                                        .Where(c => c.Id == _oChanges.MSTR_AppGlobalOwnerId).FirstOrDefault();
                        // if (_oChanges.strFaithTypeCategory.ToLower() != oAGO_MSTR.strFaithTypeCategory.ToLower())
                            _oChanges.strFaithTypeCategory = oAGO_MSTR.FaithTypeCategory != null ? oAGO_MSTR.FaithTypeCategory.FaithDescription : "";
                         
                       // if (_oChanges.strFaithStream.ToLower() != oAGO_MSTR.strFaithStream.ToLower())
                            _oChanges.strFaithStream = oAGO_MSTR.FaithTypeCategory != null ? (oAGO_MSTR.FaithTypeCategory.FaithTypeClass != null ? oAGO_MSTR.FaithTypeCategory.FaithTypeClass.FaithDescription : "") : "";
                        }

                        //retain the pwd details... hidden fields
                        _context.Update(_oChanges);
                        //var _strDesc = strDesc.Length > 0 ? strDesc.Substring(0, 1).ToUpper() + strDesc.Substring(1) : "Denomination ";

                        ViewBag.UserMsg = strDesc + " updated successfully.";
                        _userTask = "Updated " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
                    }

                //save denomination first... 
                _context.SaveChanges(); // await _agoCtx.SaveChangesAsync();


                 //   DetachAllEntities(_agoCtx);

                //}


                var _tm = DateTime.Now;
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oUserId_Logged, _tm, _tm, vm.oUserId_Logged, vm.oUserId_Logged));


                //////auto-update the church levels
                ////using (var _clCtx = new ChurchModelContext(_context.Database.GetDbConnection().ConnectionString))
                ////{
                //    var oChLevelCntAdd = 0; var oChLevelCntUpd = 0;
                //    //  _userTask = "Attempted saving church level, " + _oChanges.ToUpper();  // _userTask = "Added new church level, " + _oChanges.OwnerName.ToUpper() + " successfully";   //  _userTask = "Updated church level, " + _oChanges.OwnerName.ToUpper() + " successfully";
                //    if (vmMod.oAppGlobalOwn.Id == 0)
                //    {
                //        for (int i = 1; i <= _oChanges.TotalLevels; i++) // oAGO.TotalLevels; i++)
                //        {
                //            ChurchLevel oCL = new ChurchLevel()
                //            {
                //                Name = "Level_" + i,
                //                CustomName = "Level " + i,
                //                LevelIndex = i,
                //                AppGlobalOwnerId = _oChanges.Id,
                //                SharingStatus = "N",
                //                Created = DateTime.Now,
                //                LastMod = DateTime.Now,
                //            };
                //            //
                //            oChLevelCntAdd++;
                //            _context.Add(oCL);
                //        }

                //        if (oChLevelCntAdd > 0)
                //        {
                //            _userTask = "Added new " + oChLevelCntAdd + " church levels for " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
                //            ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + "Created " + oChLevelCntAdd + " church levels. Customization may be necessary";
                //        }
                //    }
                //    else
                //    {
                //        for (int i = 1; i <= _oChanges.TotalLevels; i++)
                //        {
                //            var oExistCL = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == _oChanges.Id && c.Name == "Level_" + i).FirstOrDefault();
                //            if (oExistCL == null && (countCL + oChLevelCntAdd) < _oChanges.TotalLevels)  //add new ... the missing levels
                //            {
                //                ChurchLevel oCL = new ChurchLevel()
                //                {
                //                    Name = "Level_" + i,
                //                    CustomName = "Level " + i,
                //                    LevelIndex = i,
                //                    AppGlobalOwnerId = _oChanges.Id,
                //                    SharingStatus = "N",
                //                    Created = DateTime.Now,
                //                    LastMod = DateTime.Now,
                //                };

                //                //
                //                oChLevelCntAdd++;
                //                _context.Add(oCL);  //_clCtx.Add(oCL);
                //            }

                //            // UPDATE unecessary!
                //            //else if (oExistCL != null && (countCL + oChLevelCntAdd ) <= _oChanges.TotalLevels)  // upd
                //            //{
                //            //    oExistCL.Name = "Level_" + i;
                //            //    oExistCL.CustomName = "Level " + i;
                //            //    oExistCL.LevelIndex = i;
                //            //    oExistCL.AppGlobalOwnerId = _oChanges.Id;
                //            //    oExistCL.SharingStatus = "N";
                //            //    oExistCL.LastMod = DateTime.Now;
                //            //    //
                //            //    oChLevelCntUpd++;
                //            //    ctx.Update(oExistCL);
                //            //}
                //        }

                //        if ((oChLevelCntAdd + oChLevelCntUpd) > 0)
                //        {
                //            if (oChLevelCntAdd > 0)
                //            {
                //                _userTask = "Added new " + oChLevelCntAdd + " church levels for " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
                //                ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + "Created " + oChLevelCntAdd + " church levels. Customization may be necessary";
                //            }

                //            if (oChLevelCntUpd > 0)
                //            {
                //                _userTask = !string.IsNullOrEmpty(_userTask) ? _userTask + ". " : "" + "Updated " + oChLevelCntUpd + " church levels for " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
                //                ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + "Denomination's " + oChLevelCntUpd + " church levels updated. Customization may be necessary.";
                //            }
                //        }
                //    }

                //    if ((oChLevelCntAdd + oChLevelCntUpd) > 0)
                //    {
                //        _context.SaveChanges(); // await _clCtx.SaveChangesAsync();

                //        // DetachAllEntities(_context);

                //        _tm = DateTime.Now;
                //        _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                         "RCMS-Admin: Church Level", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oUserId_Logged, _tm, _tm, vm.oUserId_Logged, vm.oUserId_Logged));
                //    }

                ////}


                ////auto-update the church root - church body : RCM000
                //using (var _cbCtx = new ChurchModelContext(_context.Database.GetDbConnection().ConnectionString))
                //{
                //    var oCBCntAdd = 0; var oCBCntUpd = 0;
                //    //  _userTask = "Attempted saving church level, " + _oChanges.ToUpper();  // _userTask = "Added new church level, " + _oChanges.OwnerName.ToUpper() + " successfully";   //  _userTask = "Updated church level, " + _oChanges.OwnerName.ToUpper() + " successfully";

                //    var oCL_1 = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == _oChanges.Id && c.LevelIndex == 1).FirstOrDefault();
                //    if (vmMod.oAppGlobalOwn.Id == 0)
                //    {
                //        ChurchBody oCB = new ChurchBody()
                //        {
                //            Name = _oChanges.OwnerName,
                //            OrgType = "CR",
                //            AppGlobalOwnerId = _oChanges.Id,
                //            ChurchLevelId = oCL_1 != null ? oCL_1.Id : (int?)null,
                //            // CountryId = _oChanges.CountryId,
                //            CtryAlpha3Code = _oChanges.CtryAlpha3Code,
                //            CountryRegionId = null,
                //            GlobalChurchCode = _oChanges.GlobalChurchCode,
                //            RootChurchCode = _oChanges.RootChurchCode,
                //            //ChurchUnitLogo = _oChanges.ChurchLogo,
                //            ParentChurchBodyId = null,
                //            Status = "A",
                //            Created = DateTime.Now,
                //            LastMod = DateTime.Now,
                //            CreatedByUserId = _oChanges.CreatedByUserId,
                //            LastModByUserId = _oChanges.LastModByUserId
                //        };

                //        oCBCntAdd++;
                //        _cbCtx.Add(oCB);

                //        if (oCBCntAdd > 0)
                //        {
                //            _userTask = "Added Church Root unit for " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
                //            ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + "Created " + oCBCntAdd + " church root unit";
                //        }
                //    }
                //    else
                //    {
                //        var oCBList = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == _oChanges.Id && c.OrgType == "CR" && c.Status == "A").ToList();
                //        if (oCBList.Count() == 0)
                //        {
                //            ChurchBody oCB = new ChurchBody()
                //            {
                //                Name = _oChanges.OwnerName,
                //                OrgType = "CR",
                //                AppGlobalOwnerId = _oChanges.Id,
                //                ChurchLevelId = oCL_1 != null ? oCL_1.Id : (int?)null,
                //                CtryAlpha3Code = _oChanges.CtryAlpha3Code,
                //                CountryRegionId = null,
                //                GlobalChurchCode = _oChanges.GlobalChurchCode,
                //                RootChurchCode = _oChanges.RootChurchCode,
                //                //ChurchUnitLogo = _oChanges.ChurchLogo,
                //                ParentChurchBodyId = null,
                //                Status = "A",
                //                Created = DateTime.Now,
                //                LastMod = DateTime.Now,
                //                CreatedByUserId = _oChanges.CreatedByUserId,
                //                LastModByUserId = _oChanges.LastModByUserId
                //            };

                //            oCBCntAdd++;
                //            _cbCtx.Add(oCB);
                //        }
                //        else
                //        {
                //            var recUpdated = false;
                //            if (string.Compare(oCBList[0].Name, _oChanges.OwnerName, true) != 0) { oCBList[0].Name = _oChanges.OwnerName; recUpdated = true; }
                //            if (oCBList[0].AppGlobalOwnerId != _oChanges.Id) { oCBList[0].AppGlobalOwnerId = _oChanges.Id; recUpdated = true; }
                //            if (oCBList[0].ChurchLevelId != (oCL_1 != null ? oCL_1.Id : (int?)null)) { oCBList[0].ChurchLevelId = (oCL_1 != null ? oCL_1.Id : (int?)null); recUpdated = true; }
                //            if (oCBList[0].ParentChurchBodyId != null) { oCBList[0].ParentChurchBodyId = null; recUpdated = true; }
                //            if (oCBList[0].CtryAlpha3Code != _oChanges.CtryAlpha3Code) { oCBList[0].CtryAlpha3Code = _oChanges.CtryAlpha3Code; recUpdated = true; }
                //            if (string.Compare(oCBList[0].GlobalChurchCode, _oChanges.GlobalChurchCode, true) != 0) { oCBList[0].GlobalChurchCode = _oChanges.GlobalChurchCode; recUpdated = true; }
                //            if (string.Compare(oCBList[0].RootChurchCode, _oChanges.RootChurchCode, true) != 0) { oCBList[0].RootChurchCode = _oChanges.RootChurchCode; recUpdated = true; }

                //            if (recUpdated)
                //            {
                //                oCBList[0].LastMod = DateTime.Now;
                //                oCBList[0].LastModByUserId = _oChanges.LastModByUserId;
                //                //
                //                oCBCntUpd++;
                //                _cbCtx.Update(oCBList[0]);
                //            }
                //        }

                //        if ((oCBCntAdd + oCBCntUpd) > 0)
                //        {
                //            if (oCBCntAdd > 0)
                //            {
                //                _userTask = "Added Church Root unit for " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
                //                ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + "Created " + oCBCntAdd + " church root unit";
                //            }

                //            if (oCBCntUpd > 0)
                //            {
                //                _userTask = !string.IsNullOrEmpty(_userTask) ? _userTask + ". " : "" + "Updated Church Root unit for " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
                //                ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + "Denomination's " + oCBCntUpd + " Church Root unit updated.";
                //            }
                //        }
                //    }

                //    if ((oCBCntAdd + oCBCntUpd) > 0)
                //    {
                //        await _cbCtx.SaveChangesAsync();

                //        using (var agoCtx = new ChurchModelContext(_context.Database.GetDbConnection().ConnectionString))

                //            DetachAllEntities(_cbCtx);

                //        _tm = DateTime.Now;
                //        _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                         "RCMS-Admin: Church Unit", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oUserId_Logged, _tm, _tm, vm.oUserId_Logged, vm.oUserId_Logged));
                //    }

                //}

                var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);
                TempData["oVmCurr"] = _vmMod; TempData.Keep();

                return Json(new { taskSuccess = true, oCurrId = _oChanges.Id, resetNew = _reset, userMess = ViewBag.UserMsg });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed saving denomination (church) details. Err: " + ex.Message });
            }
 
        }


        /// CB --- 3 sync this from the Vendor's central DB
        [HttpGet]
        public IActionResult AddOrEdit_CB(int id = 0, int? oAppGloOwnId = null, int? oChurchBodyId = null, int? oUserId = null, int setIndex = 3)  
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return null; //// View("_ErrorPage");
                    }
                }

                //var arrData = TempData.ContainsKey("UserLogIn_oUserPrivCol") ? TempData["UserLogIn_oUserPrivCol"] as string : "";
                //var httpContext = _httpContextAccessor.HttpContext;
                //var tempData = _tempDataDictionaryFactory.GetTempData(httpContext);

                //if (tempData.ContainsKey("UserLogIn_oUserPrivCol"))


                // if (!InitializeUserLogging())
                // return RedirectToAction("LoginUserAcc", "UserLogin");

                if (oAppGloOwnId == null) oAppGloOwnId = this._oLoggedAGO.Id;
                // if (oParentChurchBodyId == null) oChurchBodyId = this._oLoggedCB.Id;
                if (oUserId == null) oUserId = this._oLoggedUser.Id;

                var strDesc = "Church Body";
                var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();  // _userTask = "Attempted creating new denomination (church)"; // _userTask = "Opened denomination (church)-" + oCFT_MDL.oChurchFaithType.FaithDescription;

                var oAGO = _context.AppGlobalOwner.Find(oAppGloOwnId);
                var oCB_Parent = _context.ChurchBody.Where(c=> c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchBodyId).FirstOrDefault();
                if (oAGO == null || oCB_Parent == null)  // church bodies are networked...
                {
                    
                    return PartialView("_ErrorPage");
                }

                var oCBModel = new ChurchBodyModel(); 

                //if (id == 0)
                //{
                //    //create user and init... 
                //    oCBModel.oChurchBody = new ChurchBody();
                //    oCBModel.oChurchBody.AppGlobalOwnerId = oAppGloOwnId;
                //    oCBModel.oAppGloOwnId = oAppGloOwnId;
                //   // oCBModel.oChurchBodyId = 0;
                //    oCBModel.numChurchLevel_Index = _context.ChurchLevel.Count(c => c.AppGlobalOwnerId == oAppGloOwnId);  //use what's configured... not digit at AGO
                //    ///
                //    oCBModel.oAppGlobalOwn = oAGO;

                //    //church code  
                //    if (!string.IsNullOrEmpty(oCBModel.oAppGlobalOwn.PrefixKey))
                //    {
                //        var template = new { taskSuccess = String.Empty, strRes = String.Empty };
                //        var jsCode = GetNextGlobalChurchCodeByAcronym_jsonString(oCBModel.oAppGlobalOwn.PrefixKey, oCBModel.oChurchBody.AppGlobalOwnerId);  // string json1 = @"{'Name':'James'}";
                //        oCBModel.oChurchBody.GlobalChurchCode = jsCode;
                //        // oCBModel.oChurchBody.RootChurchCode = strCBFullCode; 
                //    }

                //    oCBModel.oChurchBody.ParentChurchBodyId = oCB_Parent.Id; // oCBModel.oAppGlobalOwn.CtryAlpha3Code;
                //    oCBModel.oChurchBody.ChurchLevelId = oCB_Parent.ChurchLevelId;  //may not be diff tho... but same or lower 
                //    oCBModel.oChurchBody.OrgType = "CG"; // oCB_Parent.OrgType;  //may not be diff tho...  lookup ... CR, CH, CN, GB [default], IB
                //    oCBModel.oChurchBody.CtryAlpha3Code = oCB_Parent.CtryAlpha3Code; // oCBModel.oAppGlobalOwn.CtryAlpha3Code;
                //    oCBModel.oChurchBody.CountryRegionId = oCB_Parent.CountryRegionId; //may not be diff tho...                      
                //    //
                //    oCBModel.oChurchBody.Created = DateTime.Now;
                //    oCBModel.oChurchBody.LastMod = DateTime.Now;
                //    oCBModel.strAppGlobalOwn = oCBModel.oAppGlobalOwn.OwnerName;
                //    oCBModel.oChurchBody.SharingStatus = "N";
                //    oCBModel.oChurchBody.OwnedByChurchBodyId = this._oLoggedCB.Id;  
                //    oCBModel.oChurchBody.ChurchWorkStatus = "OP";  // OPerationalized - OP, STructure only - ST  
                //    oCBModel.oChurchBody.Status = "A"; oCBModel.bl_IsActivated = true;
                //    oCBModel.oChurchBody.IsFullAutonomy = true;
                //    /// 
                //    oCBModel.strCBLevel = "Congregation";
                //    oCBModel.oChurchBody.IsSupervisedByParentUnit = true;
                //    oCBModel.strSupervisedByChurchBody = "Choose Supervising Congregation";  
                //    oCBModel.oChurchBody.SupervisedByChurchBodyId = oCBModel.oChurchBody.ParentChurchBodyId;   
                //    oCBModel.numSupervisedByBodyCLId = oCB_Parent.ChurchLevelId;  // must be higher CL or same  
                //    ///
                //    oCBModel.strOrgType = GetChuOrgTypeDesc(oCBModel.oChurchBody.OrgType);
                //    oCBModel.strStatus = GetStatusDesc(oCBModel.oChurchBody.Status);
                //    oCBModel.strOwnershipCode = ("O");  // I -- Inherited, O -- Originated   i.e. currChurchBody == OwnedByChurchBody
                //    oCBModel.strOwnershipStatus = GetAdhocStatusDesc(oCBModel.strOwnershipCode);
                //    oCBModel.strChurchWorkStatus = GetAdhocStatusDesc(oCBModel.oChurchBody.ChurchWorkStatus);
                //    oCBModel.strSharingStatus = GetSharingStatusDesc(oCBModel.oChurchBody.SharingStatus);

                //    ///
                //    oCBModel.strOwnedByChurchBody = oCB_Parent.Name; //this._oLoggedCB.Name;
                //    var oCL = _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == oCB_Parent.AppGlobalOwnerId && c.Id == oCB_Parent.ChurchLevelId).FirstOrDefault();
                //    oCBModel.strChurchLevel_OwnedByCB = oCL != null ? (!string.IsNullOrEmpty(oCL.CustomName) ? oCL.CustomName : oCL.Name) : "";
                     
                //    //oCBModel.bl_IsFullAutonomy = true;  
                //    ///
                //    _userTask = "Attempted creating new " + strDesc.ToLower();
                     
                //}
                //else 

                if (id > 0)
                {  
                    var oCB_List_1 = _context.ChurchBody.Include(t => t.CountryRegion).Include(t => t.Country).AsNoTracking()
                            .Where(c => c.AppGlobalOwnerId == _oLoggedAGO.Id && c.Id == id &&
                            (c.OrgType == "CR" || c.OrgType == "CH" || c.OrgType == "CN")).ToList(); // jux for structure   ... c.OrgType == "GB" || c.OrgType == "IB" || 

                    //oCB_List_1 = oCB_List_1.Where(c =>
                    //                   (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    oCBModel = (
                        from t_cb in oCB_List_1
                        from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == t_cb.AppGlobalOwnerId)
                        from t_cl in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.Id == t_cb.ChurchLevelId) //.DefaultIfEmpty()
                        from t_cb_p in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.Id == t_cb.ParentChurchBodyId && (c.OrgType != "CN")).DefaultIfEmpty()  // (c.OrgType != "CR" || c.OrgType == "CH" || c.OrgType == "CN")
                        from t_ci in _context.ContactInfo.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.ChurchBodyId == t_cb.Id && c.Id == t_cb.ContactInfoId).DefaultIfEmpty()
                        from t_cb_sp in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.Id == t_cb.SupervisedByChurchBodyId).DefaultIfEmpty()
                        from t_cl_p in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.Id == (t_cb_p != null ? t_cb_p.ChurchLevelId : (int?)null)).DefaultIfEmpty()
                        from t_ci_ago in _context.ContactInfo.Include(t => t.Country).AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cl.AppGlobalOwnerId && c.ChurchBodyId == null && c.Id == t_ago.ContactInfoId).DefaultIfEmpty()
                        from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_cb.OwnedByChurchBodyId).DefaultIfEmpty()
                                    
                        
                        //  from t_cb_sp in _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.SupervisedByUnitId).DefaultIfEmpty()

                        select new ChurchBodyModel()
                        {
                            oAppGloOwnId = t_cb.AppGlobalOwnerId,
                            oAppGlobalOwn = t_ago, //t_cb.AppGlobalOwner,
                            oChurchBodyId = t_cb.Id,
                            ///
                            //oAppGloOwnId_MSTR = t_cb.MSTR_AppGlobalOwnerId,
                            //oChurchBodyId_MSTR = t_cb.MSTR_ChurchBodyId,
                            //oParentChurchBodyId_MSTR = t_cb.MSTR_ParentChurchBodyId,
                            //oChurchLevelId_MSTR = t_cb.MSTR_ChurchLevelId, 
                            /// 
                            oChurchBody = t_cb,
                            strChurchBody = t_cb.Name,
                            strAppGlobalOwn = t_ago.OwnerName + (!string.IsNullOrEmpty(t_ago.OwnerName) ? (t_ci_ago != null ? (t_ci_ago.Country != null ? t_ci_ago.Country.EngName : "") : "") : ""),
                            //                                      
                          //  strOwnedByChurchBody = t_cb.OwnedByChurchBody != null ? t_cb.OwnedByChurchBody.Name : "",
                            
                            oChurchBody_par = t_cb_p,
                            strParentChurchBody = t_cb_p != null ? t_cb_p.Name : "None. [choose church body]",
                            numParentChurchBodyId = t_cb_p != null ? t_cb_p.Id : (int?)null,
                            numParentBodyCLId = t_cb_p != null ? t_cb_p.ChurchLevelId : (int?)null,
                            strParentCBLevel = t_cb_p != null ? (t_cb_p.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_p.ChurchLevel.CustomName) ? t_cb_p.ChurchLevel.CustomName : t_cb_p.ChurchLevel.Name) : "") : "",

                            oChurchBody_sup = t_cb_sp,
                            strSupervisedByChurchBody = t_cb_sp != null ? t_cb_sp.Name : "None. [choose supervising body]",
                            numSupervisedByCBId = t_cb_sp != null ? t_cb_sp.Id : (int?)null,
                            numSupervisedByBodyCLId = t_cb_sp != null ? t_cb_sp.ChurchLevelId : (int?)null,
                            strCBLevel_sup = t_cb_sp != null ? (t_cb_sp.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_sp.ChurchLevel.CustomName) ? t_cb_sp.ChurchLevel.CustomName : t_cb_sp.ChurchLevel.Name) : "") : "",

                            arrRootChurchCodes = t_cb != null ? t_cb.RootChurchCode.Split("--").ToList<string>() : new List<string>(),
                            arrRootChurchCodes_par = t_cb_p != null ? t_cb_p.RootChurchCode.Split("--").ToList<string>() : new List<string>(),
                            arrRootChurchCodes_sup = t_cb_sp != null ? t_cb_sp.RootChurchCode.Split("--").ToList<string>() : new List<string>(),

                            numChurchLevel_Index = t_cl.LevelIndex,
                            strCBLevel = t_cl != null ? (!string.IsNullOrEmpty(t_cl.CustomName) ? t_cl.CustomName : t_cl.Name) : "",
                            strChurchLevel = (t_cb.ChurchLevelId == null && t_cb.OrgType == "CR") ? "Church Root" : (!string.IsNullOrEmpty(t_cl.CustomName) ? t_cl.CustomName : t_cl.Name),
                            strDateFormed = t_cb.DateFormed != null ? DateTime.Parse(t_cb.DateFormed.ToString()).ToString("d MMM, yyyy", CultureInfo.InvariantCulture) : "",
                            strDateInnaug = t_cb.DateInnaug != null ? DateTime.Parse(t_cb.DateInnaug.ToString()).ToString("d MMM, yyyy", CultureInfo.InvariantCulture) : "",
                            //strDateDeactive = t_cb.DateDeactive != null ? DateTime.Parse(t_cb.DateDeactive.ToString()).ToString("d MMM, yyyy", CultureInfo.InvariantCulture) : "",
                            strOrgType = GetChuOrgTypeDesc(t_cb.OrgType),
                            strFaithTypeCategory = t_ago.strFaithTypeCategory, // t_ago != null ? ((!string.IsNullOrEmpty(t_ago.strFaithTypeCategory) && !string.IsNullOrEmpty(t_ago.strFaithTypeStream) ? t_ago.strFaithTypeCategory + ", " + t_ago.strFaithTypeStream : t_ago.strFaithTypeCategory + t_ago.strFaithTypeStream).Trim()) : "",
                            strCountry = t_cb.Country != null ? (!string.IsNullOrEmpty(t_cb.Country.EngName) ? t_cb.Country.EngName : t_cb.Country.CtryAlpha3Code) : t_cb.CtryAlpha3Code,  //t_cb.Country != null ? t_cb.Country.EngName : "",
                            strCountryRegion = t_cb.CountryRegion != null ? t_cb.CountryRegion.Name : "",
                            strParentCB_HeaderDesc = t_cl_p != null ? (!string.IsNullOrEmpty(t_cl_p.CustomName) ? "Parent Body (" + t_cl_p.CustomName + ")" : "Parent Body") : "Parent Body",
                            strCongLoc = t_ci != null ? (!string.IsNullOrEmpty(t_ci.Location) && !string.IsNullOrEmpty(t_ci.City) ? t_ci.Location + ", " + t_ci.City : t_ci.Location + t_ci.City).Trim() : "",
                            strCongLoc2 = (t_cb.CountryRegion != null && t_cb.Country != null ? t_cb.CountryRegion.Name + ", " + t_cb.Country.EngName : (t_cb.CountryRegion != null ? t_cb.CountryRegion.Name : "") + (t_cb.Country != null ? t_cb.Country.EngName : "")).Trim(),
                            bl_IsActivated = t_cb.Status == "A",
                            // bl_IsFullAutonomy = t_cb.IsFullAutonomy,
                            //
                            dtCreated = t_cb.Created,
                            //    
                            strStatus = GetStatusDesc(t_cb.Status),
                            strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
                            strOwnershipCode = t_cb.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : "O",  //t_cb.Id == t_cb.OwnedByChurchBodyId ? "O" : "I",
                            strOwnershipStatus = GetAdhocStatusDesc(t_cb.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : "O"),
                            strChurchWorkStatus = GetAdhocStatusDesc(t_cb.ChurchWorkStatus),
                            strSharingStatus = GetSharingStatusDesc(t_cb.SharingStatus),
                            strChurchLogo = t_cb.ChurchBodyLogo  
                        })
                        .OrderByDescending(c => c.dtCreated) //.OrderBy(c => c.strCountry).OrderBy(c => c.numCLIndex).OrderBy(c => c.strChurchBody)
                        .FirstOrDefault();

                    var chkValidModel = oCBModel != null;
                    chkValidModel = chkValidModel ? oCBModel.oChurchBody != null : chkValidModel; 
                    if (!chkValidModel)
                    {  //page not found error
                        
                        return View("_ErrorPage");
                    }


                    //// get the parent CB path...
                    //var masterCBList = _context.ChurchBody.AsNoTracking()
                    //                    .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId && oCBModel.arrRootChurchCodes_par.Contains(c.GlobalChurchCode))
                    //                    .OrderBy(c => (c.ChurchLevel != null ? c.ChurchLevel.LevelIndex : (int?)null)).ToList();

                    //oCBModel.arrRootChurchIds_par = new List<object>();
                    //for (int k = 0; k < 10; k++) 
                    //    oCBModel.arrRootChurchIds_par.Add((int?)null); // initialize the template ... 10 max
                    //if (oCBModel.arrRootChurchCodes_par.Count > 0)
                    //{
                    //    var oCB_par = masterCBList.Where(c => c.GlobalChurchCode == oCBModel.arrRootChurchCodes_par[0]).FirstOrDefault();
                    //    if (oCB_par != null) oCBModel.arrRootChurchIds_par[0] = oCB_par.Name + " (Church Root)";
                    //    for (var i = 1; i < oCBModel.arrRootChurchCodes_par.Count; i++)
                    //    {
                    //        oCB_par = masterCBList.Where(c => c.GlobalChurchCode == oCBModel.arrRootChurchCodes_par[i]).FirstOrDefault();
                    //        if (oCB_par != null) oCBModel.arrRootChurchIds_par[i] = oCB_par.Name; // oCB_par != null ? oCB_par.Id : (int?)null; 
                    //    }

                    //    //if (oCBModel.oCBLevelCount == oCBModel.arrRootChurchCodes_par.Count)
                    //    //{
                    //    //    oCB_par = masterCBList.Where(c => c.GlobalChurchCode == oCBModel.arrRootChurchCodes_par[oCBModel.arrRootChurchCodes_par.Count - 1]).FirstOrDefault();
                    //    //    oCBModel.numParentChurchBodyId = oCB_par != null ? oCB_par.Id : (int?)null;
                    //    //    oCBModel.strParentChurchBody = oCB_par != null ? oCB_par.Name : "";
                    //    //    oCBModel.strParentCBLevel = oCB_par != null ? (oCB_par.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB_par.ChurchLevel.CustomName) ? oCB_par.ChurchLevel.CustomName : oCB_par.ChurchLevel.Name) : "*") : "*";
                    //    //}
                    //}

                    //// get the sup CB path... use either ChurchCode [must av bn ordered! else trouble..] or CB Id to trace path...
                    //masterCBList = _context.ChurchBody.AsNoTracking().Include(t=>t.ParentChurchBody).Include(t=>t.ChurchLevel)
                    //                    .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId && oCBModel.arrRootChurchCodes_sup.Contains(c.GlobalChurchCode))
                    //                    //.OrderBy(c=> (c.ChurchLevel != null ? c.ChurchLevel.LevelIndex : (int?)null))
                    //                    .ToList();

                    //oCBModel.arrRootChurchIds_sup = new List<object>();
                    //for (int k = 0; k < 10; k++) oCBModel.arrRootChurchIds_sup.Add((int?)null); // initialize the template
                    //if (oCBModel.arrRootChurchCodes_sup.Count > 0)
                    //{
                    //    var oCB_sup = masterCBList.Where(c => c.GlobalChurchCode == oCBModel.arrRootChurchCodes_sup[0]).FirstOrDefault();
                    //    if (oCB_sup != null) oCBModel.arrRootChurchIds_sup[0] = oCB_sup.Name + " (Church Root)";
                    //    for (var i = 1; i < oCBModel.arrRootChurchCodes_sup.Count; i++)
                    //    {
                    //        oCB_sup = masterCBList.Where(c => c.GlobalChurchCode == oCBModel.arrRootChurchCodes_sup[i]).FirstOrDefault();
                    //        if (oCB_sup != null) oCBModel.arrRootChurchIds_sup[i] = oCB_sup.Id; // oCB_sup != null ? oCB_sup.Id : (int?)null; 
                    //    } 
                    //}



                    // get the par CB path... use either ChurchCode [must av bn ordered! else trouble..] or CB Id to trace path...
                    var masterCBList = _context.ChurchBody.AsNoTracking().Include(t => t.ParentChurchBody).Include(t => t.ChurchLevel)
                                        .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId && oCBModel.arrRootChurchCodes_par.Contains(c.GlobalChurchCode))
                                        .ToList();
                    oCBModel.arrRootChurchIds_par = new List<object>();
                    for (int k = 0; k < 10; k++) oCBModel.arrRootChurchIds_par.Add((int?)null); // initialize the template
                    ///
                    var oCBNextParent_par = masterCBList.Where(c => c.Id == oCBModel.oChurchBody_par.Id && c.GlobalChurchCode == oCBModel.oChurchBody_par.GlobalChurchCode).FirstOrDefault();
                    var listCount_par = 0;
                    if (oCBNextParent_par != null)
                    {
                        listCount_par = (oCBNextParent_par.ChurchLevel != null ? oCBNextParent_par.ChurchLevel.LevelIndex : listCount_par);
                        listCount_par = listCount_par - 1;
                        oCBModel.arrRootChurchIds_par[listCount_par] = oCBNextParent_par.Name; //oCBNextParent_par.Id;     
                    }               
                    for (int i = listCount_par - 1; i > 0; i--)
                    {
                        oCBNextParent_par = masterCBList.Where(c => c.Id == oCBNextParent_par.ParentChurchBodyId && c.GlobalChurchCode == oCBNextParent_par.ParentChurchBody.GlobalChurchCode).FirstOrDefault();
                        if (oCBNextParent_par != null)
                            oCBModel.arrRootChurchIds_par[i] = oCBNextParent_par.Name; //oCBNextParent_par.Id;                         
                    }
                     
                    //oCBNextParent_par = masterCBList.Where(c => c.Id == oCBNextParent_par.Id && c.GlobalChurchCode == oCBNextParent_par.GlobalChurchCode).FirstOrDefault();
                    oCBNextParent_par = masterCBList.Where(c => c.OrgType == "CR" && c.MSTR_ParentChurchBodyId == null && c.ParentChurchBodyId == null).FirstOrDefault();
                    if (oCBNextParent_par != null)
                        oCBModel.arrRootChurchIds_par[0] = oCBNextParent_par.Name + " (Church Root)";  // base CB usually the name of the church -- CR


                    // get the sup CB path... use either ChurchCode [must av bn ordered! else trouble..] or CB Id to trace path...
                    masterCBList = _context.ChurchBody.AsNoTracking().Include(t => t.ParentChurchBody).Include(t => t.ChurchLevel)
                                        .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId && oCBModel.arrRootChurchCodes_sup.Contains(c.GlobalChurchCode))
                                        .ToList();
                    oCBModel.arrRootChurchIds_sup = new List<object>();
                    for (int k = 0; k < 10; k++) oCBModel.arrRootChurchIds_sup.Add((int?)null); // initialize the template
                    ///
                    var oCBNextParent_sup = masterCBList.Where(c => c.Id == oCBModel.oChurchBody_sup.Id && c.GlobalChurchCode == oCBModel.oChurchBody_sup.GlobalChurchCode).FirstOrDefault();
                    var listCount_sup = 0;
                    if (oCBNextParent_sup != null)
                    {
                        listCount_sup = (oCBNextParent_sup.ChurchLevel != null ? oCBNextParent_sup.ChurchLevel.LevelIndex : listCount_sup);
                        listCount_sup = listCount_sup - 1;
                        oCBModel.arrRootChurchIds_sup[listCount_sup] = oCBNextParent_sup.Name; //oCBNextParent_sup.Id;  
                    }
                   
                    for (int i = listCount_sup - 1; i > 0; i--)
                    {
                        oCBNextParent_sup = masterCBList.Where(c => c.Id == oCBNextParent_sup.ParentChurchBodyId && c.GlobalChurchCode == oCBNextParent_sup.ParentChurchBody.GlobalChurchCode).FirstOrDefault();
                        if (oCBNextParent_sup != null)
                            oCBModel.arrRootChurchIds_sup[i] = oCBNextParent_sup.Name; //oCBNextParent_sup.Id;                         
                    }

                    oCBNextParent_sup = masterCBList.Where(c => c.Id == oCBNextParent_sup.Id && c.GlobalChurchCode == oCBNextParent_sup.GlobalChurchCode).FirstOrDefault();
                    if (oCBNextParent_sup != null)
                        oCBModel.arrRootChurchIds_sup[0] = oCBNextParent_sup.Name + " (Church Root)";  // base CB usually the name of the church -- CR

                }


                oCBModel.oCBLevelCount = oCBModel.numChurchLevel_Index; // - 1;        // oCBLevelCount -= 2;  // less requesting CB
                List<ChurchLevel> oCBLevelList = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == oCBModel.oChurchBody.AppGlobalOwnerId && c.LevelIndex > 0 && c.LevelIndex <= oCBModel.numChurchLevel_Index).ToList().OrderBy(c => c.LevelIndex).ToList();
                ///
                if (oCBModel.oCBLevelCount > 0 && oCBLevelList.Count > 0)
                {
                    oCBModel.strChurchLevel_1 = !string.IsNullOrEmpty(oCBLevelList[0].CustomName) ? oCBLevelList[0].CustomName : oCBLevelList[0].Name;
                    ViewBag.strChurchLevel_1 = oCBModel.strChurchLevel_1;

                    ///
                    //var oCB_1 = _context.ChurchBody.Include(t => t.ChurchLevel)
                    //                  .Where(c => c.AppGlobalOwnerId == oCBModel.oChurchBody.AppGlobalOwnerId && // c.Status == "A" && 
                    //                        c.ChurchLevel.LevelIndex == 1 && c.OrgType == "CR") //c.ChurchLevelId == oCBLevelList[0].Id &&
                    //                  .FirstOrDefault();

                    //if (oCB_1 != null)
                    //{ oCBModel.ChurchBodyId_1 = oCB_1.Id; oCBModel.strChurchBody_1 = oCB_1.Name + " (Church Root)"; }

                    //ViewBag.ChurchBodyId_1 = oCBModel.ChurchBodyId_1;
                    //ViewBag.strChurchBody_1 = oCBModel.strChurchBody_1;

                    //if (oCBModel.oCBLevelCount == 1)
                    //{
                    //    oCBModel.numParentChurchBodyId = oCBModel.ChurchBodyId_1;
                    //    oCBModel.strParentChurchBody = oCBModel.strChurchBody_1;
                    //    oCBModel.strParentCBLevel = oCBModel.strChurchLevel_1;
                    //}
                    ///
                   
                    if (oCBModel.oCBLevelCount > 1)
                    {
                        oCBModel.strChurchLevel_2 = !string.IsNullOrEmpty(oCBLevelList[1].CustomName) ? oCBLevelList[1].CustomName : oCBLevelList[1].Name;
                        ViewBag.strChurchLevel_2 = oCBModel.strChurchLevel_2;
                        ///
                        //var lsCB_2 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCBModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[1].Id).ToList();
                        //var oCB_2 = lsCB_2.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCBModel.oChurchBody.RootChurchCode, c.Id, oCBModel.oChurchBody.ParentChurchBodyId)).ToList();
                        //if (oCB_2.Count() != 0)
                        //{ oCBModel.ChurchBodyId_2 = oCB_2[0].Id; oCBModel.strChurchBody_2 = oCB_2[0].Name; }
                        //ViewBag.ChurchBodyId_2 = oCBModel.ChurchBodyId_2; ViewBag.strChurchBody_2 = oCBModel.strChurchBody_2;


                        //if (oCBModel.oCBLevelCount == 2)
                        //{
                        //    oCBModel.numParentChurchBodyId = oCBModel.ChurchBodyId_2;
                        //    oCBModel.strParentChurchBody = oCBModel.strChurchBody_2;
                        //    oCBModel.strParentCBLevel = oCBModel.strChurchLevel_2;
                        //}

                        if (oCBModel.oCBLevelCount > 2)
                        {
                            oCBModel.strChurchLevel_3 = !string.IsNullOrEmpty(oCBLevelList[2].CustomName) ? oCBLevelList[2].CustomName : oCBLevelList[2].Name;
                            ViewBag.strChurchLevel_3 = oCBModel.strChurchLevel_3;
                            ///
                            //var lsCB_3 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCBModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[2].Id).ToList();
                            //var oCB_3 = lsCB_3.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCBModel.oChurchBody.RootChurchCode, c.Id, oCBModel.oChurchBody.ParentChurchBodyId)).ToList();
                            //if (oCB_3.Count() != 0)
                            //{ oCBModel.ChurchBodyId_3 = oCB_3[0].Id; oCBModel.strChurchBody_3 = oCB_3[0].Name; }
                            //ViewBag.ChurchBodyId_3 = oCBModel.ChurchBodyId_3; ViewBag.strChurchBody_3 = oCBModel.strChurchBody_3;

                            //if (oCBModel.oCBLevelCount == 3)
                            //{
                            //    oCBModel.numParentChurchBodyId = oCBModel.ChurchBodyId_3;
                            //    oCBModel.strParentChurchBody = oCBModel.strChurchBody_3;
                            //    oCBModel.strParentCBLevel = oCBModel.strChurchLevel_3;
                            //}

                            if (oCBModel.oCBLevelCount > 3)
                            {
                                oCBModel.strChurchLevel_4 = !string.IsNullOrEmpty(oCBLevelList[3].CustomName) ? oCBLevelList[3].CustomName : oCBLevelList[3].Name;
                                ViewBag.strChurchLevel_4 = oCBModel.strChurchLevel_4;
                                ///
                                //var lsCB_4 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCBModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[3].Id).ToList();
                                //var oCB_4 = lsCB_4.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCBModel.oChurchBody.RootChurchCode, c.Id, oCBModel.oChurchBody.ParentChurchBodyId)).ToList();
                                //if (oCB_4.Count() != 0)
                                //{ oCBModel.ChurchBodyId_4 = oCB_4[0].Id; oCBModel.strChurchBody_4 = oCB_4[0].Name; }
                                //ViewBag.ChurchBodyId_4 = oCBModel.ChurchBodyId_4; ViewBag.strChurchBody_4 = oCBModel.strChurchBody_4;

                                //if (oCBModel.oCBLevelCount == 4)
                                //{
                                //    oCBModel.numParentChurchBodyId = oCBModel.ChurchBodyId_4;
                                //    oCBModel.strParentChurchBody = oCBModel.strChurchBody_4;
                                //    oCBModel.strParentCBLevel = oCBModel.strChurchLevel_4;
                                //}

                                if (oCBModel.oCBLevelCount > 4)
                                {
                                    oCBModel.strChurchLevel_5 = !string.IsNullOrEmpty(oCBLevelList[4].CustomName) ? oCBLevelList[4].CustomName : oCBLevelList[4].Name;
                                    ViewBag.strChurchLevel_5 = oCBModel.strChurchLevel_5;
                                    ///
                                    //var lsCB_5 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCBModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[4].Id).ToList();
                                    //var oCB_5 = lsCB_5.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCBModel.oChurchBody.RootChurchCode, c.Id, oCBModel.oChurchBody.ParentChurchBodyId)).ToList();
                                    //if (oCB_5.Count() != 0)
                                    //{ oCBModel.ChurchBodyId_5 = oCB_5[0].Id; oCBModel.strChurchBody_5 = oCB_5[0].Name; }
                                    //ViewBag.ChurchBodyId_5 = oCBModel.ChurchBodyId_5; ViewBag.strChurchBody_5 = oCBModel.strChurchBody_5;

                                    //if (oCBModel.oCBLevelCount == 5)
                                    //{
                                    //    oCBModel.numParentChurchBodyId = oCBModel.ChurchBodyId_5;
                                    //    oCBModel.strParentChurchBody = oCBModel.strChurchBody_5;
                                    //    oCBModel.strParentCBLevel = oCBModel.strChurchLevel_5;
                                    //}

                                    if (oCBModel.oCBLevelCount > 5)
                                    {
                                        oCBModel.strChurchLevel_6 = !string.IsNullOrEmpty(oCBLevelList[5].CustomName) ? oCBLevelList[5].CustomName : oCBLevelList[5].Name;
                                        ViewBag.strChurchLevel_6 = oCBModel.strChurchLevel_6;

                                        if (oCBModel.oCBLevelCount > 6)
                                        {
                                            oCBModel.strChurchLevel_7 = !string.IsNullOrEmpty(oCBLevelList[6].CustomName) ? oCBLevelList[6].CustomName : oCBLevelList[6].Name;
                                            ViewBag.strChurchLevel_7 = oCBModel.strChurchLevel_7;

                                            if (oCBModel.oCBLevelCount > 7)
                                            {
                                                oCBModel.strChurchLevel_8 = !string.IsNullOrEmpty(oCBLevelList[7].CustomName) ? oCBLevelList[7].CustomName : oCBLevelList[7].Name;
                                                ViewBag.strChurchLevel_8 = oCBModel.strChurchLevel_8;

                                                if (oCBModel.oCBLevelCount > 8)
                                                {
                                                    oCBModel.strChurchLevel_9 = !string.IsNullOrEmpty(oCBLevelList[8].CustomName) ? oCBLevelList[8].CustomName : oCBLevelList[8].Name;
                                                    ViewBag.strChurchLevel_9 = oCBModel.strChurchLevel_9;

                                                    if (oCBModel.oCBLevelCount > 9)
                                                    {
                                                        oCBModel.strChurchLevel_10 = !string.IsNullOrEmpty(oCBLevelList[9].CustomName) ? oCBLevelList[9].CustomName : oCBLevelList[9].Name;
                                                        ViewBag.strChurchLevel_10 = oCBModel.strChurchLevel_10;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                      
                      
               _userTask = "Opened " + strDesc.ToLower() + ", " + oCBModel.oAppGlobalOwn.OwnerName;

               oCBModel.setIndex = setIndex;
               // oAGO_MDL.subSetIndex = subSetIndex; 

                oCBModel.oUserId_Logged = this._oLoggedUser.Id;
                oCBModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                oCBModel.oChurchBodyId_Logged = this._oLoggedCB.Id;

                /// load lookups
                oCBModel = this.popLookups_CB(oCBModel, oCBModel.oChurchBody);

                var tm = DateTime.Now;
                // refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");  ///, _context, _connstr_CL



                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "T",
                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                        );

                var _oCBModel = Newtonsoft.Json.JsonConvert.SerializeObject(oCBModel);
                TempData["oVmCurrMod"] = _oCBModel;
                // TempData["_bckUserLogIn_oUserPrivCol"] = TempData["UserLogIn_oUserPrivCol"]; 
                
                TempData.Keep();



                // oCBModel.oChurchBody == working CB ... edit only some allowed parts [ Vendor does most changes at subscriber level ]
                if (setIndex == 4) //(setIndex == 3 && oCBModel.oChurchBody.Id == this._oLoggedCB.Id && (oCBModel.oChurchBody.OrgType=="CH" || oCBModel.oChurchBody.OrgType=="CN")) 
                    return PartialView("_AddOrEdit_CBA", oCBModel); 
                else 
                    return PartialView("_AddOrEdit_CB", oCBModel);  // if CH or CN ... new CB must be picked in [lookup as config by vendor]
              
            }

            catch (Exception ex) 
            {
                //page not found error
                
                return View("_ErrorPage");
            }
        }


        //[HttpGet]
        //public IActionResult GetTargetCB(int? oAppGloOwnId = null, int? oChurchBodyId = null, int? oTargetCBId = null, string strId_TCB = "", string strName_TCB = "")
        //{
        //    try
        //    { 
        //        var oCBModel = new TargetCBModel();
        //        oCBModel.oAppGloOwnId = oAppGloOwnId;   // current AGO of request
        //        oCBModel.oChurchBodyId = oChurchBodyId;   // current CB of request 
        //        oCBModel.oTargetCBId = oTargetCBId;     // target CB of request == initial CB ...  
        //        var _oTargetCBId = oTargetCBId;
        //        ///
        //        oCBModel.strId_TCB = strId_TCB;
        //        oCBModel.strName_TCB = strName_TCB;
        //        ///
        //        if (oCBModel.oAppGloOwnId == null || oCBModel.oChurchBodyId == null) return View("_ErrorPage");  // current denom and cong cannot be null
        //        //if (oCBModel.oTargetCBId == null) oCBModel.oTargetCBId = oCBModel.oChurchBodyId;
        //        ///
        //        oCBModel.oTargetCB = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel) //.Include(t => t.ParentChurchBody)
        //                            .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId && c.Id== oCBModel.oTargetCBId)
        //                            .FirstOrDefault();

        //        //if (oCBModel.oTargetCB != null ) return View("_ErrorPage");
        //        oCBModel.numChurchLevel_Index = _context.ChurchLevel.AsNoTracking().Count(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId); //oCBModel.oTargetCB.ChurchLevel.LevelIndex;
        //        oCBModel.strTargetCB = "None. [choose church body]"; oCBModel.strTargetCL = "";
        //        oCBModel.arrRootCBIds = new List<object>();
        //        oCBModel.arrRootCBNames = new List<string>();
        //        for (int k = 0; k < 10; k++)
        //        {
        //            oCBModel.arrRootCBIds.Add((int?)null); // initialize the template
        //            oCBModel.arrRootCBNames.Add(null); // initialize the template
        //        }
        //        /// pre-load the list...
        //        if (_oTargetCBId != null)
        //        {
        //            oCBModel.strTargetCB = oCBModel.oTargetCB.Name;
        //            oCBModel.strTargetCL = !string.IsNullOrEmpty(oCBModel.oTargetCB.ChurchLevel.CustomName) ? oCBModel.oTargetCB.ChurchLevel.CustomName : oCBModel.oTargetCB.ChurchLevel.Name;

        //            oCBModel.arrRootCBCodes = oCBModel.oTargetCB != null ? oCBModel.oTargetCB.RootChurchCode.Split("--").ToList<string>() : new List<string>();
        //            // oCBModel.oTargetCLId = currCB.ChurchLevelId;

        //            // get the CB path... use either ChurchCode [must av bn ordered! else trouble..] or CB Id to trace path...
        //            var masterCBList = _context.ChurchBody.AsNoTracking().Include(t => t.ParentChurchBody).Include(t => t.ChurchLevel)
        //                                .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId && 
        //                                (oCBModel.oTargetCB == null || (oCBModel.oTargetCB != null && oCBModel.arrRootCBCodes.Contains(c.GlobalChurchCode))))
        //                                .ToList();

        //            ///
        //            var oCBNextParent = masterCBList.Where(c => c.Id == oCBModel.oTargetCB.Id && c.GlobalChurchCode == oCBModel.oTargetCB.GlobalChurchCode).FirstOrDefault();
        //            var listCount = 0;
        //            if (oCBNextParent != null)
        //            {
        //                listCount = (oCBNextParent.ChurchLevel != null ? oCBNextParent.ChurchLevel.LevelIndex : listCount);
        //                listCount = listCount - 1;
        //                oCBModel.arrRootCBIds[listCount] = oCBNextParent.Id;
        //                oCBModel.arrRootCBNames[listCount] = oCBNextParent.Name;
        //            }
        //            for (int i = listCount - 1; i > 0; i--)
        //            {
        //                oCBNextParent = masterCBList
        //                    .Where(c => c.Id == oCBNextParent.ParentChurchBodyId && c.GlobalChurchCode == oCBNextParent.ParentChurchBody.GlobalChurchCode)
        //                    .FirstOrDefault();
        //                if (oCBNextParent != null)
        //                {
        //                    oCBModel.arrRootCBIds[i] = oCBNextParent.Id;
        //                    oCBModel.arrRootCBNames[i] = oCBNextParent.Name;
        //                }
        //            }

        //            // add the root
        //            oCBNextParent = masterCBList.Where(c => c.OrgType == "CR" && c.MSTR_ParentChurchBodyId == null && c.ParentChurchBodyId == null).FirstOrDefault();
        //            if (oCBNextParent != null)
        //            {
        //                oCBModel.arrRootCBIds[0] = oCBNextParent.Id;  // base CB usually the name of the church -- CR
        //                oCBModel.arrRootCBNames[0] = oCBNextParent.Name + " (Church Root)";  // base CB usually the name of the church -- CR
        //            }
        //        }

        //        else
        //        {
        //            // add the root
        //            var oCBNextParent = _context.ChurchBody.AsNoTracking().Include(t => t.ParentChurchBody).Include(t => t.ChurchLevel)
        //                                .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId && c.OrgType == "CR" && c.MSTR_ParentChurchBodyId == null && c.ParentChurchBodyId == null).FirstOrDefault();
        //            if (oCBNextParent != null)
        //            {
        //                oCBModel.arrRootCBIds[0] = oCBNextParent.Id;  // base CB usually the name of the church -- CR
        //                oCBModel.arrRootCBNames[0] = oCBNextParent.Name + " (Church Root)";  // base CB usually the name of the church -- CR
        //            }
        //        }


        //        oCBModel.oCBLevelCount = oCBModel.numChurchLevel_Index; // - 1;        // oCBLevelCount -= 2;  // less requesting CB
        //        List<ChurchLevel> oCBLevelList = _context.ChurchLevel
        //            .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId && c.LevelIndex > 0 && c.LevelIndex <= oCBModel.numChurchLevel_Index)
        //            .ToList().OrderBy(c => c.LevelIndex).ToList();
        //        ///
        //        if (oCBModel.oCBLevelCount > 0 && oCBLevelList.Count > 0)
        //        {
        //            oCBModel.strChurchLevel_1 = !string.IsNullOrEmpty(oCBLevelList[0].CustomName) ? oCBLevelList[0].CustomName : oCBLevelList[0].Name;
        //            ViewBag.strChurchLevel_1 = oCBModel.strChurchLevel_1;

        //            if (oCBModel.oCBLevelCount > 1)
        //            {
        //                oCBModel.strChurchLevel_2 = !string.IsNullOrEmpty(oCBLevelList[1].CustomName) ? oCBLevelList[1].CustomName : oCBLevelList[1].Name;
        //                ViewBag.strChurchLevel_2 = oCBModel.strChurchLevel_2;

        //                if (oCBModel.oCBLevelCount > 2)
        //                {
        //                    oCBModel.strChurchLevel_3 = !string.IsNullOrEmpty(oCBLevelList[2].CustomName) ? oCBLevelList[2].CustomName : oCBLevelList[2].Name;
        //                    ViewBag.strChurchLevel_3 = oCBModel.strChurchLevel_3;

        //                    if (oCBModel.oCBLevelCount > 3)
        //                    {
        //                        oCBModel.strChurchLevel_4 = !string.IsNullOrEmpty(oCBLevelList[3].CustomName) ? oCBLevelList[3].CustomName : oCBLevelList[3].Name;
        //                        ViewBag.strChurchLevel_4 = oCBModel.strChurchLevel_4;

        //                        if (oCBModel.oCBLevelCount > 4)
        //                        {
        //                            oCBModel.strChurchLevel_5 = !string.IsNullOrEmpty(oCBLevelList[4].CustomName) ? oCBLevelList[4].CustomName : oCBLevelList[4].Name;
        //                            ViewBag.strChurchLevel_5 = oCBModel.strChurchLevel_5;

        //                            if (oCBModel.oCBLevelCount > 5)
        //                            {
        //                                oCBModel.strChurchLevel_6 = !string.IsNullOrEmpty(oCBLevelList[5].CustomName) ? oCBLevelList[5].CustomName : oCBLevelList[5].Name;
        //                                ViewBag.strChurchLevel_6 = oCBModel.strChurchLevel_6;

        //                                if (oCBModel.oCBLevelCount > 6)
        //                                {
        //                                    oCBModel.strChurchLevel_7 = !string.IsNullOrEmpty(oCBLevelList[6].CustomName) ? oCBLevelList[6].CustomName : oCBLevelList[6].Name;
        //                                    ViewBag.strChurchLevel_7 = oCBModel.strChurchLevel_7;

        //                                    if (oCBModel.oCBLevelCount > 7)
        //                                    {
        //                                        oCBModel.strChurchLevel_8 = !string.IsNullOrEmpty(oCBLevelList[7].CustomName) ? oCBLevelList[7].CustomName : oCBLevelList[7].Name;
        //                                        ViewBag.strChurchLevel_8 = oCBModel.strChurchLevel_8;

        //                                        if (oCBModel.oCBLevelCount > 8)
        //                                        {
        //                                            oCBModel.strChurchLevel_9 = !string.IsNullOrEmpty(oCBLevelList[8].CustomName) ? oCBLevelList[8].CustomName : oCBLevelList[8].Name;
        //                                            ViewBag.strChurchLevel_9 = oCBModel.strChurchLevel_9;

        //                                            if (oCBModel.oCBLevelCount > 9)
        //                                            {
        //                                                oCBModel.strChurchLevel_10 = !string.IsNullOrEmpty(oCBLevelList[9].CustomName) ? oCBLevelList[9].CustomName : oCBLevelList[9].Name;
        //                                                ViewBag.strChurchLevel_10 = oCBModel.strChurchLevel_10;
        //                                            }
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //            }
        //        }


        //        //oCBModel.oUserId_Logged = this._oLoggedUser.Id;
        //        //oCBModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
        //        //oCBModel.oChurchBodyId_Logged = this._oLoggedCB.Id;

        //        /// load lookups
        //        // oCUModel = this.popLookups_CU(oCUModel, oCUModel.oChurchUnit);

        //        //var tm = DateTime.Now;
        //        //_ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "T",
        //        //                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
        //        //    );

        //        //var _oCUModel = Newtonsoft.Json.JsonConvert.SerializeObject(oCUModel);
        //        //TempData["oVmCurrMod"] = _oCUModel; TempData.Keep();

        //        oCBModel.lkpChurchLevels = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId)
        //                                  .OrderByDescending(c => c.LevelIndex)
        //                                  .Select(c => new SelectListItem()
        //                                  {
        //                                      Value = c.Id.ToString(),
        //                                      Text = !string.IsNullOrEmpty(c.CustomName) ? c.CustomName : c.Name,
        //                                      // Disabled = (numCLIndex == (int?)null || c.LevelIndex < numCLIndex || oCurrChurchBody.OrgType == "CH" || oCurrChurchBody.OrgType == "CN")
        //                                  })
        //                                  .ToList();

        //        return PartialView("_GetTargetCB", oCBModel);

        //    }

        //    catch (Exception ex)
        //    {
        //        //page not found error
        //        
        //        return View("_ErrorPage");
        //    }
        //}



        [HttpGet]
        public IActionResult GetTargetCB(int? oAppGloOwnId = null, int? oChurchBodyId = null, int? oTargetCBId = null, 
                                         string strId_TCB = "", string strName_TCB = "", string strCLId_TCB = "", string strCLName_TCB = "", string strCLTag_TCB = "")
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId );
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return null; //// View("_ErrorPage");
                    }
                }


                var oCBModel = new TargetCBModel();
                oCBModel.oAppGloOwnId = oAppGloOwnId;     // current AGO of request
                oCBModel.oChurchBodyId = oChurchBodyId;  // current CB of request 
                ///
                // initialize
                oCBModel.oTargetCBId = oTargetCBId;     // target CB of request == initial CB ...  
                var _oTargetCBId = oTargetCBId;

                oCBModel.oTargetCLId = null; // oTargetCLId;  

                ///
                oCBModel.strId_TCB = strId_TCB != null ? strId_TCB : "";
                oCBModel.strName_TCB = strName_TCB != null ? strName_TCB : "";
                oCBModel.strCLId_TCB = strCLId_TCB != null ? strCLId_TCB : "";
                oCBModel.strCLName_TCB = strCLName_TCB != null ? strCLName_TCB : "";
                oCBModel.strCLTag_TCB = strCLTag_TCB != null ? strCLTag_TCB : "Church Body";
                ///
                if (oCBModel.oAppGloOwnId == null)
                    return View("_ErrorPage");  // || oCBModel.oChurchBodyId == null current denom and cong cannot be null

                //if (oCBModel.oTargetCBId == null) oCBModel.oTargetCBId = oCBModel.oChurchBodyId;


                //if (oCBModel.oTargetCB != null ) return View("_ErrorPage");
                oCBModel.numChurchLevel_Index = _context.ChurchLevel.AsNoTracking().Count(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId); //oCBModel.oTargetCB.ChurchLevel.LevelIndex;
                oCBModel.strTargetCB = "None. (choose church body)"; oCBModel.strTargetCL = "";
                oCBModel.arrRootCBIds = new List<object>();
                oCBModel.arrRootCBNames = new List<string>();
                for (int k = 0; k < 10; k++)
                {
                    oCBModel.arrRootCBIds.Add((int?)null); // initialize the template
                    oCBModel.arrRootCBNames.Add(""); // initialize the template 
                }

                //init... all
                oCBModel.strChurchLevel_1 = ""; oCBModel.strChurchLevel_2 = ""; oCBModel.strChurchLevel_3 = ""; oCBModel.strChurchLevel_4 = ""; oCBModel.strChurchLevel_5 = "";
                oCBModel.strChurchLevel_6 = ""; oCBModel.strChurchLevel_7 = ""; oCBModel.strChurchLevel_8 = ""; oCBModel.strChurchLevel_9 = ""; oCBModel.strChurchLevel_10 = "";
                ///
                ViewBag.strChurchLevel_1 = oCBModel.strChurchLevel_1; ViewBag.strChurchLevel_2 = oCBModel.strChurchLevel_2; ViewBag.strChurchLevel_3 = oCBModel.strChurchLevel_3; ViewBag.strChurchLevel_4 = oCBModel.strChurchLevel_4; ViewBag.strChurchLevel_5 = oCBModel.strChurchLevel_5;
                ViewBag.strChurchLevel_6 = oCBModel.strChurchLevel_6; ViewBag.strChurchLevel_7 = oCBModel.strChurchLevel_7; ViewBag.strChurchLevel_8 = oCBModel.strChurchLevel_8; ViewBag.strChurchLevel_9 = oCBModel.strChurchLevel_9; ViewBag.strChurchLevel_10 = oCBModel.strChurchLevel_10;


                ///
                oCBModel.oTargetCB = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel) //.Include(t => t.ParentChurchBody)
                                    .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId && c.Id == oCBModel.oTargetCBId)
                                    .FirstOrDefault();

                /// pre-load the list...
                if (_oTargetCBId != null && oCBModel.oTargetCB != null)
                {
                    oCBModel.oTargetCLId = oCBModel.oTargetCB.ChurchLevelId;
                    oCBModel.strTargetCB = oCBModel.oTargetCB != null ? oCBModel.oTargetCB.Name : ""; //oCBModel.oTargetCB.Name;
                    oCBModel.strTargetCL = !string.IsNullOrEmpty(oCBModel.oTargetCB.ChurchLevel.CustomName) ? oCBModel.oTargetCB.ChurchLevel.CustomName : oCBModel.oTargetCB.ChurchLevel.Name;

                    oCBModel.arrRootCBCodes = oCBModel.oTargetCB != null ? oCBModel.oTargetCB.RootChurchCode.Split("--").ToList<string>() : new List<string>();
                    // oCBModel.oTargetCLId = currCB.ChurchLevelId;

                    // get the CB path... use either ChurchCode [must av bn ordered! else trouble..] or CB Id to trace path...
                    var masterCBList = _context.ChurchBody.AsNoTracking().Include(t => t.ParentChurchBody).Include(t => t.ChurchLevel)
                                        .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId &&
                                        (oCBModel.oTargetCB == null || (oCBModel.oTargetCB != null && oCBModel.arrRootCBCodes.Contains(c.GlobalChurchCode))))
                                        .ToList();

                    //var masterCBList = (from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                    //                               .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId &&
                    //                               (oCBModel.oTargetCB == null || (oCBModel.oTargetCB != null && oCBModel.arrRootCBCodes.Contains(c.GlobalChurchCode))))
                    //                    from t_cb_p in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                    //                               .Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.Id == t_cb.ParentChurchBodyId).DefaultIfEmpty()
                    //                    select new ChurchBody()
                    //                    {
                    //                        Id = t_cb.Id,
                    //                        AppGlobalOwnerId = t_cb.AppGlobalOwnerId,
                    //                        ChurchLevelId = t_cb.ChurchLevelId,
                    //                        Name = t_cb.Name,
                    //                        GlobalChurchCode = t_cb.GlobalChurchCode,
                    //                        RootChurchCode = t_cb.RootChurchCode,
                    //                        OrgType = t_cb.OrgType,
                    //                        ParentChurchBodyId = t_cb.ParentChurchBodyId,
                    //                        ContactInfoId = t_cb.ContactInfoId,
                    //                        IsWaiveSubscription = t_cb.IsWaiveSubscription,
                    //                        SubscriptionKey = t_cb.SubscriptionKey,
                    //                        LicenseKey = t_cb.LicenseKey,
                    //                        CtryAlpha3Code = t_cb.CtryAlpha3Code,
                    //                        CountryRegionId = t_cb.CountryRegionId,
                    //                        Comments = t_cb.Comments,
                    //                        ChurchWorkStatus = t_cb.ChurchWorkStatus,
                    //                        Status = t_cb.Status,
                    //                        ///
                    //                        ParentChurchBody = t_cb_p,
                    //                    })
                    //                    .ToList();

                    /////
                    //var oCBNextParent = masterCBList.Where(c => c.Id == oCBModel.oTargetCB.Id && c.GlobalChurchCode == oCBModel.oTargetCB.GlobalChurchCode).FirstOrDefault();
                    //var listCount = 0;
                    //if (oCBNextParent != null)
                    //{
                    //    listCount = (oCBNextParent.ChurchLevel != null ? oCBNextParent.ChurchLevel.LevelIndex : listCount);
                    //    listCount = listCount - 1;
                    //    oCBModel.arrRootCBIds[listCount] = oCBNextParent.Id;
                    //    oCBModel.arrRootCBNames[listCount] = oCBNextParent.Name;
                    //}

                    ///
                    var listCount = 0;
                    ChurchBody oCBNextParent = oCBModel.oTargetCB;   // initial CB
                    if (masterCBList.Count > 1)   // leave the root... to append later
                    {
                        if (oCBNextParent == null) oCBNextParent = masterCBList.Where(c => c.Id == oCBModel.oTargetCB.Id && c.GlobalChurchCode == oCBModel.oTargetCB.GlobalChurchCode).FirstOrDefault();

                        if (oCBNextParent != null)
                        {
                            if (oCBNextParent.ChurchLevel == null) oCBNextParent.ChurchLevel = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == oCBNextParent.AppGlobalOwnerId && c.Id == oCBNextParent.ChurchLevelId).FirstOrDefault();
                            ///
                            if (oCBNextParent.ChurchLevel != null)
                            {
                                listCount = oCBNextParent.ChurchLevel.LevelIndex; // (oCBNextParent.ChurchLevel != null ? oCBNextParent.ChurchLevel.LevelIndex : listCount);
                                listCount = listCount - 1;
                                oCBModel.arrRootCBIds[listCount] = oCBNextParent.Id;
                                oCBModel.arrRootCBNames[listCount] = oCBNextParent.Name;
                            }
                        }
                    }


                    for (int i = listCount - 1; i > 0; i--)
                    {
                        if (oCBNextParent.ParentChurchBody == null)
                            oCBNextParent.ParentChurchBody = _context.ChurchBody
                                .Where(c => c.AppGlobalOwnerId == oCBNextParent.AppGlobalOwnerId && c.Id == oCBNextParent.ParentChurchBodyId).FirstOrDefault();

                        var oNextCC = "";
                        if (oCBNextParent.ParentChurchBody != null) oNextCC = oCBNextParent.ParentChurchBody.GlobalChurchCode;
                        ///
                        oCBNextParent = masterCBList.Where(c => c.Id == oCBNextParent.ParentChurchBodyId && c.GlobalChurchCode == oNextCC).FirstOrDefault();
                        if (oCBNextParent == null) break; // loop out

                        oCBModel.arrRootCBIds[i] = oCBNextParent.Id;
                        oCBModel.arrRootCBNames[i] = oCBNextParent.Name;
                    }


                    //for (int i = listCount - 1; i > 0; i--)
                    //{
                    //    oCBNextParent = masterCBList
                    //        .Where(c => c.Id == oCBNextParent.ParentChurchBodyId && c.GlobalChurchCode == oCBNextParent.ParentChurchBody.GlobalChurchCode)
                    //        .FirstOrDefault();
                    //    if (oCBNextParent != null)
                    //    {
                    //        oCBModel.arrRootCBIds[i] = oCBNextParent.Id;
                    //        oCBModel.arrRootCBNames[i] = oCBNextParent.Name;
                    //    }
                    //}


                    // add the root
                    oCBNextParent = masterCBList.Where(c => c.OrgType == "CR" && c.ParentChurchBodyId == null).FirstOrDefault();
                    if (oCBNextParent != null)
                    {
                        oCBModel.arrRootCBIds[0] = oCBNextParent.Id;  // base CB usually the name of the church -- CR
                        oCBModel.arrRootCBNames[0] = oCBNextParent.Name + " (Church Head)";  // base CB usually the name of the church -- CR
                    }
                }

                else
                {
                    // add the root
                    var oCBNextParent = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)  // .Include(t => t.ParentChurchBody)
                                        .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId && c.OrgType == "CR" && c.ParentChurchBodyId == null).FirstOrDefault();
                    if (oCBNextParent != null)
                    {
                        oCBModel.arrRootCBIds[0] = oCBNextParent.Id;  // base CB usually the name of the church -- CR
                        oCBModel.arrRootCBNames[0] = oCBNextParent.Name + " (Church Head)";  // base CB usually the name of the church -- CR
                    }
                }


                oCBModel.oCBLevelCount = oCBModel.numChurchLevel_Index; // - 1;        // oCBLevelCount -= 2;  // less requesting CB
                List<ChurchLevel> oCBLevelList = _context.ChurchLevel
                    .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId && c.LevelIndex > 0 && c.LevelIndex <= oCBModel.numChurchLevel_Index)
                    .ToList().OrderBy(c => c.LevelIndex).ToList();
                ///
                if (oCBModel.oCBLevelCount > 0 && oCBLevelList.Count > 0)
                {
                    oCBModel.strChurchLevel_1 = !string.IsNullOrEmpty(oCBLevelList[0].CustomName) ? oCBLevelList[0].CustomName : oCBLevelList[0].Name;
                    ViewBag.strChurchLevel_1 = oCBModel.strChurchLevel_1;

                    if (oCBModel.oCBLevelCount > 1)
                    {
                        oCBModel.strChurchLevel_2 = !string.IsNullOrEmpty(oCBLevelList[1].CustomName) ? oCBLevelList[1].CustomName : oCBLevelList[1].Name;
                        ViewBag.strChurchLevel_2 = oCBModel.strChurchLevel_2;

                        if (oCBModel.oCBLevelCount > 2)
                        {
                            oCBModel.strChurchLevel_3 = !string.IsNullOrEmpty(oCBLevelList[2].CustomName) ? oCBLevelList[2].CustomName : oCBLevelList[2].Name;
                            ViewBag.strChurchLevel_3 = oCBModel.strChurchLevel_3;

                            if (oCBModel.oCBLevelCount > 3)
                            {
                                oCBModel.strChurchLevel_4 = !string.IsNullOrEmpty(oCBLevelList[3].CustomName) ? oCBLevelList[3].CustomName : oCBLevelList[3].Name;
                                ViewBag.strChurchLevel_4 = oCBModel.strChurchLevel_4;

                                if (oCBModel.oCBLevelCount > 4)
                                {
                                    oCBModel.strChurchLevel_5 = !string.IsNullOrEmpty(oCBLevelList[4].CustomName) ? oCBLevelList[4].CustomName : oCBLevelList[4].Name;
                                    ViewBag.strChurchLevel_5 = oCBModel.strChurchLevel_5;

                                    if (oCBModel.oCBLevelCount > 5)
                                    {
                                        oCBModel.strChurchLevel_6 = !string.IsNullOrEmpty(oCBLevelList[5].CustomName) ? oCBLevelList[5].CustomName : oCBLevelList[5].Name;
                                        ViewBag.strChurchLevel_6 = oCBModel.strChurchLevel_6;

                                        if (oCBModel.oCBLevelCount > 6)
                                        {
                                            oCBModel.strChurchLevel_7 = !string.IsNullOrEmpty(oCBLevelList[6].CustomName) ? oCBLevelList[6].CustomName : oCBLevelList[6].Name;
                                            ViewBag.strChurchLevel_7 = oCBModel.strChurchLevel_7;

                                            if (oCBModel.oCBLevelCount > 7)
                                            {
                                                oCBModel.strChurchLevel_8 = !string.IsNullOrEmpty(oCBLevelList[7].CustomName) ? oCBLevelList[7].CustomName : oCBLevelList[7].Name;
                                                ViewBag.strChurchLevel_8 = oCBModel.strChurchLevel_8;

                                                if (oCBModel.oCBLevelCount > 8)
                                                {
                                                    oCBModel.strChurchLevel_9 = !string.IsNullOrEmpty(oCBLevelList[8].CustomName) ? oCBLevelList[8].CustomName : oCBLevelList[8].Name;
                                                    ViewBag.strChurchLevel_9 = oCBModel.strChurchLevel_9;

                                                    if (oCBModel.oCBLevelCount > 9)
                                                    {
                                                        oCBModel.strChurchLevel_10 = !string.IsNullOrEmpty(oCBLevelList[9].CustomName) ? oCBLevelList[9].CustomName : oCBLevelList[9].Name;
                                                        ViewBag.strChurchLevel_10 = oCBModel.strChurchLevel_10;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }


                //oCBModel.oUserId_Logged = this._oLoggedUser.Id;
                //oCBModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                //oCBModel.oChurchBodyId_Logged = this._oLoggedCB.Id;

                /// load lookups
                // oCUModel = this.popLookups_CU(oCUModel, oCUModel.oChurchUnit);

                //var tm = DateTime.Now;
                //_ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "T",
                //                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                //    );

                //var _oCUModel = Newtonsoft.Json.JsonConvert.SerializeObject(oCUModel);
                //TempData["oVmCurrMod"] = _oCUModel; TempData.Keep();

                oCBModel.lkpChurchLevels = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId)
                                          .OrderByDescending(c => c.LevelIndex)
                                          .Select(c => new SelectListItem()
                                          {
                                              Value = c.Id.ToString(),
                                              Text = !string.IsNullOrEmpty(c.CustomName) ? c.CustomName : c.Name,
                                              // Disabled = (numCLIndex == (int?)null || c.LevelIndex < numCLIndex || oCurrChurchBody.OrgType == "CH" || oCurrChurchBody.OrgType == "CN")
                                          })
                                          .ToList();

                return PartialView("_GetTargetCB", oCBModel);

            }

            catch (Exception ex)
            {
                //page not found error
                
                return View("_ErrorPage");
            }
        }




        public ChurchBodyModel popLookups_CB(ChurchBodyModel vm, ChurchBody oCurrChurchBody)
        {
            if (vm == null || oCurrChurchBody == null) return vm;
            //
            vm.lkpStatuses = new List<SelectListItem>();
            foreach (var dl in dlGenStatuses) { vm.lkpStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpChurchWorkStatuses = new List<SelectListItem>();
            foreach (var dl in dlChuWorkStats) { vm.lkpChurchWorkStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpSharingStatuses = new List<SelectListItem>();
            foreach (var dl in dlShareStatus)
            { vm.lkpSharingStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpOrgTypes = new List<SelectListItem>();
            foreach (var dl in dlCBDivOrgTypes) 
            { //  dl.Val=="CR" || dl.Val=="GB" || dl.Val=="IB" || 
                if (dl.Val=="CH" || dl.Val=="CN")   // CO, DP, CE, CG, SC  // CP, TM
                    vm.lkpOrgTypes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc, //Disabled = (dl.Val == "CH" || dl.Val == "CN") 
                    }); 
            }

            //var oCL = _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == oCurrChurchBody.AppGlobalOwnerId && c.Id == oCurrChurchBody.ChurchLevelId).FirstOrDefault();
            //var numCLIndex = oCL != null ? oCL.LevelIndex : (int?)null;

            vm.lkpChurchLevels = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == oCurrChurchBody.AppGlobalOwnerId)
                                          .OrderByDescending(c => c.LevelIndex)
                                          .Select(c => new SelectListItem()
                                          {
                                              Value = c.Id.ToString(),
                                              Text = !string.IsNullOrEmpty(c.CustomName) ? c.CustomName : c.Name,
                                             // Disabled = (numCLIndex == (int?)null || c.LevelIndex < numCLIndex || oCurrChurchBody.OrgType == "CH" || oCurrChurchBody.OrgType == "CN")
                                          })
                                          .ToList();

            vm.lkpCountries = _context.Country.AsNoTracking().ToList()  //.Where(c => c.Display == true)
                                          .Select(c => new SelectListItem()
                                          {
                                              Value = c.CtryAlpha3Code, // .ToString(),
                                              Text = c.EngName
                                          })
                                          .OrderBy(c => c.Value)
                                          .ToList();
            return vm;
        }


        public JsonResult GetNextCodePrefixByAcronym(string strPrefix_AGO, string strPrefix_CL = "")
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }


            var strPrefix = strPrefix_AGO + (!string.IsNullOrEmpty(strPrefix_CL) ? "-" + strPrefix_CL : "");

            // if (_context == null)
                // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, strRes = "" });

            var tempCode = strPrefix.ToUpper(); // + tempCnt; //+ string.Format("{0:N0}", tempCnt);
            var fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
            if (fsCount == 0) return Json(new { taskSuccess = true, strRes = tempCode });
            else
            {
                var tempCnt = 1; tempCode = strPrefix.ToUpper() + tempCnt; //+ string.Format("{0:N0}", tempCnt);
                fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
                var res = false;
                while (fsCount > 0 && fsCount < 10)
                {
                    tempCnt++; tempCode = strPrefix.ToUpper() + tempCnt; //+ string.Format("{0:N0}", tempCnt);
                    fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
                    //
                    res = fsCount == 0;
                }

                return Json(new { taskSuccess = res, strRes = tempCode });
            }
        }
        public string GetNextCodePrefixByAcronym_jsonString(string strPrefix_AGO, string strPrefix_CL)
        {
            var strPrefix = strPrefix_AGO + (!string.IsNullOrEmpty(strPrefix_CL) ? "-" + strPrefix_CL : "");

            // if (_context == null)
                // if (!InitializeUserLogging()) return string.Empty;

            var tempCode = strPrefix.ToUpper(); // + tempCnt; // string.Format("{0:N0}", tempCnt);
            var fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
            if (fsCount == 0) return tempCode; // @"{'taskSuccess' : " + true + ", strRes :'" + tempCode + "'}";
            else
            {
                var tempCnt = 1; tempCode = strPrefix.ToUpper() + tempCnt; // + string.Format("{0:N0}", tempCnt);
                fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
                var res = false;
                while (fsCount > 0 && fsCount < 10)
                {
                    tempCnt++; tempCode = strPrefix.ToUpper() + tempCnt; //+ string.Format("{0:N0}", tempCnt);
                    fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
                    //
                    res = fsCount == 0;
                }

                return tempCode;  // @"{'taskSuccess' : " + res + ", strRes :'" + tempCode + "'}";
            }
        }
        public JsonResult GetNextGlobalChurchCodeByAcronym(int? oAppGloOwnId, string strPrefix_AGO, string strPrefix_CL)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            var strPrefix = strPrefix_AGO + (!string.IsNullOrEmpty(strPrefix_CL) ? "-" + strPrefix_CL : "");

           // if (_context == null)
                // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, strRes = string.Empty });

            var fsCount = _context.ChurchBody.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OrgType != "CR");
            var tempCnt = fsCount + 1; var tempCode = strPrefix.ToUpper() + string.Format("{0:D3}", tempCnt);
            fsCount = _context.ChurchBody.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.GlobalChurchCode == tempCode);
            if (fsCount == 0) return Json(new { taskSuccess = true, strRes = tempCode });
            else
            {
                tempCnt++; tempCode = strPrefix.ToUpper() + string.Format("{0:D3}", tempCnt);
                fsCount = _context.ChurchBody.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.GlobalChurchCode == tempCode);
                var res = false;
                while (fsCount > 0 && fsCount < 10)
                {
                    tempCnt++; tempCode = strPrefix.ToUpper() + string.Format("{0:D3}", tempCnt);
                    fsCount = _context.ChurchBody.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.GlobalChurchCode == tempCode);
                    //
                    res = fsCount == 0;
                }

                return Json(new { taskSuccess = res, strRes = tempCode });
            }
        }
        public string GetNextGlobalChurchCodeByAcronym_jsonString(int? oAppGloOwnId, string strPrefix_AGO, string strPrefix_CL)
        {
            var strPrefix = strPrefix_AGO + (!string.IsNullOrEmpty(strPrefix_CL) ? "-" + strPrefix_CL : "");

            // if (_context == null)
                // if (!InitializeUserLogging()) return  string.Empty ;

            var fsCount = _context.ChurchBody.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OrgType != "CR");
            var tempCnt = fsCount + 1; var tempCode = strPrefix.ToUpper() + string.Format("{0:D3}", tempCnt);
            fsCount = _context.ChurchBody.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.GlobalChurchCode == tempCode);
            if (fsCount == 0) return tempCode; // @"{'taskSuccess' : " + true + ", strRes :'" + tempCode + "'}"; 
            else
            {
                tempCnt++; tempCode = strPrefix.ToUpper() + string.Format("{0:D3}", tempCnt);
                fsCount = _context.ChurchBody.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.GlobalChurchCode == tempCode);
                var res = false;
                while (fsCount > 0 && fsCount < 10)
                {
                    tempCnt++; tempCode = strPrefix.ToUpper() + string.Format("{0:D3}", tempCnt);
                    fsCount = _context.ChurchBody.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.GlobalChurchCode == tempCode);
                    //
                    res = fsCount == 0;
                }

                return tempCode; // @"{'taskSuccess' : " + res + ", strRes :'" + tempCode + "'}";
            }
        }
        public JsonResult GetNextRootChurchCodeByParentCB(int? oAppGloOwnId, int? oParChurchBodyId, string strCBChurchCode, string strPrefix_AGO, string strPrefix_CL)
        {

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }


            //   var strPrefix = strPrefix_AGO + (strPrefix_CL.Length != 0 ? "-" + strPrefix_CL : "");

            //get the church code
            //get the church code
            if (string.IsNullOrEmpty(strCBChurchCode))
            {
                var template = new { taskSuccess = String.Empty, strRes = String.Empty };   // var definition = new { Name = "" };
                var jsCBChurchCode = GetNextGlobalChurchCodeByAcronym_jsonString(oAppGloOwnId, strPrefix_AGO, strPrefix_CL);  // string json1 = @"{'Name':'James'}";
                var jsOut = JsonConvert.DeserializeAnonymousType(jsCBChurchCode, template);

                if (jsOut != null)
                    if (bool.Parse(jsOut.taskSuccess) == true)
                        strCBChurchCode = jsOut.strRes;
            }


            // if (_context == null)
                // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, strRes = string.Empty });

            var oParCB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oParChurchBodyId && c.Status == "A").FirstOrDefault();
            if (oParCB != null && !string.IsNullOrEmpty(strCBChurchCode))
            {
                var strRootCode = oParCB.RootChurchCode + (!string.IsNullOrEmpty(oParCB.RootChurchCode) ? "--" + strCBChurchCode : strCBChurchCode);
                return Json(new { taskSuccess = true, strRes = strRootCode });

                //if (!string.IsNullOrEmpty(oParCB.RootChurchCode))
                //    return Json(new { taskSuccess = true, strRes = oParCB.RootChurchCode + "--" + strCBChurchCode });
            }

            return Json(new { taskSuccess = false, strRes = strCBChurchCode });
        }
        public string GetNextRootChurchCodeByParentCB_jsonString(int? oAppGloOwnId, int? oParChurchBodyId, string strCBChurchCode, string strPrefix_AGO, string strPrefix_CL)
        {
           // var strPrefix = strPrefix_AGO + (strPrefix_CL.Length != 0 ? "-" + strPrefix_CL : "");

            //get the church code
            if (string.IsNullOrEmpty(strCBChurchCode))
                strCBChurchCode = GetNextGlobalChurchCodeByAcronym_jsonString(oAppGloOwnId, strPrefix_AGO, strPrefix_CL);

            // var template = new { taskSuccess = String.Empty, strRes = String.Empty };   // var definition = new { Name = "" };
            //  var jsCBChurchCode = GetNextGlobalChurchCodeByAcronym_jsonString(prefixCode, oAppGloOwnId);  // string json1 = @"{'Name':'James'}";
            //var jsOut = JsonConvert.DeserializeAnonymousType(jsCBChurchCode, template);

            //if (jsOut != null)
            //    if (bool.Parse(jsOut.taskSuccess) == true)
            //        strCBChurchCode = jsOut.strRes;

            // if (_context == null)
                // if (!InitializeUserLogging()) return  string.Empty ;

            var oParCB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oParChurchBodyId && c.Status == "A").FirstOrDefault();
            if (oParCB != null && !string.IsNullOrEmpty(strCBChurchCode))
            {
                var strRootCode = oParCB.RootChurchCode + (!string.IsNullOrEmpty(oParCB.RootChurchCode) ? "--" + strCBChurchCode : strCBChurchCode);
                return strRootCode;

                //if (!string.IsNullOrEmpty(oParCB.RootChurchCode))
                //    return oParCB.RootChurchCode + "--" + strCBChurchCode; // @"{'taskSuccess' : " + true + ", strRes :'" + oParCB.RootChurchCode + "--" + strCBChurchCode + "'}"; 
            }

            return strCBChurchCode; // @"{'taskSuccess' : " + false + ", strRes :''}";
        }

        public JsonResult GetChurchBodyRootCodeByCBId_json(int? oChurchBodyId, int? oAGOId)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAGOId != null ? oAGOId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, strRes = string.Empty });

            var oCB = _context.ChurchBody.AsNoTracking()  // .Include(t => t.FaithTypeClass)
                .Where(c => c.AppGlobalOwnerId == oAGOId && c.Id == oChurchBodyId).FirstOrDefault(); 
            
            return Json(new { taskSuccess = (oCB != null), strRoot = (oCB != null ? oCB.RootChurchCode : "") });
        }

        public JsonResult GetCountryByParentChurchBody(int? oParentCBId, int? oAppGloOwnId)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, strRes = string.Empty });

            var cb = _context.ChurchBody.AsNoTracking()  // .Include(t => t.FaithTypeClass)
                .Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oParentCBId).FirstOrDefault();

            var res = cb != null;
            var _strResId = cb != null ? cb.Id : (int?)null;
            var _strRes = cb != null ? cb.Name : "";
            return Json(new { taskSuccess = res, strResId = _strResId, strRes = _strRes });

            //if (addEmpty) countryList.Insert(0, new SelectListItem { Value = "", Text = "Select" });
            //return Json(countryList);
        }
        public JsonResult GetInitChurchBodyListByAppGloOwn(int? oAppGloOwnId, bool addEmpty = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            var oCBList = new List<SelectListItem>();
            ///
            // if (_context == null)
                // if (!InitializeUserLogging()) return Json(oCBList);

            oCBList = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                       .Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchLevel.LevelIndex == 2 && // c.Status == "A" && 
                       (c.OrgType == "CH" || c.OrgType == "CN"))  // c.OrgType == "CR" || 
                   .OrderBy(c => c.Name)
                   .ToList()
                   .Select(c => new SelectListItem()
                   {
                       Value = c.Id.ToString(),
                       Text = c.Name
                   })
                   .OrderBy(c => c.Text)
                   .ToList();
            ///
            if (addEmpty) oCBList.Insert(0, new SelectListItem { Value = "", Text = "Select..." });
            return Json(oCBList); 
        }
        public JsonResult GetChurchLevelIndexByChurchLevel(int? oChurchLevelId, int? oAppGloOwnId, bool addEmpty = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            // var oCBList = new List<SelectListItem>();
            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, numResLev = (int?)null, strRes = string.Empty });
            ///
            var oCL = _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchLevelId).FirstOrDefault();
            var res = oCL != null;
            var _numResLev = oCL != null ? oCL.LevelIndex : (int?)null;
            // !string.IsNullOrEmpty(oCBLevelList[0].CustomName) ? oCBLevelList[0].CustomName : oCBLevelList[0].Name
            var _strRes = oCL != null ? (!string.IsNullOrEmpty(oCL.CustomName) ? oCL.CustomName : oCL.Name) : "";

            //get the CR
            var oCB_CR = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OrgType == "CR" && c.MSTR_ParentChurchBodyId == null && c.ParentChurchBodyId == null).FirstOrDefault();
            var _numResCR = oCB_CR != null ? oCB_CR.Id   : (int?)null;  // base CB usually the name of the church -- CR
            var _strResCR = oCB_CR != null ? oCB_CR.Name + " (Church Root)" : "Church Root";  

            ///
            return Json(new { taskSuccess = res, numResLev = _numResLev, strRes = _strRes, strResCR = _strResCR , numResCR = _numResCR });
        }


        public JsonResult GetChurchLevelIndexesByChurchLevel(int? oChurchLevelId, int? oAppGloOwnId, bool addEmpty = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            //var oCBList = new List<SelectListItem>(); 
            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, numResLev = (int?)null, strResList = string.Empty });

            ///
            var oCL = _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchLevelId).FirstOrDefault();
            var res = oCL != null;
            var _numResLev = oCL != null ? oCL.LevelIndex : (int?)null;
            /// 

            if (oCL != null)
            {
                var oCLs = _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.LevelIndex <= oCL.LevelIndex).OrderBy(c => c.LevelIndex).ToList();
                var _strRes = "";
                foreach (var oChuLev in oCLs)
                {
                    var strRes = oChuLev != null ? (!string.IsNullOrEmpty(oChuLev.CustomName) ? oChuLev.CustomName : oChuLev.Name) : "";
                    _strRes += strRes + ",";
                }

                _strRes = _strRes.Contains(",") ? _strRes.Remove(_strRes.LastIndexOf(",")) : _strRes;

                //  get the first CB
                var oCB_1 = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                                 .Where(c => c.AppGlobalOwnerId == oAppGloOwnId && // c.Status == "A" && 
                                       c.ChurchLevel.LevelIndex == 1 && c.OrgType == "CR") //c.ChurchLevelId == oCBLevelList[0].Id &&
                                 .FirstOrDefault();

                var _numChurchBodyId_1 = (int?)null; var _strChurchBody_1 = "";
                if (oCB_1 != null)
                { _numChurchBodyId_1 = oCB_1.Id; _strChurchBody_1 = oCB_1.Name + " [Church Root]"; }

                ///
                return Json(new { taskSuccess = res, numResLev = _numResLev, strResList = _strRes, numChurchBodyId_1 = _numChurchBodyId_1, strChurchBody_1 = _strChurchBody_1 });
            }


            return Json(new { taskSuccess = res, numResLev = _numResLev, strResList = "" });
        }
        public JsonResult GetChurchLevel_ListByChurchLevel(int? oChurchLevelId, int? oAppGloOwnId, bool isLowerLevel = true, bool isInclusive = true, bool addEmpty = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            //var oCBList = new List<SelectListItem>(); 
            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, numResLev = (int?)null, strResList = string.Empty });

            var oCL = _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchLevelId).FirstOrDefault();
            var currLevelIndex = oCL != null ? oCL.LevelIndex : 0;
            var oCL_List = _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && 
                                 ((!isInclusive && !isLowerLevel && c.LevelIndex < currLevelIndex) || (!isInclusive && isLowerLevel && c.LevelIndex > currLevelIndex) ||
                                 (isInclusive && !isLowerLevel && c.LevelIndex <= currLevelIndex) || (isInclusive && isLowerLevel && c.LevelIndex >= currLevelIndex)))
                        .OrderBy(c => c.LevelIndex).ThenBy(c => c.Name)
                        .ToList()
                        .Select(c => new SelectListItem()
                           {
                               Value = c.Id.ToString(),
                               Text = !string.IsNullOrEmpty(c.CustomName) ? c.CustomName : c.Name
                        }) 
                        .ToList();
            ///
            //if (addEmpty) oCL_List.Insert(0, new SelectListItem { Value = "", Text = "Select Church Level" });
            return Json(oCL_List);
             
        }
        public JsonResult GetChurchBodyListByParentBody(int? oParentCBId, int? oAppGloOwnId, string strOrgType = null, bool addEmpty = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            var oCBList = new List<SelectListItem>();
            // if (_context == null)
                // if (!InitializeUserLogging()) return Json(oCBList);


            // list excludes the root -- CR -- Headquarters /Head office
            oCBList = _context.ChurchBody.AsNoTracking()  //.Include(t => t.ChurchLevel)
                .Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ParentChurchBodyId == oParentCBId && // c.Status == "A" && 
                        (c.OrgType == "CH" || c.OrgType == "CN"))
                // (c.OrgType == strOrgType || (strOrgType == null && (c.OrgType == "CH" || c.OrgType == "CN"))))
                .OrderBy(c => c.Name)
                .ToList()
            .Select(c => new SelectListItem()
            {
                Value = c.Id.ToString(),
                Text = c.Name
            })
            .OrderBy(c => c.Text)
            .ToList();

            if (addEmpty) oCBList.Insert(0, new SelectListItem { Value = "", Text = "Select..." });
            return Json(oCBList);
        }
        public JsonResult GetCountryRegionsByCountry(string ctryId, bool addEmpty = false) //(int? ctryId, bool addEmpty = false)
        {

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            var countryList = new List<SelectListItem>();
            // if (_context == null)
                // if (!InitializeUserLogging()) return Json(countryList);

            countryList = _context.CountryRegion.AsNoTracking().Include(t => t.Country)
                .Where(c => c.CtryAlpha3Code == ctryId)  //c.Country.Display == true &&
                .OrderBy(c => c.Name)
                .ToList()
            .Select(c => new SelectListItem()
            {
                Value = c.Id.ToString(),
                Text = c.Name
            })
            .OrderBy(c => c.Text)
            .ToList();

            /// if (addEmpty) countryList.Insert(0, new CountryRegion { Id = "", Name = "Select" });             
            //return Json(new SelectList(countryList, "Id", "Name"));  

            if (addEmpty) countryList.Insert(0, new SelectListItem { Value = "", Text = "Select" });
            return Json(countryList);
        }
         
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddOrEdit_CB(ChurchBodyModel vm)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, vm.oAppGloOwnId_Logged != null ? vm.oAppGloOwnId_Logged : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


             

            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");
            var strDesc = "Church body";
            // var _userTask = "Attempted accessing/modifying " + strDesc.ToLower(); 

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again.", pageIndex = vm.pageIndex });
            if (vm.oChurchBody == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again.", pageIndex = vm.pageIndex });

            ChurchBody _oChanges = vm.oChurchBody;
            var initCBNetwork = false;
            var _tm = DateTime.Now;

            /// server validations
            ///   
            if (string.IsNullOrEmpty(_oChanges.OrgType))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church body organisation type [Congregation or Congregation Head-unit] is not specified", pageIndex = vm.pageIndex });
           
            strDesc = GetChuOrgTypeDesc(_oChanges.OrgType); // _oChanges.OrgType == "CH" ? "Congregation Head-unit" : _oChanges.OrgType == "CN" ? "Congregation" : "Church body";

            if (_oChanges.AppGlobalOwnerId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specify the denomination (church).", pageIndex = vm.pageIndex });

            var oAGO = _context.AppGlobalOwner.Find(_oChanges.AppGlobalOwnerId);
            if (oAGO == null)  // let's know the denomination... for prefic code
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Denomination (church) for " + strDesc.ToLower() + " could not be found. Please refresh and try again", pageIndex = vm.pageIndex });

            // check...
            if (string.IsNullOrEmpty(oAGO.PrefixKey))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church prefix code has not been specified. Hint: configure via denomination" });

            if (string.IsNullOrEmpty(_oChanges.Name))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please provide the " + strDesc.ToLower() + " name", pageIndex = vm.pageIndex });

            if (_oChanges.ChurchLevelId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specify the church level.", pageIndex = vm.pageIndex });

            var oCBLevel = _context.ChurchLevel.Where(c=>c.AppGlobalOwnerId==_oChanges.AppGlobalOwnerId && c.Id == _oChanges.ChurchLevelId).FirstOrDefault();
            if (oCBLevel == null)  // ... parent church level > church body level
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church body level could not be found. Please refresh and try again", pageIndex = vm.pageIndex });


            // update the parent before val ... before assigning/updating Church codes
            /// set Parent ChurchBody at client level
            
            var oCBParCL = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.MSTR_ChurchBodyId == _oChanges.MSTR_ParentChurchBodyId).FirstOrDefault();
            var checkParentUnmatched = oCBParCL != null ? oCBParCL.Id != _oChanges.ParentChurchBodyId : true;
            if (_oChanges.ParentChurchBodyId == null || checkParentUnmatched == true)  //  //_oChanges.ParentChurchBodyId != null && _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.Id == _oChanges.ParentChurchBodyId).FirstOrDefault() == null))
            {
                //var oMSTRCBPar = _masterContext.MSTRChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.MSTR_AppGlobalOwnerId && c.Id == _oChanges.MSTR_ParentChurchBodyId).FirstOrDefault();
                //if (oMSTRCBPar != null)
                //{
                    var oCBParList = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id);
                    var oCBPar = oCBParList.Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.MSTR_AppGlobalOwnerId == _oChanges.MSTR_AppGlobalOwnerId && 
                                                      c.MSTR_ChurchBodyId == _oChanges.MSTR_ParentChurchBodyId) //|| c.GlobalChurchCode == oMSTRCBPar.GlobalChurchCode))
                                                        .FirstOrDefault();
                    ///
                    if (oCBPar != null)
                        if (_oChanges.ParentChurchBodyId != oCBPar.Id) 
                            _oChanges.ParentChurchBodyId = oCBPar.Id;  
                    
            //    } 

            }

            //var oCBList = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id);
            //var oCBParList = oCBList; // make a copy to search for the parent CB ... _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oAGO.Id);
            //_updCount = 0; tm = DateTime.Now;

            //if (oCBList.Count() > 0)
            //{
            //    foreach (var oCB in oCBList)
            //    {
            //        if (oCB.ParentChurchBodyId == null ||
            //            _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.Id == oCB.ParentChurchBodyId).FirstOrDefault() == null)
            //        {
            //            var oCBPar = oCBParList.Where(c => c.AppGlobalOwnerId == oCB.AppGlobalOwnerId && c.MSTR_AppGlobalOwnerId == oCB.MSTR_AppGlobalOwnerId &&
            //                                        c.GlobalChurchCode == oCB.GlobalChurchCode && c.MSTR_ChurchBodyId == oCB.MSTR_ParentChurchBodyId).FirstOrDefault();
            //            if (oCBPar != null)
            //            {
            //                if (oCB.ParentChurchBodyId != oCBPar.Id)
            //                {
            //                    oCB.ParentChurchBodyId = oCBPar.Id;
            //                    oCB.LastMod = tm;
            //                    oCB.LastModByUserId = oUser_MSTR.Id;
            //                    ///
            //                    _context.Update(oCB);
            //                    _updCount++;
            //                }
            //            }
            //        }
            //    }

            //    /// save updated...
            //    if (_updCount > 0)
            //        _context.SaveChanges();
            //}


            //// record ... @client
            //_userTask = "Created/updated " + _updCount + " " + strDesc.ToLower() + "s"; _tm = DateTime.Now;
            //_ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, oUser_MSTR.AppGlobalOwnerId, oUser_MSTR.ChurchBodyId, "T",
            //                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, oUser_MSTR.Id, _tm, _tm, oUser_MSTR.Id, oUser_MSTR.Id)
            //                );
                        


            ///// get the parent id            
            //var parDesc = "church body";
            //switch (vm.oCBLevelCount - 1)  // (vm.numChurchLevel_Index - 1) //
            //{
            //    case 1: parDesc = vm.strChurchLevel_1;  _oChanges.ParentChurchBodyId = vm.ChurchBodyId_1; break;
            //    case 2: parDesc = vm.strChurchLevel_2;  _oChanges.ParentChurchBodyId = vm.ChurchBodyId_2; break;
            //    case 3: parDesc = vm.strChurchLevel_3;  _oChanges.ParentChurchBodyId = vm.ChurchBodyId_3; break;
            //    case 4: parDesc = vm.strChurchLevel_4;  _oChanges.ParentChurchBodyId = vm.ChurchBodyId_4; break;
            //    case 5: parDesc = vm.strChurchLevel_5;  _oChanges.ParentChurchBodyId = vm.ChurchBodyId_5; break;
            //}

            //if (_oChanges.ParentChurchBodyId == null)
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church structure is networked. Provide the parent body (" + parDesc.ToLower() + ")", pageIndex = vm.pageIndex });

            
            ChurchBody oCBParCB = vm.oChurchBody_par;
            var _strParentCBLevel = vm.strParentCBLevel;
            if (_oChanges.ParentChurchBodyId != null)
            {
                if (_oChanges.OrgType != "CR")
                {
                    //if (_oChanges.ParentUnitCBId == null)  // let's know the parent church unit... parent church level > church unit level
                    //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church body of parent unit not specified.", pageIndex = vm.pageIndex });

                    if (_oChanges.ParentChurchBodyId == _oChanges.Id)  // let's know the parent church unit... parent church level > church unit level
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church body cannot be self-parented. Please choose different church body", pageIndex = vm.pageIndex });

                    if (oCBParCB == null)
                      oCBParCB = _context.ChurchBody.Include(t => t.ChurchLevel)
                                    .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.ParentChurchBodyId).FirstOrDefault();

                    if (oCBParCB == null)  // let's know the parent church unit... parent church level > church unit level
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Parent church body could not be retrieved. Please refresh and try again", pageIndex = vm.pageIndex });

                    if (string.IsNullOrEmpty(_strParentCBLevel))
                        _strParentCBLevel = oCBParCB != null ? (oCBParCB.ChurchLevel != null ? (!string.IsNullOrEmpty(oCBParCB.ChurchLevel.CustomName) ? oCBParCB.ChurchLevel.CustomName : oCBParCB.ChurchLevel.Name) : "") : "";
                
                    if (oCBLevel.LevelIndex < oCBParCB.ChurchLevel?.LevelIndex)  // ... parent church level > church unit level
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church body level cannot be higher or same as parent church body. Please select the correct parent unit or change church unit level", pageIndex = vm.pageIndex });

                    // check... parent code
                    if (string.IsNullOrEmpty(oCBParCB.GlobalChurchCode) || string.IsNullOrEmpty(oCBParCB.RootChurchCode))
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Parent body church code or root code not specified. Please check parent and try again", pageIndex = vm.pageIndex });

                }
                else
                {
                    _oChanges.ParentChurchBodyId = null;
                }

            }
            else
            {
                if (_oChanges.OrgType != "CR" && _oChanges.ParentChurchBodyId == null)  
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church structure is networked. Provide the parent body" + (!string.IsNullOrEmpty(_strParentCBLevel) ? " (" + _strParentCBLevel?.ToLower() + ")" : ""), pageIndex = vm.pageIndex });
            }

             

            //var oCBParent = _context.ChurchBody.Include(t => t.ChurchLevel).Where(c => c.Id == _oChanges.ParentChurchBodyId).FirstOrDefault();
            //if (oCBParent == null)  // let's know the parent church body... parent church level > church body level
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Parent church body could not be found. Please refresh and try again", pageIndex = vm.pageIndex });

            //if (oCBLevel.LevelIndex <= oCBParent.ChurchLevel?.LevelIndex)  // ... parent church level > church body level
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church body level cannot be higher or same as parent church body. Please select the correct parent unit or change church body level", pageIndex = vm.pageIndex });
             


            if (string.IsNullOrEmpty(_oChanges.CtryAlpha3Code))   // auto-fill the country and regions using the parent details...
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please provide the base country.", pageIndex = vm.pageIndex });

            if (_oChanges.DateFormed != null) 
                if (_oChanges.DateFormed.Value > DateTime.Today)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Date formed cannot be later than today.", pageIndex = vm.pageIndex });

            if (_oChanges.DateInnaug != null)
                if (_oChanges.DateInnaug.Value > DateTime.Today)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Date innaugurated cannot be later than today.", pageIndex = vm.pageIndex });

            if (_oChanges.DateFormed != null && _oChanges.DateInnaug != null)
                if (_oChanges.DateFormed > _oChanges.DateInnaug)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Date formed cannot be later than date innaugurated.", pageIndex = vm.pageIndex });
             


            if (_oChanges.OrgType != "CR" && !_oChanges.IsFullAutonomy)
            {
                if (!_oChanges.IsSupervisedByParentBody)
                { 
                    if (_oChanges.SupervisedByChurchBodyId == null)
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specify supervising church body else turn off autonomy or choose parent-supervision", pageIndex = vm.pageIndex });

                    if (_oChanges.SupervisedByChurchBodyId == _oChanges.Id)
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church body cannot be self-supervised unless has autonomy. Please choose different church body", pageIndex = vm.pageIndex });

                    if (_oChanges.SupervisedByChurchBodyId == _oChanges.ParentChurchBodyId)
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Supervising unit specified is same as parent unit. Please choose the supervised by parent unit option", pageIndex = vm.pageIndex });
                     
                }
                else // supervised by parent unit
                {
                    if (_oChanges.ParentChurchBodyId == null)  // let's know the parent church unit... parent church level > church unit level
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church body is supervised by parent body. Specify the parent body else modify option", pageIndex = vm.pageIndex });

                    _oChanges.SupervisedByChurchBodyId = _oChanges.ParentChurchBodyId; 
                }
            }
            else
            {
                _oChanges.IsSupervisedByParentBody = false;
                _oChanges.SupervisedByChurchBodyId = null; 
            }




            //if (!_oChanges.IsFullAutonomy)
            //{
            //    if (!_oChanges.IsSupervisedByParentBody)
            //    {
            //        if (_oChanges.SupervisedByChurchBodyId == null)
            //            return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please specify supervising body else turn on autonomy or choose parent-supervision", pageIndex = vm.pageIndex });

            //        if (_oChanges.Id != 0 && _oChanges.Id == _oChanges.SupervisedByChurchBodyId)
            //            return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Congregation cannot be supervised by itself when autonomy is turned off. Hint: Turn on autonomy or choose parent-supervision", pageIndex = vm.pageIndex });

            //        if (_oChanges.IsSupervisedByParentBody == false && _oChanges.ParentChurchBodyId == _oChanges.SupervisedByChurchBodyId)
            //            return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Supervising body specified is same as the parent body. Choose parent-supervision or turn on autonomy.", pageIndex = vm.pageIndex });

            //    }
            //    else // supervised by parent unit
            //    {
            //        if (_oChanges.ParentChurchBodyId == null)  // let's know the parent church unit... parent church level > church unit level
            //            return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church body is supervised by parent body. Specify the parent body else modify option", pageIndex = vm.pageIndex });

            //        _oChanges.SupervisedByChurchBodyId = _oChanges.ParentChurchBodyId;
            //    }
                
            //}
            //else
            //{
            //    _oChanges.IsSupervisedByParentBody = false;
            //    _oChanges.SupervisedByChurchBodyId = (int?)null;
            //}



            var arrData = "";
            arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<ChurchBodyModel>(arrData) : vm;
            var oCB = vmMod.oChurchBody;

            try
            {
                ModelState.Remove("oChurchBody.MSTR_AppGlobalOwnerId");
                ModelState.Remove("oChurchBody.MSTR_ChurchLevelId");
                ModelState.Remove("oChurchBody.MSTR_ParentChurchBodyId");
                ModelState.Remove("oChurchBody.MSTR_ChurchBodyId");
                ModelState.Remove("oChurchBody.MSTR_RootChurchCode");                
                ///
                ModelState.Remove("oChurchBody.OwnedByChurchBodyId");
                ModelState.Remove("oChurchBody.AppGlobalOwnerId");
                // ModelState.Remove("oChurchBody.CountryId");
                ModelState.Remove("oChurchBody.CtryAlpha3Code");
                ModelState.Remove("oChurchBody.CountryRegionId");
                ModelState.Remove("oChurchBody.ParentChurchBodyId");
                ModelState.Remove("oChurchBody.SupervisedByChurchBodyId");
                ModelState.Remove("oChurchBody.ContactInfoId");
                ModelState.Remove("oChurchBody.ChurchLevelId");
                ModelState.Remove("oChurchBody.OrgType");
                ModelState.Remove("oChurchBody.GlobalChurchCode");
                ModelState.Remove("oChurchBody.RootChurchCode");
                //  ModelState.Remove("oAppGlobalOwn.OwnerName");
                //
                //  ModelState.Remove("oCurrChurchBody.Id");
                //  ModelState.Remove("oCurrChurchBody.Name");
                //
                ModelState.Remove("oChurchBody.CreatedByUserId");
                ModelState.Remove("oChurchBody.LastModByUserId");
                 

                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed to load the data to save. Please refresh and try again.", pageIndex = vm.pageIndex });


                //church code  
                if (string.IsNullOrEmpty(_oChanges.GlobalChurchCode) && !string.IsNullOrEmpty(oAGO.PrefixKey))
                {
                    //var template = new { taskSuccess = String.Empty, strRes = String.Empty };   // var definition = new { Name = "" };
                    var jsCode = GetNextGlobalChurchCodeByAcronym_jsonString(_oChanges.AppGlobalOwnerId, oAGO.PrefixKey, oCBLevel.PrefixKey);  // string json1 = @"{'Name':'James'}";
                    _oChanges.GlobalChurchCode = jsCode;
                }


                ////root church code  
                //if (string.IsNullOrEmpty(_oChanges.RootChurchCode) && !string.IsNullOrEmpty(_oChanges.GlobalChurchCode))
                //{
                //    // var template = new { taskSuccess = String.Empty, strRes = String.Empty };
                //    var jsCode = GetNextRootChurchCodeByParentCB_jsonString(_oChanges.AppGlobalOwnerId, _oChanges.ParentChurchBodyId, _oChanges.GlobalChurchCode, oAGO.PrefixKey, oCBLevel.PrefixKey);
                //    _oChanges.RootChurchCode = jsCode;
                //}

                //root church code  
                var genNewRootCode = string.IsNullOrEmpty(_oChanges.RootChurchCode);
                if (_oChanges.OrgType != "CR" && !genNewRootCode) genNewRootCode = !_oChanges.RootChurchCode.Contains(oCBParCB?.RootChurchCode); // parent path diff from child path
                if (genNewRootCode)    // (string.IsNullOrEmpty(_oChanges.RootChurchCode) && !string.IsNullOrEmpty(_oChanges.GlobalChurchCode))
                {
                    // var template = new { taskSuccess = String.Empty, strRes = String.Empty };
                    var jsCode = GetNextRootChurchCodeByParentCB_jsonString(_oChanges.AppGlobalOwnerId, _oChanges.ParentChurchBodyId, _oChanges.GlobalChurchCode, oAGO.PrefixKey, oCBLevel.PrefixKey);
                    _oChanges.RootChurchCode = jsCode;
                }


                // check...
                if (string.IsNullOrEmpty(_oChanges.GlobalChurchCode) || string.IsNullOrEmpty(_oChanges.RootChurchCode))
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church code and Root church code for " + strDesc.ToLower() + " must be specified", pageIndex = vm.pageIndex });

                 

                // church logo
                if (vm.ChurchLogoFile != null) // _oChanges.ChurchBodyLogo != null)
                {
                    if (string.Compare(_oChanges.ChurchBodyLogo, (Guid.NewGuid().ToString() + "_" + vm.ChurchLogoFile.FileName)) != 0)
                    {
                        string strFilename = null;
                        if (vm.ChurchLogoFile.Length > 0) // vm.ChurchLogoFile != null && 
                        {
                            string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");
                            strFilename = Guid.NewGuid().ToString() + "_" + vm.ChurchLogoFile.FileName;
                            string filePath = Path.Combine(uploadFolder, strFilename);
                            vm.ChurchLogoFile.CopyTo(new FileStream(filePath, FileMode.Create));
                        }
                        else
                        {
                            if (vm.oChurchBody.Id != 0) strFilename = vm.strChurchLogo;
                        }

                        _oChanges.ChurchBodyLogo = strFilename;
                    }
                }

                //
                var tm = DateTime.Now;
                _oChanges.LastMod = tm;
                _oChanges.LastModByUserId = vm.oUserId_Logged;
                //_oChanges.Status = vm.bl_IsActivated ? "A" : "D";

                ///
                // sync MSTR and Client... licence /church structure
                if (_oChanges.OrgType=="CR" || _oChanges.OrgType=="CH" || _oChanges.OrgType=="CN")
                {
                    var oCBMaster = _masterContext.MSTRChurchBody.AsNoTracking()
                                    .Where(c => c.AppGlobalOwnerId == _oChanges.MSTR_AppGlobalOwnerId && c.Id == _oChanges.MSTR_ChurchBodyId).FirstOrDefault();
                    if (oCBMaster != null)
                    {
                        if (_oChanges.MSTR_AppGlobalOwnerId != oCBMaster.AppGlobalOwnerId) { _oChanges.MSTR_AppGlobalOwnerId = oCBMaster.AppGlobalOwnerId; initCBNetwork = true; }
                        if (_oChanges.MSTR_ChurchBodyId != oCBMaster.Id) { _oChanges.MSTR_ChurchBodyId = oCBMaster.Id; initCBNetwork = true; }
                        if (_oChanges.MSTR_ChurchLevelId != oCBMaster.ChurchLevelId) { _oChanges.MSTR_ChurchLevelId = oCBMaster.ChurchLevelId; initCBNetwork = true; }
                        if (_oChanges.MSTR_ParentChurchBodyId != oCBMaster.ParentChurchBodyId) { _oChanges.MSTR_ParentChurchBodyId = oCBMaster.ParentChurchBodyId;  initCBNetwork = true; }

                        if (_oChanges.MSTR_RootChurchCode != oCBMaster.RootChurchCode) _oChanges.MSTR_RootChurchCode = oCBMaster.RootChurchCode;
                        if (_oChanges.OrgType != oCBMaster.OrgType) _oChanges.OrgType = oCBMaster.OrgType; // CH, CN
                        if (_oChanges.ChurchWorkStatus != oCBMaster.ChurchWorkStatus) _oChanges.ChurchWorkStatus = oCBMaster.ChurchWorkStatus; //operate or NOT
                        if (_oChanges.Status != oCBMaster.Status) _oChanges.Status = oCBMaster.Status; // activate, deactive
                        ///
                        if (_oChanges.GlobalChurchCode==null || _oChanges.GlobalChurchCode != oCBMaster.GlobalChurchCode) _oChanges.GlobalChurchCode = oCBMaster.GlobalChurchCode; // // for now... the same as MSTR... can differ!
                    }

                    // root path of client MUST be symmetrical with root path of MSTR  Ex. A: 0001/0002/0003/0004  ||| B: 0001/0002/*0050*/003/004   ... thus A can sit [subset of] in B
                    ///

                    if (!IsAncestor_ChurchBody(_oChanges.MSTR_RootChurchCode, _oChanges.RootChurchCode))
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, 
                            userMess = "The root path [ancestor] of " + _oChanges.strOrgType.ToLower() + " configured does not correlate with Client's license. Please confer with the Vendor to rectify and try again. Hint: Expected parent unit not found in the root path of " + _oChanges.strOrgType.ToLower() + ": " + _oChanges.Name, 
                            pageIndex = vm.pageIndex });

                    //var oCBParent_MSConfig = _context.ChurchBody.AsNoTracking()
                    //    .Where(c => c.MSTR_AppGlobalOwnerId == _oChanges.MSTR_AppGlobalOwnerId && c.MSTR_ParentChurchBodyId == _oChanges.MSTR_ParentChurchBodyId).FirstOrDefault();
                    //if (oCBParent_MSConfig != null)
                    //{
                    //    //var oCBParent_CLConfig = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.ParentChurchBodyId).FirstOrDefault();
                    //    //var strCLPar = "different unit";
                    //    //strCLPar = oCBParent_CLConfig != null ? "'" + GetChuOrgTypeDesc (oCBParent_CLConfig.OrgType).ToLower() + ": " + oCBParent_CLConfig.Name + "'": strCLPar;
                    //    // MSTR_RootChurchCode MUST be symmetrical to CL_RootChurchCode ... MAKE SURE IT DOES NOT HAPPEN else.. too much work for you massa!
                    //  //  if (!IsAncestor_ChurchBody(oCBParent_MSConfig, _oChanges))

                    //    if (!IsAncestor_ChurchBody(_oChanges.MSTR_RootChurchCode, _oChanges.RootChurchCode))
                    //        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "The root path [ancestor] of " + (_oChanges.OrgType=="CN" ? "Congregation" : "Congregation Head-unit").ToLower()  + " configured does not correlate with Client's license. Please confer with the Vendor to rectify and try again. Hint: Expected '" + oCBParent_MSConfig.Name + "' as top-most parent [ancestor] unit.", pageIndex = vm.pageIndex });
                    //}
                }
                 
                var _reset = _oChanges.Id == 0;

                //validate...
                var _userTask = "Attempted saving " + strDesc.ToLower() + ", " + _oChanges.Name.ToUpper();  // _userTask = "Added new " + strDesc.ToLower() + ", " + _oChanges.Name.ToUpper() + " successfully";   //  _userTask = "Updated " + strDesc.ToLower() + ", " + _oChanges.Name.ToUpper() + " successfully";
                //using (var _cbCtx = new ChurchModelContext(_context.Database.GetDbConnection().ConnectionString))
                //{

                    if (_oChanges.Id == 0)
                    {
                        initCBNetwork = true;
                        var oCBVal = _context.ChurchBody.AsNoTracking()  //.Include(t=>t.ParentChurchBody)
                            .Where(c => c.AppGlobalOwnerId == oCB.AppGlobalOwnerId && c.ParentChurchBodyId == oCB.ParentChurchBodyId && c.Name == oCB.Name).FirstOrDefault();
                        if (oCBVal != null) return Json(new { taskSuccess = false, oCurrId = oCB.Id, userMess = strDesc + ", " + oCBVal.Name + " already exists.", pageIndex = vm.pageIndex });

                        oCBVal = _context.ChurchBody.AsNoTracking()  //.Include(t => t.ParentChurchBody)
                            .Where(c => c.AppGlobalOwnerId == oCB.AppGlobalOwnerId &&
                                    (c.GlobalChurchCode == oCB.GlobalChurchCode //||  c.RootChurchCode == oCB.RootChurchCode || 
                                                                                // (oCB.ChurchCodeCustom != null && c.ChurchCodeCustom == oCB.ChurchCodeCustom)
                                   )).FirstOrDefault();

                        if (oCBVal != null) return Json(new { taskSuccess = false, oCurrId = oCB.Id, userMess = "Church codes must be unique." + Environment.NewLine + oCBVal.Name + " has same church code.", pageIndex = vm.pageIndex });

                        _oChanges.Created = tm;
                        _oChanges.CreatedByUserId = vm.oUserId_Logged;
                        _context.Add(_oChanges);

                        ViewBag.UserMsg = "Saved " + strDesc.ToLower() + (!string.IsNullOrEmpty(_oChanges.Name) ? ", " + _oChanges.Name : "") + " successfully.";
                        _userTask = "Added new " + strDesc.ToLower() + (!string.IsNullOrEmpty(_oChanges.Name) ? ", " + _oChanges.Name : "") + " successfully";
                    }

                    else
                    {
                        var oCBVal = _context.ChurchBody.AsNoTracking()  //.Include(t => t.ParentChurchBody)
                            .Where(c => c.Id != oCB.Id && c.AppGlobalOwnerId == oCB.AppGlobalOwnerId && c.ParentChurchBodyId == oCB.ParentChurchBodyId && c.Name == oCB.Name).FirstOrDefault();
                        if (oCBVal != null) return Json(new { taskSuccess = false, oCurrId = oCB.Id, userMess = strDesc + ", " + oCBVal.Name + " already exists.", pageIndex = vm.pageIndex });

                        // oCBVal = _context.ChurchBody.Include(t => t.ParentChurchBody).Where(c => c.Id != oCB.Id && c.AppGlobalOwnerId == oCB.AppGlobalOwnerId && c.ChurchCode == oCB.ChurchCode ).FirstOrDefault();
                        //if (oCBVal != null) return Json(new { taskSuccess = false, oCurrId = oCB.Id, userMess = "Church code must be unique." + Environment.NewLine + 
                        //        oCBVal.Name + (oCBVal.ParentChurchBody != null ? " of " + oCBVal.ParentChurchBody.Name : "") + " has  same code."});


                        oCBVal = _context.ChurchBody.AsNoTracking()   //.Include(t => t.ParentChurchBody)
                            .Where(c => c.AppGlobalOwnerId == oCB.AppGlobalOwnerId && c.Id != oCB.Id &&
                                   (c.GlobalChurchCode == oCB.GlobalChurchCode //|| c.RootChurchCode == oCB.RootChurchCode ||
                                                                               // (oCB.ChurchCodeCustom != null && c.ChurchCodeCustom == oCB.ChurchCodeCustom)
                                   )).FirstOrDefault();

                        if (oCBVal != null) return Json(new { taskSuccess = false, oCurrId = oCB.Id, userMess = "Church codes must be unique." + Environment.NewLine + oCBVal.Name + " has same church code.", pageIndex = vm.pageIndex });


                        //retain the pwd details... hidden fields

                        _oChanges.LastMod = tm;
                        _oChanges.LastModByUserId = vm.oUserId_Logged;
                        _context.Update(_oChanges);
                        //var _strDesc = strDesc.Length > 0 ? strDesc.Substring(0, 1).ToUpper() + strDesc.Substring(1) : "Denomination ";

                        ViewBag.UserMsg = strDesc + (!string.IsNullOrEmpty(_oChanges.Name) ? ", " + _oChanges.Name : "") + " updated successfully.";
                        _userTask = "Updated " + strDesc.ToLower() + (!string.IsNullOrEmpty(_oChanges.Name) ? ", " + _oChanges.Name : "") + " successfully";
                    }

                    //save denomination first... 
                    _context.SaveChanges(); // await  _cbCtx.SaveChangesAsync();


                //DetachAllEntities(_cbCtx);
                // }

                 

                //////   vendor tasks ----------------  synchronize CB to church network.................
                ///


                /// moved to vendor tasks.....

                // initialize....  lookups! once--- per user account
               /// if (!_oChanges.IsCLNTInit && (_oChanges.ProfileLevel == 6 || _oChanges.ProfileLevel == 11))  // only admin profiles allowed to update params
                if (initCBNetwork)  // only admin profiles allowed to update params
                {
                    var oMSTRCBid = _oChanges.MSTR_ChurchBodyId;
                    // Get the client database details.... db connection string                        
                    //var oClientConfig = _masterContext.ClientAppServerConfig.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Status == "A").FirstOrDefault();
                    //if (oClientConfig == null)
                    //{
                    //    var errMess = "Client database details not found. Please try again or contact System Administrator";
                    //   // ModelState.AddModelError("", "Client database details not found. Please try again or contact System Administrator"); //model.IsVal = 0; 
                    //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = ViewBag.UserMsg + ". " + errMess, pageIndex = vm.pageIndex });
                    //}

                    //// get and mod the conn
                    //var _clientDBConnString = "";
                    //var conn = new SqlConnectionStringBuilder(_context.Database.GetDbConnection().ConnectionString);
                    //conn.DataSource = oClientConfig.ServerName; conn.InitialCatalog = oClientConfig.DbaseName;
                    //conn.UserID = oClientConfig.SvrUserId; conn.Password = oClientConfig.SvrPassword;
                    ///// conn.IntegratedSecurity = false; 
                    //conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;

                    //_clientDBConnString = conn.ConnectionString;

                    //// test the NEW DB conn 

                    //var _clientContext = new ChurchModelContext(_clientDBConnString);

                    //try
                    //{
                    //    var b = _clientContext.Database.CanConnect();
                    //}
                    //catch (Exception ex)
                    //{
                    //    throw;
                    //}

                    //this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, vm.oAppGloOwnId_Logged != null ? vm.oAppGloOwnId_Logged : this._oLoggedUser?.AppGlobalOwnerId);
                    //if (!_clientContext.Database.CanConnect())
                    //{
                    //    var errMess = "Client database details not found. Please try again or contact System Administrator";
                    //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = ViewBag.UserMsg + ". " + errMess, pageIndex = vm.pageIndex });
                    //}

                    try
                    {   /// synchronize CTRY, AGO, CL, CB...  from MSTR to CLIENT
                        /// 
                        // initialize the COUNTRY  ... jux the country list standard countries ::: Use [CountryCustom] to config per denomination
                        var _addCount = 0; var _updCount = 0;  // var tm = DateTime.Now; var strDesc = "Country";
                        var countriesList = AppUtilties.GetMS_BaseCountries();
                        var oCTRYCount = this._context.Country.AsNoTracking().Count();
                        var oCtryAddList = new List<Country>();
                        ///
                        if (oCTRYCount != countriesList.Count() && countriesList.Count > 0)
                        {
                            foreach (var oCtry in countriesList)
                            {
                                var oCTRYExist = this._context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == oCtry.CtryAlpha3Code).FirstOrDefault();
                                if (oCTRYExist == null)
                                {
                                    //var checkCtryAddedList = oCtryAddList.Where(c => c.CtryAlpha3Code == oCtry.CtryAlpha3Code).ToList();
                                    var checkCtryAdded = oCtryAddList.Count(c => c.CtryAlpha3Code == oCtry.CtryAlpha3Code) > 0; // checkCtryAddedList.Count() > 0; // oCtryAddList.Count(c => c.CtryAlpha3Code == oCTRY.CtryAlpha3Code) == 0;
                                    if (!checkCtryAdded)
                                    {
                                        var oNewCtry = new Country()
                                        {
                                            CtryAlpha3Code = oCtry.CtryAlpha3Code,
                                            //AppGlobalOwnerId = oAGO.Id,
                                            // ChurchBodyId = 
                                            EngName = oCtry.EngName,
                                            CtryAlpha2Code = oCtry.CtryAlpha2Code,
                                            CurrEngName = oCtry.CurrEngName,
                                            CurrLocName = oCtry.CurrLocName,
                                            CurrSymbol = oCtry.CurrSymbol,
                                            Curr3LISOSymbol = oCtry.Curr3LISOSymbol,
                                            // SharingStatus = "N",
                                            Created = tm,
                                            LastMod = tm,
                                            CreatedByUserId = vm.oUserId_Logged,
                                            LastModByUserId = vm.oUserId_Logged
                                        };

                                        this._context.Add(oNewCtry);
                                        _updCount++;

                                        oCtryAddList.Add(oNewCtry);
                                    }
                                    //else
                                    //{
                                    //    checkCtryAdded = checkCtryAdded;
                                    //    checkCtryAddedList = checkCtryAddedList;
                                    //}
                                }
                                else  // update country data
                                {
                                    oCTRYExist.CtryAlpha3Code = oCtry.CtryAlpha3Code;
                                    oCTRYExist.EngName = oCtry.EngName;
                                    oCTRYExist.CtryAlpha2Code = oCtry.CtryAlpha2Code;
                                    oCTRYExist.CurrEngName = oCtry.CurrEngName;
                                    oCTRYExist.CurrLocName = oCtry.CurrLocName;
                                    oCTRYExist.CurrSymbol = oCtry.CurrSymbol;
                                    oCTRYExist.Curr3LISOSymbol = oCtry.Curr3LISOSymbol;
                                    //oCTRY. SharingStatus = "N";
                                    // oCTRY.Created = tm;
                                    oCTRYExist.LastMod = tm;
                                    // oCTRY.CreatedByUserId = _oChanges.Id;
                                    oCTRYExist.LastModByUserId = vm.oUserId_Logged;

                                    this._context.Update(oCTRYExist);
                                    _updCount++;
                                }
                            }

                            if (_updCount > 0)
                            {
                                this._context.SaveChanges();

                                ///
                                /////update country of oAGO
                                //if (oAGO_MSTR != null)
                                //{
                                //    oAGO.CtryAlpha3Code = oAGO_MSTR.CtryAlpha3Code;
                                //    oAGO.LastMod = tm; oAGO.LastModByUserId = _oChanges.Id;
                                //    _clientContext.Update(oAGO);

                                //    /// save updated...
                                //    _clientContext.SaveChanges();
                                //}

                                /// update user trail
                                _userTask = "Created/updated " + _updCount + " countries."; // var _tm = DateTime.Now;
                                // record ... @client 



                                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, _oChanges.AppGlobalOwnerId, _oChanges.Id, "T",
                                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oUserId_Logged, _tm, _tm, vm.oUserId_Logged, vm.oUserId_Logged)
                                               );

                                // record @ MSTR

                            }
                        }


                        // initialize the AGO    ...var oClientAGOListCount = _clientContext.AppGlobalOwner.Count();
                        strDesc = "Denomination (Church)"; tm = DateTime.Now; //  _updCount = 0;
                        var oAGO_MSTR = _masterContext.MSTRAppGlobalOwner.AsNoTracking().Include(t => t.FaithTypeCategory).ThenInclude(t => t.FaithTypeClass)
                                            .Where(c => c.Id == _oChanges.AppGlobalOwnerId).FirstOrDefault();   //&& c.GlobalChurchCode==_oChanges.strChurchCode_AGO

                        if (oAGO_MSTR == null)
                        {
                           /// ModelState.AddModelError("", "Denomination (Church) of user could not be verified [by Vendor]. Please enter correct login credentials.");   // model.IsVal = 0; // isUserValidated = false;
                            var errMess = "Denomination (Church) of user could not be verified [by Vendor]. Please enter correct login credentials.";
                            return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = ViewBag.UserMsg + ". " + errMess, pageIndex = vm.pageIndex });
                        }

                        //COPY/create THE DENOMINATION / CONTACT INFO FROM MSTR    //  || c.GlobalChurchCode == oAGO_MSTR.GlobalChurchCode
                        var oAGO_CLNT = this._context.AppGlobalOwner.AsNoTracking().Where(c => c.MSTR_AppGlobalOwnerId == oAGO_MSTR.Id).FirstOrDefault();  //)   // || c.OwnerName == oAGO_MSTR.OwnerName
                        if (oAGO_CLNT == null)  // create AGO and CI
                        {
                            var oAGONew = new AppGlobalOwner()
                            {
                                //Id = 0,
                                MSTR_AppGlobalOwnerId = oAGO_MSTR.Id,
                                OwnerName = oAGO_MSTR.OwnerName,
                                GlobalChurchCode = oAGO_MSTR.GlobalChurchCode,
                                RootChurchCode = oAGO_MSTR.GlobalChurchCode,
                                TotalLevels = oAGO_MSTR.TotalLevels,
                                Acronym = oAGO_MSTR.Acronym,
                                PrefixKey = oAGO_MSTR.PrefixKey,
                                Allias = oAGO_MSTR.Allias,
                                Motto = oAGO_MSTR.Motto,
                                Slogan = oAGO_MSTR.Slogan,
                                ChurchLogo = oAGO_MSTR.ChurchLogo,
                                Status = oAGO_MSTR.Status,
                                Comments = oAGO_MSTR.Comments,
                                // CountryId = 0,
                                CtryAlpha3Code = oAGO_MSTR.CtryAlpha3Code,
                                strFaithTypeCategory = oAGO_MSTR.FaithTypeCategory != null ? oAGO_MSTR.FaithTypeCategory.FaithDescription : "",
                                strFaithStream = oAGO_MSTR.FaithTypeCategory != null ? (oAGO_MSTR.FaithTypeCategory.FaithTypeClass != null ? oAGO_MSTR.FaithTypeCategory.FaithTypeClass.FaithDescription : "") : "",
                                // FaithTypeCategoryId = oAGO_MSTR.FaithTypeCategoryId, // jux keep the Id... get the [strFaithTypeCategory, strFaithTypeStream] ...from MSTR @queries                                         
                                //  ContactInfoId = oCI != null ? oCI.Id : (int?)null, // copy details and create this to the local CI                                            
                                ///
                                Created = tm,
                                LastMod = tm,
                                CreatedByUserId = vm.oUserId_Logged,
                                LastModByUserId = vm.oUserId_Logged
                            };

                            this._context.Add(oAGONew);

                            // _updCount++;


                            //if (_updCount > 0)
                            //{

                            this._context.SaveChanges();
                            oAGO_CLNT = oAGONew;


                            // check for the CI from MSTR...
                            var oCI_MSTR = _masterContext.MSTRContactInfo.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO_MSTR.Id && c.Id == oAGO_MSTR.ContactInfoId).FirstOrDefault();
                            ContactInfo oCI = null;
                            if (oCI_MSTR != null)
                            {
                                oCI = new ContactInfo()
                                {
                                    //Id = 0,
                                    AppGlobalOwnerId = oAGONew.Id,

                                    // ChurchBodyId = oCB_MSTR.Id,
                                    // RefUserId = oCI_MSTR.RefUserId,
                                    //ContactInfoDesc

                                    ExtHolderName = oCI_MSTR.ContactName,
                                    IsPrimaryContact = true,
                                    //IsChurchFellow = false,
                                    ResidenceAddress = oCI_MSTR.ResidenceAddress,
                                    Location = oCI_MSTR.Location,
                                    City = oCI_MSTR.City,
                                    CtryAlpha3Code = oCI_MSTR.CtryAlpha3Code,
                                    //RegionId = oCI_MSTR.RegionId,
                                    ResAddrSameAsPostAddr = oCI_MSTR.ResAddrSameAsPostAddr,
                                    PostalAddress = oCI_MSTR.PostalAddress,
                                    DigitalAddress = oCI_MSTR.DigitalAddress,
                                    Telephone = oCI_MSTR.Telephone,
                                    MobilePhone1 = oCI_MSTR.MobilePhone1,
                                    MobilePhone2 = oCI_MSTR.MobilePhone2,
                                    Email = oCI_MSTR.Email,
                                    Website = oCI_MSTR.Website,
                                    ///
                                    Created = tm,
                                    LastMod = tm,
                                    CreatedByUserId = vm.oUserId_Logged,
                                    LastModByUserId = vm.oUserId_Logged
                                };

                                this._context.Add(oCI);

                                //update firsst... to det Id
                                this._context.SaveChanges();
                            }


                            // do some update here...
                            if (oCI != null)
                            {
                                oAGONew.ContactInfoId = oCI.Id;
                                oAGONew.LastMod = tm; oCI.LastModByUserId = vm.oUserId_Logged;
                                ///
                                this._context.Update(oAGONew);
                                this._context.SaveChanges();
                            }

                            // record ... @client
                            _userTask = "Created " + _updCount + " " + strDesc.ToLower(); _tm = DateTime.Now;

                            _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, _oChanges.AppGlobalOwnerId, oMSTRCBid, "T",
                                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oUserId_Logged, _tm, _tm, vm.oUserId_Logged, vm.oUserId_Logged)
                                                );
                            //  }
                        }


                        /// some client UPDATE /sync! ...  check the localized data... using the MSTR data
                        else  // update AGO
                        {
                            if (oAGO_CLNT.MSTR_AppGlobalOwnerId != oAGO_MSTR.Id || string.Compare(oAGO_CLNT.GlobalChurchCode, oAGO_MSTR.GlobalChurchCode, true) != 0 ||
                                string.IsNullOrEmpty(oAGO_CLNT.OwnerName) || string.IsNullOrEmpty(oAGO_CLNT.strFaithTypeCategory) || string.IsNullOrEmpty(oAGO_CLNT.strFaithStream))
                            {
                                //var oAGO_MSTR = _context.MSTRAppGlobalOwner.AsNoTracking().Include(t => t.FaithTypeCategory).ThenInclude(t => t.FaithTypeClass)
                                //            .Where(c => c.Id == _oChanges.AppGlobalOwnerId).FirstOrDefault();

                                if (oAGO_CLNT.MSTR_AppGlobalOwnerId == null)
                                    oAGO_CLNT.MSTR_AppGlobalOwnerId = oAGO_MSTR.Id;

                                if (string.IsNullOrEmpty(oAGO_CLNT.GlobalChurchCode) || oAGO_CLNT.GlobalChurchCode != oAGO_MSTR.GlobalChurchCode)
                                    oAGO_CLNT.GlobalChurchCode = oAGO_MSTR.GlobalChurchCode;

                                if (string.IsNullOrEmpty(oAGO_CLNT.OwnerName) || oAGO_CLNT.OwnerName != oAGO_MSTR.OwnerName)
                                    oAGO_CLNT.OwnerName = oAGO_MSTR.OwnerName;

                                if (string.IsNullOrEmpty(oAGO_CLNT.strFaithTypeCategory))
                                    oAGO_CLNT.strFaithTypeCategory = oAGO_MSTR.FaithTypeCategory != null ? oAGO_MSTR.FaithTypeCategory.FaithDescription : "";

                                if (string.IsNullOrEmpty(oAGO_CLNT.strFaithStream))
                                    oAGO_CLNT.strFaithStream = oAGO_MSTR.FaithTypeCategory != null ? (oAGO_MSTR.FaithTypeCategory.FaithTypeClass != null ? oAGO_MSTR.FaithTypeCategory.FaithTypeClass.FaithDescription : "") : "";

                                this._context.Update(oAGO_CLNT);
                                this._context.SaveChanges();

                               // ViewBag.UserMsg = strDesc + " updated successfully.";
                                ///
                                _userTask = "Updated " + strDesc.ToLower() + ", " + oAGO_CLNT.OwnerName.ToUpper() + " successfully";
                                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, _oChanges.AppGlobalOwnerId, oMSTRCBid, "T",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oUserId_Logged, _tm, _tm, vm.oUserId_Logged, vm.oUserId_Logged)
                                            );
                            }
                        }


                        // Get the denomination/church || c.GlobalChurchCode == oAGO_MSTR.GlobalChurchCode
                        //var oAGO = _clientContext.AppGlobalOwner.Where(c => c.MSTR_AppGlobalOwnerId == _oChanges.AppGlobalOwnerId).FirstOrDefault();                                 
                        // oAGO_CLNT... use last created /updated

                        // initialize the CL                                
                        var oCL_MSTRList = _masterContext.MSTRChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId);
                        var oCL_CLNTList = this._context.ChurchLevel.AsNoTracking().Where(c => c.MSTR_AppGlobalOwnerId == _oChanges.AppGlobalOwnerId);
                        ///
                        // if (oCL_CLNTList.Count() != oCL_MSTRList.Count())
                        // {
                        strDesc = "Church Level";
                        _addCount = 0; _updCount = 0; tm = DateTime.Now;
                        if (oCL_MSTRList.Count() > 0 && oAGO_CLNT != null)
                        {
                            foreach (var oCL_MSTR in oCL_MSTRList)
                            {
                                var oCLExist = oCL_CLNTList.Where(c => c.MSTR_AppGlobalOwnerId == _oChanges.AppGlobalOwnerId &&
                                                   (c.Name.ToLower() == oCL_MSTR.Name.ToLower() || c.CustomName.ToLower() == oCL_MSTR.CustomName.ToLower())).FirstOrDefault();
                                if (oCLExist == null)
                                {
                                    this._context.Add(new ChurchLevel()
                                    {
                                        //Id = 0,
                                        MSTR_AppGlobalOwnerId = oCL_MSTR.AppGlobalOwnerId,
                                        MSTR_ChurchLevelId = oCL_MSTR.Id,
                                        ///
                                        AppGlobalOwnerId = oAGO_CLNT.Id,
                                        Name = oCL_MSTR.Name,
                                        CustomName = oCL_MSTR.CustomName,
                                        LevelIndex = oCL_MSTR.LevelIndex,
                                        Acronym = oCL_MSTR.Acronym,
                                        SharingStatus = oCL_MSTR.SharingStatus,
                                        ///
                                        Created = tm,
                                        LastMod = tm,
                                        CreatedByUserId = vm.oUserId_Logged,
                                        LastModByUserId = vm.oUserId_Logged
                                    });

                                    _addCount++;
                                }
                                else if (oCLExist.MSTR_AppGlobalOwnerId != oCL_MSTR.AppGlobalOwnerId || oCLExist.MSTR_ChurchLevelId != oCL_MSTR.Id ||
                                         oCLExist.LevelIndex != oCL_MSTR.LevelIndex || string.Compare(oCLExist.Name, oCL_MSTR.Name, true) != 0)
                                {
                                    oCLExist.MSTR_AppGlobalOwnerId = oCL_MSTR.AppGlobalOwnerId;
                                    oCLExist.MSTR_ChurchLevelId = oCL_MSTR.Id;
                                    oCLExist.Name = oCL_MSTR.Name;
                                    oCLExist.LevelIndex = oCL_MSTR.LevelIndex;
                                    oCLExist.LastMod = tm;
                                    oCLExist.LastModByUserId = vm.oUserId_Logged;

                                    this._context.Update(oCLExist);
                                    _updCount++;
                                }
                            }


                            if ((_addCount + _updCount) > 0)
                            {
                                this._context.SaveChanges();
                                ///
                                // record ... @client
                                _userTask = "Created " + _updCount + " " + strDesc.ToLower(); _tm = DateTime.Now;
                                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, _oChanges.AppGlobalOwnerId, oMSTRCBid, "T",
                                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oUserId_Logged, _tm, _tm, vm.oUserId_Logged, vm.oUserId_Logged)
                                                );
                            }
                        }
                        // }

                        // include the root to the top for the subscriber... but make them STructure only until logged in [thus have accounts created by vendor]
                        // initialize the CB  ... ONLY create the CB that subscribed even in the same Denomination [ 1 CB at a time ]                       
                        //var oAGO = this._context.AppGlobalOwner.Where(c => c.MSTR_AppGlobalOwnerId == _oChanges.AppGlobalOwnerId || c.GlobalChurchCode == oAGO_MSTR.GlobalChurchCode).FirstOrDefault();
                        ///
                        var oUserCB_MSTR = _masterContext.MSTRChurchBody.AsNoTracking()  //.Include(t => t.FaithTypeCategory).ThenInclude(t => t.FaithTypeClass)
                                             .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == oMSTRCBid).FirstOrDefault();
                        if (oUserCB_MSTR == null)
                        { 
                            var errMess = "Subscribed church body (unit) of user could not be verified [by Vendor]. Please enter correct login credentials.";
                            return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = ViewBag.UserMsg + ". " + errMess, pageIndex = vm.pageIndex });
                        }

                        //**********************************
                        // for single subscription... until user logs in, CB is not created yet on Client server/DB............. // use subscription key /shared subscriptio keys for Multiple subsciption sync
                        //var oCB_MSTRList = _context.MSTRChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == oUserCB_MSTR.Id).ToList(); 
                        ///
                        var oCB_MSTRList = _masterContext.MSTRChurchBody.AsNoTracking()
                            .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && oUserCB_MSTR.RootChurchCode.Contains(c.GlobalChurchCode)).ToList();
                        //var oCBClientListCount = this._context.ChurchBody.AsNoTracking().Count(c => c.MSTR_AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.MSTR_ChurchBodyId == oUserCB_MSTR.Id);
                        var oCB_CLNTList = this._context.ChurchBody.AsNoTracking()
                            .Where(c => c.MSTR_AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && oUserCB_MSTR.RootChurchCode.Contains(c.GlobalChurchCode)).ToList();

                        strDesc = "Church body (unit)";

                        ///                                
                        // if (oCB_CLNTList.Count() != oCB_MSTRList.Count())
                        // {
                        _addCount = 0; _updCount = 0; tm = DateTime.Now;
                        if (oCB_MSTRList.Count() > 0 && oAGO_CLNT != null)
                        {
                            foreach (var oCB_MSTR in oCB_MSTRList)
                            {
                                //var oCB_CLNTExist = this._context.ChurchBody.Where(c => (c.OrgType == "CH" || c.OrgType == "CN") && c.MSTR_AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && 
                                //               (c.MSTR_ChurchBodyId == oCBid || c.GlobalChurchCode == oCB_MSTR.GlobalChurchCode)).FirstOrDefault();

                                // create all CBs not found in the root path of MSTR path ... at the client side.
                                var oCB_CLNTExist = oCB_CLNTList.Where(c => (c.OrgType == "CR" || c.OrgType == "CH" || c.OrgType == "CN") &&
                                            (c.MSTR_ChurchBodyId == oCB_MSTR.Id || c.GlobalChurchCode == oCB_MSTR.GlobalChurchCode)).FirstOrDefault();

                                if (oCB_CLNTExist == null)
                                {
                                    // Get Church level
                                    //  ChurchBody oCB_CLNTAdd = null;
                                    var oCL = this._context.ChurchLevel.AsNoTracking().Where(c => c.MSTR_AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.MSTR_ChurchLevelId == oCB_MSTR.ChurchLevelId).FirstOrDefault();
                                    if (oCL != null)
                                    {
                                        var oCB_CLNTAdd = new ChurchBody()
                                        {
                                            //Id = 0,
                                            MSTR_AppGlobalOwnerId = oCB_MSTR.AppGlobalOwnerId,
                                            MSTR_ChurchBodyId = oCB_MSTR.Id,
                                            MSTR_ParentChurchBodyId = oCB_MSTR.ParentChurchBodyId,
                                            MSTR_ChurchLevelId = oCB_MSTR.ChurchLevelId,     // cannot change for CH, CN types
                                            ///
                                            AppGlobalOwnerId = oAGO_CLNT.Id,
                                            ChurchLevelId = oCL.Id,
                                            Name = oCB_MSTR.Name,
                                            IsFullAutonomy = true,
                                            ChurchWorkStatus = oCB_MSTR.Id == oMSTRCBid ? "OP" : "ST",
                                            Status = oCB_MSTR.Id == oMSTRCBid ? oCB_MSTR.Status : "P",  // P-Pending activation from vendor  //oCB_MSTR.Status,
                                            IsSupervisedByParentBody = true,
                                            ///
                                            //Acronym = null, 
                                            //BriefHistory = null, 
                                            //ChurchBodyLogo = null, 
                                            //ChurchCodeCustom = null, 
                                            //CountryRegionId = (int?)null,  
                                            //SupervisedByChurchBodyId = (int?)null,   // Ex. Preaching Points are typically under the supervision of other congregations
                                            //DateFormed = (DateTime?)null, 
                                            //DateInnaug = (DateTime?)null,       

                                            //ParentChurchBodyId = (int?)null,   // get the parent code... via master parent // ParentChurchBodyId = null,  // update after first batch...   ***
                                            ///
                                            GlobalChurchCode = oCB_MSTR.GlobalChurchCode,
                                            MSTR_RootChurchCode = oCB_MSTR.RootChurchCode,  // ONLY Vendor to change
                                            RootChurchCode = oCB_MSTR.RootChurchCode,       // Client Admin may change but MUST be symmetrical to the Vendors. Ex. Grace cong must continue to be in the root path of Ga Presbytery unless Vendor so determines... tho client may alter [unaffected paths]
                                            OrgType = oCB_MSTR.OrgType,  // cannot change for CR, CH, CN types
                                            SubscriptionKey = oCB_MSTR.SubscriptionKey,
                                            CtryAlpha3Code = oCB_MSTR.CtryAlpha3Code,  // country GHA, USA, GBR 
                                            ///    
                                            //  ContactInfoId = oCI != null ? oCI.Id : (int?)null,  // create from the MSTR CI data-values ***
                                            Comments = oCB_MSTR.Comments,

                                            ///
                                            Created = tm,
                                            LastMod = tm,
                                            CreatedByUserId = vm.oUserId_Logged,
                                            LastModByUserId = vm.oUserId_Logged
                                        };

                                        this._context.Add(oCB_CLNTAdd);
                                        this._context.SaveChanges();
                                        _addCount++;


                                        ///
                                        var oCI_MSTR = _masterContext.MSTRContactInfo.AsNoTracking().Where(c => c.AppGlobalOwnerId == oCB_MSTR.AppGlobalOwnerId && c.ChurchBodyId == oCB_MSTR.Id && c.Id == oCB_MSTR.ContactInfoId).FirstOrDefault();
                                        //  ContactInfo oCI = null;
                                        if (oCI_MSTR != null)
                                        {
                                            var oCI = new ContactInfo()
                                            {
                                                //Id = 0,
                                                AppGlobalOwnerId = oCB_CLNTAdd.AppGlobalOwnerId,
                                                ChurchBodyId = oCB_CLNTAdd.Id,
                                                //RefUserId = oCI_MSTR.RefUserId,
                                                ExtHolderName = oCI_MSTR.ContactName,
                                                //ChurchMemberId = null
                                                IsPrimaryContact = true,
                                                // ContactInfoDesc = null,
                                                // IsChurchFellow = false,
                                                ResidenceAddress = oCI_MSTR.ResidenceAddress,
                                                Location = oCI_MSTR.Location,
                                                City = oCI_MSTR.City,
                                                CtryAlpha3Code = oCI_MSTR.CtryAlpha3Code,
                                                //RegionId = oCI_MSTR.RegionId,
                                                ResAddrSameAsPostAddr = oCI_MSTR.ResAddrSameAsPostAddr,
                                                PostalAddress = oCI_MSTR.PostalAddress,
                                                DigitalAddress = oCI_MSTR.DigitalAddress,
                                                Telephone = oCI_MSTR.Telephone,
                                                MobilePhone1 = oCI_MSTR.MobilePhone1,
                                                MobilePhone2 = oCI_MSTR.MobilePhone2,
                                                Email = oCI_MSTR.Email,
                                                Website = oCI_MSTR.Website,
                                                ///
                                                Created = tm,
                                                LastMod = tm,
                                                CreatedByUserId = vm.oUserId_Logged,
                                                LastModByUserId = vm.oUserId_Logged
                                            };

                                            this._context.Add(oCI);
                                            this._context.SaveChanges();

                                            // update CB
                                            oCB_CLNTAdd.ContactInfoId = oCI.Id;
                                            oCB_CLNTAdd.LastMod = tm;
                                            oCB_CLNTAdd.LastModByUserId = vm.oUserId_Logged;

                                            this._context.Update(oCI);
                                            this._context.SaveChanges();
                                        }
                                    }
                                }

                                else if (oCB_CLNTExist.MSTR_AppGlobalOwnerId != oCB_MSTR.AppGlobalOwnerId || oCB_CLNTExist.MSTR_ChurchLevelId != oCB_MSTR.ChurchLevelId ||
                                         oCB_CLNTExist.MSTR_ChurchBodyId != oCB_MSTR.Id || oCB_CLNTExist.MSTR_ParentChurchBodyId != oCB_MSTR.ParentChurchBodyId ||
                                         string.IsNullOrEmpty(oCB_CLNTExist.Name) ||
                                         oCB_CLNTExist.ChurchWorkStatus != oCB_MSTR.ChurchWorkStatus || oCB_CLNTExist.Status != oCB_MSTR.Status)
                                {
                                    oCB_CLNTExist.MSTR_AppGlobalOwnerId = oCB_MSTR.AppGlobalOwnerId;
                                    oCB_CLNTExist.MSTR_ChurchLevelId = oCB_MSTR.ChurchLevelId;
                                    oCB_CLNTExist.MSTR_ChurchBodyId = oCB_MSTR.Id;
                                    oCB_CLNTExist.MSTR_ParentChurchBodyId = oCB_MSTR.ParentChurchBodyId;
                                    oCB_CLNTExist.Name = oCB_MSTR.Name;
                                    oCB_CLNTExist.ChurchWorkStatus = oCB_MSTR.Id == oMSTRCBid ? "OP" : "ST";
                                    oCB_CLNTExist.Status = oCB_MSTR.Id == oMSTRCBid ? oCB_MSTR.Status : "P";  // P-Pending activation from vendor  //oCB_MSTR.Status,
                                    ///
                                    oCB_CLNTExist.LastMod = tm;
                                    oCB_CLNTExist.LastModByUserId = vm.oUserId_Logged;

                                    this._context.Update(oCB_CLNTExist);
                                    _updCount++;
                                }
                            }

                            /// NEW only else... on-demand update ... so that this code is run jux once... NOT @ every login
                            if ((_addCount + _updCount) > 0)
                            {
                                this._context.SaveChanges();  // save first before updating parents...

                                /// set Parent ChurchBody at client level ... reload client CB list UP path only...
                                // var oCBList = this._context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO_CLNT.Id);

                                var oCBList = this._context.ChurchBody.AsNoTracking()
                                        .Where(c => c.MSTR_AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && oUserCB_MSTR.RootChurchCode.Contains(c.GlobalChurchCode)).ToList();
                                var oCBParList = oCBList; // make a copy to search for the parent CB ... this._context.ChurchBody.Where(c => c.AppGlobalOwnerId == oAGO.Id);
                                _updCount = 0; tm = DateTime.Now;

                                if (oCBList.Count() > 0)
                                {
                                    foreach (var oCBItem in oCBList)
                                    {
                                        if (oCBItem.ParentChurchBodyId == null ||
                                           (oCBItem.ParentChurchBodyId != null &&
                                           this._context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO_CLNT.Id && c.Id == oCBItem.ParentChurchBodyId).FirstOrDefault() == null))
                                        {
                                            var oCBPar = oCBParList.Where(c => c.AppGlobalOwnerId == oCBItem.AppGlobalOwnerId && c.MSTR_AppGlobalOwnerId == oCBItem.MSTR_AppGlobalOwnerId &&
                                                                        c.MSTR_ChurchBodyId == oCBItem.MSTR_ParentChurchBodyId).FirstOrDefault();  // c.GlobalChurchCode == oCBItem.GlobalChurchCode && 
                                            if (oCBPar != null)
                                            {
                                                //if (oCBItem.ParentChurchBodyId != oCBPar.Id)
                                                //{
                                                oCBItem.ParentChurchBodyId = oCBPar.Id;
                                                oCBItem.LastMod = tm;
                                                oCBItem.LastModByUserId = vm.oUserId_Logged;
                                                ///
                                                this._context.Update(oCBItem);
                                                _updCount++;
                                                //}
                                            }
                                        }
                                    }

                                    /// save updated...
                                    if (_updCount > 0)
                                        this._context.SaveChanges();
                                }


                                // record ... @client
                                _userTask = "Created/updated " + _updCount + " " + strDesc.ToLower() + "s"; _tm = DateTime.Now;
                                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, _oChanges.AppGlobalOwnerId, oMSTRCBid, "T",
                                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oUserId_Logged, _tm, _tm, vm.oUserId_Logged, vm.oUserId_Logged)
                                                );
                            }
                        }
                        // }

                        var oCBClient = this._context.ChurchBody.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchLevel).Include(t => t.ParentChurchBody)
                                        .Where(c => c.MSTR_AppGlobalOwnerId == oUserCB_MSTR.AppGlobalOwnerId && (c.MSTR_ChurchBodyId == oUserCB_MSTR.Id || c.GlobalChurchCode == oUserCB_MSTR.GlobalChurchCode || (c.MSTR_ParentChurchBodyId == oUserCB_MSTR.ParentChurchBodyId && c.Name == oUserCB_MSTR.Name)))
                                        .FirstOrDefault();

                        // var _oCBClient = oCBClient;
                        //var oCBClient = _clientContext.ChurchBody.AsNoTracking().Where(c => (c.OrgType == "CH" || c.OrgType == "CN") && c.MSTR_AppGlobalOwnerId == _oChanges.AppGlobalOwnerId &&
                        //                                (c.MSTR_ChurchBodyId == oCBid || c.GlobalChurchCode == oCB_MSTR.GlobalChurchCode)).FirstOrDefault();


                        //// not new... save user info into session
                        //if (oCBClient != null)
                        //{
                        //    // save the client db
                        //    oUserPrivilegeCol.AppGlobalOwner_CLNT = oCBClient.AppGlobalOwner;
                        //    oUserPrivilegeCol.ChurchBody_CLNT = oCBClient;
                        //    _privList_CLNT = Newtonsoft.Json.JsonConvert.SerializeObject(oUserPrivilegeCol);
                        //    TempData["UserLogIn_oUserPrivCol"] = _privList_CLNT; TempData.Keep();

                        //    //// get the church slogan... from CLIENT side
                        //    _strSlogan_CL = "";
                        //    // get the church slogan... from MSTR side
                        //    // Asomdwei nka wo|enka wo nso 
                        //    if (!string.IsNullOrEmpty(oCBClient.AppGlobalOwner?.Slogan))
                        //    {
                        //        _strSlogan_CL = oCBClient.AppGlobalOwner?.Slogan;
                        //        if (_strSlogan_CL.Contains("*|*"))
                        //        {
                        //            var _arrSlogan_CL = _strSlogan_CL.Split("*|*");
                        //            _strSlogan_CL = _arrSlogan_CL.Length > 0 ? _arrSlogan_CL[0] : _strSlogan_CL;
                        //        }
                        //    }

                        //    // var _strSlogan = Newtonsoft.Json.JsonConvert.SerializeObject(strSlogan);
                        //    TempData["_strChurchSlogan"] = _strSlogan_CL; TempData.Keep();
                        //    model.strChurchSlogan = _strSlogan_CL;
                        //}


                        // nullify obj b/f save
                        if (_oChanges.AppGlobalOwner != null) _oChanges.AppGlobalOwner = null; // if (_oChanges.ChurchBody != null) _oChanges.ChurchBody = null;
                        if (oCBClient != null)
                        {
                            if (oCBClient.MSTR_AppGlobalOwnerId == null || oCBClient.MSTR_ChurchBodyId == null || oCBClient.MSTR_ChurchLevelId == null || string.IsNullOrEmpty(oCBClient.GlobalChurchCode) || string.IsNullOrEmpty(oCBClient.Name))
                            {
                                if (oCBClient.MSTR_AppGlobalOwnerId == null)
                                    oCBClient.MSTR_AppGlobalOwnerId = oUserCB_MSTR.AppGlobalOwnerId;

                                if (oCBClient.MSTR_ChurchBodyId == null)
                                    oCBClient.MSTR_ChurchBodyId = oUserCB_MSTR.Id;

                                if (oCBClient.MSTR_ChurchLevelId == null)
                                    oCBClient.MSTR_ChurchLevelId = oUserCB_MSTR.ChurchLevelId;

                                if (string.IsNullOrEmpty(oCBClient.GlobalChurchCode) || oAGO_CLNT.GlobalChurchCode != oUserCB_MSTR.GlobalChurchCode)
                                    oCBClient.GlobalChurchCode = oUserCB_MSTR.GlobalChurchCode;

                                if (string.IsNullOrEmpty(oCBClient.Name) || oCBClient.Name != oUserCB_MSTR.Name)
                                    oCBClient.Name = oUserCB_MSTR.Name;

                                // nullify obj b/f save
                                oCBClient.ChurchLevel = null;

                                ///
                                // nullify obj b/f save
                                if (oCBClient.AppGlobalOwner != null) oCBClient.AppGlobalOwner = null; if (oCBClient.ChurchLevel != null) oCBClient.ParentChurchBody = null;
                                ///
                                this._context.Update(oCBClient);
                                this._context.SaveChanges();

                               // ViewBag.UserMsg = strDesc + " updated successfully.";
                                _userTask = "Updated " + strDesc.ToLower() + ", " + oCBClient.Name.ToUpper() + " successfully";
                            }
                        }


                        //// update master db-user
                        //_oChanges.IsCLNTInit = true;
                        //_oChanges.LastMod = tm;
                        //// _oChanges.LastModByUserId = vm.oUserId_Logged;


                        //// nullify obj b/f save
                        //if (_oChanges.AppGlobalOwner != null) _oChanges.AppGlobalOwner = null; if (_oChanges.ChurchBody != null) _oChanges.ChurchBody = null;
                        //_context.Update(oUser_MSTR);

                        /////
                        //_context.SaveChanges();







                        //// not new... save user info into session
                        //if (_oCBClient != null)
                        //{    
                        //    // save the client db
                        //    oUserPrivilegeCol.AppGlobalOwner_CLNT = _oCBClient.AppGlobalOwner;
                        //    oUserPrivilegeCol.ChurchBody_CLNT = _oCBClient;
                        //    var _privList_CLNT = Newtonsoft.Json.JsonConvert.SerializeObject(oUserPrivilegeCol);
                        //    TempData["UserLogIn_oUserPrivCol"] = _privList_CLNT; TempData.Keep();

                        //    //// get the church slogan... from CLIENT side
                        //    var _strSlogan_CL = "";
                        //    // get the church slogan... from MSTR side
                        //    // Asomdwei nka wo|enka wo nso 
                        //    if (!string.IsNullOrEmpty(_oCBClient.AppGlobalOwner?.Slogan))
                        //    {
                        //        _strSlogan_CL = _oCBClient.AppGlobalOwner?.Slogan;   
                        //        if (_strSlogan_CL.Contains("*|*"))
                        //        {
                        //            var _arrSlogan_CL = _strSlogan_CL.Split("*|*");
                        //            _strSlogan_CL = _arrSlogan_CL.Length > 0 ? _arrSlogan_CL[0] : _strSlogan_CL;
                        //        }
                        //    } 

                        //    // var _strSlogan = Newtonsoft.Json.JsonConvert.SerializeObject(strSlogan);
                        //    TempData["_strChurchSlogan"] = _strSlogan_CL; TempData.Keep();
                        //    model.strChurchSlogan = _strSlogan_CL;
                        //}

                    }

                    catch (Exception ex)
                    {
                        var errMess = "church body synchronization failed. Please reload page to continue or contact System Admin. cli Err: " + ex.ToString();
                        // ModelState.AddModelError("", "Account validation failed. Client working space initialization failed. Please reload page to continue or contact System Admin. cli Err: " + ex.ToString()); // : ");
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = ViewBag.UserMsg + " but " + errMess, pageIndex = vm.pageIndex });
                    }



                    ViewBag.UserMsg += ". Church network successfully synchronized.";
                }



                ///
                ////



                // var _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "T",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oCurrUserId_Logged, _tm, _tm, vm.oCurrUserId_Logged, vm.oCurrUserId_Logged));


                var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);
                TempData["oVmCurr"] = _vmMod; TempData.Keep();

                return Json(new { taskSuccess = true, oCurrId = _oChanges.Id, resetNew = _reset, userMess = ViewBag.UserMsg, pageIndex = vm.pageIndex });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed saving church body details. Err: " + ex.Message, pageIndex = vm.pageIndex });
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult UpdateChurchNetworkParameters_CB(ChurchBodyModel vm)
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return View("_ErrorPage");
                    }
                }

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");


                // if (!InitializeUserLogging())
                // return RedirectToAction("LoginUserAcc", "UserLogin");

                var strDesc = "Church body";
                // var _userTask = "Attempted accessing/modifying " + strDesc.ToLower(); 

                //if (vm == null) 
                //    return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again.", pageIndex = vm.pageIndex });

                //if (vm.oChurchBody == null) 
                //    return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again.", pageIndex = vm.pageIndex });

                //if (vm.oChurchBody.AppGlobalOwnerId == null) 
                //    return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again.", pageIndex = vm.pageIndex });


                if (vm == null) return Json(new { taskSuccess = false, userMess = strDesc + " data to update unavailable. Please refresh and try again." });
                if (vm.oAppGloOwnId_Logged == null || vm.oUserId_Logged == null)    // oUser_MSTR.ChurchBodyId
                    return Json(new { taskSuccess = false, userMess = strDesc + " data to update unavailable. Please refresh and try again." });


                var oUser_MSTR = this._oLoggedUser;

                /// synchronize CTRY, AGO, CL, CB...  from MSTR to CLIENT
                /// 
                // initialize the COUNTRY  ... jux the country list standard countries ::: Use [CountryCustom] to config per denomination
                var _userTask = ""; var tm = DateTime.Now; var _tm = DateTime.Now;
                var _addCount = 0; var _updCount = 0;  tm = DateTime.Now; //var 
                    strDesc = "Country";
                var countriesList = AppUtilties.GetMS_BaseCountries();
                var oCTRYCount = _context.Country.AsNoTracking().Count();
                var oCtryAddList = new List<Country>();
                ///
              //  if (oCTRYCount != countriesList.Count() && countriesList.Count > 0)
               // {
                    foreach (var oCtry in countriesList)
                    {
                        var oCTRYExist = _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == oCtry.CtryAlpha3Code).FirstOrDefault();
                        if (oCTRYExist == null)
                        {
                            //var checkCtryAddedList = oCtryAddList.Where(c => c.CtryAlpha3Code == oCtry.CtryAlpha3Code).ToList();
                            var checkCtryAdded = oCtryAddList.Count(c => c.CtryAlpha3Code == oCtry.CtryAlpha3Code) > 0; // checkCtryAddedList.Count() > 0; // oCtryAddList.Count(c => c.CtryAlpha3Code == oCTRY.CtryAlpha3Code) == 0;
                            if (!checkCtryAdded)
                            {
                                var oNewCtry = new Country()
                                {
                                    CtryAlpha3Code = oCtry.CtryAlpha3Code,
                                    //AppGlobalOwnerId = oAGO.Id,
                                    // ChurchBodyId = 
                                    EngName = oCtry.EngName,
                                    CtryAlpha2Code = oCtry.CtryAlpha2Code,
                                    CurrEngName = oCtry.CurrEngName,
                                    CurrLocName = oCtry.CurrLocName,
                                    CurrSymbol = oCtry.CurrSymbol,
                                    Curr3LISOSymbol = oCtry.Curr3LISOSymbol,
                                    // SharingStatus = "N",
                                    Created = tm,
                                    LastMod = tm,
                                    CreatedByUserId = oUser_MSTR.Id,
                                    LastModByUserId = oUser_MSTR.Id
                                };

                                _context.Add(oNewCtry);
                                _updCount++;

                                oCtryAddList.Add(oNewCtry);
                            }
                            //else
                            //{
                            //    checkCtryAdded = checkCtryAdded;
                            //    checkCtryAddedList = checkCtryAddedList;
                            //}
                        }
                        else  // update country data
                        {
                            oCTRYExist.CtryAlpha3Code = oCtry.CtryAlpha3Code;
                            oCTRYExist.EngName = oCtry.EngName;
                            oCTRYExist.CtryAlpha2Code = oCtry.CtryAlpha2Code;
                            oCTRYExist.CurrEngName = oCtry.CurrEngName;
                            oCTRYExist.CurrLocName = oCtry.CurrLocName;
                            oCTRYExist.CurrSymbol = oCtry.CurrSymbol;
                            oCTRYExist.Curr3LISOSymbol = oCtry.Curr3LISOSymbol;
                            //oCTRY. SharingStatus = "N";
                            // oCTRY.Created = tm;
                            oCTRYExist.LastMod = tm;
                            // oCTRY.CreatedByUserId = oUser_MSTR.Id;
                            oCTRYExist.LastModByUserId = oUser_MSTR.Id;

                            _context.Update(oCTRYExist);
                            _updCount++;
                        }
                    }

                    if (_updCount > 0)
                    {
                        _context.SaveChanges();

                        ///
                        /////update country of oAGO
                        //if (oAGO_MSTR != null)
                        //{
                        //    oAGO.CtryAlpha3Code = oAGO_MSTR.CtryAlpha3Code;
                        //    oAGO.LastMod = tm; oAGO.LastModByUserId = oUser_MSTR.Id;
                        //    _context.Update(oAGO);

                        //    /// save updated...
                        //    _context.SaveChanges();
                        //}

                        /// update user trail
                        _userTask = "Created " + _updCount + " countries."; _tm = DateTime.Now;
                        // record ... @client 
                        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, oUser_MSTR.AppGlobalOwnerId, oUser_MSTR.ChurchBodyId, "T",
                                         "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, oUser_MSTR.Id, _tm, _tm, oUser_MSTR.Id, oUser_MSTR.Id)
                                        );

                        // record @ MSTR

                    }
              //  }


                // initialize the AGO    ...var oClientAGOListCount = _context.AppGlobalOwner.Count();
                strDesc = "Denomination (Church)"; tm = DateTime.Now; //  _updCount = 0;
                var oAGO_MSTR = _masterContext.MSTRAppGlobalOwner.AsNoTracking().Include(t => t.FaithTypeCategory).ThenInclude(t => t.FaithTypeClass)
                                    .Where(c => c.Id == oUser_MSTR.AppGlobalOwnerId).FirstOrDefault();   //&& c.GlobalChurchCode==oUser_MSTR.strChurchCode_AGO

                if (oAGO_MSTR == null)
                    return Json(new { taskSuccess = false, userMess = "Default parameters synchronize failed. Denomination (Church) could not be verified. Refresh and try again." });
               

                //COPY/create THE DENOMINATION / CONTACT INFO FROM MSTR    //  || c.GlobalChurchCode == oAGO_MSTR.GlobalChurchCode
                var oAGO_CLNT = _context.AppGlobalOwner.Where(c => c.MSTR_AppGlobalOwnerId == oAGO_MSTR.Id).FirstOrDefault();  //)   // || c.OwnerName == oAGO_MSTR.OwnerName
                if (oAGO_CLNT == null)  // create AGO and CI
                {
                    var oAGONew = new AppGlobalOwner()
                    {
                        //Id = 0,
                        MSTR_AppGlobalOwnerId = oAGO_MSTR.Id,
                        OwnerName = oAGO_MSTR.OwnerName,
                        GlobalChurchCode = oAGO_MSTR.GlobalChurchCode,
                        RootChurchCode = oAGO_MSTR.GlobalChurchCode,
                        TotalLevels = oAGO_MSTR.TotalLevels,
                        Acronym = oAGO_MSTR.Acronym,
                        PrefixKey = oAGO_MSTR.PrefixKey,
                        Allias = oAGO_MSTR.Allias,
                        Motto = oAGO_MSTR.Motto,
                        Slogan = oAGO_MSTR.Slogan,
                        ChurchLogo = oAGO_MSTR.ChurchLogo,
                        Status = oAGO_MSTR.Status,
                        Comments = oAGO_MSTR.Comments,
                        // CountryId = 0,
                        CtryAlpha3Code = oAGO_MSTR.CtryAlpha3Code,
                        strFaithTypeCategory = oAGO_MSTR.FaithTypeCategory != null ? oAGO_MSTR.FaithTypeCategory.FaithDescription : "",
                        strFaithStream = oAGO_MSTR.FaithTypeCategory != null ? (oAGO_MSTR.FaithTypeCategory.FaithTypeClass != null ? oAGO_MSTR.FaithTypeCategory.FaithTypeClass.FaithDescription : "") : "",
                        // FaithTypeCategoryId = oAGO_MSTR.FaithTypeCategoryId, // jux keep the Id... get the [strFaithTypeCategory, strFaithTypeStream] ...from MSTR @queries                                         
                        //  ContactInfoId = oCI != null ? oCI.Id : (int?)null, // copy details and create this to the local CI                                            
                        ///
                        Created = tm,
                        LastMod = tm,
                        CreatedByUserId = oUser_MSTR.Id,
                        LastModByUserId = oUser_MSTR.Id
                    };

                    _context.Add(oAGONew);

                    // _updCount++;


                    //if (_updCount > 0)
                    //{

                    _context.SaveChanges();
                    oAGO_CLNT = oAGONew;


                    // check for the CI from MSTR...
                    var oCI_MSTR = _masterContext.MSTRContactInfo.Where(c => c.AppGlobalOwnerId == oAGO_MSTR.Id && c.Id == oAGO_MSTR.ContactInfoId).FirstOrDefault();
                    ContactInfo oCI = null;
                    if (oCI_MSTR != null)
                    {
                        oCI = new ContactInfo()
                        {
                            //Id = 0,
                            AppGlobalOwnerId = oAGONew.Id,

                            // ChurchBodyId = oCB_MSTR.Id,
                            // RefUserId = oCI_MSTR.RefUserId,
                            //ContactInfoDesc

                            ExtHolderName = oCI_MSTR.ContactName,
                            IsPrimaryContact = true,
                            //IsChurchFellow = false,
                            ResidenceAddress = oCI_MSTR.ResidenceAddress,
                            Location = oCI_MSTR.Location,
                            City = oCI_MSTR.City,
                            CtryAlpha3Code = oCI_MSTR.CtryAlpha3Code,
                            //RegionId = oCI_MSTR.RegionId,
                            ResAddrSameAsPostAddr = oCI_MSTR.ResAddrSameAsPostAddr,
                            PostalAddress = oCI_MSTR.PostalAddress,
                            DigitalAddress = oCI_MSTR.DigitalAddress,
                            Telephone = oCI_MSTR.Telephone,
                            MobilePhone1 = oCI_MSTR.MobilePhone1,
                            MobilePhone2 = oCI_MSTR.MobilePhone2,
                            Email = oCI_MSTR.Email,
                            Website = oCI_MSTR.Website,
                            ///
                            Created = tm,
                            LastMod = tm,
                            CreatedByUserId = oUser_MSTR.Id,
                            LastModByUserId = oUser_MSTR.Id
                        };

                        _context.Add(oCI);

                        //update firsst... to det Id
                        _context.SaveChanges();
                    }


                    // do some update here...
                    if (oCI != null)
                    {
                        oAGONew.ContactInfoId = oCI.Id;
                        oAGONew.LastMod = tm; oCI.LastModByUserId = oUser_MSTR.Id;
                        ///
                        _context.Update(oAGONew);
                        _context.SaveChanges();
                    }

                    // record ... @client
                    _userTask = "Created " + _updCount + " " + strDesc.ToLower(); _tm = DateTime.Now;

                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, oUser_MSTR.AppGlobalOwnerId, oUser_MSTR.ChurchBodyId, "T",
                                         "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, oUser_MSTR.Id, _tm, _tm, oUser_MSTR.Id, oUser_MSTR.Id)
                                        );
                    //  }
                }

                /// some client UPDATE /sync! ...  check the localized data... using the MSTR data
                else  // update AGO
                {
                    if (oAGO_CLNT.MSTR_AppGlobalOwnerId != oAGO_MSTR.Id || string.Compare(oAGO_CLNT.GlobalChurchCode, oAGO_MSTR.GlobalChurchCode, true) != 0 ||
                        string.IsNullOrEmpty(oAGO_CLNT.OwnerName) || string.IsNullOrEmpty(oAGO_CLNT.strFaithTypeCategory) || string.IsNullOrEmpty(oAGO_CLNT.strFaithStream))
                    {
                        //var oAGO_MSTR = _masterContext.MSTRAppGlobalOwner.AsNoTracking().Include(t => t.FaithTypeCategory).ThenInclude(t => t.FaithTypeClass)
                        //            .Where(c => c.Id == oUser_MSTR.AppGlobalOwnerId).FirstOrDefault();

                        if (oAGO_CLNT.MSTR_AppGlobalOwnerId == null)
                            oAGO_CLNT.MSTR_AppGlobalOwnerId = oAGO_MSTR.Id;

                        if (string.IsNullOrEmpty(oAGO_CLNT.GlobalChurchCode) || oAGO_CLNT.GlobalChurchCode != oAGO_MSTR.GlobalChurchCode)
                            oAGO_CLNT.GlobalChurchCode = oAGO_MSTR.GlobalChurchCode;

                        if (string.IsNullOrEmpty(oAGO_CLNT.OwnerName) || oAGO_CLNT.OwnerName != oAGO_MSTR.OwnerName)
                            oAGO_CLNT.OwnerName = oAGO_MSTR.OwnerName;

                        if (string.IsNullOrEmpty(oAGO_CLNT.strFaithTypeCategory))
                            oAGO_CLNT.strFaithTypeCategory = oAGO_MSTR.FaithTypeCategory != null ? oAGO_MSTR.FaithTypeCategory.FaithDescription : "";

                        if (string.IsNullOrEmpty(oAGO_CLNT.strFaithStream))
                            oAGO_CLNT.strFaithStream = oAGO_MSTR.FaithTypeCategory != null ? (oAGO_MSTR.FaithTypeCategory.FaithTypeClass != null ? oAGO_MSTR.FaithTypeCategory.FaithTypeClass.FaithDescription : "") : "";

                        _context.Update(oAGO_CLNT);
                        _context.SaveChanges();

                        ViewBag.UserMsg = strDesc + " updated successfully.";
                        ///
                        _userTask = "Updated " + strDesc.ToLower() + ", " + oAGO_CLNT.OwnerName.ToUpper() + " successfully";
                        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, oUser_MSTR.AppGlobalOwnerId, oUser_MSTR.ChurchBodyId, "T",
                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, oUser_MSTR.Id, _tm, _tm, oUser_MSTR.Id, oUser_MSTR.Id)
                                    );
                    }
                }


                // Get the denomination/church || c.GlobalChurchCode == oAGO_MSTR.GlobalChurchCode
                //var oAGO = _context.AppGlobalOwner.Where(c => c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId).FirstOrDefault();                                 
                // oAGO_CLNT... use last created /updated

                // initialize the CL                                
                var oCL_MSTRList = _masterContext.MSTRChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId);
                var oCL_CLNTList = _context.ChurchLevel.AsNoTracking().Where(c => c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId);
                ///
               // if (oCL_CLNTList.Count() != oCL_MSTRList.Count())
               // {
                    strDesc = "Church Level";
                    _addCount = 0; _updCount = 0; tm = DateTime.Now;
                    //if (oCL_MSTRList.Count() > 0 && oAGO_CLNT != null)
                    //{
                        foreach (var oCL_MSTR in oCL_MSTRList)
                        {
                            var oCLExist = oCL_CLNTList.Where(c => c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId &&
                                               (c.Name.ToLower() == oCL_MSTR.Name.ToLower() || c.CustomName.ToLower() == oCL_MSTR.CustomName.ToLower())).FirstOrDefault();
                            if (oCLExist == null)
                            {
                                _context.Add(new ChurchLevel()
                                {
                                    //Id = 0,
                                    MSTR_AppGlobalOwnerId = oCL_MSTR.AppGlobalOwnerId,
                                    MSTR_ChurchLevelId = oCL_MSTR.Id,
                                    ///
                                    AppGlobalOwnerId = oAGO_CLNT.Id,
                                    Name = oCL_MSTR.Name,
                                    CustomName = oCL_MSTR.CustomName,
                                    LevelIndex = oCL_MSTR.LevelIndex,
                                    Acronym = oCL_MSTR.Acronym,
                                    SharingStatus = oCL_MSTR.SharingStatus,
                                    ///
                                    Created = tm,
                                    LastMod = tm,
                                    CreatedByUserId = oUser_MSTR.Id,
                                    LastModByUserId = oUser_MSTR.Id
                                });

                                _addCount++;
                            }
                            else if (oCLExist.MSTR_AppGlobalOwnerId != oCL_MSTR.AppGlobalOwnerId || oCLExist.MSTR_ChurchLevelId != oCL_MSTR.Id ||
                                     oCLExist.LevelIndex != oCL_MSTR.LevelIndex || string.Compare(oCLExist.Name, oCL_MSTR.Name, true) != 0)
                            {
                                oCLExist.MSTR_AppGlobalOwnerId = oCL_MSTR.AppGlobalOwnerId;
                                oCLExist.MSTR_ChurchLevelId = oCL_MSTR.Id;
                                oCLExist.Name = oCL_MSTR.Name;
                                oCLExist.LevelIndex = oCL_MSTR.LevelIndex;
                                oCLExist.LastMod = tm;
                                oCLExist.LastModByUserId = oUser_MSTR.Id;

                                _context.Update(oCLExist);
                                _updCount++;
                            }
                        }


                        if ((_addCount + _updCount) > 0)
                        {
                            _context.SaveChanges();
                            ///
                            // record ... @client
                            _userTask = "Created " + _updCount + " " + strDesc.ToLower(); _tm = DateTime.Now;
                            _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, oUser_MSTR.AppGlobalOwnerId, oUser_MSTR.ChurchBodyId, "T",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, oUser_MSTR.Id, _tm, _tm, oUser_MSTR.Id, oUser_MSTR.Id)
                                            );
                        }
                    //}
              //  }

                // include the root to the top for the subscriber... but make them STructure only until logged in [thus have accounts created by vendor]
                // initialize the CB  ... ONLY create the CB that subscribed even in the same Denomination [ 1 CB at a time ]                       
                //var oAGO = _context.AppGlobalOwner.Where(c => c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId || c.GlobalChurchCode == oAGO_MSTR.GlobalChurchCode).FirstOrDefault();
                ///
                var oUserCB_MSTR = _masterContext.MSTRChurchBody.AsNoTracking()  //.Include(t => t.FaithTypeCategory).ThenInclude(t => t.FaithTypeClass)
                                     .Where(c => c.AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && c.Id == oUser_MSTR.ChurchBodyId).FirstOrDefault();

                if (oUserCB_MSTR == null)
                    return Json(new { taskSuccess = false, userMess = "Default parameters synchronize failed. Subscribed church body (unit) could not be verified. Refresh and try again." });


                //**********************************
                // for single subscription... until user logs in, CB is not created yet on Client server/DB............. // use subscription key /shared subscriptio keys for Multiple subsciption sync
                //var oCB_MSTRList = _masterContext.MSTRChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && c.Id == oUserCB_MSTR.Id).ToList(); 
                ///
                var oCB_MSTRList = _masterContext.MSTRChurchBody.AsNoTracking()
                    .Where(c => c.AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && oUserCB_MSTR.RootChurchCode.Contains(c.GlobalChurchCode)).ToList();
                //var oCBClientListCount = _context.ChurchBody.AsNoTracking().Count(c => c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && c.MSTR_ChurchBodyId == oUserCB_MSTR.Id);
                var oCB_CLNTList = _context.ChurchBody.AsNoTracking()
                    .Where(c => c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && oUserCB_MSTR.RootChurchCode.Contains(c.GlobalChurchCode)).ToList();

                strDesc = "Church body (unit)";

                ///                                
              //  if (oCB_CLNTList.Count() != oCB_MSTRList.Count())
              //  {
                    _addCount = 0; _updCount = 0; tm = DateTime.Now;
                    //if (oCB_MSTRList.Count() > 0 && oAGO_CLNT != null)
                    //{
                        foreach (var oCB_MSTR in oCB_MSTRList)
                        {
                            //var oCB_CLNTExist = _context.ChurchBody.Where(c => (c.OrgType == "CH" || c.OrgType == "CN") && c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && 
                            //               (c.MSTR_ChurchBodyId == oUser_MSTR.ChurchBodyId || c.GlobalChurchCode == oCB_MSTR.GlobalChurchCode)).FirstOrDefault();

                            // create all CBs not found in the root path of MSTR path ... at the client side.
                            var oCB_CLNTExist = oCB_CLNTList.Where(c => (c.OrgType == "CR" || c.OrgType == "CH" || c.OrgType == "CN") &&
                                        (c.MSTR_ChurchBodyId == oCB_MSTR.Id || c.GlobalChurchCode == oCB_MSTR.GlobalChurchCode)).FirstOrDefault();

                            if (oCB_CLNTExist == null)
                            {
                                // Get Church level
                                //  ChurchBody oCB_CLNTAdd = null;
                                var oCL = _context.ChurchLevel.Where(c => c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && c.MSTR_ChurchLevelId == oCB_MSTR.ChurchLevelId).FirstOrDefault();
                                if (oCL != null)
                                {
                                    var oCB_CLNTAdd = new ChurchBody()
                                    {
                                        //Id = 0,
                                        MSTR_AppGlobalOwnerId = oCB_MSTR.AppGlobalOwnerId,
                                        MSTR_ChurchBodyId = oCB_MSTR.Id,
                                        MSTR_ParentChurchBodyId = oCB_MSTR.ParentChurchBodyId,
                                        MSTR_ChurchLevelId = oCB_MSTR.ChurchLevelId,     // cannot change for CH, CN types
                                        ///
                                        AppGlobalOwnerId = oAGO_CLNT.Id,
                                        ChurchLevelId = oCL.Id,
                                        Name = oCB_MSTR.Name,
                                        IsFullAutonomy = true,
                                        ChurchWorkStatus = oCB_MSTR.Id == oUser_MSTR.ChurchBodyId ? "OP" : "ST",
                                        Status = oCB_MSTR.Id == oUser_MSTR.ChurchBodyId ? oCB_MSTR.Status : "P",  // P-Pending activation from vendor  //oCB_MSTR.Status,
                                        IsSupervisedByParentBody = true,
                                        ///
                                        //Acronym = null, 
                                        //BriefHistory = null, 
                                        //ChurchBodyLogo = null, 
                                        //ChurchCodeCustom = null, 
                                        //CountryRegionId = (int?)null,  
                                        //SupervisedByChurchBodyId = (int?)null,   // Ex. Preaching Points are typically under the supervision of other congregations
                                        //DateFormed = (DateTime?)null, 
                                        //DateInnaug = (DateTime?)null,       

                                        //ParentChurchBodyId = (int?)null,   // get the parent code... via master parent // ParentChurchBodyId = null,  // update after first batch...   ***
                                        ///
                                        GlobalChurchCode = oCB_MSTR.GlobalChurchCode,
                                        MSTR_RootChurchCode = oCB_MSTR.RootChurchCode,  // ONLY Vendor to change
                                        RootChurchCode = oCB_MSTR.RootChurchCode,       // Client Admin may change but MUST be symmetrical to the Vendors. Ex. Grace cong must continue to be in the root path of Ga Presbytery unless Vendor so determines... tho client may alter [unaffected paths]
                                        OrgType = oCB_MSTR.OrgType,  // cannot change for CH, CN types
                                        SubscriptionKey = oCB_MSTR.SubscriptionKey,
                                        CtryAlpha3Code = oCB_MSTR.CtryAlpha3Code,  // country GHA, USA, GBR 
                                        ///    
                                        //  ContactInfoId = oCI != null ? oCI.Id : (int?)null,  // create from the MSTR CI data-values ***
                                        Comments = oCB_MSTR.Comments,

                                        ///
                                        Created = tm,
                                        LastMod = tm,
                                        CreatedByUserId = oUser_MSTR.Id,
                                        LastModByUserId = oUser_MSTR.Id
                                    };

                                    _context.Add(oCB_CLNTAdd);
                                    _context.SaveChanges();
                                    _addCount++;


                                    ///
                                    var oCI_MSTR = _masterContext.MSTRContactInfo.Where(c => c.AppGlobalOwnerId == oCB_MSTR.AppGlobalOwnerId && c.ChurchBodyId == oCB_MSTR.Id && c.Id == oCB_MSTR.ContactInfoId).FirstOrDefault();
                                    //  ContactInfo oCI = null;
                                    if (oCI_MSTR != null)
                                    {
                                        var oCI = new ContactInfo()
                                        {
                                            //Id = 0,
                                            AppGlobalOwnerId = oCB_CLNTAdd.AppGlobalOwnerId,
                                            ChurchBodyId = oCB_CLNTAdd.Id,
                                            //RefUserId = oCI_MSTR.RefUserId,
                                            ExtHolderName = oCI_MSTR.ContactName,
                                            //ChurchMemberId = null
                                            IsPrimaryContact = true,
                                            // ContactInfoDesc = null,
                                            // IsChurchFellow = false,
                                            ResidenceAddress = oCI_MSTR.ResidenceAddress,
                                            Location = oCI_MSTR.Location,
                                            City = oCI_MSTR.City,
                                            CtryAlpha3Code = oCI_MSTR.CtryAlpha3Code,
                                            //RegionId = oCI_MSTR.RegionId,
                                            ResAddrSameAsPostAddr = oCI_MSTR.ResAddrSameAsPostAddr,
                                            PostalAddress = oCI_MSTR.PostalAddress,
                                            DigitalAddress = oCI_MSTR.DigitalAddress,
                                            Telephone = oCI_MSTR.Telephone,
                                            MobilePhone1 = oCI_MSTR.MobilePhone1,
                                            MobilePhone2 = oCI_MSTR.MobilePhone2,
                                            Email = oCI_MSTR.Email,
                                            Website = oCI_MSTR.Website,
                                            ///
                                            Created = tm,
                                            LastMod = tm,
                                            CreatedByUserId = oUser_MSTR.Id,
                                            LastModByUserId = oUser_MSTR.Id
                                        };

                                        _context.Add(oCI);
                                        _context.SaveChanges();

                                        // update CB
                                        oCB_CLNTAdd.ContactInfoId = oCI.Id;
                                        oCB_CLNTAdd.LastMod = tm;
                                        oCB_CLNTAdd.LastModByUserId = oUser_MSTR.Id;

                                        _context.Update(oCI);
                                        _context.SaveChanges();
                                    }
                                }
                            }

                            else if (oCB_CLNTExist.MSTR_AppGlobalOwnerId != oCB_MSTR.AppGlobalOwnerId || oCB_CLNTExist.MSTR_ChurchLevelId != oCB_MSTR.ChurchLevelId ||
                                     oCB_CLNTExist.MSTR_ChurchBodyId != oCB_MSTR.Id || oCB_CLNTExist.MSTR_ParentChurchBodyId != oCB_MSTR.ParentChurchBodyId ||
                                     string.IsNullOrEmpty(oCB_CLNTExist.Name))
                            {
                                oCB_CLNTExist.MSTR_AppGlobalOwnerId = oCB_MSTR.AppGlobalOwnerId;
                                oCB_CLNTExist.MSTR_ChurchLevelId = oCB_MSTR.ChurchLevelId;
                                oCB_CLNTExist.MSTR_ChurchBodyId = oCB_MSTR.Id;
                                oCB_CLNTExist.MSTR_ParentChurchBodyId = oCB_MSTR.ParentChurchBodyId;
                                oCB_CLNTExist.Name = oCB_MSTR.Name;
                                oCB_CLNTExist.LastMod = tm;
                                oCB_CLNTExist.LastModByUserId = oUser_MSTR.Id;

                                _context.Update(oCB_CLNTExist);
                                _updCount++;
                            }
                        }

                    /// NEW only else... on-demand update ... so that this code is run jux once... NOT @ every login
                    if ((_addCount + _updCount) > 0)
                    {
                        _context.SaveChanges();  // save first before updating parents...
                                                 // record ... @client

                        _userTask = "Created/updated " + _updCount + " " + strDesc.ToLower() + "s"; _tm = DateTime.Now;
                        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, oUser_MSTR.AppGlobalOwnerId, oUser_MSTR.ChurchBodyId, "T",
                                         "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, oUser_MSTR.Id, _tm, _tm, oUser_MSTR.Id, oUser_MSTR.Id)
                                        );
                    }

                    /// UPDATE CLIENT PARENTING...
                    /// set Parent ChurchBody at client level
                    //var oCBList = oCB_CLNTList; // only CB root... [ UP] // _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO_CLNT.Id);

                    // reload CB client list... path UP
                    var oCBList = _context.ChurchBody.AsNoTracking()
                                    .Where(c => c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && oUserCB_MSTR.RootChurchCode.Contains(c.GlobalChurchCode)).ToList();
                    var oCBParList =  oCBList; //make a copy to search for the parent CB ... _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oAGO.Id);
                            _updCount = 0; tm = DateTime.Now;

                            if (oCBList.Count() > 0)
                            {
                                foreach (var oCB in oCBList)
                                {
                                    if (oCB.ParentChurchBodyId == null ||
                                       (oCB.ParentChurchBodyId != null &&
                                       _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO_CLNT.Id && c.Id == oCB.ParentChurchBodyId).FirstOrDefault() == null))
                                    {
                                        var oCBPar = oCBParList.Where(c => c.AppGlobalOwnerId == oCB.AppGlobalOwnerId && c.MSTR_AppGlobalOwnerId == oCB.MSTR_AppGlobalOwnerId &&
                                                                    c.MSTR_ChurchBodyId == oCB.MSTR_ParentChurchBodyId).FirstOrDefault();  // c.GlobalChurchCode == oCB.GlobalChurchCode && 
                                        if (oCBPar != null)
                                        {
                                            //if (oCB.ParentChurchBodyId != oCBPar.Id)
                                            //{
                                            oCB.ParentChurchBodyId = oCBPar.Id;
                                            oCB.LastMod = tm;
                                            oCB.LastModByUserId = oUser_MSTR.Id;
                                            ///
                                            _context.Update(oCB);
                                            _updCount++;
                                            //}
                                        }
                                    }
                                }

                                /// save updated...
                                if (_updCount > 0)
                                {
                                    _context.SaveChanges();

                                    // record ... @client
                                    _userTask = "Updated parent units of " + _updCount + " " + strDesc.ToLower() + "s"; _tm = DateTime.Now;
                                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, oUser_MSTR.AppGlobalOwnerId, oUser_MSTR.ChurchBodyId, "T",
                                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, oUser_MSTR.Id, _tm, _tm, oUser_MSTR.Id, oUser_MSTR.Id)
                                                    );
                                }                                           
                            }                        
                    //}
              //  }


                var oCBClient = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                                .Where(c => c.MSTR_AppGlobalOwnerId == oUserCB_MSTR.AppGlobalOwnerId && (c.MSTR_ChurchBodyId == oUserCB_MSTR.Id || c.GlobalChurchCode == oUserCB_MSTR.GlobalChurchCode || (c.MSTR_ParentChurchBodyId == oUserCB_MSTR.ParentChurchBodyId && c.Name == oUserCB_MSTR.Name))).FirstOrDefault();
                //var oCBClient = _context.ChurchBody.AsNoTracking().Where(c => (c.OrgType == "CH" || c.OrgType == "CN") && c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId &&
                //                                (c.MSTR_ChurchBodyId == oUser_MSTR.ChurchBodyId || c.GlobalChurchCode == oCB_MSTR.GlobalChurchCode)).FirstOrDefault();

                if (oCBClient != null)
                {
                    if (oCBClient.MSTR_AppGlobalOwnerId == null || oCBClient.MSTR_ChurchBodyId == null || oCBClient.MSTR_ChurchLevelId == null || string.IsNullOrEmpty(oCBClient.GlobalChurchCode) || string.IsNullOrEmpty(oCBClient.Name))
                    {
                        if (oCBClient.MSTR_AppGlobalOwnerId == null)
                            oCBClient.MSTR_AppGlobalOwnerId = oUserCB_MSTR.AppGlobalOwnerId;

                        if (oCBClient.MSTR_ChurchBodyId == null)
                            oCBClient.MSTR_ChurchBodyId = oUserCB_MSTR.Id;

                        if (oCBClient.MSTR_ChurchLevelId == null)
                            oCBClient.MSTR_ChurchLevelId = oUserCB_MSTR.ChurchLevelId;

                        if (string.IsNullOrEmpty(oCBClient.GlobalChurchCode) || oAGO_CLNT.GlobalChurchCode != oUserCB_MSTR.GlobalChurchCode)
                            oCBClient.GlobalChurchCode = oUserCB_MSTR.GlobalChurchCode;

                        if (string.IsNullOrEmpty(oCBClient.Name) || oCBClient.Name != oUserCB_MSTR.Name)
                            oCBClient.Name = oUserCB_MSTR.Name;


                        _context.Update(oCBClient);
                        _context.SaveChanges();

                        ViewBag.UserMsg = strDesc + " updated successfully.";
                        _userTask = "Updated " + strDesc.ToLower() + ", " + oCBClient.Name.ToUpper() + " successfully";
                    }
                }


                  
                 
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "T",
                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, this._oLoggedUser.Id, _tm, _tm, this._oLoggedUser.Id, this._oLoggedUser.Id));


                ViewBag.UserMsg = "Default parameters synchronize for working church body [" + this._oLoggedCB.Name + "] completed successfully.";
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg});

            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, userMess = "Default parameters synchronize for working church body failed. Err: " + ex.Message});
            }
        }




        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult ResetToDefaultsOrgStruct_CB(ChurchBodyModel vm)
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return View("_ErrorPage");
                    }
                }


                // if (!InitializeUserLogging())
                // return RedirectToAction("LoginUserAcc", "UserLogin");

                var strDesc = "Church body";
                // var _userTask = "Attempted accessing/modifying " + strDesc.ToLower(); 

                if (vm == null) return Json(new { taskSuccess = false, userMess = strDesc + " data to update unavailable. Please refresh and try again." });
                if (vm.oAppGloOwnId_Logged == null || vm.oUserId_Logged == null)    // oUser_MSTR.ChurchBodyId
                    return Json(new { taskSuccess = false, userMess = strDesc + " data to update unavailable. Please refresh and try again." });

                // ChurchBody _oChanges = vm.oChurchBody;

                var oUser_AGO = _context.AppGlobalOwner.Find(vm.oAppGloOwnId_Logged);
                // Get the denomination/church || c.GlobalChurchCode == oAGO_MSTR.GlobalChurchCode
                //var oAGO = _context.AppGlobalOwner.Where(c => c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId).FirstOrDefault();
                if (oUser_AGO == null)
                    return Json(new { taskSuccess = false, userMess = "Default parameters update failed. Denomination (Church) could not be verified [at client DB]. Refresh and try again." });

                var _userTask = ""; var tm = DateTime.Now; var _tm = DateTime.Now; //  UserProfile oUser_MSTR = this._oLoggedUser;
                var oUser_MSTR = _masterContext.UserProfile.AsNoTracking().Where(c => c.AppGlobalOwnerId == oUser_AGO.MSTR_AppGlobalOwnerId && c.Id == vm.oUserId_Logged).FirstOrDefault();
              
                if (oUser_MSTR == null)
                    return Json(new { taskSuccess = false, userMess = "Default parameters update failed. Logged user could not be verified [at vendor DB]. Refresh and try again." });

                // include the root to the top for the subscriber... but make them STructure only until logged in [thus have accounts created by vendor]
                // initialize the CB  ... ONLY create the CB that subscribed even in the same Denomination [ 1 CB at a time ]                       

                //var oAGO = _context.AppGlobalOwner
                //    .Where(c => c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId || c.GlobalChurchCode == oAGO_MSTR.GlobalChurchCode).FirstOrDefault();


                strDesc = "Denomination (Church)"; tm = DateTime.Now; //  _updCount = 0;
                var oAGO_MSTR = _masterContext.MSTRAppGlobalOwner.AsNoTracking().Include(t => t.FaithTypeCategory).ThenInclude(t => t.FaithTypeClass)
                                    .Where(c => c.Id == oUser_MSTR.AppGlobalOwnerId).FirstOrDefault();   //&& c.GlobalChurchCode==oUser_MSTR.strChurchCode_AGO

                if (oAGO_MSTR == null)
                    return Json(new { taskSuccess = false, userMess = "Default parameters update failed. Denomination (Church) could not be verified [at vendor DB]. Refresh and try again." });
 
                ///
                var oUserCB_MSTR = _masterContext.MSTRChurchBody.AsNoTracking()  //.Include(t => t.FaithTypeCategory).ThenInclude(t => t.FaithTypeClass)
                                     .Where(c => c.AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && c.Id == oUser_MSTR.ChurchBodyId).FirstOrDefault();

                if (oUserCB_MSTR == null)
                    return Json(new { taskSuccess = false, userMess = "Default parameters update failed. Church body could not be verified. Refresh and try again." });

               


                //**********************************
                // for single subscription... until user logs in, CB is not created yet on Client server/DB............. // use subscription key /shared subscriptio keys for Multiple subsciption sync
                //var oCB_MSTRList = _masterContext.MSTRChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && c.Id == oUserCB_MSTR.Id).ToList(); 
                ///
                var oCB_MSTRList = _masterContext.MSTRChurchBody.AsNoTracking()
                    .Where(c => c.AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && oUserCB_MSTR.RootChurchCode.Contains(c.GlobalChurchCode)).ToList();
                //var oCBClientListCount = _context.ChurchBody.AsNoTracking().Count(c => c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && c.MSTR_ChurchBodyId == oUserCB_MSTR.Id);
                var oCBClientCopyList = _context.ChurchBody.AsNoTracking()
                    .Where(c => c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && oUserCB_MSTR.RootChurchCode.Contains(c.GlobalChurchCode)).ToList();
                strDesc = "Church unit";

                ///                                
                //if (oCBClientCopyList.Count() != oCB_MSTRList.Count())
                //{

                    var _updCount = 0; // tm = DateTime.Now;
                    //if (oCB_MSTRList.Count() > 0 && oUser_AGO != null)
                    //{
                        foreach (var oCB_MSTR in oCB_MSTRList)
                        {
                            //var oCBClientCopy = _context.ChurchBody.Where(c => (c.OrgType == "CH" || c.OrgType == "CN") && c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && 
                            //                    (c.MSTR_ChurchBodyId == oUser_MSTR.ChurchBodyId || c.GlobalChurchCode == oCB_MSTR.GlobalChurchCode)).FirstOrDefault();


                            // create all CBs not found in the root path of MSTR path ... at the client side.
                            var oCBClientCopy = oCBClientCopyList.Where(c => (c.OrgType == "CR" || c.OrgType == "CH" || c.OrgType == "CN") &&
                                        (c.MSTR_ChurchBodyId == oCB_MSTR.Id || c.GlobalChurchCode == oCB_MSTR.GlobalChurchCode)).FirstOrDefault();

                        if (oCBClientCopy == null)
                        {
                            // Get Church level
                            var oCL = _context.ChurchLevel.Where(c => c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && c.MSTR_ChurchLevelId == oCB_MSTR.ChurchLevelId).FirstOrDefault();
                                if (oCL != null)
                                {
                                    var oCI_MSTR = _masterContext.MSTRContactInfo.Where(c => c.AppGlobalOwnerId == oCB_MSTR.AppGlobalOwnerId && c.ChurchBodyId == oCB_MSTR.Id && c.Id == oCB_MSTR.ContactInfoId).FirstOrDefault();

                                    ContactInfo oCI = null;
                                    if (oCI_MSTR != null)
                                    {
                                        oCI = new ContactInfo()
                                        {
                                            //Id = 0,
                                            AppGlobalOwnerId = oCB_MSTR.AppGlobalOwnerId,
                                            ChurchBodyId = oCB_MSTR.Id,
                                            //RefUserId = oCI_MSTR.RefUserId,
                                            ExtHolderName = oCI_MSTR.ContactName, 
                                            IsPrimaryContact=true ,
                                            //IsChurchFellow = false,
                                            ResidenceAddress = oCI_MSTR.ResidenceAddress,
                                            Location = oCI_MSTR.Location,
                                            City = oCI_MSTR.City,
                                            CtryAlpha3Code = oCI_MSTR.CtryAlpha3Code,
                                            //RegionId = oCI_MSTR.RegionId,
                                            ResAddrSameAsPostAddr = oCI_MSTR.ResAddrSameAsPostAddr,
                                            PostalAddress = oCI_MSTR.PostalAddress,
                                            DigitalAddress = oCI_MSTR.DigitalAddress,
                                            Telephone = oCI_MSTR.Telephone,
                                            MobilePhone1 = oCI_MSTR.MobilePhone1,
                                            MobilePhone2 = oCI_MSTR.MobilePhone2,
                                            Email = oCI_MSTR.Email,
                                            Website = oCI_MSTR.Website,
                                            ///
                                            Created = tm,
                                            LastMod = tm,
                                            CreatedByUserId = oUser_MSTR.Id,
                                            LastModByUserId = oUser_MSTR.Id
                                        };

                                        _context.Add(oCI);
                                    }

                                    _context.Add(new ChurchBody()
                                    {
                                        //Id = 0,
                                        MSTR_AppGlobalOwnerId = oCB_MSTR.AppGlobalOwnerId,
                                        MSTR_ChurchBodyId = oCB_MSTR.Id,
                                        MSTR_ParentChurchBodyId = oCB_MSTR.ParentChurchBodyId,
                                        MSTR_ChurchLevelId = oCB_MSTR.ChurchLevelId,     // cannot change for CH, CN types

                                        ///
                                        AppGlobalOwnerId = oUser_AGO.Id,
                                        ChurchLevelId = oCL.Id,
                                        Name = oCB_MSTR.Name,
                                        IsFullAutonomy = true,
                                        ChurchWorkStatus = oCB_MSTR.Id == oUser_MSTR.ChurchBodyId ? "OP" : "ST",
                                        Status = oCB_MSTR.Id == oUser_MSTR.ChurchBodyId ? oCB_MSTR.Status : "P",  // P-Pending activation from vendor  //oCB_MSTR.Status,
                                        SharingStatus  = "N",

                                        ///
                                        //Acronym = null, 
                                        //BriefHistory = null, 
                                        //ChurchBodyLogo = null, 
                                        //ChurchCodeCustom = null, 
                                        //CountryRegionId = (int?)null,  
                                        //SupervisedByChurchBodyId = (int?)null,   // Ex. Preaching Points are typically under the supervision of other congregations
                                        //DateFormed = (DateTime?)null, 
                                        //DateInnaug = (DateTime?)null,       

                                        //ParentChurchBodyId = (int?)null,   // get the parent code... via master parent // ParentChurchBodyId = null,  // update after first batch...   ***
                                        ///
                                        GlobalChurchCode = oCB_MSTR.GlobalChurchCode,
                                        MSTR_RootChurchCode = oCB_MSTR.RootChurchCode,  // ONLY Vendor to change
                                        RootChurchCode = oCB_MSTR.RootChurchCode,       // Client Admin may change but MUST be symmetrical to the Vendors. Ex. Grace cong must continue to be in the root path of Ga Presbytery unless Vendor so determines... tho client may alter [unaffected paths]
                                        OrgType = oCB_MSTR.OrgType,  // cannot change for CH, CN types
                                        SubscriptionKey = oCB_MSTR.SubscriptionKey,
                                        CtryAlpha3Code = oCB_MSTR.CtryAlpha3Code,  // country GHA, USA, GBR 
                                        ///    
                                        ContactInfoId = oCI != null ? oCI.Id : (int?)null,  // create from the MSTR CI data-values ***
                                        Comments = oCB_MSTR.Comments,

                                        ///
                                        Created = tm,
                                        LastMod = tm,
                                        CreatedByUserId = oUser_MSTR.Id,
                                        LastModByUserId = oUser_MSTR.Id
                                    });


                                    _updCount++;
                                }
                        }
                        else if (oCBClientCopy.MSTR_AppGlobalOwnerId != oCB_MSTR.AppGlobalOwnerId || oCBClientCopy.MSTR_ChurchLevelId != oCB_MSTR.ChurchLevelId ||
                             oCBClientCopy.MSTR_ChurchBodyId != oCB_MSTR.Id || oCBClientCopy.MSTR_ParentChurchBodyId != oCB_MSTR.ParentChurchBodyId ||
                             string.IsNullOrEmpty(oCBClientCopy.Name) ||
                             oCBClientCopy.ChurchWorkStatus != oCB_MSTR.ChurchWorkStatus || oCBClientCopy.Status != oCB_MSTR.Status)
                            {
                                oCBClientCopy.MSTR_AppGlobalOwnerId = oCB_MSTR.AppGlobalOwnerId;
                                oCBClientCopy.MSTR_ChurchLevelId = oCB_MSTR.ChurchLevelId;
                                oCBClientCopy.MSTR_ChurchBodyId = oCB_MSTR.Id;
                                oCBClientCopy.MSTR_ParentChurchBodyId = oCB_MSTR.ParentChurchBodyId;
                                oCBClientCopy.Name = oCB_MSTR.Name;
                                oCBClientCopy.ChurchWorkStatus = oCB_MSTR.Id == oUser_MSTR.ChurchBodyId ? "OP" : "ST";
                                oCBClientCopy.Status = oCB_MSTR.Id == oUser_MSTR.ChurchBodyId ? oCB_MSTR.Status : "P";  // P-Pending activation from vendor  //oCB_MSTR.Status,
                                ///
                                oCBClientCopy.LastMod = tm;
                                oCBClientCopy.LastModByUserId = oUser_MSTR.Id;

                                _context.Update(oCBClientCopy); 
                                _updCount++;
                            }
                  }

                    /// NEW only else... on-demand update ... so that this code is run jux once... NOT @ every login
                    if (_updCount > 0)
                    {
                        _context.SaveChanges();  // save first before updating parents...
                    }

                    /// set Parent ChurchBody at client level  ... reload list CB client
                    // var oCBList = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oUser_AGO.Id);
                    var oCBList = _context.ChurchBody.AsNoTracking()
                            .Where(c => c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId && oUserCB_MSTR.RootChurchCode.Contains(c.GlobalChurchCode)).ToList();  // CB path UP only -- leave others untouched

                    var oCBParList = oCBList; // make a copy to search for the parent CB ... _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oAGO.Id);
                            _updCount = 0; tm = DateTime.Now;

                            //if (oCBList.Count() > 0)
                            //{
                  foreach (var oCB in oCBList)
                  {
                      if (oCB.OrgType != "CR")
                      {
                          var isUpdateCB = oCB.ParentChurchBodyId == null;                                    
                          if (!isUpdateCB) {                                         
                              var oCBvrf = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oUser_AGO.Id && c.Id == oCB.ParentChurchBodyId).FirstOrDefault();
                              isUpdateCB = oCB.ParentChurchBodyId != null && oCBvrf == null;
                          }

                          if (isUpdateCB)                                       
                          {
                              var oCBPar = oCBParList.Where(c => c.AppGlobalOwnerId == oCB.AppGlobalOwnerId && c.MSTR_AppGlobalOwnerId == oCB.MSTR_AppGlobalOwnerId &&
                                                          c.MSTR_ChurchBodyId == oCB.MSTR_ParentChurchBodyId).FirstOrDefault();  // c.GlobalChurchCode == oCB.GlobalChurchCode && 
                              if (oCBPar != null)
                              {
                                  if (oCB.ParentChurchBodyId != oCBPar.Id)
                                  {
                                      oCB.ParentChurchBodyId = oCBPar.Id;
                                      oCB.LastMod = tm;
                                      oCB.LastModByUserId = oUser_MSTR.Id;
                                      ///
                                      _context.Update(oCB);
                                      _updCount++;
                                  }
                              }
                          }
                      }       
                  }

                /// save updated...
                if (_updCount > 0)
                    _context.SaveChanges();
                 
                //} 

                // record ... @client                             
                _tm = DateTime.Now;
                            _userTask = "Created/updated " + _updCount + " " + strDesc.ToLower() + "s"; _tm = DateTime.Now;
                            _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "T",
                                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oCurrUserId_Logged, _tm, _tm, vm.oCurrUserId_Logged, vm.oCurrUserId_Logged)
                                                );

                        
                    //}

                //}


                //var oCBClient = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                //                .Where(c => c.MSTR_AppGlobalOwnerId == oUserCB_MSTR.AppGlobalOwnerId && (c.MSTR_ChurchBodyId == oUserCB_MSTR.Id || c.GlobalChurchCode == oUserCB_MSTR.GlobalChurchCode || (c.MSTR_ParentChurchBodyId == oUserCB_MSTR.ParentChurchBodyId && c.Name == oUserCB_MSTR.Name))).FirstOrDefault();
                ////var oCBClient = _context.ChurchBody.AsNoTracking().Where(c => (c.OrgType == "CH" || c.OrgType == "CN") && c.MSTR_AppGlobalOwnerId == oUser_MSTR.AppGlobalOwnerId &&
                ////                                (c.MSTR_ChurchBodyId == oUser_MSTR.ChurchBodyId || c.GlobalChurchCode == oCB_MSTR.GlobalChurchCode)).FirstOrDefault();

                //if (oCBClient != null)
                //{
                //    if (oCBClient.MSTR_AppGlobalOwnerId == null || oCBClient.MSTR_ChurchBodyId == null || oCBClient.MSTR_ChurchLevelId == null || string.IsNullOrEmpty(oCBClient.GlobalChurchCode) || string.IsNullOrEmpty(oCBClient.Name))
                //    {
                //        if (oCBClient.MSTR_AppGlobalOwnerId == null)
                //            oCBClient.MSTR_AppGlobalOwnerId = oUserCB_MSTR.AppGlobalOwnerId;

                //        if (oCBClient.MSTR_ChurchBodyId == null)
                //            oCBClient.MSTR_ChurchBodyId = oUserCB_MSTR.Id;

                //        if (oCBClient.MSTR_ChurchLevelId == null)
                //            oCBClient.MSTR_ChurchLevelId = oUserCB_MSTR.ChurchLevelId;

                //        if (string.IsNullOrEmpty(oCBClient.GlobalChurchCode) || oAGOClient.GlobalChurchCode != oUserCB_MSTR.GlobalChurchCode)
                //            oCBClient.GlobalChurchCode = oUserCB_MSTR.GlobalChurchCode;

                //        if (string.IsNullOrEmpty(oCBClient.Name) || oCBClient.Name != oUserCB_MSTR.Name)
                //            oCBClient.Name = oUserCB_MSTR.Name;


                //        _context.Update(oCBClient);
                //        _context.SaveChanges();

                //        ViewBag.UserMsg = strDesc + " updated successfully.";
                //        _userTask = "Updated " + strDesc.ToLower() + ", " + oCBClient.Name.ToUpper() + " successfully";
                //    }
                //}


                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "T",
                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oCurrUserId_Logged, _tm, _tm, vm.oCurrUserId_Logged, vm.oCurrUserId_Logged)
                                     );


                ViewBag.UserMsg = "Church organisation structure reset to defaults successfully.";
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg });

            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, userMess = "Church organisation structure reset failed. Err: " + ex.Message });
            }
        }

        public IActionResult Delete_CB(int? oAppGloOwnId, int? oChurchBodyId, int? loggedUserId, int id, bool forceDeleteConfirm = false)
        {

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");

            // var strDesc = setIndex == 1 ? "System profile" : setIndex == 2 ? "Church admin profile" : "Church user profile";
            var strDesc = "Church body";
            var tm = DateTime.Now; var _tm = DateTime.Now; var _userTask = "Attempted saving  " + strDesc;
            //
            try
            {
                var strUserDenom = "RCMS Client";

                //if (setIndex != 1)
                //{
                //    if (oAppGloOwnId == null || oChurchBodyId == null)
                //        return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Denomination/church of " + strDesc + " unknown. Please refesh and try again." });

                //    var oAGO = _context.AppGlobalOwner.Find(oAppGloOwnId);
                //    var oCB = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchBodyId).FirstOrDefault();

                //    if (oAGO == null || oCB == null)
                //        return Json(new { taskSuccess = false, oCurrId = "", userMess = "Specified denomination and church unit could not be retrieved. Please refresh and try again.", signOutToLogIn = false });

                //    strUserDenom = oCB.Name + (!string.IsNullOrEmpty(oAGO.Acronym) ? ", " + oAGO.Acronym : oAGO.OwnerName);
                //    strUserDenom = "--" + (string.IsNullOrEmpty(strUserDenom) ? "Denomination: " + strUserDenom : strUserDenom);
                //}


                var oCB = _context.ChurchBody.Where(c => c.Id == id && c.AppGlobalOwnerId == oAppGloOwnId ).FirstOrDefault();// .Include(c => c.ChurchUnits)
                if (oCB == null)
                {
                    _userTask = "Attempted deleting " + strDesc.ToLower(); // + ", " + (strTag + ":- " + oCB.CBValue);  // var _userTask = "Attempted saving  " + strDesc;
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                         "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                        );

                    return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = strDesc + " to delete could not be retrieved." });
                }

                var strTag = oCB.Name;
                var saveDelete = true;
                // ensuring cascade delete where there's none!

                //check CBCategory for this UP to delete 

                var CBs = _context.ChurchBody.Where(c => c.ParentChurchBodyId == oCB.Id || c.MSTR_ParentChurchBodyId == oCB.MSTR_ParentChurchBodyId ||
                                            c.Id == oCB.Id || c.MSTR_ChurchBodyId == oCB.ParentChurchBodyId ||
                                            c.OwnedByChurchBodyId == oCB.Id || c.SupervisedByChurchBodyId == oCB.Id ).ToList();
                var CUs = _context.ChurchUnit.Where(c => c.SupervisedByUnitId == oCB.Id || c.OwnedByChurchBodyId==oCB.Id).ToList();
                var CRs = _context.ChurchRole.Where(c => c.OwnedByChurchBodyId == oCB.Id).ToList();
                var UATs = _context.UserAuditTrail_CL.Where(c => c.ChurchBodyId == oCB.Id).ToList();
                var CMs = _context.ChurchMember.Where(c => c.ChurchBodyId == oCB.Id).ToList();

                //using (var _userCtx = new MSTR_DbContext(_context.Database.GetDbConnection().ConnectionString))
                //{
                if ((CBs.Count() + CUs.Count() + CRs.Count() + UATs.Count() + CMs.Count) > 0)
                {
                    if (forceDeleteConfirm == false)
                    {
                        var strConnTabs = "Church block, Church unit, Church role, Church member, User audit trail";  
                        saveDelete = false;

                        // check user privileges to determine... administrator rights
                        //log...
                        _userTask = "Attempted deleting " + strDesc.ToLower();
                        _tm = DateTime.Now;
                        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                            );

                        return Json(new
                        {
                            taskSuccess = false,
                            tryForceDelete = false,
                            oCurrId = id,
                            userMess = "Specified " + strDesc.ToLower() +
                                            " to delete has been used elsewhere in the system [" + strConnTabs + "]. Delete cannot be done unless dependent-references are removed."
                        });
                    }

                    //to be executed only for higher privileges... // FORCE-DELETE...
                }

                //successful...
                if (saveDelete)
                {
                    _context.ChurchBody.Remove(oCB);
                    _context.SaveChanges();

                    //   DetachAllEntities(_userCtx);

                    //audit...
                    _userTask = "Deleted " + strDesc.ToLower();
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                            );

                    return Json(new { taskSuccess = true, tryForceDelete = false, oCurrId = oCB.Id, userMess = strDesc + " successfully deleted." });
                }

                //}


                _userTask = "Attempted deleting " + strDesc.ToLower() + " -- but FAILED. Data unavailable.";   // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                );

                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "No " + strDesc.ToLower() + " data available to delete. Try again" });
            }

            catch (Exception ex)
            {
                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [ ID= " + id + "] FAILED. ERR: " + ex.Message;  // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                    "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                   );
                //
                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Failed deleting " + strDesc.ToLower() + ". Err: " + ex.Message });
            }
        }

        public IActionResult TreeView_Index(int? oCurrChuBodyId = null)
        {
            var oChurchBody = _context.ChurchBody.Include(t => t.AppGlobalOwner).Include(t => t.ChurchLevel).Where(c => c.Id == oCurrChuBodyId).FirstOrDefault();
            if (oChurchBody == null) return null;
            var churchUnits = _context.ChurchBody  //.Include(t => t.OwnedByChurchBody)
                            .Where(c => c.AppGlobalOwnerId == oChurchBody.AppGlobalOwnerId && !string.IsNullOrEmpty(c.Name) //&& 
                                                                                                                            //(c.OwnedByChurchBodyId == oChurchBody.Id ||
                                                                                                                            //(c.OwnedByChurchBodyId != oChurchBody.Id && c.SharingStatus == "C" && c.Id == oChurchBody.ParentChurchBodyId) ||
                                                                                                                            //(c.OwnedByChurchBodyId != oChurchBody.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c, oChurchBody)))
                    ).ToList();

            List<TreeViewNode> nodes = new List<TreeViewNode>();
            foreach (ChurchBody div in churchUnits)
            {
                nodes.Add(new TreeViewNode
                {
                    id = div.Id.ToString(),
                    parent = div.ParentChurchBodyId == null ? "#" : div.ParentChurchBodyId.ToString(),
                    text = div.Name
                });
            }

            ViewBag.Json = JsonConvert.SerializeObject(nodes);
            return View();
        }




        /// NVP --- 6  General App Lookups 
        [HttpGet]
        public IActionResult AddOrEdit_NVP(int id = 0, int? oAppGloOwnId = null, int? oChurchBodyId = null, int? numCodeCriteria_1 = null, string strCodeCriteria_2 = null, int ? oUserId = null)  
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return View("_ErrorPage");
                    }
                }



                // if (!InitializeUserLogging()) 
                // return RedirectToAction("LoginUserAcc", "UserLogin");

                if (oAppGloOwnId == null) oAppGloOwnId = this._oLoggedAGO?.Id;
                if (oChurchBodyId == null) oChurchBodyId = this._oLoggedCB?.Id;
                if (oUserId == null) oUserId = this._oLoggedUser?.Id;    

                var strDesc = "Parameter";
                    var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();  // _userTask = "Attempted creating new denomination (church)"; // _userTask = "Opened denomination (church)-" + oCFT_MDL.oChurchFaithType.FaithDescription;

                var oNVP_Model = new AppUtilityNVPModel();                
                var tempSetIndex = GetNVPSetIndex(strCodeCriteria_2);  
                if (id == 0)
                {
                    //create and init...  
                    oNVP_Model.oAppUtilityNVP = new AppUtilityNVP();
                    ///
                    var oNVP_Index_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.OwnedByChurchBody)
                           .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.NVPCode == strCodeCriteria_2 &&
                                        (tempSetIndex != 18 || (tempSetIndex == 18 && c.NVPCategoryId == numCodeCriteria_1))).ToList();
                    oNVP_Index_1 = oNVP_Index_1.Where(c =>
                                       (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();
                   // var lsCLIndex = _context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.NVPCode == strCodeCriteria_2).ToList();
                  //  if (strCodeCriteria_2 == "CLARD") lsCLIndex = lsCLIndex.Where(c => c.NVPCategoryId == numCodeCriteria_1).ToList();  
                    var oCLIndex = oNVP_Index_1.Count() + 1;    // _context.AppUtilityNVP.Count(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.NVPCode == strCodeCriteria_2) + 1;
                    oNVP_Model.oAppUtilityNVP.OrderIndex = oCLIndex;
                    oNVP_Model.oAppUtilityNVP.NVPStatus = "A";
                    oNVP_Model.bl_NVPStatus_Active= true;

                    if (strCodeCriteria_2 == "LSPK" || strCodeCriteria_2 == "NIDT" || strCodeCriteria_2 == "CTT")
                    {
                        this.GetDefaultCountryInfo();
                        oNVP_Model.strCountry = this.strCountryName_dflt;
                        oNVP_Model.oAppUtilityNVP.CtryAlpha3Code = this.strCountryCode_dflt;
                    }

                    oNVP_Model.oAppUtilityNVP.NVPCode = strCodeCriteria_2;
                    oNVP_Model.strNVPTag = GetNVPTagDesc(oNVP_Model.oAppUtilityNVP.NVPCode);
                    oNVP_Model.strOwnedByChurchBody = this._oLoggedCB.Name;
                    var oCL = _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedCB.AppGlobalOwnerId && c.Id == this._oLoggedCB.ChurchLevelId).FirstOrDefault();
                    oNVP_Model.strChurchLevel_OwnedByCB = oCL != null ? (!string.IsNullOrEmpty(oCL.CustomName) ? oCL.CustomName : oCL.Name) : "";
                    //
                    oNVP_Model.oAppUtilityNVP.NVPCategoryId = tempSetIndex == 18 ? numCodeCriteria_1 : (int?)null;
                    oNVP_Model.oAppUtilityNVP.SharingStatus = "N";
                    oNVP_Model.oAppUtilityNVP.ChurchBodyId = this._oLoggedCB.Id;
                    oNVP_Model.oAppUtilityNVP.OwnedByChurchBodyId = this._oLoggedCB.Id;
                    oNVP_Model.oAppUtilityNVP.OwnedByChurchBody = this._oLoggedCB;
                    oNVP_Model.strSharingStatus = GetSharingStatusDesc(oNVP_Model.oAppUtilityNVP.SharingStatus);
                    oNVP_Model.strOwnershipCode = "O";
                    oNVP_Model.strOwnershipStatus = "Owned";

                    _userTask = "Attempted creating new " + strDesc.ToLower();
                }
                else
                { 
                    //var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner) //.Include(t => t.OwnedByChurchBody)
                    //                           .Where(c => c.Id == id  && c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.NVPCode== strCodeCriteria).ToList();

                    var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel)
                                        .Where(c => c.Id == id && c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.NVPCode == strCodeCriteria_2 &&
                                        (tempSetIndex != 18 || (tempSetIndex == 18 && c.NVPCategoryId == numCodeCriteria_1))).ToList();

                    //oNVP_List_1 = oNVP_List_1.Where(c =>
                    //                   (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    oNVP_Model = (
                                    from t_nvp in oNVP_List_1.ToList()  // from t_nvp in _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner).Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.ChurchBodyId == this._oLoggedCB.Id)
                                    from t_nvp_c in _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_nvp.AppGlobalOwnerId && c.Id == t_nvp.NVPCategoryId).DefaultIfEmpty()
                                    from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_nvp.CtryAlpha3Code).DefaultIfEmpty()
                                  //  from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_nvp.OwnedByChurchBodyId).DefaultIfEmpty()

                                    select new AppUtilityNVPModel()
                                    {
                                        oAppGloOwnId = t_nvp.AppGlobalOwnerId,
                                        oAppGlobalOwn = t_nvp.AppGlobalOwner,
                                        oChurchBodyId = t_nvp.OwnedByChurchBodyId,
                                        oChurchBody = t_nvp.OwnedByChurchBody,
                                        ///
                                        oAppUtilityNVP = t_nvp,
                                        strAppUtilityNVP = t_nvp.ValueType == "T" || t_nvp.ValueType == null ? t_nvp.NVPValue :  
                                                          (t_nvp.ValueType == "N" ? ((t_nvp.NVPNumVal != null && t_nvp.NVPNumValTo != null ? t_nvp.NVPNumVal.ToString() + " - " + t_nvp.NVPNumValTo.ToString() : ((t_nvp.NVPNumVal != null ? t_nvp.NVPNumVal.ToString() : "") + (t_nvp.NVPNumValTo != null ? t_nvp.NVPNumValTo.ToString() : "")))) :
                                                          (t_nvp.ValueType == "D" ? (t_nvp.NVPFromDate != null && t_nvp.NVPToDate != null ? (String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPFromDate) + " - " + String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPToDate)) : ((t_nvp.NVPFromDate != null ? String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPFromDate) : "") + ((t_nvp.NVPToDate != null ? String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPToDate) : "")))) : null)),
                                          ///
                                        strNVPValue = t_nvp.ValueType == "T" ? t_nvp.NVPValue : null,
                                        numAppUtilityNVP = t_nvp.ValueType == "N" ? t_nvp.NVPNumVal : (int?)null,
                                        numAppUtilityNVPTo = t_nvp.ValueType == "N" ? t_nvp.NVPNumValTo : (int?)null,
                                        dt1AppUtilityNVP = t_nvp.ValueType == "D" ? t_nvp.NVPFromDate : (DateTime?)null,
                                        dt2AppUtilityNVP = t_nvp.ValueType == "D" ? t_nvp.NVPToDate : (DateTime?)null,
                                        ///
                                        strNVPCode = t_nvp.NVPCode,
                                        strNVPSubCode = t_nvp.NVPSubCode,  // categorization
                                        strNVPTag = GetNVPTagDesc(t_nvp.NVPCode),
                                        strNVPSubTag = GetNVPSubTagDesc(t_nvp.NVPSubCode),
                                        numOrderIndex = t_nvp.OrderIndex,
                                        strNVPCategory = t_nvp_c != null ? t_nvp_c.NVPValue : "",
                                        strCountry = t_ctry != null ? (!string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code) : "",
                                        strOccurFrequency = GetPeriodDesc(t_nvp.OccurFreqCode),
                                        strNVPStatus = GetStatusDesc(t_nvp.NVPStatus),
                                        bl_NVPStatus_Active = t_nvp.NVPStatus == "A",
                                        // bl_ApplyToClergyOnly = t_nvp.ApplyToClergyOnly,
                                        // bl_IsAvailable = t_nvp.IsAvailable,
                                        // bl_IsDeceased = t_nvp.IsDeceased, 
                                        //
                                        strChurchLevel_OwnedByCB = t_nvp.OwnedByChurchBody != null ? (t_nvp.OwnedByChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(t_nvp.OwnedByChurchBody.ChurchLevel.CustomName) ? t_nvp.OwnedByChurchBody.ChurchLevel.CustomName : t_nvp.OwnedByChurchBody.ChurchLevel.Name) : "") : "",
                                        strOwnedByChurchBody = t_nvp.OwnedByChurchBody != null ? t_nvp.OwnedByChurchBody.Name : "",
                                        strOwnershipCode = t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", // t_nvp.OwnedByChurchBodyId != null ? (t_nvp.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                                        strOwnershipStatus = GetAdhocStatusDesc(t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I") + 
                                                             (t_nvp.OwnedByChurchBodyId != this._oLoggedCB.Id ? " (" + t_nvp.OwnedByChurchBody?.ChurchLevel?.Acronym + ")" : ""),                                        // t_nvp.OwnedByChurchBodyId != null ? (t_nvp.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                                        strSharingStatus = GetSharingStatusDesc(t_nvp.SharingStatus)
                                    })
                                    .FirstOrDefault();
                     

                    if (oNVP_Model == null) 
                    {  return View("_ErrorPage"); }
                    
                    if (oNVP_Model.oAppUtilityNVP == null)
                    {  return View("_ErrorPage"); }

                    if (oNVP_Model.oAppUtilityNVP.ChurchBodyId == null && oNVP_Model.oAppUtilityNVP.OwnedByChurchBodyId == this._oLoggedCB.Id)
                        oNVP_Model.oAppUtilityNVP.ChurchBodyId = this._oLoggedCB.Id;

                    _userTask = "Opened " + strDesc.ToLower() + ", " + oNVP_Model.oAppUtilityNVP.NVPCode + ": " + oNVP_Model.oAppUtilityNVP.NVPValue ; 
                }


                oNVP_Model.setIndex = 6;
                oNVP_Model.tempSetIndex = tempSetIndex;
                //oNVP_Model.subSetIndex = subSetIndex;

                //oNVP_Model.oAppUtilityNVP.AppGlobalOwnerId = oAppGloOwnId; 
                //oNVP_Model.oAppUtilityNVP.ChurchBodyId = oChurchBodyId;

                oNVP_Model.oUserId_Logged = this._oLoggedUser.Id;
                oNVP_Model.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                oNVP_Model.oChurchBodyId_Logged = this._oLoggedCB.Id;
                 
                // 
                oNVP_Model = this.popLookups_NVP(oNVP_Model, oNVP_Model.oAppUtilityNVP);

                var tm = DateTime.Now;
                // record ... @client
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, _oLoggedCB.Id, "N",
                                 "RCMS-Client: Parameter", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id)
                                );

                var _oNVP_Model = Newtonsoft.Json.JsonConvert.SerializeObject(oNVP_Model);
                TempData["oVmCurrMod"] = _oNVP_Model; TempData.Keep();

                //  return oNVP_MDL;.


                return PartialView("_AddOrEdit_NVP", oNVP_Model);

                // shouldn't get this far
                //page not found error
                //
                //return View("_ErrorPage");
            }

            catch (Exception ex)
            {
                //page not found error
                
                return View("_ErrorPage");
            }
        }

        public AppUtilityNVPModel popLookups_NVP(AppUtilityNVPModel vm, AppUtilityNVP oCurrNVP)
        {

            if (vm == null || oCurrNVP == null) return vm;
            //
            //vm.lkpStatuses = new List<SelectListItem>();
            //foreach (var dl in dlGenStatuses) 
            //{ if (dl.Val == "A" || dl.Val=="B") vm.lkpStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpSharingStatuses = new List<SelectListItem>();
            foreach (var dl in dlShareStatus)
            { vm.lkpSharingStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }
             
            vm.lkpAppParameterTags = new List<SelectListItem>();
            foreach (var dl in dlNVPCodes) 
            { vm.lkpAppParameterTags.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }
            
            vm.lkpAppValueTypes = new List<SelectListItem>();
            foreach (var dl in dlNVPValTypes)
            { vm.lkpAppValueTypes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpAttendeeTypes = new List<SelectListItem>();
            foreach (var dl in dlMemTypeCodes) { vm.lkpAttendeeTypes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }
            vm.lkpAttendeeTypes.Insert(0, new SelectListItem { Value = "", Text = "Select" });


            // INST--CLA
            vm.lkpNVPCategories = new List<SelectListItem>();
            
            if (vm.tempSetIndex == 11 || vm.tempSetIndex == 12 || vm.tempSetIndex == 17)
            {
                if (vm.tempSetIndex == 11 || vm.tempSetIndex == 12)
                    foreach (var dl in dlNVPCategories)
                        if (dl.Val.StartsWith("INST")) vm.lkpNVPCategories.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc });
                ///
                if(vm.tempSetIndex == 17)
                    foreach (var dl in dlNVPCategories)
                        if (dl.Val.StartsWith("CLA")) vm.lkpNVPCategories.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); 
            }

            vm.lkpNVP_ParentCategories = new List<SelectListItem>(); // get other values except current value... in that NVPCode
            if (vm.setIndex == 18 || vm.tempSetIndex == 18 || vm.strNVPCode == "CLARD") // for CLARD
            {
                vm.lkpIntervalFreqs = new List<SelectListItem>();
                foreach (var dl in dlIntervalFreqs)
                { vm.lkpIntervalFreqs.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc.ToLower() }); }

                var strParentCode = "CLA";    // c.Id != oCurrNVP.Id && 
                var oNVPCateg_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel)
                                                   .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.NVPCode == strParentCode).ToList();

                oNVPCateg_List_1 = oNVPCateg_List_1.Where(c =>
                                   (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                vm.lkpNVP_ParentCategories = oNVPCateg_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                            .OrderBy(c => c.OrderIndex)
                                            .ThenBy(c => c.NVPValue)
                                            .Select(c => new SelectListItem()
                                            {
                                                Value = c.Id.ToString(),   // Baptism (Shared-NA) or Baptism (Owned) or Baptism 
                                                Text = c.NVPValue + (c.OwnedByChurchBodyId == this._oLoggedCB.Id ? "" : 
                                                                    " (" + GetAdhocStatusDesc("I") + "-" + c.OwnedByChurchBody?.ChurchLevel?.Acronym + ")" )
                                                       //(c.OwnedByChurchBodyId != this._oLoggedCB.Id ? "-" + c.OwnedByChurchBody?.ChurchLevel?.Acronym + "" : "") + ")" )
                                            })
                                            .ToList();

                //" (" + GetAdhocStatusDesc(c.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I") +
                //                                  (c.OwnedByChurchBodyId != this._oLoggedCB.Id ? " - " + c.OwnedByChurchBody?.ChurchLevel?.Acronym + "" : "") + ")"

            }


            //vm.lkpNVP_ParentCategories = new List<SelectListItem>(); // get other values except current value... in that NVPCode
            //var oNVPCateg_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner) //.Include(t => t.OwnedByChurchBody)
            //                                   .Where(c => c.Id != oCurrNVP.Id && c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.NVPCode == oCurrNVP.NVPCode).ToList();

            //oNVPCateg_List_1 = oNVPCateg_List_1.Where(c =>
            //                   (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
            //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
            //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

            //vm.lkpNVP_ParentCategories = oNVPCateg_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
            //                            .OrderBy(c => c.OrderIndex)
            //                            .ThenBy(c => c.NVPValue)
            //                            .Select(c => new SelectListItem()
            //                            {
            //                                Value = c.Id.ToString(),
            //                                Text = c.NVPValue
            //                            })
            //                            .ToList();
            //vm.lkpNVPCategories.Insert(0, new SelectListItem { Value = "", Text = "Select" });

            // populate the countries...
            vm.lkpCountries = _context.Country.ToList()  //.Where(c => c.Display == true)
                               .Select(c => new SelectListItem()
                               {
                                   Value = c.CtryAlpha3Code, //.ToString(),
                                           Text = c.EngName
                               })
                               .OrderBy(c => c.Text)
                               .ToList();
             
            //
            return vm;
        }
        public JsonResult GetCLAsByNVPCode(string parId, int? oAGOId = null, int? oCBId = null, bool addEmpty = false) //(int? ctryId, bool addEmpty = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAGOId != null ? oAGOId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            var oList = new List<SelectListItem>();
            if (addEmpty) oList.Insert(0, new SelectListItem { Value = "", Text = "Select" });
           // if (!CheckCurrentClientDBContext()) return Json(oList);
            // if (_context == null) 
                // if (!InitializeUserLogging()) return Json(oList);

            var strParentCode = "CLA";    // c.Id != oCurrNVP.Id && 
            var oNVPCateg_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.OwnedByChurchBody)
                                               .Where(c => c.AppGlobalOwnerId == oAGOId && c.NVPCode == strParentCode).ToList();
             
            var oCB = _context.ChurchBody.Where(c=>c.AppGlobalOwnerId== oAGOId && c.Id == oCBId).FirstOrDefault();                       
            if (oCB == null) return Json(oList);

            oNVPCateg_List_1 = oNVPCateg_List_1.Where(c =>
                              (c.OwnedByChurchBodyId == oCB.Id ||
                              (c.OwnedByChurchBodyId != oCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCB.ParentChurchBodyId) ||
                              (c.OwnedByChurchBodyId != oCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCB)))).ToList();

            oList = oNVPCateg_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                        .OrderBy(c => c.OrderIndex)
                                        .ThenBy(c => c.NVPValue)
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = c.NVPValue
                                        })
                                        .ToList();

            /// if (addEmpty) countryList.Insert(0, new CountryRegion { Id = "", Name = "Select" });             
            //return Json(new SelectList(countryList, "Id", "Name"));  

           // if (addEmpty) oList.Insert(0, new SelectListItem { Value = "", Text = "Select" });
            return Json(oList);
        }
         
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddOrEdit_NVP(AppUtilityNVPModel vm)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }

            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");

            var strDesc = "Parameter";
            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oAppUtilityNVP == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            AppUtilityNVP _oChanges = vm.oAppUtilityNVP;  // vmMod = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as UserProfileModel : vmMod; TempData.Keep();

            if (string.IsNullOrEmpty(_oChanges.NVPCode))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " code for " + strDesc.ToLower() + " must be specified" });

             var strTag = GetNVPTagDesc(_oChanges.NVPCode);

            if ((_oChanges.ValueType == "T" && _oChanges.NVPValue == null) || 
                (_oChanges.ValueType == "N" && _oChanges.NVPNumVal == null && _oChanges.NVPNumValTo == null) || 
                (_oChanges.ValueType == "D" && _oChanges.NVPFromDate == null && _oChanges.NVPToDate == null))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " value for " + strTag.ToLower() + " not specified" });

            // General Age Groups ... GEN_AGE_GRP ... CHLD, YTH, ADLT, AGD  --- overlap ???
            if (_oChanges.NVPCode.Contains("GEN_AGE_GRP") && _oChanges.ValueType == "N" && _oChanges.NVPNumValTo == null)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " value [range to] for " + strDesc.ToLower() + " is required" });

            if (_oChanges.ValueType == "N" && _oChanges.NVPNumValTo != null && _oChanges.NVPNumVal > _oChanges.NVPNumValTo)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " value [range] for " + strDesc.ToLower() + " is incorrect. First value of range must be lesser." });

            if (_oChanges.ValueType == "D" && _oChanges.NVPToDate != null && _oChanges.NVPFromDate > _oChanges.NVPToDate)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " value [date range] for " + strDesc.ToLower() + " is incorrect. First date of range must be lesser." });

            //if (_oChanges.ChurchBodyId == null || _oChanges.OwnedByChurchBodyId == null || string.IsNullOrEmpty(_oChanges.SharingStatus))
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Owner of parameter could not be determined. Please check scope and retry" });

            if (_oChanges.AppGlobalOwnerId == null) _oChanges.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChanges.OwnedByChurchBodyId == null) _oChanges.OwnedByChurchBodyId = this._oLoggedCB.Id;
            if (_oChanges.ChurchBodyId == null) _oChanges.ChurchBodyId = _oChanges.OwnedByChurchBodyId;

            // initial validations done! 
            var arrData = "";
            arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<AppUtilityNVPModel>(arrData) : vm;

            var oNVP = vmMod.oAppUtilityNVP;
            if (oNVP == null && _oChanges.Id > 0) 
                oNVP = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel)
                                    .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId &&  c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId && c.Id == _oChanges.Id)
                                    .FirstOrDefault();

            ChurchBody oNVP_CB = null; 
            if (oNVP != null) oNVP_CB = oNVP.OwnedByChurchBody;

            var fetchQry = true;    
            if (oNVP_CB != null) if (oNVP_CB.ChurchLevel != null) fetchQry = false;
            if (fetchQry) oNVP_CB = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                                    .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.OwnedByChurchBodyId).FirstOrDefault();

            if (oNVP_CB == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " church body could be verified. Please refresh data and try again." });

            try
            {
                ModelState.Remove("oAppUtilityNVP.AppGlobalOwnerId");
                ModelState.Remove("oAppUtilityNVP.ChurchBodyId");
                ModelState.Remove("oAppUtilityNVP.OwnedByChurchBodyId");
                ModelState.Remove("oAppUtilityNVP.NVPCategoryId");
                ModelState.Remove("oAppUtilityNVP.CtryAlpha3Code");
                ModelState.Remove("oAppUtilityNVP.NVPCode");
                ModelState.Remove("oAppUtilityNVP.CreatedByUserId");
                ModelState.Remove("oAppUtilityNVP.LastModByUserId");

                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed to load the data to save. Please refresh and try again." });

                //// church logo
                //if (vm.ChurchLogoFile != null) //&& _oChanges.ChurchLogo != null
                //{
                //    if (_oChanges.ChurchLogo != vm.ChurchLogoFile.FileName)
                //    {
                //        string strFilename = null;
                //        if (vm.ChurchLogoFile != null && vm.ChurchLogoFile.Length > 0)
                //        {
                //            string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");
                //            strFilename = Guid.NewGuid().ToString() + "_" + vm.ChurchLogoFile.FileName;
                //            string filePath = Path.Combine(uploadFolder, strFilename);
                //            vm.ChurchLogoFile.CopyTo(new FileStream(filePath, FileMode.Create));
                //        }
                //        else
                //        {
                //            if (vm.oAppGlobalOwn.Id != 0) strFilename = vm.strChurchLogo;
                //        }

                //        _oChanges.ChurchLogo = strFilename;
                //    }
                //}

                //
                var tm = DateTime.Now;
                _oChanges.LastMod = tm;
                _oChanges.LastModByUserId = vm.oUserId_Logged;
                _oChanges.NVPStatus = vm.bl_NVPStatus_Active ? "A" : "B";  // Active, Blocked
              //  _oChanges.ApplyToClergyOnly = vm.bl_ApplyToClergyOnly; 
              //  _oChanges.IsAvailable = vm.bl_IsAvailable; 
             // _oChanges.IsDeceased = vm.bl_IsDeceased;
                ///

                // 
                
                _oChanges.NVPValue = _oChanges.ValueType=="T" ? _oChanges.NVPValue : null;
                _oChanges.NVPNumVal = _oChanges.ValueType == "N" ? _oChanges.NVPNumVal : (int?)null;
                _oChanges.NVPNumValTo = _oChanges.ValueType == "N" ? _oChanges.NVPNumValTo : (int?)null;
                _oChanges.NVPFromDate = _oChanges.ValueType == "D" ? _oChanges.NVPFromDate : (DateTime?)null;
                _oChanges.NVPToDate = _oChanges.ValueType == "D" ? _oChanges.NVPToDate : (DateTime?)null; 
                  
                //validate...
                var _userTask = "Attempted saving " + strTag.ToLower() + ", " + strTag;  // _userTask = "Added new " + strTag.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";   //  _userTask = "Updated " + strTag.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
                var _reset = _oChanges.Id == 0;

                //using (var _NVPCtx = new ChurchModelContext(_context.Database.GetDbConnection().ConnectionString))
                //{


                // check if already created... across shared and local
                // var oNVP_CurrList = new List<AppUtilityNVP>();
                //if (_oChanges.SharingStatus == "N")   // thus unit is shared across other congregations... get the shared list of // OrgType //
                //{
                //    oNVP_CurrList = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel) // NVPCategoryId can be NULL
                //                      .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.NVPCode == _oChanges.NVPCode && c.NVPStatus == "A" &&
                //                      c.NVPCategoryId == _oChanges.NVPCategoryId && c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId && c.SharingStatus == "N").ToList();
                //}
                //else
                //{

                //var oNVP_CurrList = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel) // NVPCategoryId can be NULL
                //                  .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.NVPCode == _oChanges.NVPCode && c.NVPStatus == "A" &&
                //                  ((c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId) || 
                //                  (c.OwnedByChurchBody.ChurchLevel.LevelIndex < oNVP.OwnedByChurchBody.ChurchLevel.LevelIndex && c.SharingStatus != "N")))
                //                  .ToList();

                var oNVP_CurrList = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel) // NVPCategoryId can be NULL
                                 .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.NVPCode == _oChanges.NVPCode && c.NVPStatus == "A" &&
                                       (c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId || c.SharingStatus != "N"))
                                 .ToList();

                if (oNVP_CB.ChurchLevel != null) 
                    oNVP_CurrList = oNVP_CurrList.Where(c => c.OwnedByChurchBody.ChurchLevel.LevelIndex <= oNVP_CB.ChurchLevel.LevelIndex).ToList();

                oNVP_CurrList = oNVP_CurrList.Where(c =>
                                   (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB))))
                                   .ToList();

                //}

                //exclude current for update..
                if (_oChanges.Id > 0) oNVP_CurrList = oNVP_CurrList.Where(c => c.Id != _oChanges.Id).ToList();

                oNVP_CurrList = oNVP_CurrList.Where(c => (c.NVPCategoryId == _oChanges.NVPCategoryId) &&   // _oChanges.NVPCategoryId == null || 
                                   ((_oChanges.ValueType == "T" && string.Compare(c.NVPValue, _oChanges.NVPValue, true)==0) || 
                                    (_oChanges.ValueType == "N" && c.NVPNumVal == _oChanges.NVPNumVal && c.NVPNumValTo == _oChanges.NVPNumValTo) ||
                                    (_oChanges.ValueType == "D" && c.NVPFromDate == _oChanges.NVPFromDate && c.NVPToDate == _oChanges.NVPToDate)
                                   )).ToList();

                if (oNVP_CurrList.Count() > 0)
                {
                    object strVal = _oChanges.NVPValue != null ? _oChanges.NVPValue.ToUpper() : _oChanges.NVPValue;
                    if (_oChanges.ValueType != "T")
                    {
                        if (_oChanges.ValueType == "N") strVal = _oChanges.NVPNumVal + (_oChanges.NVPNumValTo != null ? " - " + _oChanges.NVPNumValTo : "") ;
                        else if (_oChanges.ValueType == "D" && _oChanges.NVPFromDate != null) strVal = _oChanges.NVPFromDate;
                        else if (_oChanges.ValueType == "D" && _oChanges.NVPToDate != null) strVal = _oChanges.NVPToDate;
                    }
                    

                    var _strDesc = strDesc + " (" + strTag + ") specified, '" + strVal + "' " +
                        (oNVP_CurrList[0].OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId ? "already exists in local church unit" :
                        "is already shared in a higher level church unit" +
                        (oNVP_CurrList[0].OwnedByChurchBody?.ChurchLevel != null ? " (at " + (!string.IsNullOrEmpty(oNVP_CurrList[0].OwnedByChurchBody?.ChurchLevel?.CustomName) ? 
                                        oNVP_CurrList[0].OwnedByChurchBody?.ChurchLevel?.CustomName : oNVP_CurrList[0].OwnedByChurchBody?.ChurchLevel?.Name) + ": " + 
                                            oNVP_CurrList[0].OwnedByChurchBody.Name + ")" : ""));
                    ///
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = _strDesc, pageIndex = vm.pageIndex });

                    //  + ": " + oNVP_CurrList[0].OwnedByChurchBody.Name + ")", pageIndex = vm.pageIndex
                    // });


                    //return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- [" + (strDesc + ":- " + strVal) + "] already exists [in the " +
                    //    (oNVP_CurrList[0].OwnedByChurchBody != null ? (oNVP_CurrList[0].OwnedByChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(oNVP_CurrList[0].OwnedByChurchBody.ChurchLevel?.CustomName) ? oNVP_CurrList[0].OwnedByChurchBody.ChurchLevel?.CustomName : oNVP_CurrList[0].OwnedByChurchBody.ChurchLevel?.Name) : "church unit") : "church unit")
                    //    + ": " + oNVP_CurrList[0].OwnedByChurchBody.Name + "]", pageIndex = vm.pageIndex
                    //});
                }



                if (_oChanges.Id == 0)
                {
                   // var existNVP = _context.AppUtilityNVP.Where(c => c.NVPCategoryId == _oChanges.NVPCategoryId && c.NVPCode.ToLower() == _oChanges.NVPCode.ToLower() && c.NVPValue.ToLower() == _oChanges.NVPValue.ToLower()).ToList();

                    //var existNVP = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody)
                    //    .Where(c=> c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.NVPCode==_oChanges.NVPCode)
                    //    .ToList();

                    //existNVP = existNVP.Where(c => c.NVPCategoryId == _oChanges.NVPCategoryId &&
                    //                        ((_oChanges.ValueType=="T" && c.NVPValue.ToLower() == _oChanges.NVPValue.ToLower()) || (_oChanges.ValueType == "N" && c.NVPNumVal == _oChanges.NVPNumVal) || (_oChanges.ValueType == "D" && c.NVPFromDate == _oChanges.NVPFromDate && c.NVPToDate == _oChanges.NVPToDate)) &&
                    //                        (c.SharingStatus == "N" || 
                    //                         c.SharingStatus == "A" || 
                    //                        (c.SharingStatus == "C" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))
                    //                    ).ToList();

                    //if (existNVP.Count() > 0)
                    //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- [" + (strDesc + ":- " + _oChanges.NVPValue) + "] already exist." }); 


                    _oChanges.Created = tm;
                    _oChanges.CreatedByUserId = vm.oUserId_Logged;

                    _context.Add(_oChanges);

                    ViewBag.UserMsg = "Saved " + strDesc.ToLower() + " [" + (!string.IsNullOrEmpty(strDesc + _oChanges.NVPValue) ? (strDesc + ":- " + _oChanges.NVPValue) : strDesc + _oChanges.NVPValue) + "] successfully.";
                    _userTask = "Added new " + strDesc.ToLower() + ", [" + (strDesc + ":- " + _oChanges.NVPValue) + "] successfully";
                }

                else
                {
                    //// var existNVP = _context.AppUtilityNVP.Where(c => c.Id != _oChanges.Id && c.NVPCategoryId == _oChanges.NVPCategoryId && c.NVPCode.ToLower() == _oChanges.NVPCode.ToLower() && c.NVPValue.ToLower() == _oChanges.NVPValue.ToLower()).ToList();
                    //var existNVP = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody).Where(c => c.Id != _oChanges.Id && c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.NVPCode == _oChanges.NVPCode ).ToList();
                    //existNVP = existNVP.Where(c => c.NVPCategoryId == _oChanges.NVPCategoryId &&
                    //    ((c.ValueType == "T" && c.NVPValue.ToLower() == _oChanges.NVPValue.ToLower()) || (c.ValueType == "N" && c.NVPNumVal == _oChanges.NVPNumVal) || (c.ValueType == "D" && c.NVPFromDate == _oChanges.NVPFromDate && c.NVPToDate == _oChanges.NVPToDate)) &&
                    //    (c.SharingStatus == "N" || c.SharingStatus == "A" || (c.SharingStatus == "C" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    //if (existNVP.Count() > 0)
                    //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- [" + (strDesc + ":- " + _oChanges.NVPValue) + "] already exist." });
                     

                    _context.Update(_oChanges); 

                    ViewBag.UserMsg = strDesc + " updated successfully.";
                    _userTask = "Updated " + strDesc.ToLower() + ", [" + (strDesc + ":- " + _oChanges.NVPValue) + "] successfully";
                }

                //save denomination first... 
                _context.SaveChanges(); // await _NVPCtx.SaveChangesAsync();

                //   DetachAllEntities(_NVPCtx);
                //}


                var _tm = DateTime.Now; 
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO?.Id, _oLoggedCB?.Id, "N",
                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser?.Id, tm, tm, _oLoggedUser?.Id, _oLoggedUser?.Id)
                                    );

                var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);
                TempData["oVmCurr"] = _vmMod; TempData.Keep();

                return Json(new { taskSuccess = true, oCurrId = _oChanges.Id, oCurrNVPCode = _oChanges.NVPCode, resetNew = _reset, userMess = ViewBag.UserMsg });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed saving Parameter details. Err: " + ex.Message });
            }
        }         

        public IActionResult Delete_NVP(int? oAppGloOwnId, int? oChurchBodyId, int? loggedUserId, int id, bool forceDeleteConfirm = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }

            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");

            // var strDesc = setIndex == 1 ? "System profile" : setIndex == 2 ? "Church admin profile" : "Church user profile";
            var strDesc = "Parameter";
            var tm = DateTime.Now; var _tm = DateTime.Now; var _userTask = "Attempted saving  " + strDesc;
            //
            try
            {
                var strUserDenom = "RCMS Client";

                //if (setIndex != 1)
                //{
                //    if (oAppGloOwnId == null || oChurchBodyId == null)
                //        return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Denomination/church of " + strDesc + " unknown. Please refesh and try again." });

                //    var oAGO = _context.AppGlobalOwner.Find(oAppGloOwnId);
                //    var oCB = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchBodyId).FirstOrDefault();

                //    if (oAGO == null || oCB == null)
                //        return Json(new { taskSuccess = false, oCurrId = "", userMess = "Specified denomination and church unit could not be retrieved. Please refresh and try again.", signOutToLogIn = false });

                //    strUserDenom = oCB.Name + (!string.IsNullOrEmpty(oAGO.Acronym) ? ", " + oAGO.Acronym : oAGO.OwnerName);
                //    strUserDenom = "--" + (string.IsNullOrEmpty(strUserDenom) ? "Denomination: " + strUserDenom : strUserDenom);
                //}

                
                var oNVP = _context.AppUtilityNVP.Where(c => c.Id == id && c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oChurchBodyId).FirstOrDefault();// .Include(c => c.ChurchUnits)
                if (oNVP == null)
                {
                    _userTask = "Attempted deleting " + strDesc.ToLower(); // + ", " + (strTag + ":- " + oNVP.NVPValue);  // var _userTask = "Attempted saving  " + strDesc;
                    _tm = DateTime.Now; 
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                         "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                        );

                    return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = strDesc + " to delete could not be retrieved." });
                }
                
                strDesc = GetNVPTagDesc(oNVP.NVPCode);          
                var saveDelete = true;
                // ensuring cascade delete where there's none!

                //check NVPCategory for this UP to delete 

                var NVPs = _context.AppUtilityNVP.Where(c => c.NVPCategoryId == oNVP.Id).ToList();

                //using (var _userCtx = new MSTR_DbContext(_context.Database.GetDbConnection().ConnectionString))
                //{
                    if (NVPs.Count() > 0) // + UPGs.Count() + oUPRs.Count() //+oUser.ChurchMembers.Count )
                    {
                        if (forceDeleteConfirm == false)
                        {
                            var strConnTabs = "Parameter category";  //User profile role, User profile group and 
                            saveDelete = false;

                            // check user privileges to determine... administrator rights
                            //log...
                            _userTask = "Attempted deleting " + strDesc.ToLower() + ", [" + (strDesc + ":- " + oNVP.NVPValue) + "]";
                            _tm = DateTime.Now; 
                            _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                );

                            return Json(new
                            {
                                taskSuccess = false,
                                tryForceDelete = false,
                                oCurrId = id,
                                userMess = "Specified " + strDesc.ToLower() +
                                                " to delete has been used elsewhere in the system [" + strConnTabs + "]. Delete cannot be done unless dependent-references are removed."
                            });
                        }

                        //to be executed only for higher privileges... // FORCE-DELETE...
                    }

                    //successful...
                    if (saveDelete)
                    {
                    _context.AppUtilityNVP.Remove(oNVP);
                    _context.SaveChanges();

                     //   DetachAllEntities(_userCtx);

                        //audit...
                        _userTask = "Deleted " + strDesc.ToLower() + ", [" + (strDesc + ":- " + oNVP.NVPValue) + "]";
                        _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                            );

                    return Json(new { taskSuccess = true, tryForceDelete = false, oCurrId = oNVP.Id, userMess = strDesc + " successfully deleted." });
                    }

                //}

                
                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [" + (strDesc + ":- " + oNVP.NVPValue) + "] -- but FAILED. Data unavailable.";   // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                );

                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "No " + strDesc.ToLower() + " data available to delete. Try again" });
            }

            catch (Exception ex)
            {
                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [ ID= " + id + "] FAILED. ERR: " + ex.Message;  // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                    "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                   );
                //
                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Failed deleting " + strDesc.ToLower() + ". Err: " + ex.Message });
            }
        }
         

        ///// CTRY --- General App Lookups 
        //[HttpGet]
        //public IActionResult AddOrEdit_CTRY(int id = 0, int? oAppGloOwnId = null, int? oChurchBodyId = null, int? oUserId = null)
        //{
        //    try
        //    {

        //        // if (!InitializeUserLogging())
        //            // return RedirectToAction("LoginUserAcc", "UserLogin");

        //        if (oAppGloOwnId == null) oAppGloOwnId = this._oLoggedAGO.Id;
        //        if (oChurchBodyId == null) oChurchBodyId = this._oLoggedCB.Id;
        //        if (oUserId == null) oUserId = this._oLoggedUser.Id;

        //        var strDesc = "Parameter";
        //        var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();  // _userTask = "Attempted creating new denomination (church)"; // _userTask = "Opened denomination (church)-" + oCFT_MDL.oChurchFaithType.FaithDescription;

        //        var oCTRY_MDL = new CountryModel();
        //        if (id == 0)
        //        {
        //            //create and init...  
        //            oCTRY_MDL.oCountry = new Country();
        //            var oCLIndex = _context.Country.Count(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.ChurchBodyId == this._oLoggedCB.Id) + 1;
        //            oCTRY_MDL.oCountry.OrderIndex = oCLIndex;
        //            oCTRY_MDL.oCountry.CTRYStatus = "A";

        //            _userTask = "Attempted creating new " + strDesc.ToLower();
        //        }
        //        else
        //        {
        //            oCTRY_MDL = (
        //                      from t_CTRY in _context.Country.AsNoTracking().Include(t => t.AppGlobalOwner).Where(c => c.Id == id && c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oChurchBodyId)
        //                      from t_CTRY_c in _context.Country.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_CTRY.AppGlobalOwnerId && c.Id == t_CTRY.CTRYCategoryId).DefaultIfEmpty()

        //                      select new CountryModel()
        //                      {
        //                          oCountry = t_CTRY,
        //                          strAppGloOwn = t_CTRY.AppGlobalOwner != null ? t_CTRY.AppGlobalOwner.OwnerName : "",
        //                          strCTRYTag = GetCTRYTagDesc(t_CTRY.CTRYCode),
        //                          //  strCountryName = t_CTRY.CTRYValue ,
        //                          strCTRYCategory = t_CTRY_c != null ? t_CTRY_c.CTRYValue : "",
        //                          strCTRYStatus = GetStatusDesc(t_CTRY.CTRYStatus)
        //                      })
        //                  .FirstOrDefault();


        //            if (oCTRY_MDL.oCountry == null)
        //            {
        //                //page not found error
        //                
        //                return View("_ErrorPage");
        //            }

        //            _userTask = "Opened " + strDesc.ToLower() + ", " + oCTRY_MDL.oCountry.CTRYCode + ": " + oCTRY_MDL.oCountry.CTRYValue;
        //        }



        //        oCTRY_MDL.setIndex = 6;
        //        // oCTRY_MDL.subSetIndex = subSetIndex;

        //        oCTRY_MDL.oCountry.AppGlobalOwnerId = oAppGloOwnId;
        //        oCTRY_MDL.oCountry.ChurchBodyId = oChurchBodyId;

        //        oCTRY_MDL.oUserId_Logged = this._oLoggedUser.Id;
        //        oCTRY_MDL.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
        //        oCTRY_MDL.oChurchBodyId_Logged = this._oLoggedCB.Id;
        //        // 
        //        oCTRY_MDL = this.popLookups_CTRY(oCTRY_MDL, oCTRY_MDL.oCountry);

        //        var tm = DateTime.Now;
        //        // record ... @client
        //        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, _oLoggedCB.Id, "N",
        //                         "RCMS-Client: Parameter", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id)
        //                        );

        //        //var _oCTRY_MDL = Newtonsoft.Json.JsonConvert.SerializeObject(oCTRY_MDL);
        //        //TempData["oVmCurrMod"] = _oCTRY_MDL; TempData.Keep();

        //        //  return oCTRY_MDL;.


        //        return PartialView("_AddOrEdit_CTRY", oCTRY_MDL);

        //        // shouldn't get this far
        //        //page not found error
        //        //
        //        //return View("_ErrorPage");
        //    }

        //    catch (Exception ex)
        //    {
        //        //page not found error
        //        
        //        return View("_ErrorPage");
        //    }
        //}

        //public CountryModel popLookups_CTRY(CountryModel vm, Country oCurrCTRY)
        //{
        //    if (vm == null || oCurrCTRY == null) return vm;
        //    //
        //    vm.lkpStatuses = new List<SelectListItem>();
        //    foreach (var dl in dlGenStatuses)
        //    { if (dl.Val == "A" || dl.Val == "B") vm.lkpStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

        //    vm.lkpAppParameterTags = new List<SelectListItem>();
        //    foreach (var dl in dlCTRYCodes) { vm.lkpAppParameterTags.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

        //    vm.lkpCTRYCategories = new List<SelectListItem>();
        //    // get other values except current value... in that CTRYCode
        //    vm.lkpCTRYCategories = _context.Country.Where(c => c.AppGlobalOwnerId == oCurrCTRY.AppGlobalOwnerId && c.ChurchBodyId == oCurrCTRY.AppGlobalOwnerId &&
        //                                                            c.CTRYCode == oCurrCTRY.CTRYCode && c.Id != oCurrCTRY.Id)
        //                                     .OrderBy(c => c.OrderIndex)
        //                                     .ThenBy(c => c.CTRYValue)
        //                                     .Select(c => new SelectListItem()
        //                                     {
        //                                         Value = c.Id.ToString(),
        //                                         Text = c.CTRYValue
        //                                     })
        //                                     .ToList();
        //    //vm.lkpCTRYCategories.Insert(0, new SelectListItem { Value = "", Text = "Select" });


        //    return vm;
        //}

        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public IActionResult AddOrEdit_CTRY(CountryModel vm)
        //{
        //    // if (!InitializeUserLogging())
        //        return RedirectToAction("LoginUserAcc", "UserLogin");

        //    var strDesc = "Parameter";
        //    if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
        //    if (vm.oCountry == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

        //    Country _oChanges = vm.oCountry;  // vmMod = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as UserProfileModel : vmMod; TempData.Keep();

        //    if (string.IsNullOrEmpty(_oChanges.CTRYCode))
        //        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Parameter code for " + strDesc.ToLower() + " must be specified" });

        //    if (string.IsNullOrEmpty(_oChanges.CTRYValue))
        //        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Parameter value for " + strDesc.ToLower() + " must be specified else delete parameter" });

        //    // initial validations done!
        //    var strTag = GetCTRYTagDesc(_oChanges.CTRYCode);

        //    var arrData = "";
        //    arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
        //    var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<CountryModel>(arrData) : vm;

        //    var oCTRY = vmMod.oCountry;
        //    // oCTRY.ChurchBody = vmMod.oChurchBody;

        //    try
        //    {
        //        ModelState.Remove("oCountry.AppGlobalOwnerId");
        //        ModelState.Remove("oCountry.ChurchBodyId");
        //        ModelState.Remove("oCountry.CTRYCategoryId");
        //        ModelState.Remove("oCountry.CTRYCode");
        //        ModelState.Remove("oCountry.CreatedByUserId");
        //        ModelState.Remove("oCountry.LastModByUserId");

        //        //finally check error state...
        //        if (ModelState.IsValid == false)
        //            return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed to load the data to save. Please refresh and try again." });

        //        //// church logo
        //        //if (vm.ChurchLogoFile != null) //&& _oChanges.ChurchLogo != null
        //        //{
        //        //    if (_oChanges.ChurchLogo != vm.ChurchLogoFile.FileName)
        //        //    {
        //        //        string strFilename = null;
        //        //        if (vm.ChurchLogoFile != null && vm.ChurchLogoFile.Length > 0)
        //        //        {
        //        //            string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");
        //        //            strFilename = Guid.NewGuid().ToString() + "_" + vm.ChurchLogoFile.FileName;
        //        //            string filePath = Path.Combine(uploadFolder, strFilename);
        //        //            vm.ChurchLogoFile.CopyTo(new FileStream(filePath, FileMode.Create));
        //        //        }
        //        //        else
        //        //        {
        //        //            if (vm.oAppGlobalOwn.Id != 0) strFilename = vm.strChurchLogo;
        //        //        }

        //        //        _oChanges.ChurchLogo = strFilename;
        //        //    }
        //        //}

        //        //
        //        var tm = DateTime.Now;
        //        _oChanges.LastMod = tm;
        //        _oChanges.LastModByUserId = vm.oUserId_Logged;
        //        //_oChanges.Status = vm.blStatusActivated ? "A" : "D"; 

        //        //validate...
        //        var _userTask = "Attempted saving " + strDesc.ToLower() + ", " + strTag;  // _userTask = "Added new " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";   //  _userTask = "Updated " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
        //        var _reset = _oChanges.Id == 0;


        //        //using (var _CTRYCtx = new ChurchModelContext(_context.Database.GetDbConnection().ConnectionString))
        //        //{
        //        if (_oChanges.Id == 0)
        //        {
        //            var existCTRY = _context.Country.Where(c => c.CTRYCategoryId == _oChanges.CTRYCategoryId && c.CTRYValue.ToLower() == _oChanges.CTRYValue.ToLower()).ToList();
        //            if (existCTRY.Count() > 0)
        //                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- [" + (strTag + ":- " + _oChanges.CTRYValue) + "] already exist." });

        //            _oChanges.Created = tm;
        //            _oChanges.CreatedByUserId = vm.oUserId_Logged;

        //            _context.Add(_oChanges);

        //            ViewBag.UserMsg = "Saved " + strDesc.ToLower() + " [" + (!string.IsNullOrEmpty(strTag + _oChanges.CTRYValue) ? (strTag + ":- " + _oChanges.CTRYValue) : strTag + _oChanges.CTRYValue) + "] successfully.";
        //            _userTask = "Added new " + strDesc.ToLower() + ", [" + (strTag + ":- " + _oChanges.CTRYValue) + "] successfully";
        //        }

        //        else

        //        {
        //            var existCTRY = _context.Country.Where(c => c.Id != _oChanges.Id && c.CTRYCategoryId == _oChanges.CTRYCategoryId && c.CTRYValue.ToLower() == _oChanges.CTRYValue.ToLower()).ToList();
        //            if (existCTRY.Count() > 0)
        //                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- [" + (strTag + ":- " + _oChanges.CTRYValue) + "] already exist." });

        //            _context.Update(_oChanges);

        //            ViewBag.UserMsg = strDesc + " updated successfully.";
        //            _userTask = "Updated " + strDesc.ToLower() + ", [" + (strTag + ":- " + _oChanges.CTRYValue) + "] successfully";
        //        }

        //        //save denomination first... 
        //        _context.SaveChanges(); // await _CTRYCtx.SaveChangesAsync();

        //        //   DetachAllEntities(_CTRYCtx);
        //        //}


        //        var _tm = DateTime.Now;
        //        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, _oLoggedCB.Id, "N",
        //                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id)
        //                            );

        //        var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);
        //        TempData["oVmCurr"] = _vmMod; TempData.Keep();

        //        return Json(new { taskSuccess = true, oCurrId = _oChanges.Id, resetNew = _reset, userMess = ViewBag.UserMsg });
        //    }

        //    catch (Exception ex)
        //    {
        //        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed saving Parameter details. Err: " + ex.Message });
        //    }

        //}
         

        [HttpPost]
        [ValidateAntiForgeryToken]
        [DisableRequestSizeLimit]
        //[RequestSizeLimit(52428800)]
        public IActionResult AddOrEdit_CTRY_BLK(CountryModel vm, IFormCollection f)   
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");

            // CountryModel vm= null; IFormCollection f = null;
            var strDesc = "Country";
            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again.", pageIndex = 2 });
            if (vm.lsCountryModels == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = "No changes made to " + strDesc + " data.", pageIndex = vm.pageIndex });
            if (vm.lsCountryModels.Count == 0) return Json(new { taskSuccess = false, oCurrId = "", userMess = "No changes made to " + strDesc + " data.", pageIndex = vm.pageIndex });

            //    if (vm.oClientAppServerConfig == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            //  ClientAppServerConfig _oChanges = vm.oClientAppServerConfig;  // vm = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as UserProfileModel : vm; TempData.Keep();

            //check if the configured levels <= total levels under AppGloOwn 
            //var oVal = f["oAppGloOwnId"].ToString();
            //var oAGOId = !string.IsNullOrEmpty(oVal) ? int.Parse(oVal) : (int?)null;
            //var countCL = _context.ClientAppServerConfig.Count(c => c.AppGlobalOwnerId == oAGOId);
            //var oAGO = _context.MSTRAppGlobalOwner.Find(oAGOId);
            //if (oAGO == null)
            //    return Json(new { taskSuccess = false, oCurrId = -1, userMess = "Specify denomination (church)" });

            //if (countCL > oAGO.TotalLevels)
            //    return Json(new { taskSuccess = false, oCurrId = -1, userMess = "Total " + strDesc.ToLower() + "s allowed for denomination, " + oAGO.OwnerName + " [" + oAGO.TotalLevels + "] exceeded.", pageIndex = vm.pageIndex });


            // return View(vm);
            if (ModelState.IsValid == false)
                return Json(new { taskSuccess = false, oCurrId = "", userMess = "Saving data failed. Please refresh and try again", pageIndex = vm.pageIndex });

            //if (vm == null)
            //    return Json(new { taskSuccess = false, userMess = "Data to update not found. Please refresh and try again", pageIndex = vm.pageIndex });

            //if (vm.lsCountryModels == null)
            //    return Json(new { taskSuccess = false, userMess = "No changes made to attendance data.", pageIndex = vm.pageIndex });

            //if (vm.lsCountryModels.Count == 0)
            //    return Json(new { taskSuccess = false, userMess = "No changes made to attendance data", pageIndex = vm.pageIndex });



            //if ((_oChanges.Id == 0 && countCL >= oAGO.TotalLevels) || (_oChanges.Id > 0 && countCL > oAGO.TotalLevels))
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Total " + strDesc.ToLower() + "s allowed for denomination, " + oAGO.OwnerName + " [" + oAGO.TotalLevels + "] reached." });

            //if (_oChanges.LevelIndex <= 0 || _oChanges.LevelIndex > oAGO.TotalLevels)
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please indicate correct level index. Hint: Must be within total Countrys [" + oAGO.TotalLevels + "]" });

            //if (string.IsNullOrEmpty(_oChanges.Name))
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please provide the " + strDesc.ToLower() + " name" });



            //get the global var
            // var oCbId = f["_hdnAppGloOwnId"].ToString();
            //var oCbId = f["oChurchBodyId"].ToString();
            //var oDt = f["m_DateAttended"].ToString();
            //var oEv = f["m_ChurchEventId"].ToString();

            // if (oCbId == null)
            //   return Json(new { taskSuccess = false, oCurrId = -1, userMess = "Denomination (church) is required. Please specify denomination.", currTask = vmMod.currAttendTask, oCurrId = -1, evtId = -1, evtDate = -1 });

            //var oCBId = int.Parse(oCbId);
            //var dtEv = DateTime.Parse(oDt);
            //var oEvId = int.Parse(oEv);


            if (vm.oAppGloOwnId == null)
                return Json(new { taskSuccess = false, oCurrId = vm.oAppGloOwnId, userMess = "Specify denomination (church) to configure", pageIndex = vm.pageIndex });

            //var oAGO = _context.AppGlobalOwner.Find(vm.oAppGloOwnId_Logged);
            //var strAGO = oAGO != null ? oAGO.OwnerName : "";

            if (vm.oChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = vm.oChurchBodyId, userMess = "Specify church unit to configure", pageIndex = vm.pageIndex });
            //var oCB = _context.ChurchBody.Find(vm.oChurchBodyId_Logged);
            //var strCB = oCB != null ? oCB.Name : "";


            foreach (var d in vm.lsCountryModels)
            {
                if (d.oCountry == null) 
                    return Json(new { taskSuccess = false, oCurrId = (int?)null, userMess = "Choose the country to custom", pageIndex = vm.pageIndex });
                

                
                //if (d.oCountry != null)
                //{
                //    var _oChanges = d.oCountry;
                //    //if (_oChanges.AppGlobalOwnerId == null)
                //    //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specify denomination (church) to configure", pageIndex = vm.pageIndex });

                //    //var oAGO = _context.MSTRAppGlobalOwner.Find(_oChanges.AppGlobalOwnerId);
                //    //var strAGO = oAGO != null ? oAGO.OwnerName : "";

                //    //if (_oChanges.oCountry == null)
                //    //    return Json(new { taskSuccess = false, oCurrId = (int?)null, userMess = "Choose the country to custom", pageIndex = vm.pageIndex });

                //    //if (string.IsNullOrEmpty(_oChanges.DbaseName))
                //    //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Provide the database name" + (!string.IsNullOrEmpty(strAGO) ? ". Denomination (Church): " + strAGO : ""), pageIndex = vm.pageIndex });

                //    //// oCTRYModel.oCountry.DbaseName = "DBRCMS_CL_" + oAppOwn.Acronym.ToUpper(); //check uniqueness
                //    //if (_oChanges.DbaseName.StartsWith("DBRCMS_CL_") == false)
                //    //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Database name must begin with 'DBRCMS_CL_'" + (!string.IsNullOrEmpty(strAGO) ? ". Denomination (Church): " + strAGO : ""), pageIndex = vm.pageIndex });

                //    //if (string.IsNullOrEmpty(_oChanges.SvrUserId))
                //    //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Provide the server user" + (!string.IsNullOrEmpty(strAGO) ? ". Denomination (Church): " + strAGO : ""), pageIndex = vm.pageIndex });

                //    //if (string.IsNullOrEmpty(_oChanges.SvrPassword))
                //    //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Provide the server password" + (!string.IsNullOrEmpty(strAGO) ? ". Denomination (Church): " + strAGO : ""), pageIndex = vm.pageIndex });


                //    //if (d.oCountry.Id > 0)  // update
                //    //{
                //    //    var existCTRY = _context.ClientAppServerConfig.Include(t => t.AppGlobalOwner).Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id != _oChanges.Id && c.Status == "A").FirstOrDefault();
                //    //    if (existCTRY != null)
                //    //        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Country already exist" + (existCTRY.AppGlobalOwner != null ? ". Denomination (Church): " + existCTRY.AppGlobalOwner.OwnerName : ""), pageIndex = vm.pageIndex });


                //    //    var oCTRY_Db = _context.ClientAppServerConfig.Include(t => t.AppGlobalOwner).Where(c => c.Id != _oChanges.Id && c.DbaseName.ToLower().Equals(_oChanges.DbaseName.ToLower())).FirstOrDefault();
                //    //    if (oCTRY_Db != null)
                //    //        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Database name already used for another denomination" + (oCTRY_Db.AppGlobalOwner != null ? ", " + oCTRY_Db.AppGlobalOwner.OwnerName : ""), pageIndex = vm.pageIndex });

                //    //}

                //    //else if (d.oCountry.Id == 0)  //add
                //    //{
                //    //    var existCTRY = _context.ClientAppServerConfig.Include(t => t.AppGlobalOwner).Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Status == "A").FirstOrDefault();
                //    //    if (existCTRY != null)
                //    //        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Country already exist" + (existCTRY.AppGlobalOwner != null ? ". Denomination (Church): " + existCTRY.AppGlobalOwner.OwnerName : ""), pageIndex = vm.pageIndex });

                //    //    var oCTRY_Db = _context.ClientAppServerConfig.Include(t => t.AppGlobalOwner).Where(c => c.DbaseName.ToLower().Equals(_oChanges.DbaseName.ToLower())).FirstOrDefault();
                //    //    if (oCTRY_Db != null)
                //    //        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Database name already used for another denomination" + (oCTRY_Db.AppGlobalOwner != null ? ", " + oCTRY_Db.AppGlobalOwner.OwnerName : ""), pageIndex = vm.pageIndex });

                //    //}
                //}
            }


            // all clear.....  get the CountryCustom
            var lsCTRY_CUST = _context.CountryCustom.Where(c => c.AppGlobalOwnerId == vm.oAppGloOwnId && c.ChurchBodyId == vm.oChurchBodyId).ToList();


            //using (var _ctryCtx = new MSTR_DbContext(_context.Database.GetDbConnection().ConnectionString))
            //{

            var oCTRY_CntAdd = 0; var oCTRY_CntUpd = 0; var oCTRY_CntDel = 0;
            foreach (var d in vm.lsCountryModels)
            {
                if (d.oCountry != null )
                {
                    var oCTRY_CUST = lsCTRY_CUST.Where(c => c.CtryAlpha3Code == d.oCountry.CtryAlpha3Code).FirstOrDefault();
                    if (oCTRY_CUST != null) // update
                    {
                        if (d.bl_IsCustomDisplay == true || d.bl_IsCustomChurchCountry == true || d.bl_IsCustomDefaultCountry == true)
                        {
                            oCTRY_CUST.AppGlobalOwnerId = vm.oAppGloOwnId;
                            oCTRY_CUST.ChurchBodyId = vm.oChurchBodyId;
                            oCTRY_CUST.CtryAlpha3Code = d.oCountry.CtryAlpha3Code;
                            oCTRY_CUST.IsDisplay = (d.bl_IsCustomDisplay || d.bl_IsCustomChurchCountry || d.bl_IsCustomDefaultCountry);
                            oCTRY_CUST.IsChurchCountry = (d.bl_IsCustomChurchCountry || d.bl_IsCustomDefaultCountry);
                            oCTRY_CUST.IsDefaultCountry = d.bl_IsCustomDefaultCountry;  // cannot allow more than one country
                            oCTRY_CUST.LastMod = DateTime.Now;
                            oCTRY_CUST.LastModByUserId = this._oLoggedUser.Id;
                            //
                            oCTRY_CntUpd++;
                            _context.Update(oCTRY_CUST);
                        }
                        else // deleted
                        {
                            oCTRY_CntDel++;
                            _context.CountryCustom.Remove(oCTRY_CUST);
                        }                        
                    }
                    else  // new .. add to custom table
                    {
                        if (d.bl_IsCustomDisplay == true || d.bl_IsCustomChurchCountry == true || d.bl_IsCustomDefaultCountry == true)
                        {
                            CountryCustom oCTRY_CUSTAdd = new CountryCustom()
                            {
                                AppGlobalOwnerId = vm.oAppGloOwnId, // vm.oAppGloOwnId_Logged,
                                ChurchBodyId = vm.oChurchBodyId, //vm.oChurchBodyId_Logged,
                                CtryAlpha3Code = d.oCountry.CtryAlpha3Code,
                                IsDisplay = (d.bl_IsCustomDisplay || d.bl_IsCustomChurchCountry || d.bl_IsCustomDefaultCountry),
                                IsChurchCountry = (d.bl_IsCustomChurchCountry || d.bl_IsCustomDefaultCountry),
                                IsDefaultCountry = d.bl_IsCustomDefaultCountry,  // cannot allow more than one country 
                                Created = DateTime.Now,
                                LastMod = DateTime.Now,
                                CreatedByUserId = this._oLoggedUser.Id,
                                LastModByUserId = this._oLoggedUser.Id,
                            };

                            //
                            oCTRY_CntAdd++;
                            _context.Add(oCTRY_CUSTAdd);
                        } 
                    }
                } 
             }


            var _userTask = "";
            if ((oCTRY_CntAdd + oCTRY_CntUpd) > 0)
            {
                if (oCTRY_CntAdd > 0)
                {
                    _userTask = "Customized " + oCTRY_CntAdd + " new Countries for " + strDesc.ToLower() + " successfully.";
                    ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + "Created " + oCTRY_CntAdd + " countries.";
                }

                if (oCTRY_CntUpd > 0)
                {
                    _userTask = !string.IsNullOrEmpty(_userTask) ? _userTask + ". " : "" + "Updated " + oCTRY_CntUpd + " customized countries for " + strDesc.ToLower() + " successfully.";
                    ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + oCTRY_CntUpd + " countries updated.";
                }

                if (oCTRY_CntDel > 0)
                {
                    _userTask = !string.IsNullOrEmpty(_userTask) ? _userTask + ". " : "" + "Deleted " + oCTRY_CntDel + " customized countries for " + strDesc.ToLower() + " successfully.";
                    ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + oCTRY_CntDel + " countries deleted.";
                }

                //save all...
                _context.SaveChanges(); // await _ctryCtx.SaveChangesAsync();

                var _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, this._oLoggedUser.Id, _tm, _tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                    );

                //var _tm = DateTime.Now;
                //    _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                     "RCMS-Admin: Country", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oUserId_Logged, _tm, _tm, vm.oUserId_Logged, vm.oUserId_Logged));
                 
                    return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, pageIndex = vm.pageIndex });
                }

            //}

            return Json(new { taskSuccess = false, userMess = "Saving data failed. Please refresh and try again.", pageIndex = vm.pageIndex });
        }

        public IActionResult Delete_CTRY(int? oAppGloOwnId, int? oChurchBodyId, int? loggedUserId, int id, bool forceDeleteConfirm = false)
        {

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }
             

            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");

            // var strDesc = setIndex == 1 ? "System profile" : setIndex == 2 ? "Church admin profile" : "Church user profile";
            var strDesc = "Parameter";
            var tm = DateTime.Now; var _tm = DateTime.Now; var _userTask = "Attempted saving  " + strDesc;
            //
         
             

            try
            {


                var strUserDenom = "RCMS Client";

                //if (setIndex != 1)
                //{
                //    if (oAppGloOwnId == null || oChurchBodyId == null)
                //        return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Denomination/church of " + strDesc + " unknown. Please refesh and try again." });

                //    var oAGO = _context.AppGlobalOwner.Find(oAppGloOwnId);
                //    var oCB = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchBodyId).FirstOrDefault();

                //    if (oAGO == null || oCB == null)
                //        return Json(new { taskSuccess = false, oCurrId = "", userMess = "Specified denomination and church unit could not be retrieved. Please refresh and try again.", signOutToLogIn = false });

                //    strUserDenom = oCB.Name + (!string.IsNullOrEmpty(oAGO.Acronym) ? ", " + oAGO.Acronym : oAGO.OwnerName);
                //    strUserDenom = "--" + (string.IsNullOrEmpty(strUserDenom) ? "Denomination: " + strUserDenom : strUserDenom);
                //}


                var oCTRY = _context.CountryCustom.Include(c => c.Country).Where(c => c.Id == id && c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oChurchBodyId).FirstOrDefault();// 
                if (oCTRY == null)
                {
                    _userTask = "Attempted deleting " + strDesc.ToLower(); // + ", " + (strTag + ":- " + oCTRY.CTRYValue);  // var _userTask = "Attempted saving  " + strDesc;
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                         "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                        );

                    return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = strDesc + " to delete could not be retrieved." });
                }

                var strTag = oCTRY.Country != null ? oCTRY.Country.EngName : "[Country]";
                var saveDelete = true;

                // ensuring cascade delete where there's none!

                //check CTRYCategory for this UP to delete 
                // UNTIL actual dependencies found...
                var CTRYs = new List<string>();   // _context.CountryCustom.Where(c => c.CTRYCategoryId == oCTRY.Id).ToList();

                //using (var _userCtx = new MSTR_DbContext(_context.Database.GetDbConnection().ConnectionString))
                //{
                if (CTRYs.Count() > 0) // + UPGs.Count() + oUPRs.Count() //+oUser.ChurchMembers.Count )
                {
                    if (forceDeleteConfirm == false)
                    {
                        var strConnTabs = "Parameter category";  //User profile role, User profile group and 
                        saveDelete = false;

                        // check user privileges to determine... administrator rights
                        //log...
                        _userTask = "Attempted deleting " + strDesc.ToLower() + ", [" + strTag + "]";
                        _tm = DateTime.Now;
                        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                            );

                        return Json(new
                        {
                            taskSuccess = false,
                            tryForceDelete = false,
                            oCurrId = id,
                            userMess = "Specified " + strDesc.ToLower() +
                                            " to delete has been used elsewhere in the system [" + strConnTabs + "]. Delete cannot be done unless dependent-references are removed."
                        });
                    }

                    //to be executed only for higher privileges... // FORCE-DELETE...
                }

                //successful...
                if (saveDelete)
                {
                    _context.CountryCustom.Remove(oCTRY);
                    _context.SaveChanges();

                    //   DetachAllEntities(_userCtx);

                    //audit...
                    _userTask = "Deleted " + strDesc.ToLower() + ", [" + strTag + "]";
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                            );

                    return Json(new { taskSuccess = true, tryForceDelete = false, oCurrId = oCTRY.Id, userMess = strDesc + " successfully deleted." });
                }

                //}


                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [" + strTag + "] -- but FAILED. Data unavailable.";   // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                );

                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "No " + strDesc.ToLower() + " data available to delete. Try again" });
            }

            catch (Exception ex)
            {
                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [ ID= " + id + "] FAILED. ERR: " + ex.Message;  // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                    "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                   );
                //
                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Failed deleting " + strDesc.ToLower() + ". Err: " + ex.Message });
            }
        }



        /// CTRY_RGN --- 7.2 General App Lookups 
        [HttpGet]
        public IActionResult AddOrEdit_CTRY_RGN (int id = 0, int? oAppGloOwnId = null, int? oChurchBodyId = null, string strCodeCriteria = null, int? oUserId = null)
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return View("_ErrorPage");
                    }
                }


                // if (!InitializeUserLogging())
                // return RedirectToAction("LoginUserAcc", "UserLogin");

                if (oAppGloOwnId == null) oAppGloOwnId = this._oLoggedAGO.Id;
                if (oChurchBodyId == null) oChurchBodyId = this._oLoggedCB.Id;
                if (oUserId == null) oUserId = this._oLoggedUser.Id;

                var strDesc = "Country Region";
                var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();  // _userTask = "Attempted creating new denomination (church)"; // _userTask = "Opened denomination (church)-" + oCFT_MDL.oChurchFaithType.FaithDescription;

                var oCTRY_RGN_MDL = new CountryRegionModel();
                if (id == 0)
                {
                    //create and init...  
                    oCTRY_RGN_MDL.oCountryRegion = new CountryRegion();
                    //  var oCtry = _context.Country.Find(strCodeCriteria);   
                    //oCTRY_RGN_MDL.strCountry = oCtry != null ? (!string.IsNullOrEmpty(oCtry.EngName) ? oCtry.EngName : oCtry.CtryAlpha3Code) : "";
                    //oCTRY_RGN_MDL.oCountryRegion.CtryAlpha3Code = strCodeCriteria;

                    this.GetDefaultCountryInfo();
                    oCTRY_RGN_MDL.strCountry = this.strCountryName_dflt;
                    oCTRY_RGN_MDL.oCountryRegion.CtryAlpha3Code = this.strCountryCode_dflt;                    
                    oCTRY_RGN_MDL.oCountryRegion.OwnedByChurchBodyId = this._oLoggedCB.Id;
                    oCTRY_RGN_MDL.strOwnedByChurchBody = this._oLoggedCB.Name;
                    var oCL = _context.ChurchLevel.AsNoTracking().Where (c=>c.AppGlobalOwnerId==this._oLoggedCB.AppGlobalOwnerId && c.Id==this._oLoggedCB.ChurchLevelId).FirstOrDefault();
                    oCTRY_RGN_MDL.strChurchLevel_OwnedByCB = oCL != null ? (!string.IsNullOrEmpty(oCL.CustomName) ? oCL.CustomName : oCL.Name) : "";
                    oCTRY_RGN_MDL.oCountryRegion.SharingStatus = "N";
                    oCTRY_RGN_MDL.strSharingStatus = GetSharingStatusDesc(oCTRY_RGN_MDL.oCountryRegion.SharingStatus);
                    oCTRY_RGN_MDL.strOwnershipCode = "O";
                    oCTRY_RGN_MDL.strOwnershipStatus = "Owned";

                    _userTask = "Attempted creating new " + strDesc.ToLower();
                }
                else
                {
                    var oCTRY_RGN_List =  _context.CountryRegion.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.OwnedByChurchBody)
                                                    .Where(c => c.Id == id && c.AppGlobalOwnerId == oAppGloOwnId).ToList();
                    oCTRY_RGN_MDL = (
                              from t_ctry_regn in oCTRY_RGN_List //.Where(c => c.Id == id && c.AppGlobalOwnerId == oAppGloOwnId && //c.OwnedByChurchBodyId == oChurchBodyId &&
                                                        //(c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                                        //(c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                                        //(c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB))))
                              from t_cb_o in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                                .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_ctry_regn.OwnedByChurchBodyId).DefaultIfEmpty()
                              from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_ctry_regn.CtryAlpha3Code)
                              from t_ctry_regn_c in _context.CountryRegionCustom.AsNoTracking().Include(t => t.AppGlobalOwner)
                                  .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.ChurchBodyId == this._oLoggedCB.Id && c.CountryRegionId == t_ctry_regn.Id).DefaultIfEmpty()

                              select new CountryRegionModel()
                              {
                                  oAppGloOwnId = t_ctry_regn.AppGlobalOwnerId,
                                  oAppGlobalOwn = t_ctry_regn.AppGlobalOwner,
                                  oChurchBodyId = t_ctry_regn.OwnedByChurchBodyId,
                                  oChurchBody = t_ctry_regn.OwnedByChurchBody,
                                  ///
                                  strCountryRegion = t_ctry_regn != null ? t_ctry_regn.Name : "",
                                  strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                                  strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",

                                  oCountryRegion = t_ctry_regn,
                                  strCountry = t_ctry != null ? (!string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code) : "",
                                  bl_IsCustomDisplay = t_ctry_regn_c != null ? t_ctry_regn_c.IsDisplay : false,
                                  bl_IsCustomChurchRegion = t_ctry_regn_c != null ? t_ctry_regn_c.IsChurchRegion : false,
                                  bl_IsCustomDefaultRegion = t_ctry_regn_c != null ? t_ctry_regn_c.IsDefaultRegion : false,
                                  strOwnershipCode = t_ctry_regn.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", // t_ctry_regn.OwnedByChurchBodyId != null ? (t_ctry_regn.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_ctry_regn.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                                  strOwnershipStatus = GetAdhocStatusDesc (t_ctry_regn.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"), // t_ctry_regn.OwnedByChurchBodyId != null ? (t_ctry_regn.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_ctry_regn.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                                  strSharingStatus = GetSharingStatusDesc(t_ctry_regn.SharingStatus)
                              })
                              .FirstOrDefault();
                     

                    if (oCTRY_RGN_MDL.oCountryRegion == null)
                    {
                        //page not found error
                        
                        return View("_ErrorPage");
                    }

                    _userTask = "Opened " + strDesc.ToLower() + ", " + oCTRY_RGN_MDL.strCountryRegion + ": " + oCTRY_RGN_MDL.strCountry;
                }

                oCTRY_RGN_MDL.setIndex = 7;
                oCTRY_RGN_MDL.subSetIndex = 2;

                oCTRY_RGN_MDL.oCountryRegion.AppGlobalOwnerId = oAppGloOwnId;                
               // oCTRY_RGN_MDL.oCountryRegion.ChurchBodyId = oChurchBodyId;

                oCTRY_RGN_MDL.oUserId_Logged = this._oLoggedUser.Id;
                oCTRY_RGN_MDL.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                oCTRY_RGN_MDL.oChurchBodyId_Logged = this._oLoggedCB.Id;
                // 
                oCTRY_RGN_MDL = this.popLookups_CTRY_RGN(oCTRY_RGN_MDL, oCTRY_RGN_MDL.oCountryRegion);

                var tm = DateTime.Now;
                // record ... @client
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, _oLoggedCB.Id, "N",
                                 "RCMS-Client: Country Region", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id)
                                );

                //var _oCTRY_RGN_MDL = Newtonsoft.Json.JsonConvert.SerializeObject(oCTRY_RGN_MDL);
                //TempData["oVmCurrMod"] = _oCTRY_RGN_MDL; TempData.Keep();

                //  return oCTRY_RGN_MDL;.


                return PartialView("_AddOrEdit_CTRY_RGN", oCTRY_RGN_MDL);

                // shouldn't get this far
                //page not found error
                //
                //return View("_ErrorPage");
            }

            catch (Exception ex)
            {
                //page not found error
                
                return View("_ErrorPage");
            }
        }

        public CountryRegionModel popLookups_CTRY_RGN(CountryRegionModel vm, CountryRegion oCurrCTRY_RGN)
        {
            if (vm == null || oCurrCTRY_RGN == null) return vm;
            //
            vm.lkpSharingStatuses = new List<SelectListItem>();
            foreach (var dl in dlShareStatus)
            { vm.lkpSharingStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }
                        
            //vm.lkpCountries = _context.Country.AsNoTracking().ToList()  //.Where(c => c.Display == true)
            //                               .Select(c => new SelectListItem()
            //                               {
            //                                   Value = c.CtryAlpha3Code, //.ToString(),
            //                                   Text = c.EngName
            //                               })
            //                               .OrderBy(c => c.Text)
            //                               .ToList();
            //// vm.lkpCountries.Insert(0, new SelectListItem { Value = "", Text = "Select" });

            vm.lkpCountries = _context.Country.AsNoTracking().ToList()  //.Where(c => c.Display == true)
                                          .Select(c => new SelectListItem()
                                          {
                                              Value = c.CtryAlpha3Code, // .ToString(),
                                              Text = c.EngName
                                          })
                                          .OrderBy(c => c.Value)
                                          .ToList();



            return vm;
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddOrEdit_CTRY_RGN(CountryRegionModel vm)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }



            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");

            var strDesc = "Country Region";
            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oCountryRegion == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            CountryRegion _oChanges = vm.oCountryRegion;  // vmMod = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as UserProfileModel : vmMod; TempData.Keep();

            if (string.IsNullOrEmpty(_oChanges.CtryAlpha3Code))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Country for region " + strDesc.ToLower() + " not specified" });

            // initial validations done!
            var strTag = _oChanges.Name;

            var arrData = "";
            arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<CountryRegionModel>(arrData) : vm;

            var oCTRY_RGN = vmMod.oCountryRegion;
            // oCTRY_RGN.ChurchBody = vmMod.oChurchBody;

            try
            {
                ModelState.Remove("oCountryRegion.AppGlobalOwnerId");
                ModelState.Remove("oCountryRegion.ChurchBodyId");
                ModelState.Remove("oCountryRegion.OwnedByChurchBodyId"); 
                ModelState.Remove("oCountryRegion.CtryAlpha3Code"); 
                ModelState.Remove("oCountryRegion.CreatedByUserId");
                ModelState.Remove("oCountryRegion.LastModByUserId");

                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed to load the data to save. Please refresh and try again." });

                //// church logo
                //if (vm.ChurchLogoFile != null) //&& _oChanges.ChurchLogo != null
                //{
                //    if (_oChanges.ChurchLogo != vm.ChurchLogoFile.FileName)
                //    {
                //        string strFilename = null;
                //        if (vm.ChurchLogoFile != null && vm.ChurchLogoFile.Length > 0)
                //        {
                //            string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");
                //            strFilename = Guid.NewGuid().ToString() + "_" + vm.ChurchLogoFile.FileName;
                //            string filePath = Path.Combine(uploadFolder, strFilename);
                //            vm.ChurchLogoFile.CopyTo(new FileStream(filePath, FileMode.Create));
                //        }
                //        else
                //        {
                //            if (vm.oAppGlobalOwn.Id != 0) strFilename = vm.strChurchLogo;
                //        }

                //        _oChanges.ChurchLogo = strFilename;
                //    }
                //}

                //
                var tm = DateTime.Now;
                _oChanges.LastMod = tm;
                _oChanges.LastModByUserId = vm.oUserId_Logged;
                //_oChanges.Status = vm.blStatusActivated ? "A" : "D"; 

                //validate...
                var _userTask = "Attempted saving " + strDesc.ToLower() + ", " + strTag;  // _userTask = "Added new " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";   //  _userTask = "Updated " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
                var _reset = _oChanges.Id == 0;


                //using (var _CTRY_RGNCtx = new ChurchModelContext(_context.Database.GetDbConnection().ConnectionString))
                //{
                if (_oChanges.Id == 0)
                {
                    var existCTRY_RGN = _context.CountryRegion.AsNoTracking().Include(t => t.OwnedByChurchBody).ToList();
                    existCTRY_RGN = existCTRY_RGN.Where(c => c.Name.ToLower() == _oChanges.Name.ToLower() && 
                        (c.SharingStatus == "N" || c.SharingStatus == "A" || (c.SharingStatus == "C" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB )))).ToList();
                    //
                    if (existCTRY_RGN.Count() > 0)
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- [" + strTag + "] already exist." });

                    _oChanges.Created = tm;
                    _oChanges.CreatedByUserId = vm.oUserId_Logged;

                    _context.Add(_oChanges);

                    ViewBag.UserMsg = "Saved " + strDesc.ToLower() + " [" + strTag + "] successfully.";
                    _userTask = "Added new " + strDesc.ToLower() + ", [" + strTag + "] successfully";
                }

                else
                {
                    var existCTRY_RGN = _context.CountryRegion.AsNoTracking().Include(t => t.OwnedByChurchBody).ToList();
                    existCTRY_RGN = existCTRY_RGN.Where(c => c.Id != _oChanges.Id && c.Name.ToLower() == _oChanges.Name.ToLower() &&
                        (c.SharingStatus == "N" || c.SharingStatus == "A" || (c.SharingStatus == "C" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();
                    if (existCTRY_RGN.Count() > 0)
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- [" + strTag + "] already exist." });

                    _context.Update(_oChanges);

                    ViewBag.UserMsg = strDesc + " updated successfully.";
                    _userTask = "Updated " + strDesc.ToLower() + ", [" + strTag + "] successfully";
                }
                                 
                _context.SaveChanges(); // await _CTRY_RGNCtx.SaveChangesAsync();

                //   DetachAllEntities(_CTRY_RGNCtx);
                //}


                var _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, _oLoggedCB.Id, "N",
                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id)
                                    );

                var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);
                TempData["oVmCurr"] = _vmMod; TempData.Keep();

                return Json(new { taskSuccess = true, oCurrId = _oChanges.Id, resetNew = _reset, userMess = ViewBag.UserMsg });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed saving Country Region details. Err: " + ex.Message });
            }

        }
        public IActionResult Delete_CTRY_RGN(int? oAppGloOwnId, int? oChurchBodyId, int? loggedUserId, int id, bool forceDeleteConfirm = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");

            // var strDesc = setIndex == 1 ? "System profile" : setIndex == 2 ? "Church admin profile" : "Church user profile";
            var strDesc = "Country region";
            var tm = DateTime.Now; var _tm = DateTime.Now; var _userTask = "Attempted saving  " + strDesc;
            //

   


            try
            {
            

                var strUserDenom = "RCMS Client";

                //if (setIndex != 1)
                //{
                //    if (oAppGloOwnId == null || oChurchBodyId == null)
                //        return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Denomination/church of " + strDesc + " unknown. Please refesh and try again." });

                //    var oAGO = _context.AppGlobalOwner.Find(oAppGloOwnId);
                //    var oCB = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchBodyId).FirstOrDefault();

                //    if (oAGO == null || oCB == null)
                //        return Json(new { taskSuccess = false, oCurrId = "", userMess = "Specified denomination and church unit could not be retrieved. Please refresh and try again.", signOutToLogIn = false });

                //    strUserDenom = oCB.Name + (!string.IsNullOrEmpty(oAGO.Acronym) ? ", " + oAGO.Acronym : oAGO.OwnerName);
                //    strUserDenom = "--" + (string.IsNullOrEmpty(strUserDenom) ? "Denomination: " + strUserDenom : strUserDenom);
                //}


                var oCTRY_RGN = _context.CountryRegion.Include(c => c.Country)
                    .Where(c => c.Id == id && c.AppGlobalOwnerId == oAppGloOwnId ).FirstOrDefault();    // && c.ChurchBodyId == oChurchBodyId
                if (oCTRY_RGN == null)
                {
                    _userTask = "Attempted deleting " + strDesc.ToLower(); // + ", " + (strTag + ":- " + oCTRY_RGN.CTRY_RGNValue);  // var _userTask = "Attempted saving  " + strDesc;
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                         "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                        );

                    return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = strDesc + " to delete could not be retrieved." });
                }

                var strTag = oCTRY_RGN.Name; // != null ? oCTRY_RGN.Country.EngName : "[Country]";
                var saveDelete = true;

                // ensuring cascade delete where there's none!

                //check CTRY_RGNCategory for this UP to delete 
                // UNTIL actual dependencies found...
                var CMs = _context.ChurchMember.Where(c => c.HometownRegionId == oCTRY_RGN.Id).ToList();//new List<string>(); 

                //using (var _userCtx = new MSTR_DbContext(_context.Database.GetDbConnection().ConnectionString))
                //{
                if (CMs.Count() > 0) // + UPGs.Count() + oUPRs.Count() //+oUser.ChurchMembers.Count )
                {
                    if (forceDeleteConfirm == false)
                    {
                        var strConnTabs = "Church member";  //User profile role, User profile group and 
                        saveDelete = false;

                        // check user privileges to determine... administrator rights
                        //log...
                        _userTask = "Attempted deleting " + strDesc.ToLower() + ", [" + strTag + "]";
                        _tm = DateTime.Now;
                        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                            );

                        return Json(new
                        {
                            taskSuccess = false,
                            tryForceDelete = false,
                            oCurrId = id,
                            userMess = "Specified " + strDesc.ToLower() +
                                            " to delete has been used elsewhere in the system [" + strConnTabs + "]. Delete cannot be done unless dependent-references are removed."
                        });
                    }

                    //to be executed only for higher privileges... // FORCE-DELETE...
                }

                //successful...
                if (saveDelete)
                {
                    _context.CountryRegion.Remove(oCTRY_RGN);
                    _context.SaveChanges();

                    //   DetachAllEntities(_userCtx);

                    //audit...
                    _userTask = "Deleted " + strDesc.ToLower() + ", [" + strTag + "]";
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                            );

                    return Json(new { taskSuccess = true, tryForceDelete = false, oCurrId = oCTRY_RGN.Id, userMess = strDesc + " successfully deleted." });
                }

                //}


                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [" + strTag + "] -- but FAILED. Data unavailable.";   // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                );

                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "No " + strDesc.ToLower() + " data available to delete. Try again" });
            }

            catch (Exception ex)
            {
                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [ ID= " + id + "] FAILED. ERR: " + ex.Message;  // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                    "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                   );
                //
                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Failed deleting " + strDesc.ToLower() + ". Err: " + ex.Message });
            }
        }
          
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddOrEdit_CURR_BLK(CurrencyCustomModel vm, IFormCollection f)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }

            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");

            var strDesc = "Currency";
            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again.", pageIndex = 2 });
            if (vm.lsCurrencyCustomModels == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = "No changes made to " + strDesc + " data.", pageIndex = vm.pageIndex });
            if (vm.lsCurrencyCustomModels.Count == 0) return Json(new { taskSuccess = false, oCurrId = "", userMess = "No changes made to " + strDesc + " data.", pageIndex = vm.pageIndex });

             

            //    if (vm.oClientAppServerConfig == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            //  ClientAppServerConfig _oChanges = vm.oClientAppServerConfig;  // vm = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as UserProfileModel : vm; TempData.Keep();

            //check if the configured levels <= total levels under AppGloOwn 
            //var oVal = f["oAppGloOwnId"].ToString();
            //var oAGOId = !string.IsNullOrEmpty(oVal) ? int.Parse(oVal) : (int?)null;
            //var countCL = _context.ClientAppServerConfig.Count(c => c.AppGlobalOwnerId == oAGOId);
            //var oAGO = _context.MSTRAppGlobalOwner.Find(oAGOId);
            //if (oAGO == null)
            //    return Json(new { taskSuccess = false, oCurrId = -1, userMess = "Specify denomination (church)" });

            //if (countCL > oAGO.TotalLevels)
            //    return Json(new { taskSuccess = false, oCurrId = -1, userMess = "Total " + strDesc.ToLower() + "s allowed for denomination, " + oAGO.OwnerName + " [" + oAGO.TotalLevels + "] exceeded.", pageIndex = vm.pageIndex });


            // return View(vm);
            if (ModelState.IsValid == false)
                return Json(new { taskSuccess = false, oCurrId = "", userMess = "Saving data failed. Please refresh and try again", pageIndex = vm.pageIndex });

            //if (vm == null)
            //    return Json(new { taskSuccess = false, userMess = "Data to update not found. Please refresh and try again", pageIndex = vm.pageIndex });

            //if (vm.lsCurrencyModels == null)
            //    return Json(new { taskSuccess = false, userMess = "No changes made to attendance data.", pageIndex = vm.pageIndex });

            //if (vm.lsCurrencyModels.Count == 0)
            //    return Json(new { taskSuccess = false, userMess = "No changes made to attendance data", pageIndex = vm.pageIndex });



            //if ((_oChanges.Id == 0 && countCL >= oAGO.TotalLevels) || (_oChanges.Id > 0 && countCL > oAGO.TotalLevels))
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Total " + strDesc.ToLower() + "s allowed for denomination, " + oAGO.OwnerName + " [" + oAGO.TotalLevels + "] reached." });

            //if (_oChanges.LevelIndex <= 0 || _oChanges.LevelIndex > oAGO.TotalLevels)
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please indicate correct level index. Hint: Must be within total Countrys [" + oAGO.TotalLevels + "]" });

            //if (string.IsNullOrEmpty(_oChanges.Name))
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please provide the " + strDesc.ToLower() + " name" });



            //get the global var
            // var oCbId = f["_hdnAppGloOwnId"].ToString();
            //var oCbId = f["oChurchBodyId"].ToString();
            //var oDt = f["m_DateAttended"].ToString();
            //var oEv = f["m_ChurchEventId"].ToString();

            // if (oCbId == null)
            //   return Json(new { taskSuccess = false, oCurrId = -1, userMess = "Denomination (church) is required. Please specify denomination.", currTask = vmMod.currAttendTask, oCurrId = -1, evtId = -1, evtDate = -1 });

            //var oCBId = int.Parse(oCbId);
            //var dtEv = DateTime.Parse(oDt);
            //var oEvId = int.Parse(oEv);


            if (vm.oAppGloOwnId == null)
                return Json(new { taskSuccess = false, oCurrId = vm.oAppGloOwnId, userMess = "Specify denomination (church) to configure", pageIndex = vm.pageIndex });

            //var oAGO = _context.AppGlobalOwner.Find(vm.oAppGloOwnId_Logged);
            //var strAGO = oAGO != null ? oAGO.OwnerName : "";

            //if (vm.oChurchBodyId == null)
            //    return Json(new { taskSuccess = false, oCurrId = vm.oChurchBodyId, userMess = "Specify church unit to configure", pageIndex = vm.pageIndex });

            //var oCB = _context.ChurchBody.Find(vm.oChurchBodyId_Logged);
            //var strCB = oCB != null ? oCB.Name : "";


            foreach (var d in vm.lsCurrencyCustomModels)
            {
                if (d.oCountry == null)
                    return Json(new { taskSuccess = false, oCurrId = (int?)null, userMess = "Choose the currency to custom", pageIndex = vm.pageIndex });                 
            }


            // all clear.....  get the CountryCustom
            var lsCURR_CUST = _context.CurrencyCustom.Where(c => c.AppGlobalOwnerId == vm.oAppGloOwnId && c.ChurchBodyId == vm.oChurchBodyId).ToList();

            //using (var _CURRCtx = new MSTR_DbContext(_context.Database.GetDbConnection().ConnectionString))
            //{

            var oCURR_CntAdd = 0; var oCURR_CntUpd = 0; var oCURR_CntDel = 0;
            foreach (var d in vm.lsCurrencyCustomModels)
            {
                if (d.oCountry != null)
                {
                    var oCURR_CUST = lsCURR_CUST.Where(c => c.CtryAlpha3Code == d.oCountry.CtryAlpha3Code).FirstOrDefault();
                    if (oCURR_CUST != null) // update
                    {
                        if (d.bl_IsCustomDisplay == true | d.bl_IsBaseCurrency == true)
                        {
                            oCURR_CUST.AppGlobalOwnerId = vm.oAppGloOwnId;
                            oCURR_CUST.ChurchBodyId = vm.oChurchBodyId;
                            oCURR_CUST.CtryAlpha3Code = d.oCountry != null ? d.oCountry.CtryAlpha3Code : null;
                            oCURR_CUST.BaseRate = d.numBaseRate; //.oCurrencyCustom.BaseRate;
                            oCURR_CUST.IsDisplay = (d.bl_IsCustomDisplay || d.bl_IsBaseCurrency); 
                            oCURR_CUST.IsBaseCurrency = d.bl_IsBaseCurrency;  // cannot allow more than one Currency
                            oCURR_CUST.LastMod = DateTime.Now; 
                            oCURR_CUST.LastModByUserId = this._oLoggedUser.Id;
                            //
                            oCURR_CntUpd++;
                            _context.Update(oCURR_CUST);
                        }
                        else // deleted
                        {
                            oCURR_CntDel++;
                            _context.CurrencyCustom.Remove(oCURR_CUST);
                        }
                    }
                    else  // new .. add to custom table
                    {
                        if (d.bl_IsCustomDisplay == true || d.bl_IsBaseCurrency == true)
                        {
                            CurrencyCustom oCURR_CUSTAdd = new CurrencyCustom()
                            {
                                AppGlobalOwnerId = vm.oAppGloOwnId, // vm.oAppGloOwnId_Logged,
                                ChurchBodyId = vm.oChurchBodyId, //vm.oChurchBodyId_Logged,
                                CtryAlpha3Code = d.oCountry != null ? d.oCountry.CtryAlpha3Code : null, 
                                BaseRate = d.numBaseRate, // .oCurrencyCustom.BaseRate, 
                                IsDisplay = (d.bl_IsCustomDisplay || d.bl_IsBaseCurrency),
                                IsBaseCurrency = d.bl_IsBaseCurrency,  // cannot allow more than one Currency 
                                Created = DateTime.Now,
                                LastMod = DateTime.Now,
                                CreatedByUserId = this._oLoggedUser.Id,
                                LastModByUserId = this._oLoggedUser.Id,
                            };

                            //
                            oCURR_CntAdd++;
                            _context.Add(oCURR_CUSTAdd);
                        }
                    }
                }
            }


            var _userTask = "";
            if ((oCURR_CntAdd + oCURR_CntUpd) > 0)
            {
                if (oCURR_CntAdd > 0)
                {
                    _userTask = "Customized " + oCURR_CntAdd + " new currencies for " + strDesc.ToLower() + " successfully.";
                    ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + "Created " + oCURR_CntAdd + " currencies.";
                }

                if (oCURR_CntUpd > 0)
                {
                    _userTask = !string.IsNullOrEmpty(_userTask) ? _userTask + ". " : "" + "Updated " + oCURR_CntUpd + " customized currencies for " + strDesc.ToLower() + " successfully.";
                    ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + oCURR_CntUpd + " currencies updated.";
                }

                if (oCURR_CntDel > 0)
                {
                    _userTask = !string.IsNullOrEmpty(_userTask) ? _userTask + ". " : "" + "Deleted " + oCURR_CntDel + " customized currencies for " + strDesc.ToLower() + " successfully.";
                    ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + oCURR_CntDel + " currencies deleted.";
                }

                //save all...
                _context.SaveChanges(); // await _CURRCtx.SaveChangesAsync();

                var _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, this._oLoggedUser.Id, _tm, _tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                    );

                //var _tm = DateTime.Now;
                //    _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                     "RCMS-Admin: Currency", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oUserId_Logged, _tm, _tm, vm.oUserId_Logged, vm.oUserId_Logged));

                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, pageIndex = vm.pageIndex });
            }

            //}

            return Json(new { taskSuccess = false, userMess = "Saving data failed. Please refresh and try again.", pageIndex = vm.pageIndex });
        }
         

        ////LSPK ...8
        //[HttpGet]
        //public IActionResult AddOrEdit_LSPK(int id = 0, int? oAppGloOwnId = null, int? oChurchBodyId = null, string strCodeCriteria = null, int? oUserId = null)
        //{
        //    try
        //    {
        //        // if (!InitializeUserLogging())
        //            // return RedirectToAction("LoginUserAcc", "UserLogin");

        //        if (oAppGloOwnId == null) oAppGloOwnId = this._oLoggedAGO.Id;
        //        if (oChurchBodyId == null) oChurchBodyId = this._oLoggedCB.Id;
        //        if (oUserId == null) oUserId = this._oLoggedUser.Id;

        //        var strDesc = "Language Spoken";
        //        var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();  // _userTask = "Attempted creating new denomination (church)"; // _userTask = "Opened denomination (church)-" + oCFT_MDL.oChurchFaithType.FaithDescription;

        //        var oLSPK_MDL = new LanguageSpokenModel();
        //        if (id == 0)
        //        {
        //            //create and init...  
        //            oLSPK_MDL.oLanguageSpoken = new LanguageSpoken();
                     
        //            this.GetDefaultCountryInfo();                   
        //            oLSPK_MDL.strCountry = this.strCountryName_dflt; 
        //            oLSPK_MDL.oLanguageSpoken.CtryAlpha3Code = this.strCountryCode_dflt;
        //            oLSPK_MDL.oLanguageSpoken.OwnedByChurchBodyId = this._oLoggedCB.Id;
        //            oLSPK_MDL.strOwnedByChurchBody = this._oLoggedCB.Name; 
        //            oLSPK_MDL.oLanguageSpoken.SharingStatus = "N";
        //            oLSPK_MDL.strSharingStatus = GetSharingStatusDesc(oLSPK_MDL.oLanguageSpoken.SharingStatus);
        //            oLSPK_MDL.strOwnershipCode = "O";
        //            oLSPK_MDL.strOwnershipStatus = "Owned";

        //            _userTask = "Attempted creating new " + strDesc.ToLower();
        //        }
        //        else
        //        {
        //            var oLSPK_List_1 = _context.LanguageSpoken.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).AsNoTracking()
        //                                            .Where(c => c.Id == id && c.AppGlobalOwnerId == oAppGloOwnId).ToList();
                   
        //            var oLSPK_List = (
        //                        from t_lskp in oLSPK_List_1.ToList()
        //                        from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_lskp.CtryAlpha3Code)
        //                        from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_lskp.OwnedByChurchBodyId).DefaultIfEmpty()

        //                        select new LanguageSpokenModel()
        //                        {
        //                            oAppGloOwnId = t_lskp.AppGlobalOwnerId,
        //                            oAppGlobalOwn = t_lskp.AppGlobalOwner,
        //                            oChurchBodyId = t_lskp.ChurchBodyId,
        //                            oChurchBody = t_lskp.ChurchBody,
        //                            ///
        //                            oLanguageSpoken = t_lskp,
        //                            strLanguageSpoken = t_lskp.Name,
        //                            strCountry = t_ctry != null ? (!string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code) : "",
        //                            strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
        //                            strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
        //                            strOwnershipCode = t_lskp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", // t_lskp.OwnedByChurchBodyId != null ? (t_lskp.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_lskp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
        //                            strOwnershipStatus = GetAdhocStatusDesc(t_lskp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"), // t_lskp.OwnedByChurchBodyId != null ? (t_lskp.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_lskp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
        //                            strSharingStatus = GetSharingStatusDesc(t_lskp.SharingStatus)
        //                        })
        //                      .FirstOrDefault();


        //            if (oLSPK_MDL.oLanguageSpoken == null)
        //            {
        //                //page not found error
        //                
        //                return View("_ErrorPage");
        //            }

        //            _userTask = "Opened " + strDesc.ToLower() + ", " + oLSPK_MDL.strLanguageSpoken + ": " + oLSPK_MDL.strCountry;
        //        }

        //        oLSPK_MDL.setIndex = 8;
        //        oLSPK_MDL.subSetIndex = 1;

        //        oLSPK_MDL.oLanguageSpoken.AppGlobalOwnerId = oAppGloOwnId;
        //        // oLSPK_MDL.oLanguageSpoken.ChurchBodyId = oChurchBodyId;

        //        oLSPK_MDL.oUserId_Logged = this._oLoggedUser.Id;
        //        oLSPK_MDL.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
        //        oLSPK_MDL.oChurchBodyId_Logged = this._oLoggedCB.Id;
        //        // 
        //        oLSPK_MDL = this.popLookups_LSPK(oLSPK_MDL, oLSPK_MDL.oLanguageSpoken);

        //        var tm = DateTime.Now;
        //        // record ... @client
        //        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, _oLoggedCB.Id, "N",
        //                         "RCMS-Client: Language Spoken", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id)
        //                        );

        //        //var _oLSPK_MDL = Newtonsoft.Json.JsonConvert.SerializeObject(oLSPK_MDL);
        //        //TempData["oVmCurrMod"] = _oLSPK_MDL; TempData.Keep();

        //        //  return oLSPK_MDL;.


        //        return PartialView("_AddOrEdit_LSPK", oLSPK_MDL);

        //        // shouldn't get this far
        //        //page not found error
        //        //
        //        //return View("_ErrorPage");
        //    }

        //    catch (Exception ex)
        //    {
        //        //page not found error
        //        
        //        return View("_ErrorPage");
        //    }
        //}
        //public LanguageSpokenModel popLookups_LSPK(LanguageSpokenModel vm, LanguageSpoken oCurrLSPK)
        //{
        //    if (vm == null || oCurrLSPK == null) return vm;
        //    //
        //    vm.lkpSharingStatuses = new List<SelectListItem>();
        //    foreach (var dl in dlShareStatus)
        //    { vm.lkpSharingStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

        //    vm.lkpCountries = _context.Country.AsNoTracking().ToList()  //.Where(c => c.Display == true)
        //                                   .Select(c => new SelectListItem()
        //                                   {
        //                                       Value = c.CtryAlpha3Code, //.ToString(),
        //                                       Text = c.EngName
        //                                   })
        //                                   .OrderBy(c => c.Text)
        //                                   .ToList();
        //    // vm.lkpCountries.Insert(0, new SelectListItem { Value = "", Text = "Select" });

        //    return vm;
        //}

        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public IActionResult AddOrEdit_LSPK(LanguageSpokenModel vm)
        //{
        //    // if (!InitializeUserLogging())
        //        // return RedirectToAction("LoginUserAcc", "UserLogin");

        //    var strDesc = "Language Spoken";
        //    if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
        //    if (vm.oLanguageSpoken == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

        //    LanguageSpoken _oChanges = vm.oLanguageSpoken;  // vmMod = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as UserProfileModel : vmMod; TempData.Keep();

        //    if (string.IsNullOrEmpty(_oChanges.CtryAlpha3Code))
        //        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Country for region " + strDesc.ToLower() + " not specified" });

        //    // initial validations done!
        //    var strTag = _oChanges.Name;

        //    var arrData = "";
        //    arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
        //    var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageSpokenModel>(arrData) : vm;

        //    var oLSPK = vmMod.oLanguageSpoken;
        //    // oLSPK.ChurchBody = vmMod.oChurchBody;

        //    try
        //    {
        //        ModelState.Remove("oLanguageSpoken.AppGlobalOwnerId");
        //        ModelState.Remove("oLanguageSpoken.ChurchBodyId");
        //        ModelState.Remove("oLanguageSpoken.OwnedByChurchBodyId");
        //        ModelState.Remove("oLanguageSpoken.CtryAlpha3Code");
        //        ModelState.Remove("oLanguageSpoken.CreatedByUserId");
        //        ModelState.Remove("oLanguageSpoken.LastModByUserId");

        //        //finally check error state...
        //        if (ModelState.IsValid == false)
        //            return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed to load the data to save. Please refresh and try again." });

        //        //
        //        var tm = DateTime.Now;
        //        _oChanges.LastMod = tm;
        //        _oChanges.LastModByUserId = vm.oUserId_Logged;
        //        //_oChanges.Status = vm.blStatusActivated ? "A" : "D"; 

        //        //validate...
        //        var _userTask = "Attempted saving " + strDesc.ToLower() + ", " + strTag;  // _userTask = "Added new " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";   //  _userTask = "Updated " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
        //        var _reset = _oChanges.Id == 0;


        //        //using (var _LSPKCtx = new ChurchModelContext(_context.Database.GetDbConnection().ConnectionString))
        //        //{
        //        if (_oChanges.Id == 0)
        //        {
        //            var existLSPK = _context.LanguageSpoken.AsNoTracking().Include(t => t.OwnedByChurchBody).ToList();
        //            existLSPK = existLSPK.Where(c => c.Name.ToLower() == _oChanges.Name.ToLower() &&
        //                (c.SharingStatus == "N" || c.SharingStatus == "A" || (c.SharingStatus == "C" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();
        //            //
        //            if (existLSPK.Count() > 0)
        //                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- [" + strTag + "] already exist." });

        //            _oChanges.Created = tm;
        //            _oChanges.CreatedByUserId = vm.oUserId_Logged;

        //            _context.Add(_oChanges);

        //            ViewBag.UserMsg = "Saved " + strDesc.ToLower() + " [" + strTag + "] successfully.";
        //            _userTask = "Added new " + strDesc.ToLower() + ", [" + strTag + "] successfully";
        //        }

        //        else
        //        {
        //            var existLSPK = _context.LanguageSpoken.AsNoTracking().Include(t => t.OwnedByChurchBody).ToList();
        //            existLSPK = existLSPK.Where(c => c.Id != _oChanges.Id && c.Name.ToLower() == _oChanges.Name.ToLower() &&
        //                (c.SharingStatus == "N" || c.SharingStatus == "A" || (c.SharingStatus == "C" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();
        //            if (existLSPK.Count() > 0)
        //                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- [" + strTag + "] already exist." });

        //            _context.Update(_oChanges);

        //            ViewBag.UserMsg = strDesc + " updated successfully.";
        //            _userTask = "Updated " + strDesc.ToLower() + ", [" + strTag + "] successfully";
        //        }

        //        _context.SaveChanges(); // await _LSPKCtx.SaveChangesAsync();

        //        //   DetachAllEntities(_LSPKCtx);
        //        //}


        //        var _tm = DateTime.Now;
        //        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, _oLoggedCB.Id, "N",
        //                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id)
        //                            );

        //        var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);
        //        TempData["oVmCurr"] = _vmMod; TempData.Keep();

        //        return Json(new { taskSuccess = true, oCurrId = _oChanges.Id, resetNew = _reset, userMess = ViewBag.UserMsg });
        //    }

        //    catch (Exception ex)
        //    {
        //        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed saving Language Spoken details. Err: " + ex.Message });
        //    }

        //}
        //public IActionResult Delete_LSPK(int? oAppGloOwnId, int? oChurchBodyId, int? loggedUserId, int id, bool forceDeleteConfirm = false)
        //{
        //    // if (!InitializeUserLogging())
        //        // return RedirectToAction("LoginUserAcc", "UserLogin");

        //    // var strDesc = setIndex == 1 ? "System profile" : setIndex == 2 ? "Church admin profile" : "Church user profile";
        //    var strDesc = "Language spoken";
        //    var tm = DateTime.Now; var _tm = DateTime.Now; var _userTask = "Attempted saving  " + strDesc;
        //    //

        //    try
        //    {
        //        var strUserDenom = "RCMS Client";

        //        //if (setIndex != 1)
        //        //{
        //        //    if (oAppGloOwnId == null || oChurchBodyId == null)
        //        //        return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Denomination/church of " + strDesc + " unknown. Please refesh and try again." });

        //        //    var oAGO = _context.AppGlobalOwner.Find(oAppGloOwnId);
        //        //    var oCB = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchBodyId).FirstOrDefault();

        //        //    if (oAGO == null || oCB == null)
        //        //        return Json(new { taskSuccess = false, oCurrId = "", userMess = "Specified denomination and church unit could not be retrieved. Please refresh and try again.", signOutToLogIn = false });

        //        //    strUserDenom = oCB.Name + (!string.IsNullOrEmpty(oAGO.Acronym) ? ", " + oAGO.Acronym : oAGO.OwnerName);
        //        //    strUserDenom = "--" + (string.IsNullOrEmpty(strUserDenom) ? "Denomination: " + strUserDenom : strUserDenom);
        //        //}


        //        var oLSPK = _context.LanguageSpoken.Include(c => c.Country)
        //            .Where(c => c.Id == id && c.AppGlobalOwnerId == oAppGloOwnId).FirstOrDefault();    // && c.ChurchBodyId == oChurchBodyId
        //        if (oLSPK == null)
        //        {
        //            _userTask = "Attempted deleting " + strDesc.ToLower(); // + ", " + (strTag + ":- " + oLSPK.LSPKValue);  // var _userTask = "Attempted saving  " + strDesc;
        //            _tm = DateTime.Now;
        //            _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
        //                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
        //                                );

        //            return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = strDesc + " to delete could not be retrieved." });
        //        }

        //        var strTag = oLSPK.Name; // != null ? oLSPK.Country.EngName : "[Country]";
        //        var saveDelete = true;

        //        // ensuring cascade delete where there's none!

        //        //check LSPKCategory for this UP to delete 
        //        // UNTIL actual dependencies found...
        //        var LSPKCus = _context.LanguageSpokenCustom.Where(c => c.LanguageSpokenId == oLSPK.Id).ToList(); //new List<string>(); 
        //        var CMs = _context.ChurchMember.Where(c => c.MotherTongueId == oLSPK.Id).ToList();
        //        //using (var _userCtx = new MSTR_DbContext(_context.Database.GetDbConnection().ConnectionString))
        //        //{
        //        if ((LSPKCus.Count() + CMs.Count() ) > 0)   //+ oUPRs.Count()
        //        {
        //            if (forceDeleteConfirm == false)
        //            {
        //                var strConnTabs = "Language spoken customization, Church member";  //User profile role, User profile group and 
        //                saveDelete = false;

        //                // check user privileges to determine... administrator rights
        //                //log...
        //                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [" + strTag + "]";
        //                _tm = DateTime.Now;
        //                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
        //                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
        //                                    );

        //                return Json(new
        //                {
        //                    taskSuccess = false,
        //                    tryForceDelete = false,
        //                    oCurrId = id,
        //                    userMess = "Specified " + strDesc.ToLower() +
        //                                    " to delete has been used elsewhere in the system [" + strConnTabs + "]. Delete cannot be done unless dependent-references are removed."
        //                });
        //            }

        //            //to be executed only for higher privileges... // FORCE-DELETE...
        //        }

        //        //successful...
        //        if (saveDelete)
        //        {
        //            _context.LanguageSpoken.Remove(oLSPK);
        //            _context.SaveChanges();

        //            //   DetachAllEntities(_userCtx);

        //            //audit...
        //            _userTask = "Deleted " + strDesc.ToLower() + ", [" + strTag + "]";
        //            _tm = DateTime.Now;
        //            _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
        //                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
        //                                    );

        //            return Json(new { taskSuccess = true, tryForceDelete = false, oCurrId = oLSPK.Id, userMess = strDesc + " successfully deleted." });
        //        }

        //        //}


        //        _userTask = "Attempted deleting " + strDesc.ToLower() + ", [" + strTag + "] -- but FAILED. Data unavailable.";   // var _userTask = "Attempted saving " + strDesc;
        //        _tm = DateTime.Now;
        //        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
        //                                         "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
        //                                        );

        //        return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "No " + strDesc.ToLower() + " data available to delete. Try again" });
        //    }

        //    catch (Exception ex)
        //    {
        //        _userTask = "Attempted deleting " + strDesc.ToLower() + ", [ ID= " + id + "] FAILED. ERR: " + ex.Message;  // var _userTask = "Attempted saving " + strDesc;
        //        _tm = DateTime.Now;
        //        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
        //                                            "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
        //                                           );
        //        //
        //        return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Failed deleting " + strDesc.ToLower() + ". Err: " + ex.Message });
        //    }
        //}


        /// CPR --- 9 Church Period -- CPR
        [HttpGet]
        public IActionResult AddOrEdit_CPR(int id = 0, string periodType = "CP", int? oAppGloOwnId = null, int? oChurchBodyId = null, int subSetIndex = 1, int? oUserId = null)
        { // 0 -- new, -1 -- next period
            try
            {  /// periodType = "CP" -- Church Period, AP -- Accounting Period

                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return View("_ErrorPage");
                    }
                }

                // if (!InitializeUserLogging())
                // return RedirectToAction("LoginUserAcc", "UserLogin");

                if (oAppGloOwnId == null) oAppGloOwnId = this._oLoggedAGO.Id;
                if (oChurchBodyId == null) oChurchBodyId = this._oLoggedCB.Id;
                if (oUserId == null) oUserId = this._oLoggedUser.Id;

                var oAGO = _context.AppGlobalOwner.Find(oAppGloOwnId);
                var oCB_OwnedBy = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchBodyId).FirstOrDefault();
                if (oAGO == null || oCB_OwnedBy == null)  // || oCU_Parent == null church units may be networked...
                {
                    
                    return PartialView("_ErrorPage");
                }   


                var strDesc = "Church Period";
                var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();  // _userTask = "Attempted creating new denomination (church)"; // _userTask = "Opened denomination (church)-" + oCFT_MDL.oChurchFaithType.FaithDescription;

                var oCPRModel = new ChurchPeriodModel();

                if (id < 0)
                {
                    //// get the active period...
                    //var oCPR_List_1 = _context.ChurchPeriod.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).AsNoTracking()
                    //    .Where(c => c.Status=="A" && c.PeriodType==periodType && ((c.SharingStatus=="N" && c.AppGlobalOwnerId == this._oLoggedAGO.Id) || c.SharingStatus=="N!")).ToList();
                    //oCPR_List_1 = oCPR_List_1.Where(c =>
                    //                             (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                    //                             (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                    //                             (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))
                    //                             ).ToList();

                    //var oCurrPeriod = oCPR_List_1.FirstOrDefault(); 
                    //if (oCurrPeriod == null)
                    //{
                    //    //page not found error
                    //    
                    //    return View("_ErrorPage");
                    //}

                    //// get the period settings...
                    //var oCPRD = _con

                    //oCPRModel.oChurchPeriod = new ChurchPeriod()
                    //{ 
                    //    IntervalFreq = "Y",
                    //    Interval = 1,
                    //    IntervalDays = DateTime.IsLeapYear(DateTime.Now.Year) ? 366 : 365,
                    //    FromDate = DateTime.Now,
                    //    ToDate = DateTime.Now.AddDays(oCPRModel.oChurchPeriod.IntervalDays),
                    //    Status = "A",
                    //    SharingStatus = "N",
                    //};

                    //oCPRModel.strStatus = GetStatusDesc(oCPRModel.oChurchPeriod.Status);
                    //oCPRModel.strOwnershipCode = "O";  // I -- Inherited, O -- Originated   i.e. currChurchUnit == OwnedByChurchUnit
                    //oCPRModel.strOwnershipStatus = GetAdhocStatusDesc(oCPRModel.strOwnershipCode);
                    //oCPRModel.strSharingStatus = GetSharingStatusDesc(oCPRModel.oChurchPeriod.SharingStatus);
                }
                else if (id == 0)
                {
                    //create and init...  
                    oCPRModel.oChurchPeriod = new ChurchPeriod();
                    var oCPRD = _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && 
                                                c.NVPCode== "CPRD" && (c.NVPSubCode == "CPRD_INT_CP" || c.NVPSubCode == "CPRD_DAYS_CP")).ToList();
                    ///
                    var oCPRD_1 = oCPRD.Where(c => c.NVPSubCode == "CPRD_INT_CP").FirstOrDefault();  
                    oCPRModel.oChurchPeriod.IntervalFreq = oCPRD_1 != null ? oCPRD_1.OccurFreqCode : "Y";
                    oCPRModel.oChurchPeriod.Interval = oCPRD_1 != null ? (int)oCPRD_1.NVPNumVal : 1;
                    ///
                    var oCPRD_2 = oCPRD.Where(c => c.NVPSubCode == "CPRD_DAYS_CP").FirstOrDefault();
                    oCPRModel.oChurchPeriod.IntervalDays = oCPRD_2 != null ? (int)oCPRD_2.NVPNumVal : (DateTime.IsLeapYear(DateTime.Now.Year) ? 366 : 365);
                    ///
                    oCPRModel.oChurchPeriod.FromDate = DateTime.Now;
                    oCPRModel.oChurchPeriod.ToDate = DateTime.Now.AddDays(oCPRModel.oChurchPeriod.IntervalDays);
                    oCPRModel.oChurchPeriod.Status= "A";
                    oCPRModel.oChurchPeriod.SharingStatus = "N";

                    oCPRModel.strStatus = GetStatusDesc(oCPRModel.oChurchPeriod.Status);
                    oCPRModel.strOwnershipCode = "O";  // I -- Inherited, O -- Originated   i.e. currChurchUnit == OwnedByChurchUnit
                    oCPRModel.strOwnershipStatus = GetAdhocStatusDesc(oCPRModel.strOwnershipCode); 
                    oCPRModel.strSharingStatus = GetSharingStatusDesc(oCPRModel.oChurchPeriod.SharingStatus);

                    // var oCB_OwnedBy = this._oLoggedCB;
                    oCPRModel.oChurchPeriod.OwnedByChurchBodyId = oChurchBodyId; 
                    oCPRModel.strChurchLevel_OwnedByCB = oCB_OwnedBy != null ? (oCB_OwnedBy.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB_OwnedBy.ChurchLevel.CustomName) ? oCB_OwnedBy.ChurchLevel.CustomName : oCB_OwnedBy.ChurchLevel.Name) : "") : "";
                    oCPRModel.strOwnedByChurchBody = oCB_OwnedBy != null ? oCB_OwnedBy.Name : "";

                    _userTask = "Attempted creating new " + strDesc.ToLower();
                }
                else
                { 
                    var oCPR_List_1 = _context.ChurchPeriod.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).AsNoTracking()
                                            .Where(c => c.Id == id && c.AppGlobalOwnerId == this._oLoggedAGO.Id).ToList();
                    oCPR_List_1 = oCPR_List_1.Where(c =>
                                                 (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                                 (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();
                    
                    oCPRModel = (
                                      from t_cpr in oCPR_List_1.ToList()
                                      from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_cpr.OwnedByChurchBodyId).DefaultIfEmpty()

                                      select new ChurchPeriodModel()
                                      {
                                          oAppGloOwnId = t_cpr.AppGlobalOwnerId,
                                          oAppGlobalOwn = t_cpr.AppGlobalOwner,
                                          oChurchBodyId = t_cpr.ChurchBodyId,
                                          oChurchBody = t_cpr.ChurchBody,
                                          ///
                                          oChurchPeriod = t_cpr,
                                          strChurchPeriod = t_cpr.PeriodDesc,
                                          strFrom = t_cpr.FromDate != null ? String.Format("{0:d MMM yyyy}", (DateTime)t_cpr.FromDate) : "N/A",
                                          strTo = t_cpr.ToDate != null ? String.Format("{0:d MMM yyyy}", (DateTime)t_cpr.ToDate) : "N/A",
                                          strInterval = GetPeriodDesc(t_cpr.IntervalFreq),
                                          strPeriodType = GetPeriodDesc(t_cpr.PeriodType),
                                          strYear = t_cpr.Year.ToString(),

                                          //// only for definition
                                          //strYear = t_cpr.Status == "D" && t_cpr.Month != null ? t_cpr.Year.ToString() : "",
                                          //strSemester = t_cpr.Status == "D" && t_cpr.Month != null ? (t_cpr.Month >=1 && t_cpr.Month <= 6 ? "Semester 1" : t_cpr.Month >= 7 && t_cpr.Month <= 12 ? "Semester 2" : "") : "",
                                          //strQuarter = t_cpr.Status == "D" && t_cpr.Month != null ? (t_cpr.Month >= 1 && t_cpr.Month <= 3 ? "Quarter 1" : t_cpr.Month >= 4 && t_cpr.Month <= 6 ? "Quarter 2" : t_cpr.Month >= 7 && t_cpr.Month <= 9 ? "Quarter 3" : t_cpr.Month >= 10 && t_cpr.Month <= 12 ? "Quarter 4" : "") : "",
                                          //strMonth = t_cpr.Status == "D" && t_cpr.Month != null ? CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName((int)t_cpr.Month) : "",
                                          //strWeek = t_cpr.Status == "D" && t_cpr.Week != null ? "Week " + t_cpr.Week : "",
                                          // bl_IsIntervalDefinition = t_cpr.Status == "D",
                                          //  

                                          // bl_IsStartingPeriod = t_cpr.IsStartingPeriod,

                                          bl_IsPeriodActive = t_cpr.Status == "A",
                                          strStatus = GetStatusDesc(t_cpr.Status),
                                          //
                                          strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                                          strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
                                          strOwnershipCode = t_cpr.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", // t_cpr.OwnedByChurchBodyId != null ? (t_cpr.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_cpr.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                                          strOwnershipStatus = GetAdhocStatusDesc(t_cpr.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"), // t_cpr.OwnedByChurchBodyId != null ? (t_cpr.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_cpr.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                                          strSharingStatus = GetSharingStatusDesc(t_cpr.SharingStatus)
                                      })
                              .FirstOrDefault();

                    if (oCPRModel.oChurchPeriod == null)
                    {
                        //page not found error
                        
                        return View("_ErrorPage");
                    }

                    _userTask = "Opened " + strDesc.ToLower() + ", " + oCPRModel.strChurchPeriod;
                }

                oCPRModel.setIndex = 9;
                oCPRModel.subSetIndex = subSetIndex;

                oCPRModel.oChurchPeriod.AppGlobalOwnerId = oAppGloOwnId;
                oCPRModel.oChurchPeriod.ChurchBodyId = oChurchBodyId;

                oCPRModel.oUserId_Logged = this._oLoggedUser.Id;
                oCPRModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                oCPRModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                // 
                oCPRModel = this.popLookups_CPR(oCPRModel, oCPRModel.oChurchPeriod);

                var tm = DateTime.Now;
                // record ... @client
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, _oLoggedCB.Id, "N",
                                 "RCMS-Client: Church Period", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id)
                                );

                var _oCPRModel = Newtonsoft.Json.JsonConvert.SerializeObject(oCPRModel);
                TempData["oVmCurrMod"] = _oCPRModel; TempData.Keep();

                //  return oCPRModel;.

                return PartialView("_AddOrEdit_CPR", oCPRModel);

                // shouldn't get this far
                //page not found error
                //
                //return View("_ErrorPage");
            }

            catch (Exception ex)
            {
                //page not found error
                
                return View("_ErrorPage");
            }
        }
        public ChurchPeriodModel popLookups_CPR(ChurchPeriodModel vm, ChurchPeriod oCurrCPR)
        {
            if (vm == null || oCurrCPR == null) return vm;
            //
            vm.lkpStatuses = new List<SelectListItem>();
            foreach (var dl in dlGenStatuses)
            { if (dl.Val=="A" || dl.Val=="B") vm.lkpStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpSharingStatuses = new List<SelectListItem>();
            foreach (var dl in dlShareStatus)
            { vm.lkpSharingStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpPeriodTypes = new List<SelectListItem>();
            foreach (var dl in dlPeriodTypes)
            { vm.lkpPeriodTypes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpIntervalFreqs = new List<SelectListItem>();
            foreach (var dl in dlIntervalFreqs)
            { vm.lkpIntervalFreqs.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpYears = new List<SelectListItem>();
            var minYear = (DateTime.Now.AddYears(-10)).Year; ;
            var maxYear = (DateTime.Now.AddYears(+10)).Year;
            for (var y = minYear; y <= maxYear; y++)
            { vm.lkpYears.Add(new SelectListItem { Value = y.ToString(), Text = y.ToString() }); }


            return vm;
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddOrEdit_CPR(ChurchPeriodModel vm)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }

            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");

            var strDesc = "Church Period";
            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oChurchPeriod == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            ChurchPeriod _oChanges = vm.oChurchPeriod;  // vmMod = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as UserProfileModel : vmMod; TempData.Keep();

            if (string.IsNullOrEmpty(_oChanges.PeriodDesc ))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Period description is required" });
               
            if (_oChanges.Status != "B") // only blocked periods can be exempted === pending
            {
                if (string.IsNullOrEmpty(_oChanges.PeriodType))
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Period type is not specified" });
                 
                if (_oChanges.Year.ToString().Length != 4)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specify the correct year" });

                if (_oChanges.FromDate == null)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "From-Date is required." });

                if (_oChanges.ToDate == null)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "To-Date is required" });

                if ( _oChanges.ToDate < _oChanges.FromDate)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "From-Date cannot be later than To-Date is required" });

                //if (_oChanges.Interval == null || _oChanges.Interval == 0)
                //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Interval (frequency) for period is not specified" });

                //if (string.IsNullOrEmpty(_oChanges.IntervalFreq))
                //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Interval (frequency) for period is not specified" });

                if (_oChanges.Interval == null || _oChanges.IntervalFreq == null && _oChanges.IntervalDays == 0)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Interval [incl. days] and interval-frequency have not been specified" });


                //var intervalDesc = "";
                //switch (_oChanges.IntervalFreq)
                //{
                //    case "Y":
                //        var maxDays1 = (DateTime.IsLeapYear(_oChanges.Year) ? 366 : 365) * _oChanges.Interval;
                //        if (_oChanges.IntervalDays > maxDays1)
                //            return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Interval (year) length-in-days for period cannot exceed " + maxDays1 + " days" });
                //        intervalDesc = "Year";
                //        break;

                //    case "S":
                //        var maxDays2 = DateTime.IsLeapYear(_oChanges.Year) ? 366 : 365;
                //        if (_oChanges.IntervalDays > maxDays2)
                //            return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Interval (year) length-in-days for period cannot exceed " + maxDays2 + " days" });
                //        intervalDesc = "Semester";
                //        break;

                //    case "Q":
                //        intervalDesc = "Quarter";
                //        break;

                //    case "M":
                //        intervalDesc = "Month";
                //        break;

                //    case "W":
                //        intervalDesc = "Week";
                //        break;
                //}

                
                System.TimeSpan dt_diff1 = _oChanges.ToDate.Value.Subtract(_oChanges.FromDate.Value) ;
                if (_oChanges.IntervalDays != (dt_diff1.Days + 1))  // dates are inclusive
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Interval (" + GetPeriodDesc(_oChanges.IntervalFreq).ToLower() + ") interval-in-days [" + _oChanges.IntervalDays + "] and interval-in-days for the dates specified [" + dt_diff1.Days + "] differ. Please correct and try again." });



                var oCPR_List = _context.ChurchPeriod.AsNoTracking().Include(t=>t.OwnedByChurchBody).ThenInclude(t=>t.ChurchLevel)
                    .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.PeriodType == _oChanges.PeriodType && c.Status == "A" &&
                    ((c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId && c.SharingStatus == "N") || (c.SharingStatus != "N"))).ToList();

                //exclude current for update..
                if (_oChanges.Id > 0) oCPR_List = oCPR_List.Where(c => c.Id != _oChanges.Id).ToList();

                // Date range is INCLUSIVE...
                oCPR_List = oCPR_List.Where(c =>
                                   (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                oCPR_List = oCPR_List.Where(c => (_oChanges.FromDate.Value < c.FromDate.Value && _oChanges.ToDate.Value > c.ToDate.Value) ||
                                                    (_oChanges.FromDate.Value < c.FromDate.Value && _oChanges.ToDate.Value > c.FromDate.Value) ||
                                                    (_oChanges.FromDate.Value < c.ToDate.Value && _oChanges.ToDate.Value > c.ToDate.Value) ||
                                                    (_oChanges.FromDate.Value > c.FromDate.Value && _oChanges.ToDate.Value < c.ToDate.Value)).ToList();

                
                if (oCPR_List.Count() > 0)
                {
                    var oCPR_CB = oCPR_List[0].OwnedByChurchBody;
                    return Json(new
                    {
                        taskSuccess = false,
                        oCurrId = _oChanges.Id,
                        userMess = "Church period specified overlaps with that of another active period, '" + oCPR_List[0].PeriodDesc + "' [of: " + (string.IsNullOrEmpty(oCPR_CB.ChurchLevel?.CustomName) ? oCPR_CB.ChurchLevel?.CustomName : oCPR_CB.ChurchLevel?.Name) + ", " + oCPR_CB.OwnedByChurchBody.Name + "]. Hint: Date range is inclusive.",
                        pageIndex = vm.pageIndex
                    });
                }
            }

            //System.DateTime date1 = new System.DateTime(1996, 6, 3, 22, 15, 0);
            //System.DateTime date2 = new System.DateTime(1996, 12, 6, 13, 2, 0);
            //System.DateTime date3 = new System.DateTime(1996, 10, 12, 8, 42, 0);

            //// diff1 gets 185 days, 14 hours, and 47 minutes.
            //System.TimeSpan diff1 = date2.Subtract(date1);

            //// date4 gets 4/9/1996 5:55:00 PM.
            //System.DateTime date4 = date3.Subtract(diff1);

            //// diff2 gets 55 days 4 hours and 20 minutes.
            //System.TimeSpan diff2 = date2 - date3;

            //// date5 gets 4/9/1996 5:55:00 PM.
            //System.DateTime date5 = date1 - diff2;

            // initial validations done!
            var strTag = _oChanges.PeriodDesc;

            var arrData = "";
            arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<ChurchPeriodModel>(arrData) : vm;

            var oCPR = vmMod.oChurchPeriod;
             
            try
            {
                ModelState.Remove("oChurchPeriod.AppGlobalOwnerId");
                ModelState.Remove("oChurchPeriod.ChurchBodyId");
                ModelState.Remove("oChurchPeriod.OwnedByChurchBodyId");
                ModelState.Remove("oChurchPeriod.CreatedByUserId");
                ModelState.Remove("oChurchPeriod.LastModByUserId");

                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed to load the data to save. Please refresh and try again." });

                
                //
                var tm = DateTime.Now;
                _oChanges.LastMod = tm;
                _oChanges.LastModByUserId = vm.oUserId_Logged;
                //_oChanges.Status = vm.blStatusActivated ? "A" : "D"; 

                //validate...
                var _userTask = "Attempted saving " + strDesc.ToLower() + ", " + strTag;  // _userTask = "Added new " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";   //  _userTask = "Updated " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
                var _reset = _oChanges.Id == 0;


                //using (var _CPRCtx = new ChurchModelContext(_context.Database.GetDbConnection().ConnectionString))
                //{


                var oCPR_List = new List<ChurchPeriod>();
                if (oCPR.SharingStatus == "N")   // thus CPR is NOT shared across other congregations... get the shared list of // PeriodType //
                {
                    oCPR_List = _context.ChurchPeriod.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel) // ParentUnitId can be NULL
                                      .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.PeriodType == oCPR.PeriodType && c.Status == "A" &&
                                      c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId && c.SharingStatus == "N").ToList();
                }
                else
                {
                    oCPR_List = _context.ChurchPeriod.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel)   // ParentUnitId not relevant
                                      .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.PeriodType == oCPR.PeriodType && c.Status == "A" &&
                                      ((c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId && c.SharingStatus == "N") || (c.SharingStatus != "N"))).ToList();

                    //exclude current for update..
                    // if (_oChanges.Id > 0) oCPR_CBList = oCPR_CBList.Where(c => c.Id != _oChanges.Id).ToList();

                    oCPR_List = oCPR_List.Where(c =>
                                       (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();
                }

                

                if (_oChanges.Id == 0)
                {
                    var oCPR_Exist = oCPR_List.Where(c => c.AppGlobalOwnerId == oCPR.AppGlobalOwnerId && (c.PeriodDesc == oCPR.PeriodDesc || (c.FromDate == oCPR.FromDate && c.FromDate == oCPR.FromDate))).FirstOrDefault();
                    if (oCPR_Exist != null)
                    {
                        var oCPR_CB = oCPR_Exist.OwnedByChurchBody;
                        return Json(new
                        {
                            taskSuccess = false, oCurrId = oCPR.Id, userMess = strDesc + ", " + oCPR.PeriodDesc + " already exists [in the " +
                            (oCPR_CB.ChurchLevel != null ? (!string.IsNullOrEmpty(oCPR_CB?.ChurchLevel.CustomName) ? oCPR_CB?.ChurchLevel.CustomName : oCPR_CB?.ChurchLevel.Name) : "church unit")
                            + ": " + oCPR_CB.Name + "]",
                            pageIndex = vm.pageIndex
                        });
                    }


                    //var existCPR = _context.ChurchPeriod.Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody)
                    //    .Where(c => c.PeriodDesc.ToLower() == _oChanges.PeriodDesc.ToLower() && (c.SharingStatus == "A" || (c.SharingStatus == "C" && IsAncestor_ChurchBody(c.OwnedByChurchBody, c.ChurchBody)))).ToList();
                    //if (existCPR.Count() > 0)
                    //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- [" + strTag + "] already exist." });
                     

                    _oChanges.Created = tm;
                    _oChanges.CreatedByUserId = vm.oUserId_Logged;

                    _context.Add(_oChanges);

                    ViewBag.UserMsg = "Saved " + strDesc.ToLower() + " [" + strTag + "] successfully.";
                    _userTask = "Added new " + strDesc.ToLower() + ", [" + strTag + "] successfully";
                }

                else

                {
                    var oCPR_Exist = oCPR_List.Where(c => c.Id != oCPR.Id && c.AppGlobalOwnerId == oCPR.AppGlobalOwnerId && (c.PeriodDesc == oCPR.PeriodDesc || (c.FromDate == oCPR.FromDate && c.FromDate == oCPR.FromDate))).FirstOrDefault();
                    if (oCPR_Exist != null)
                    {
                        var oCPR_CB = oCPR_Exist.OwnedByChurchBody;
                        return Json(new
                        {
                            taskSuccess = false,
                            oCurrId = oCPR.Id,
                            userMess = strDesc + ", " + oCPR.PeriodDesc + " already exists [in the " +
                            (oCPR_CB.ChurchLevel != null ? (!string.IsNullOrEmpty(oCPR_CB?.ChurchLevel.CustomName) ? oCPR_CB?.ChurchLevel.CustomName : oCPR_CB?.ChurchLevel.Name) : "church unit")
                            + ": " + oCPR_CB.Name + "]",
                            pageIndex = vm.pageIndex
                        });
                    }

                    //var existCPR = _context.ChurchPeriod.Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).Where(c => c.Id != _oChanges.Id && c.PeriodDesc.ToLower() == _oChanges.PeriodDesc.ToLower() && (c.SharingStatus == "A" || (c.SharingStatus == "C" && IsAncestor_ChurchBody(c.OwnedByChurchBody, c.ChurchBody)))).ToList();
                    //if (existCPR.Count() > 0)
                    //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- [" + strTag + "] already exist." });

                    _context.Update(_oChanges);

                    ViewBag.UserMsg = strDesc + " updated successfully.";
                    _userTask = "Updated " + strDesc.ToLower() + ", [" + strTag + "] successfully";
                }

                //save denomination first... 
                _context.SaveChanges(); // await _CPRCtx.SaveChangesAsync();

                //   DetachAllEntities(_CPRCtx);
                //}

                // refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");

                var _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, _oLoggedCB.Id, "N",
                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id)
                                    );

                var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);
                TempData["oVmCurr"] = _vmMod; TempData.Keep();

                return Json(new { taskSuccess = true, oCurrId = _oChanges.Id, resetNew = _reset, userMess = ViewBag.UserMsg });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed saving Church Period details. Err: " + ex.Message });
            }

        }
        public IActionResult Delete_CPR(int? oAppGloOwnId, int? oChurchBodyId, int? loggedUserId, int id, bool forceDeleteConfirm = false)
        {

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");

            // var strDesc = setIndex == 1 ? "System profile" : setIndex == 2 ? "Church admin profile" : "Church user profile";
            var strDesc = "Church Period";
            var tm = DateTime.Now; var _tm = DateTime.Now; var _userTask = "Attempted saving  " + strDesc;
       
            try
            {
                var strUserDenom = "RCMS Client";

                var oCPR = _context.ChurchPeriod  //.Include(c => c.Country)
                    .Where(c => c.Id == id && c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oChurchBodyId).FirstOrDefault();// 
                if (oCPR == null)
                {
                    _userTask = "Attempted deleting " + strDesc.ToLower(); // + ", " + (strTag + ":- " + oCPR.CPRValue);  // var _userTask = "Attempted saving  " + strDesc;
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                         "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                        );

                    return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = strDesc + " to delete could not be retrieved." });
                }

                var strTag = oCPR.PeriodDesc; // != null ? oCPR.Country.EngName : "[Country]";
                var saveDelete = true;

                // ensuring cascade delete where there's none!

                //check CPRCategory for this UP to delete 
                // UNTIL actual dependencies found...
                var tabs = new List<string>();   //_context.???.Where(c => c.HometownRegionId == oCPR.Id).ToList();

                //using (var _userCtx = new MSTR_DbContext(_context.Database.GetDbConnection().ConnectionString))
                //{
                if (tabs.Count() > 0) // + UPGs.Count() + oUPRs.Count() //+oUser.ChurchMembers.Count )
                {
                    if (forceDeleteConfirm == false)
                    {
                        var strConnTabs = "";  //User profile role, User profile group and 
                        saveDelete = false;

                        // check user privileges to determine... administrator rights
                        //log...
                        _userTask = "Attempted deleting " + strDesc.ToLower() + ", [" + strTag + "]";
                        _tm = DateTime.Now;
                        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                            );

                        return Json(new
                        {
                            taskSuccess = false,
                            tryForceDelete = false,
                            oCurrId = id,
                            userMess = "Specified " + strDesc.ToLower() +
                                            " to delete has been used elsewhere in the system [" + strConnTabs + "]. Delete cannot be done unless dependent-references are removed."
                        });
                    }

                    //to be executed only for higher privileges... // FORCE-DELETE...
                }

                //successful...
                if (saveDelete)
                {
                    _context.ChurchPeriod.Remove(oCPR);
                    _context.SaveChanges();

                    //   DetachAllEntities(_userCtx);

                    //audit...
                    _userTask = "Deleted " + strDesc.ToLower() + ", [" + strTag + "]";
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                            );

                    return Json(new { taskSuccess = true, tryForceDelete = false, oCurrId = oCPR.Id, userMess = strDesc + " successfully deleted." });
                }

                //}


                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [" + strTag + "] -- but FAILED. Data unavailable.";   // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                );

                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "No " + strDesc.ToLower() + " data available to delete. Try again" });
            }

            catch (Exception ex)
            {
                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [ ID= " + id + "] FAILED. ERR: " + ex.Message;  // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                    "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                   );
                //
                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Failed deleting " + strDesc.ToLower() + ". Err: " + ex.Message });
            }
        }

         
        ///// NIDT --- 9 Church Period -- NIDT
        //[HttpGet]
        //public IActionResult AddOrEdit_NIDT(int id = 0, int? oAppGloOwnId = null, int? oChurchBodyId = null, int subSetIndex = 1, int? oUserId = null)
        //{
        //    try
        //    {
        //        // if (!InitializeUserLogging())
        //            // return RedirectToAction("LoginUserAcc", "UserLogin");

        //        if (oAppGloOwnId == null) oAppGloOwnId = this._oLoggedAGO.Id;
        //        if (oChurchBodyId == null) oChurchBodyId = this._oLoggedCB.Id;
        //        if (oUserId == null) oUserId = this._oLoggedUser.Id;

        //        var strDesc = "National ID Type";
        //        var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();  // _userTask = "Attempted creating new denomination (church)"; // _userTask = "Opened denomination (church)-" + oCFT_MDL.oChurchFaithType.FaithDescription;

        //        var oNIDT_MDL = new National_IdTypeModel();
        //        if (id == 0)
        //        {
        //            //create and init...  
        //            oNIDT_MDL.oNational_IdType = new National_IdType();
        //            oNIDT_MDL.oNational_IdType.SharingStatus = "N";

        //            _userTask = "Attempted creating new " + strDesc.ToLower();
        //        }
        //        else
        //        { 
        //            var oNIDT_List_1 = _context.National_IdType.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).AsNoTracking()
        //                                .Where(c => c.Id == id && c.AppGlobalOwnerId == this._oLoggedAGO.Id).ToList();  
        //            var oNIDT_List = (
        //                        from t_nidt in oNIDT_List_1.ToList()
        //                        from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_nidt.CtryAlpha3Code)
        //                        from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_nidt.OwnedByChurchBodyId).DefaultIfEmpty()

        //                        select new National_IdTypeModel()
        //                        {
        //                            oAppGloOwnId = t_nidt.AppGlobalOwnerId,
        //                            oAppGlobalOwn = t_nidt.AppGlobalOwner,
        //                            oChurchBodyId = t_nidt.ChurchBodyId,
        //                            oChurchBody = t_nidt.ChurchBody,
        //                            ///
        //                            oNational_IdType = t_nidt,
        //                            strNational_IdType = t_nidt.IdTypeName,
        //                            strCountry = t_ctry != null ? (!string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code) : "",
        //                            //
        //                            strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
        //                            strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
        //                            strOwnershipCode = t_nidt.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", // t_nidt.OwnedByChurchBodyId != null ? (t_nidt.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_nidt.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
        //                            strOwnershipStatus = GetAdhocStatusDesc(t_nidt.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"), // t_nidt.OwnedByChurchBodyId != null ? (t_nidt.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_nidt.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
        //                            strSharingStatus = GetSharingStatusDesc(t_nidt.SharingStatus)

        //                        })
        //                      .FirstOrDefault();

        //            if (oNIDT_MDL.oNational_IdType == null)
        //            {
        //                //page not found error
        //                
        //                return View("_ErrorPage");
        //            }

        //            _userTask = "Opened " + strDesc.ToLower() + ", " + oNIDT_MDL.strNational_IdType;
        //        }

        //        oNIDT_MDL.setIndex = 9;
        //        oNIDT_MDL.subSetIndex = subSetIndex;

        //        oNIDT_MDL.oNational_IdType.AppGlobalOwnerId = oAppGloOwnId;
        //        oNIDT_MDL.oNational_IdType.ChurchBodyId = oChurchBodyId;

        //        oNIDT_MDL.oUserId_Logged = this._oLoggedUser.Id;
        //        oNIDT_MDL.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
        //        oNIDT_MDL.oChurchBodyId_Logged = this._oLoggedCB.Id;
        //        // 
        //        oNIDT_MDL = this.popLookups_NIDT(oNIDT_MDL, oNIDT_MDL.oNational_IdType);

        //        var tm = DateTime.Now;
        //        // record ... @client
        //        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, _oLoggedCB.Id, "N",
        //                         "RCMS-Client: National ID Type", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id)
        //                        );

        //        //var _oNIDT_MDL = Newtonsoft.Json.JsonConvert.SerializeObject(oNIDT_MDL);
        //        //TempData["oVmCurrMod"] = _oNIDT_MDL; TempData.Keep();

        //        //  return oNIDT_MDL;.


        //        return PartialView("_AddOrEdit_NIDT", oNIDT_MDL);

        //        // shouldn't get this far
        //        //page not found error
        //        //
        //        //return View("_ErrorPage");
        //    }

        //    catch (Exception ex)
        //    {
        //        //page not found error
        //        
        //        return View("_ErrorPage");
        //    }
        //}
        //public National_IdTypeModel popLookups_NIDT(National_IdTypeModel vm, National_IdType oCurrNIDT)
        //{
        //    if (vm == null || oCurrNIDT == null) return vm;
        //    //
            
        //    vm.lkpSharingStatuses = new List<SelectListItem>();
        //    foreach (var dl in dlShareStatus)
        //    { vm.lkpSharingStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

        //    vm.lkpCountries = _context.Country.AsNoTracking().ToList()  //.Where(c => c.Display == true)
        //                                   .Select(c => new SelectListItem()
        //                                   {
        //                                       Value = c.CtryAlpha3Code, //.ToString(),
        //                                       Text = c.EngName
        //                                   })
        //                                   .OrderBy(c => c.Text)
        //                                   .ToList();
             
        //    return vm;
        //}

        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public IActionResult AddOrEdit_NIDT(National_IdTypeModel vm)
        //{
        //    // if (!InitializeUserLogging())
        //        // return RedirectToAction("LoginUserAcc", "UserLogin");

        //    var strDesc = "National ID Type";
        //    if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
        //    if (vm.oNational_IdType == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

        //    National_IdType _oChanges = vm.oNational_IdType;  // vmMod = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as UserProfileModel : vmMod; TempData.Keep();

        //    if (string.IsNullOrEmpty(_oChanges.IdTypeName))
        //        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "ID Type name is not specified" });

        //    // initial validations done!
        //    var strTag = _oChanges.IdTypeName;

        //    var arrData = "";
        //    arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
        //    var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<National_IdTypeModel>(arrData) : vm;

        //    var oNIDT = vmMod.oNational_IdType;
        //    // oNIDT.ChurchBody = vmMod.oChurchBody;

        //    try
        //    {
        //        ModelState.Remove("oNational_IdType.AppGlobalOwnerId");
        //        ModelState.Remove("oNational_IdType.ChurchBodyId");
        //        ModelState.Remove("oNational_IdType.OwnedByChurchBodyId");
        //        ModelState.Remove("oNational_IdType.CreatedByUserId");
        //        ModelState.Remove("oNational_IdType.LastModByUserId");

        //        //finally check error state...
        //        if (ModelState.IsValid == false)
        //            return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed to load the data to save. Please refresh and try again." });
                  
        //        //
        //        var tm = DateTime.Now;
        //        _oChanges.LastMod = tm;
        //        _oChanges.LastModByUserId = vm.oUserId_Logged;
        //        //_oChanges.Status = vm.blStatusActivated ? "A" : "D"; 

        //        //validate...
        //        var _userTask = "Attempted saving " + strDesc.ToLower() + ", " + strTag;  // _userTask = "Added new " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";   //  _userTask = "Updated " + strDesc.ToLower() + ", " + _oChanges.OwnerName.ToUpper() + " successfully";
        //        var _reset = _oChanges.Id == 0;


        //        //using (var _NIDTCtx = new ChurchModelContext(_context.Database.GetDbConnection().ConnectionString))
        //        //{
        //        if (_oChanges.Id == 0)
        //        {
        //            var existNIDT = _context.National_IdType.Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody)
        //                .Where(c => c.IdTypeName.ToLower() == _oChanges.IdTypeName.ToLower() && (c.SharingStatus == "A" || (c.SharingStatus == "C" && IsAncestor_ChurchBody(c.OwnedByChurchBody, c.ChurchBody)))).ToList();
        //            if (existNIDT.Count() > 0)
        //                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- [" + strTag + "] already exist." });

        //            _oChanges.Created = tm;
        //            _oChanges.CreatedByUserId = vm.oUserId_Logged;

        //            _context.Add(_oChanges);

        //            ViewBag.UserMsg = "Saved " + strDesc.ToLower() + " [" + strTag + "] successfully.";
        //            _userTask = "Added new " + strDesc.ToLower() + ", [" + strTag + "] successfully";
        //        }

        //        else

        //        {
        //            var existNIDT = _context.National_IdType.Include(t => t.ChurchBody).Include(t => t.OwnedByChurchBody).Where(c => c.Id != _oChanges.Id && c.IdTypeName.ToLower() == _oChanges.IdTypeName.ToLower() && (c.SharingStatus == "A" || (c.SharingStatus == "C" && IsAncestor_ChurchBody(c.OwnedByChurchBody, c.ChurchBody)))).ToList();
        //            if (existNIDT.Count() > 0)
        //                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = strDesc + " -- [" + strTag + "] already exist." });

        //            _context.Update(_oChanges);

        //            ViewBag.UserMsg = strDesc + " updated successfully.";
        //            _userTask = "Updated " + strDesc.ToLower() + ", [" + strTag + "] successfully";
        //        }

        //        //save denomination first... 
        //        _context.SaveChanges(); // await _NIDTCtx.SaveChangesAsync();

        //        //   DetachAllEntities(_NIDTCtx);
        //        //}


        //        var _tm = DateTime.Now;
        //        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, _oLoggedCB.Id, "N",
        //                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id)
        //                            );

        //        var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);
        //        TempData["oVmCurr"] = _vmMod; TempData.Keep();

        //        return Json(new { taskSuccess = true, oCurrId = _oChanges.Id, resetNew = _reset, userMess = ViewBag.UserMsg });
        //    }

        //    catch (Exception ex)
        //    {
        //        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed saving National ID Type details. Err: " + ex.Message });
        //    }

        //}

        //public IActionResult Delete_NIDT(int? oAppGloOwnId, int? oChurchBodyId, int? loggedUserId, int id, bool forceDeleteConfirm = false)
        //{
        //    // if (!InitializeUserLogging())
        //        // return RedirectToAction("LoginUserAcc", "UserLogin");

        //    // var strDesc = setIndex == 1 ? "System profile" : setIndex == 2 ? "Church admin profile" : "Church user profile";
        //    var strDesc = "National ID Type";
        //    var tm = DateTime.Now; var _tm = DateTime.Now; var _userTask = "Attempted saving  " + strDesc;
        //    //

        //    try
        //    {
        //        var strUserDenom = "RCMS Client";

        //        var oNIDT = _context.National_IdType  //.Include(c => c.Country)
        //            .Where(c => c.Id == id && c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oChurchBodyId).FirstOrDefault();// 
        //        if (oNIDT == null)
        //        {
        //            _userTask = "Attempted deleting " + strDesc.ToLower(); // + ", " + (strTag + ":- " + oNIDT.NIDTValue);  // var _userTask = "Attempted saving  " + strDesc;
        //            _tm = DateTime.Now;
        //            _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
        //                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
        //                                );

        //            return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = strDesc + " to delete could not be retrieved." });
        //        }

        //        var strTag = oNIDT.IdTypeName; // != null ? oNIDT.Country.EngName : "[Country]";
        //        var saveDelete = true;

        //        // ensuring cascade delete where there's none!

        //        //check NIDTCategory for this UP to delete 
        //        // UNTIL actual dependencies found...
        //        var tabs = new List<string>();   //_context.???.Where(c => c.HometownRegionId == oNIDT.Id).ToList();

        //        //using (var _userCtx = new MSTR_DbContext(_context.Database.GetDbConnection().ConnectionString))
        //        //{
        //        if (tabs.Count() > 0) // + UPGs.Count() + oUPRs.Count() //+oUser.ChurchMembers.Count )
        //        {
        //            if (forceDeleteConfirm == false)
        //            {
        //                var strConnTabs = "";  //User profile role, User profile group and 
        //                saveDelete = false;

        //                // check user privileges to determine... administrator rights
        //                //log...
        //                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [" + strTag + "]";
        //                _tm = DateTime.Now;
        //                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
        //                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
        //                                    );

        //                return Json(new
        //                {
        //                    taskSuccess = false,
        //                    tryForceDelete = false,
        //                    oCurrId = id,
        //                    userMess = "Specified " + strDesc.ToLower() +
        //                                    " to delete has been used elsewhere in the system [" + strConnTabs + "]. Delete cannot be done unless dependent-references are removed."
        //                });
        //            }

        //            //to be executed only for higher privileges... // FORCE-DELETE...
        //        }

        //        //successful...
        //        if (saveDelete)
        //        {
        //            _context.National_IdType.Remove(oNIDT);
        //            _context.SaveChanges();

        //            //   DetachAllEntities(_userCtx);

        //            //audit...
        //            _userTask = "Deleted " + strDesc.ToLower() + ", [" + strTag + "]";
        //            _tm = DateTime.Now;
        //            _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
        //                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
        //                                    );

        //            return Json(new { taskSuccess = true, tryForceDelete = false, oCurrId = oNIDT.Id, userMess = strDesc + " successfully deleted." });
        //        }

        //        //}


        //        _userTask = "Attempted deleting " + strDesc.ToLower() + ", [" + strTag + "] -- but FAILED. Data unavailable.";   // var _userTask = "Attempted saving " + strDesc;
        //        _tm = DateTime.Now;
        //        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
        //                                         "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
        //                                        );

        //        return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "No " + strDesc.ToLower() + " data available to delete. Try again" });
        //    }

        //    catch (Exception ex)
        //    {
        //        _userTask = "Attempted deleting " + strDesc.ToLower() + ", [ ID= " + id + "] FAILED. ERR: " + ex.Message;  // var _userTask = "Attempted saving " + strDesc;
        //        _tm = DateTime.Now;
        //        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
        //                                            "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
        //                                           );
        //        //
        //        return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Failed deleting " + strDesc.ToLower() + ". Err: " + ex.Message });
        //    }
        //}



        //INT

        //CTT

        //RLT


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddOrEdit_RLT(RelationshipTypeModel vm) //FormCollection f) // ChurchUnitModel vm)int? oAppGlobalId, 
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }

            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");
            var strDesc = "Relationship type";
            // var _userTask = "Attempted accessing/modifying " + strDesc.ToLower(); 

            // RelationshipType _oChanges = vm.oRelationshipType;
            if (vm == null) 
                return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again.", pageIndex = vm.pageIndex });

            if (vm.oAppGloOwnId_Logged == null) 
                return Json(new { taskSuccess = false, oCurrId = "", userMess = "Denomination for " + strDesc + " data unavailable. Please refresh and try again.", pageIndex = vm.pageIndex });

            try
            {
                // initialize
                // var oRelList = _context.RelationshipType.AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id).ToList();

                // clean database first...

                //using (var dbCon = new DataDb())
                //{
                //    dbCon.Database.ExecuteSqlCommand("TRUNCATE TABLE [TableName]");
                //}

                //warn!


                ////_context.Database.ExecuteSqlRaw("TRUNCATE TABLE [" + tabName + "]");
                //var lsRLT = _context.RelationshipType.Where(c => c.AppGlobalOwnerId == vm.oAppGloOwnId_Logged).ToList();
                //if (lsRLT.Count() > 0)
                //{
                //    _context.RelationshipType.RemoveRange(lsRLT);
                //    _context.SaveChanges();

                //    // RESEED... auto column Id to start from 1 again
                //    var tabName = "RelationshipType";
                //    _context.Database.ExecuteSqlRaw("DBCC CHECKIDENT('" + tabName + "', RESEED, 0)");
                //}

                // insert new... USE RelationIndex as the ID for ref tables instead... so update can be done anytime.
                var relationList = AppUtilties.GetGenericRelationTypes(new List<RelationshipType>()); //oRelList);
                var _relNewCount = 0; var _relUpdCount = 0; var _tm = DateTime.Now;
                foreach (var oRLT in relationList)
                {
                    var oRLTExist = _context.RelationshipType.Where(c => c.AppGlobalOwnerId == vm.oAppGloOwnId_Logged && c.RelationCode == oRLT.RelationCode).FirstOrDefault(); ///|| c.Name == oRLT.Name
                    if (oRLTExist == null)
                    {
                        _context.Add(new RelationshipType()
                        {
                            RelationCode = oRLT.RelationCode,
                            Name  = oRLT.Name,  //key
                            AppGlobalOwnerId  = vm.oAppGloOwnId_Logged,
                            ChurchBodyId = (int?)null, //this._oLoggedCB.Id,
                            OwnedByChurchBodyId  = (int?)null,  //this._oLoggedCB.Id,                            
                            LevelIndex  = oRLT.LevelIndex ,                            
                            RelationshipTypeMalePairCode  =  oRLT.RelationshipTypeMalePairCode,
                            RelationshipTypeFemalePairCode = oRLT.RelationshipTypeFemalePairCode,
                            RelationshipTypeGenericPairCode = oRLT.RelationshipTypeGenericPairCode,
                            IsChild = oRLT.IsChild,
                            IsParent = oRLT.IsParent,
                            IsSpouse = oRLT.IsSpouse,
                            Created = _tm, 
                            LastMod = _tm,
                            CreatedByUserId = vm.oUserId_Logged,
                            LastModByUserId = vm.oUserId_Logged
                        });
                         
                        _relNewCount++;
                    }
                    else
                    {
                        oRLTExist.RelationCode = oRLT.RelationCode;
                        oRLTExist.Name = oRLT.Name;  //key
                        oRLTExist.AppGlobalOwnerId = vm.oAppGloOwnId_Logged;
                        oRLTExist.ChurchBodyId = (int?)null; //this._oLoggedCB.Id;
                        oRLTExist.OwnedByChurchBodyId = (int?)null;  //this._oLoggedCB.Id;                            
                        oRLTExist.LevelIndex  = oRLT.LevelIndex;
                        oRLTExist.RelationshipTypeMalePairCode = oRLT.RelationshipTypeMalePairCode;
                        oRLTExist.RelationshipTypeFemalePairCode = oRLT.RelationshipTypeFemalePairCode;
                        oRLTExist.RelationshipTypeGenericPairCode = oRLT.RelationshipTypeGenericPairCode;
                        oRLTExist.IsChild = oRLT.IsChild;
                        oRLTExist.IsParent = oRLT.IsParent;
                        oRLTExist.IsSpouse = oRLT.IsSpouse; 
                        oRLTExist.Created = _tm; 
                        oRLTExist.LastMod = _tm;
                        oRLTExist.CreatedByUserId = vm.oUserId_Logged;
                        oRLTExist.LastModByUserId = vm.oUserId_Logged;

                        _context.RelationshipType.Update(oRLTExist);
                        _relUpdCount++;
                    }
                }


                if ((_relNewCount + _relUpdCount) > 0)
                {
                    _context.SaveChanges();
                    ///                    
                    //var _userTask = (_relNewCount > 0 ? "Added " + _relNewCount + ", ": "") + (_relUpdCount > 0 ? "Updated " + _relUpdCount + " ": "") + 
                    //    ((_relNewCount + _relUpdCount) == 0 ? "Saved changes to " : "") + strDesc.ToLower(); _tm = DateTime.Now;

                    var _userTask = (_relNewCount + _relUpdCount) > 0 ? strDesc  + "s (" + (_relNewCount + _relUpdCount) + ") reset to defaults successfully" : "No update available for " + strDesc.ToLower() ;                     
                    _tm = DateTime.Now;
                    ViewBag.UserMsg = _userTask;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "T",
                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oUserId_Logged, _tm, _tm, vm.oUserId_Logged, vm.oUserId_Logged));
                }

                //var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);
                //TempData["oVmCurr"] = _vmMod; TempData.Keep();
                
                return Json(new { taskSuccess = true, oCurrId = 0, resetNew = false, userMess = ViewBag.UserMsg, pageIndex = 1 });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = 0, userMess = "Failed saving church unit details. Err: " + ex.ToString(), pageIndex = 1 });
            }
        }
         

        //CU   ... 14
        [HttpGet]
        public IActionResult AddOrEdit_CU(int id = 0, int? oParentChurchUnitId = null, int? oAppGloOwnId = null, int? oChurchBodyId = null, int? oUserId = null, int setIndex = 14)
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return View("_ErrorPage");
                    }
                }

                // if (!InitializeUserLogging())
                // return RedirectToAction("LoginUserAcc", "UserLogin");

                if (oAppGloOwnId == null) oAppGloOwnId = this._oLoggedAGO.Id;
                if (oChurchBodyId == null) oChurchBodyId = this._oLoggedCB.Id;
                if (oUserId == null) oUserId = this._oLoggedUser.Id;

                var strDesc = "Church Unit";
                var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();  // _userTask = "Attempted creating new denomination (church)"; // _userTask = "Opened denomination (church)-" + oCFT_MDL.oChurchFaithType.FaithDescription;

                var oAGO = _context.AppGlobalOwner.Find(oAppGloOwnId);
                var oCB_OwnedBy = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchBodyId).FirstOrDefault();
                if (oAGO == null || oCB_OwnedBy == null)  // || oCU_Parent == null church units may be networked...
                {
                    
                    return PartialView("_ErrorPage");
                }  

                var oCUModel = new ChurchUnitModel();
                if (id == 0)
                {
                    //create user and init... 
                    oCUModel.oChurchUnit = new ChurchUnit();
                    oCUModel.oChurchUnit.AppGlobalOwnerId = oAppGloOwnId;
                    oCUModel.oAppGloOwnId = oAppGloOwnId;
                    oCUModel.oChurchBodyId = oChurchBodyId;
                    oCUModel.numChurchLevel_Index = _context.ChurchLevel.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId);  //use what's configured... not digit at AGO

                    oCUModel.oAppGlobalOwn = oAGO;
                    oCUModel.oChurchBody = oCB_OwnedBy; //parent church body of the UNIT
                    oCUModel.strRootChurchBodyCode = oCB_OwnedBy.RootChurchCode;
                    /// 
                    oCUModel.oChurchUnit.OwnedByChurchBodyId = oChurchBodyId; // this._oLoggedCB.Id;
                    oCUModel.strChurchBody = oCB_OwnedBy.Name; //this._oLoggedCB.Name; 
                    oCUModel.strCBLevel = oCB_OwnedBy.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB_OwnedBy.ChurchLevel.CustomName) ? oCB_OwnedBy.ChurchLevel.CustomName : oCB_OwnedBy.ChurchLevel.Name) : "";

                    //church unit code  
                    //if (!string.IsNullOrEmpty(oCUModel.oAppGlobalOwn.PrefixKey))
                    //{
                    //    var template = new { taskSuccess = String.Empty, strRes = String.Empty };
                    //var jsCode = GetNextCUCodeByAcronym_jsonString(oCUModel.oChurchBody.Acronym + (!string.IsNullOrEmpty(oCUModel.oChurchBody.Acronym) ? "/CU" : "CU"), oCUModel.oChurchUnit.AppGlobalOwnerId);  // string json1 = @"{'Name':'James'}";

                    //var strCodePRFX = oCUModel.oChurchBody.Acronym;
                    //if (string.IsNullOrEmpty(strCodePRFX)) strCodePRFX = oCB_OwnedBy.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB_OwnedBy.ChurchLevel.Acronym) ? oCB_OwnedBy.ChurchLevel.Acronym : "GBL") : "GBL";  // GL - Global
                    //strCodePRFX = strCodePRFX + "/CU"; // (!string.IsNullOrEmpty(strCodePRFX) ? "/CU" : "GL/CU");
                    //var jsCode = GetNextCUCodeByAcronym_jsonString(strCodePRFX, oCUModel.oChurchUnit.AppGlobalOwnerId, oCUModel.oChurchUnit.OwnedByChurchBodyId);  // string json1 = @"{'Name':'James'}";
                    //oCUModel.oChurchUnit.GlobalUnitCode = jsCode;

                    // oCUModel.oChurchUnit.RootChurchCode = strCBFullCode; 

                    // GetNextGlobalChurchCodeByAcronym_jsonString   // GetNextRootChurchCodeByParentCB_jsonString
                    // GetNextCUCodeByAcronym_jsonString..  // GetNextRootCUCodeByParentCU_jsonString
                    // }

                    var oCU_Parent = _context.ChurchUnit.AsNoTracking().Include(t => t.OwnedByChurchBody).Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oParentChurchUnitId).FirstOrDefault();
                    oCUModel.strParentChurchUnit = oCU_Parent != null ? oCU_Parent.Name : "None. (choose congregation)";
                    oCUModel.strParentUnitOrgTypeCode = oCU_Parent != null ? oCU_Parent.OrgType : "";
                    oCUModel.strParentUnitOrgType = oCU_Parent != null ? GetChuOrgTypeDesc(oCU_Parent.OrgType) : ""; 
                    oCUModel.oChurchUnit.ParentUnitId = oParentChurchUnitId; // oCU_Parent != null ? oCU_Parent.Id : (int?)null;
                    oCUModel.oChurchUnit.ParentUnitCBId = oCU_Parent != null ? (oCU_Parent.OwnedByChurchBody != null ? oCU_Parent.OwnedByChurchBody.Id : (int?)null) : (int?)null;
                    //oCUModel.strParentUnitCB = oCU_Parent != null ? (oCU_Parent.OwnedByChurchBody != null ? oCU_Parent.OwnedByChurchBody.Name : "") : "";
                    oCUModel.numParentUnitCLId = oCU_Parent != null ? (oCU_Parent.OwnedByChurchBody != null ? oCU_Parent.OwnedByChurchBody.ChurchLevelId : (int?)null) : (int?)null;
                    oCUModel.strParentUnitCB = "None. (choose congregation)";
                     

                    ///
                    oCUModel.oChurchUnit.TargetChurchLevelId = oCU_Parent != null ? oCU_Parent.TargetChurchLevelId : (int?)null;  //may not be diff tho... but same [ex. district] or lower [ex. congregation]
                    oCUModel.strCBLevel = "Unit Congregation";
                    oCUModel.oChurchUnit.OrgType = setIndex == 4 ? "GB" : "DP"; // oCU_Parent.OrgType;  //may not be diff tho...  lookup ... CR, CH, CN, GB [default], IB
                    oCUModel.strOrgType = GetChuOrgTypeDesc(oCUModel.oChurchUnit.OrgType);
                    oCUModel.oChurchUnit.Created = DateTime.Now;
                    oCUModel.oChurchUnit.LastMod = DateTime.Now;
                    oCUModel.oChurchUnit.IsFullAutonomy = true;

                    oCUModel.oChurchUnit.IsSupervisedByParentUnit = true;
                    oCUModel.strSupervisedByUnit = "None. (choose supervising unit)";  //!string.IsNullOrEmpty(oCUModel.strParentChurchUnit) ? oCUModel.strParentChurchUnit : "Choose Supervising Unit";
                    oCUModel.oChurchUnit.SupervisedByUnitId = oCUModel.oChurchUnit.ParentUnitId; // assuming... parent unit is supervising... [default] else [user can] change  
                    oCUModel.oChurchUnit.SupervisedByUnitCBId = oCUModel.oChurchUnit.ParentUnitCBId; // (int?)null; 
                    oCUModel.numSupervisedByUnitCLId = oCUModel.numParentUnitCLId;  // must be higher CL or same 
                    oCUModel.strSupervisedByUnitCB = "None. (choose unit congregation)";
                    //
                    // oCUModel.strSupervisedByUnitCB = "Supervising Unit Congregation";
                    // oCUModel.numSupervisedByUnitCBId = (int?)null; // must be higher CB


                    oCUModel.oChurchUnit.IsAgeBracketOverlaps = false;
                    oCUModel.oChurchUnit.IsUnitGen = false;
                    ///
                    oCUModel.strAppGlobalOwn = oCUModel.oAppGlobalOwn.OwnerName;
                    oCUModel.oChurchUnit.SharingStatus = "N";
                    //oCUModel.oChurchUnit.OwnedByChurchBodyId = this._oLoggedCB.Id;
                    oCUModel.oChurchUnit.ChurchWorkStatus = "OP";  // OPerationalized - OP, STructure only - ST  
                    oCUModel.oChurchUnit.Status = "A";
                   // oCUModel.bl_IsActivated = true;
                    //oCUModel.bl_IsUnitGen = false;
                    //oCUModel.bl_IsAgeBracketOverlaps = false;
                    ///
                    oCUModel.strOrgType = GetChuOrgTypeDesc(oCUModel.oChurchUnit.OrgType);
                    oCUModel.strStatus = GetStatusDesc(oCUModel.oChurchUnit.Status);
                    oCUModel.strOwnershipCode = "O";  // I -- Inherited, O -- Originated   i.e. currChurchUnit == OwnedByChurchUnit
                    oCUModel.strOwnershipStatus = GetAdhocStatusDesc(oCUModel.strOwnershipCode);
                    oCUModel.strChurchWorkStatus = GetAdhocStatusDesc(oCUModel.oChurchUnit.ChurchWorkStatus);
                    oCUModel.strSharingStatus = GetSharingStatusDesc(oCUModel.oChurchUnit.SharingStatus);

                    oCUModel.strChurchLevel_OwnedByCB = oCUModel.strCBLevel; // oCB_OwnedBy != null ? (oCB_OwnedBy.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB_OwnedBy.ChurchLevel.CustomName) ? oCB_OwnedBy.ChurchLevel.CustomName : oCB_OwnedBy.ChurchLevel.Name) : "") : "";
                    oCUModel.strOwnedByChurchBody = oCUModel.strChurchBody; // oCB_OwnedBy != null ? oCB_OwnedBy.Name : "";
                    ///
                    _userTask = "Attempted creating new " + strDesc.ToLower();

                }
                else
                {
                    var oCU_List_1 = _context.ChurchUnit.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.ContactInfo).Include(t => t.Country)
                            //.Where(c => c.Id == id && c.AppGlobalOwnerId == _oLoggedAGO.Id && // c.TargetChurchLevel.LevelIndex >= this._oLoggedCB.ChurchLevel.LevelIndex &&
                            //        ((setIndex == 4 && (c.OrgType == "GB" || c.OrgType == "IB")) ||
                            //         (setIndex == 14 && (c.OrgType == "DP" || c.OrgType == "CE" || c.OrgType == "CO" || c.OrgType == "CG" || c.OrgType == "SC"))))
                            //         .ToList(); // jux for structure

                                        .Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.Id == id &&
                                            (c.SharingStatus == "N" && c.OwnedByChurchBodyId == this._oLoggedCB.Id || c.SharingStatus != "N") &&
                                            (c.OrgType == "GB" || c.OrgType == "IB" || c.OrgType == "DP" || c.OrgType == "CE" || c.OrgType == "CO" || c.OrgType == "CG" || c.OrgType == "SC"))
                                        .ToList();

                    //oCU_List_1 = oCU_List_1.Where(c =>
                    //                   (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    oCUModel = (
                        from t_cu in oCU_List_1
                        from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == t_cu.AppGlobalOwnerId)
                        from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.OwnedByChurchBodyId)
                        from t_cl in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.TargetChurchLevelId)
                        from t_cu_p in _context.ChurchUnit.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.ParentUnitId).DefaultIfEmpty()
                        from t_cb_p in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.ParentUnitCBId).DefaultIfEmpty()
                        from t_ci in _context.ContactInfo.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.ChurchBodyId == t_cu.Id && c.Id == t_cu.ContactInfoId).DefaultIfEmpty()
                        from t_cl_p in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == (t_cu_p != null ? t_cu_p.TargetChurchLevelId : (int?)null)).DefaultIfEmpty()
                        from t_ci_ago in _context.ContactInfo.Include(t => t.Country).AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cl.AppGlobalOwnerId && c.ChurchBodyId == null && c.Id == t_ago.ContactInfoId).DefaultIfEmpty()
                        from t_cu_sp in _context.ChurchUnit.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.SupervisedByUnitId).DefaultIfEmpty()
                        from t_cb_sp in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_cu.AppGlobalOwnerId && c.Id == t_cu.SupervisedByUnitCBId).DefaultIfEmpty()

                            // from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_cu.OwnedByChurchBodyId).DefaultIfEmpty()

                        select new ChurchUnitModel()
                        {
                            oAppGloOwnId = t_cu.AppGlobalOwnerId,
                            oAppGlobalOwn = t_ago,
                            oChurchBody = t_cb, // t_cu.OwnedByChurchBody,
                            oChurchBodyId = t_cb != null ? t_cb.Id : (int?)null,
                            /// 
                            oChurchUnit = t_cu,
                            strChurchUnit = t_cu.Name,
                            strAppGlobalOwn = t_ago.OwnerName + (!string.IsNullOrEmpty(t_ago.OwnerName) ? (t_ci_ago != null ? (t_ci_ago.Country != null ? t_ci_ago.Country.EngName : "") : "") : ""),
                            //                            
                            strParentChurchUnit = t_cu_p != null ? t_cu_p.Name : "None. (choose congregation)",
                            strParentUnitOrgTypeCode = t_cu_p != null ? t_cu_p.OrgType : "",
                            strParentUnitOrgType = t_cu_p != null ? GetChuOrgTypeDesc(t_cu_p.OrgType) : "",
                            strParentUnitCB = t_cb_p != null ? t_cb_p.Name : "None. (choose congregation)",
                            // numParentUnitCBId = t_cu_p != null ? (t_cu_p.OwnedByChurchBody != null ? t_cu_p.OwnedByChurchBody.Id : (int?)null) : (int?)null, 
                            numParentUnitCLId = t_cb_p != null ? t_cb_p.ChurchLevelId : (int?)null,
                            strCBLevel_par = t_cb_p != null ? (t_cb_p.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_p.ChurchLevel.CustomName) ? t_cb_p.ChurchLevel.CustomName : t_cb_p.ChurchLevel.Name) : "") : "",

                            ///
                            strChurchBody = t_cb != null ? t_cb.Name : "",
                            strRootChurchBodyCode = t_cb != null ? t_cb.RootChurchCode : "",
                            strCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                            //strCBLevel_sup = t_cb_sp != null ? (t_cb_sp.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_sp.ChurchLevel.CustomName) ? t_cb_sp.ChurchLevel.CustomName : t_cb_sp.ChurchLevel.Name) : "") : "",
                            ///
                            strSupervisedByUnit = t_cu_sp != null ? t_cu_sp.Name : "None. (choose supervising unit)",
                            strSupervisedByUnitOrgTypeCode = t_cu_sp != null ? t_cu_sp.OrgType : "",
                            strSupervisedByUnitOrgType = t_cu_sp != null ? GetChuOrgTypeDesc(t_cu_sp.OrgType) : "",
                            strSupervisedByUnitCB = t_cb_sp != null ? t_cb_sp.Name : "None. (choose unit congregation)",
                            numSupervisedByUnitCLId = t_cb_sp != null ? t_cb_sp.ChurchLevelId : (int?)null,
                            strCBLevel_sup = t_cb_sp != null ? (t_cb_sp.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_sp.ChurchLevel.CustomName) ? t_cb_sp.ChurchLevel.CustomName : t_cb_sp.ChurchLevel.Name) : "") : "",
                             ///
                            numChurchLevel_Index = t_cl.LevelIndex,
                            strTargetChurchLevel = (t_cu.TargetChurchLevelId == null && t_cu.OrgType == "CR") ? "Church Root" : (!string.IsNullOrEmpty(t_cl.CustomName) ? t_cl.CustomName : t_cl.Name),
                            strDateFormed = t_cu.DateFormed != null ? DateTime.Parse(t_cu.DateFormed.ToString()).ToString("d MMM, yyyy", CultureInfo.InvariantCulture) : "",
                            strDateInnaug = t_cu.DateInnaug != null ? DateTime.Parse(t_cu.DateInnaug.ToString()).ToString("d MMM, yyyy", CultureInfo.InvariantCulture) : "",
                            strDateDeactive = t_cu.DateDeactive != null ? DateTime.Parse(t_cu.DateDeactive.ToString()).ToString("d MMM, yyyy", CultureInfo.InvariantCulture) : "",
                            strOrgType = GetChuOrgTypeDesc(t_cu.OrgType),
                            strGenderStatus = GetGenderDesc(t_cu.GenderStatus),

                            //strFaithTypeCategory = t_ago.strFaithTypeCategory, // t_ago != null ? ((!string.IsNullOrEmpty(t_ago.strFaithTypeCategory) && !string.IsNullOrEmpty(t_ago.strFaithTypeStream) ? t_ago.strFaithTypeCategory + ", " + t_ago.strFaithTypeStream : t_ago.strFaithTypeCategory + t_ago.strFaithTypeStream).Trim()) : "",
                            //strCountry = t_cu.Country != null ? (!string.IsNullOrEmpty(t_cu.Country.EngName) ? t_cu.Country.EngName : t_cu.Country.CtryAlpha3Code) : t_cu.CtryAlpha3Code,  //t_cu.Country != null ? t_cu.Country.EngName : "",
                            //strCountryRegion = t_cu.CountryRegion != null ? t_cu.CountryRegion.Name : "",
                            strParentUnit_HeaderDesc = t_cl_p != null ? (!string.IsNullOrEmpty(t_cl_p.CustomName) ? t_cl_p.CustomName : "Parent Unit") : "Parent Unit",
                            strCongLoc = t_ci != null ? (!string.IsNullOrEmpty(t_ci.Location) && !string.IsNullOrEmpty(t_ci.City) ? t_ci.Location + ", " + t_ci.City : t_ci.Location + t_ci.City).Trim() : "",
                            // strCongLoc2 = (t_cu.CountryRegion != null && t_cu.Country != null ? t_cu.CountryRegion.Name + ", " + t_cu.Country.EngName : (t_cu.CountryRegion != null ? t_cu.CountryRegion.Name : "") + (t_cu.Country != null ? t_cu.Country.EngName : "")).Trim(),
                           // bl_IsActivated = t_cu.Status == "A",
                            //bl_IsUnitGen = t_cu.IsUnitGen != null ? (bool)t_cu.IsUnitGen : false,
                            //bl_IsAgeBracketOverlaps = t_cu.IsAgeBracketOverlaps != null ? (bool)t_cu.IsAgeBracketOverlaps : false,
                            //
                            dtCreated = t_cu.Created,
                            //     
                            strStatus = GetStatusDesc(t_cu.Status),
                            strOwnershipCode = t_cu.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", //t_cb.Id == t_cu.OwnedByChurchBodyId ? "O" : "I",
                            strOwnershipStatus = GetAdhocStatusDesc(t_cu.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                            strChurchWorkStatus = GetAdhocStatusDesc(t_cu.ChurchWorkStatus),
                            strSharingStatus = GetSharingStatusDesc(t_cu.SharingStatus),

                            strChurchLevel_OwnedByCB = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",
                            strOwnedByChurchBody = t_cb != null ? t_cb.Name : "",
                            strUnitLogo = t_cu.UnitLogo

                        })
                        //.OrderByDescending(c => c.dtCreated) //.OrderBy(c => c.strCountry).OrderBy(c => c.numCLIndex).OrderBy(c => c.strChurchUnit)
                        .FirstOrDefault();

                    var chkValidModel = oCUModel != null;
                    chkValidModel = chkValidModel ? oCUModel.oChurchUnit != null : chkValidModel;
                    if (!chkValidModel)
                    {  //page not found error
                        
                        return View("_ErrorPage");
                    }
                } 


                //// load the cb tree ... can be congregation tho  ... up to 10 levels...
                //oCUModel.oCBLevelCount = oCUModel.numChurchLevel_Index; // - 1;        // oCULevelCount -= 2;  // less requesting CB
                //List<ChurchLevel> oCBLevelList = _context.ChurchLevel
                //    .Where(c => c.AppGlobalOwnerId == oCUModel.oChurchBody.AppGlobalOwnerId && c.LevelIndex > 0 && c.LevelIndex <= oCUModel.numChurchLevel_Index)
                //    .ToList().OrderBy(c => c.LevelIndex).ToList();

                //if (oCUModel.oCBLevelCount > 0 && oCBLevelList.Count > 0)
                //{
                //    oCUModel.strChurchLevel_1 = !string.IsNullOrEmpty(oCBLevelList[0].CustomName) ? oCBLevelList[0].CustomName : oCBLevelList[0].Name;
                //    ViewBag.strChurchLevel_1 = oCUModel.strChurchLevel_1;
                //    ///
                //    var oCU_1 = _context.ChurchBody.Include(t => t.ChurchLevel)
                //                      .Where(c => c.AppGlobalOwnerId == oCUModel.oChurchBody.AppGlobalOwnerId && // c.Status == "A" && 
                //                            c.ChurchLevel.LevelIndex == 1 && c.OrgType == "CR") //c.TargetChurchLevelId == oCBLevelList[0].Id &&
                //                      .FirstOrDefault();

                //    if (oCU_1 != null)
                //    { oCUModel.ChurchBodyId_1 = oCU_1.Id; oCUModel.strChurchBody_1 = oCU_1.Name + " [Church Root]"; }

                //    ViewBag.ChurchBodyId_1 = oCUModel.ChurchBodyId_1;
                //    ViewBag.strChurchBody_1 = oCUModel.strChurchBody_1;

                //    ///
                //    if (oCUModel.oCBLevelCount > 1)
                //    {
                //        oCUModel.strChurchLevel_2 = !string.IsNullOrEmpty(oCBLevelList[1].CustomName) ? oCBLevelList[1].CustomName : oCBLevelList[1].Name;
                //        ViewBag.strChurchLevel_2 = oCUModel.strChurchLevel_2;
                //        ///
                //        var lsCB_2 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCUModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[1].Id).ToList();
                //        var oCU_2 = lsCB_2.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCUModel.oChurchBody.RootChurchCode, c.Id, oCUModel.oChurchBody.ParentChurchBodyId)).ToList();
                //        if (oCU_2.Count() != 0)
                //        { oCUModel.ChurchBodyId_2 = oCU_2[0].Id; oCUModel.strChurchBody_2 = oCU_2[0].Name; }
                //        ViewBag.ChurchBodyId_2 = oCUModel.ChurchBodyId_2; ViewBag.strChurchBody_2 = oCUModel.strChurchBody_2;

                //        if (oCUModel.oCBLevelCount > 2)
                //        {
                //            oCUModel.strChurchLevel_3 = !string.IsNullOrEmpty(oCBLevelList[2].CustomName) ? oCBLevelList[2].CustomName : oCBLevelList[2].Name;
                //            ViewBag.strChurchLevel_3 = oCUModel.strChurchLevel_3;

                //            var lsCB_3 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCUModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[2].Id).ToList();
                //            var oCU_3 = lsCB_3.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCUModel.oChurchBody.RootChurchCode, c.Id, oCUModel.oChurchBody.ParentChurchBodyId)).ToList();
                //            if (oCU_3.Count() != 0)
                //            { oCUModel.ChurchBodyId_3 = oCU_3[0].Id; oCUModel.strChurchBody_3 = oCU_3[0].Name; }
                //            ViewBag.ChurchBodyId_3 = oCUModel.ChurchBodyId_3; ViewBag.strChurchBody_3 = oCUModel.strChurchBody_3;


                //            if (oCUModel.oCBLevelCount > 3)
                //            {
                //                oCUModel.strChurchLevel_4 = !string.IsNullOrEmpty(oCBLevelList[3].CustomName) ? oCBLevelList[3].CustomName : oCBLevelList[3].Name;
                //                ViewBag.strChurchLevel_4 = oCUModel.strChurchLevel_4;

                //                var lsCB_4 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCUModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[3].Id).ToList();
                //                var oCU_4 = lsCB_4.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCUModel.oChurchBody.RootChurchCode, c.Id, oCUModel.oChurchBody.ParentChurchBodyId)).ToList();
                //                if (oCU_4.Count() != 0)
                //                { oCUModel.ChurchBodyId_4 = oCU_4[0].Id; oCUModel.strChurchBody_4 = oCU_4[0].Name; }
                //                ViewBag.ChurchBodyId_4 = oCUModel.ChurchBodyId_4; ViewBag.strChurchBody_4 = oCUModel.strChurchBody_4;


                //                if (oCUModel.oCBLevelCount > 4)
                //                {
                //                    oCUModel.strChurchLevel_5 = !string.IsNullOrEmpty(oCBLevelList[4].CustomName) ? oCBLevelList[4].CustomName : oCBLevelList[4].Name;
                //                    ViewBag.strChurchLevel_5 = oCUModel.strChurchLevel_4;

                //                    var lsCB_5 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCUModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[4].Id).ToList();
                //                    var oCU_5 = lsCB_5.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCUModel.oChurchBody.RootChurchCode, c.Id, oCUModel.oChurchBody.ParentChurchBodyId)).ToList();
                //                    if (oCU_5.Count() != 0)
                //                    { oCUModel.ChurchBodyId_5 = oCU_5[0].Id; oCUModel.strChurchBody_5 = oCU_5[0].Name; }
                //                    ViewBag.ChurchBodyId_5 = oCUModel.ChurchBodyId_5; ViewBag.strChurchBody_5 = oCUModel.strChurchBody_5;
                //                }
                //            }
                //        }
                //    }
                //}

                 

                _userTask = "Opened " + strDesc.ToLower() + ", " + oCUModel.oAppGlobalOwn.OwnerName;

                oCUModel.setIndex = setIndex;
               // oCUModel.subSetIndex = subSetIndex; 

                oCUModel.oUserId_Logged = this._oLoggedUser.Id;
                oCUModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                oCUModel.oChurchBodyId_Logged = this._oLoggedCB.Id;

                /// load lookups
                oCUModel = this.popLookups_CU(oCUModel, oCUModel.oChurchUnit);

                var tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "T",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                var _oCUModel = Newtonsoft.Json.JsonConvert.SerializeObject(oCUModel);
                TempData["oVmCurrMod"] = _oCUModel; TempData.Keep();

                return PartialView("_AddOrEdit_CU", oCUModel);

            }

            catch (Exception ex)
            {
                //page not found error
                
                return View("_ErrorPage");
            }
        }

        public ChurchUnitModel popLookups_CU(ChurchUnitModel vm, ChurchUnit oCurrChurchUnit)
        {
            if (vm == null || oCurrChurchUnit == null) return vm;
            //
            vm.lkpStatuses = new List<SelectListItem>();
            foreach (var dl in dlGenStatuses) 
            { if (dl.Val=="A" || dl.Val=="B" || dl.Val=="D") vm.lkpStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpSharingStatuses = new List<SelectListItem>();
            foreach (var dl in dlShareStatus) { vm.lkpSharingStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpGenderStatuses = new List<SelectListItem>();
            foreach (var dl in dlGenderStatuses) { vm.lkpGenderStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpChurchWorkStatuses = new List<SelectListItem>();
            foreach (var dl in dlChuWorkStats) { vm.lkpChurchWorkStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpOrgTypes = new List<SelectListItem>();
            foreach (var dl in dlCBDivOrgTypes)
            { //  dl.Val=="CR" || dl.Val == "CH" || dl.Val == "CN"  -- controlled by vendor, partially modified by client
                if ((vm.setIndex == 4 && (dl.Val == "GB" || dl.Val == "IB")) || (vm.setIndex == 14 && (dl.Val == "CO" || dl.Val == "DP" || dl.Val == "CE" || dl.Val == "CG" || dl.Val == "SC")))   //  // CP, TM
                    vm.lkpOrgTypes.Add(new SelectListItem
                    {
                        Value = dl.Val,
                        Text = dl.Desc,
                        // Disabled = (dl.Val == "CH" || dl.Val == "CN") 
                    });
            }

            vm.lkpOrgTypesAllUnits = new List<SelectListItem>();
            foreach (var dl in dlCBDivOrgTypes)
            { //  dl.Val=="CR" || dl.Val == "CH" || dl.Val == "CN"  -- controlled by vendor, partially modified by client
                if (dl.Val != "CR" && dl.Val != "CH" && dl.Val != "CN" && dl.Val != "CP" && dl.Val != "TM") // ((vm.setIndex == 4 && (dl.Val == "GB" || dl.Val == "IB")) || (vm.setIndex == 14 && (dl.Val == "CO" || dl.Val == "DP" || dl.Val == "CE" || dl.Val == "CG" || dl.Val == "SC")))   //  // CP, TM
                    vm.lkpOrgTypesAllUnits.Add(new SelectListItem
                    {
                        Value = dl.Val,
                        Text = dl.Desc,
                        // Disabled = (dl.Val == "CH" || dl.Val == "CN") 
                    });
            }

            //var oCL = _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == oCurrChurchUnit.AppGlobalOwnerId && c.Id == oCurrChurchUnit.TargetChurchLevelId).FirstOrDefault();
            //var numCLIndex = oCL != null ? oCL.LevelIndex : (int?)null;


            //var currUnitLevelIndex = this._oLoggedCB?.ChurchLevel.LevelIndex;  //district (3)
            var oCL_List = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == oCurrChurchUnit.AppGlobalOwnerId).ToList();
            vm.lkpChurchLevels = oCL_List  //.Where(c => c.LevelIndex >= (int)currUnitLevelIndex)
                                          .OrderByDescending(c => c.LevelIndex)
                                          .Select(c => new SelectListItem()
                                          {
                                              Value = c.Id.ToString(),
                                              Text = !string.IsNullOrEmpty(c.CustomName) ? c.CustomName : c.Name,
                                              // Disabled = c.LevelIndex < (int)currUnitLevelIndex  // presbytery (2) < district (3)  < congregation (4)
                                              //Disabled = (numCLIndex == (int?)null || c.LevelIndex < numCLIndex || oCurrChurchRole.OrgType == "CH" || oCurrChurchRole.OrgType == "CN")
                                          })
                                          .ToList();


            var oCBLevel = this._oLoggedCB.ChurchLevel;
            if (oCBLevel == null) oCBLevel = _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedCB.AppGlobalOwnerId && c.Id == this._oLoggedCB.ChurchLevelId).FirstOrDefault();            
            var currUnitLevelIndex = oCBLevel != null ? oCBLevel.LevelIndex : 0;  //this._oLoggedCB?.ChurchLevel?.LevelIndex;  // district (3) <= Congregation (4)
             
            vm.lkpChurchLevels_CU = oCL_List //.Where(c => c.LevelIndex >= (int)currUnitLevelIndex)
                                          .OrderByDescending(c => c.LevelIndex)
                                          .Select(c => new SelectListItem()
                                          {
                                              Value = c.Id.ToString(),
                                              Text = !string.IsNullOrEmpty(c.CustomName) ? c.CustomName : c.Name,
                                              Disabled = c.LevelIndex < (int)currUnitLevelIndex  // presbytery (2) < district (3)  < congregation (4)
                                              //Disabled = (numCLIndex == (int?)null || c.LevelIndex < numCLIndex || oCurrChurchRole.OrgType == "CH" || oCurrChurchRole.OrgType == "CN")
                                          })
                                          .ToList();


            //vm.lkpChurchLevels = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == oCurrChurchUnit.AppGlobalOwnerId)
            //                              .OrderByDescending(c => c.LevelIndex)
            //                              .Select(c => new SelectListItem()
            //                              {
            //                                  Value = c.Id.ToString(),
            //                                  Text = !string.IsNullOrEmpty(c.CustomName) ? c.CustomName : c.Name,
            //                                  Disabled = c.LevelIndex < (int)currUnitLevelIndex  
            //                                  // Disabled = (numCLIndex == (int?)null || c.LevelIndex < numCLIndex || oCurrChurchUnit.OrgType == "CH" || oCurrChurchUnit.OrgType == "CN")
            //                              })
            //                              .ToList();


            //vm.lkpCountries = _context.ChurchUnit.ToList()  //.Where(c => c.Display == true)
            //                              .Select(c => new SelectListItem()
            //                              {
            //                                  Value = c.CtryAlpha3Code, // .ToString(),
            //                                  Text = c.EngName
            //                              })
            //                              .OrderBy(c => c.Text)
            //                              .ToList();


            //vm.lkpParentChurchBodies = _context.ChurchBody  //.Include(t => t.ChurchLevel)
            //            .Where(c => c.AppGlobalOwnerId == oCurrChurchUnit.AppGlobalOwnerId && // c.ParentBodyChurchBodyId == oCurrChurchBody.ParentBodyChurchBodyId &&
            //                       (c.OrgType == "CH" || c.OrgType == "CN") && c.Status == "A")  // c.OrgType != "CR"
            //                .OrderBy(c => c.Name)
            //                .ToList()
            //            .Select(c => new SelectListItem()
            //            {
            //                Value = c.Id.ToString(),
            //                Text = c.Name
            //            })
            //            // .OrderBy(c => c.Text)
            //            .ToList();


            //vm.lkpParentChurchUnits = _context.ChurchUnit  //.Include(t => t.ChurchLevel)  
            //            .Where(c => c.AppGlobalOwnerId == oCurrChurchUnit.AppGlobalOwnerId && c.OwnedByChurchBodyId == vm.numParentUnitCBId &&
            //                        c.ParentUnitOrgType == oCurrChurchUnit.ParentUnitOrgType && // c.OwnedByChurchBody.ChurchLevelId == vm.numParentUnitCLId &&                                 
            //                       (c.OrgType == "GB" || c.OrgType == "IB" || c.OrgType == "CO" || c.OrgType == "DP" || c.OrgType == "CE" || c.OrgType == "CG" || c.OrgType == "SC") &&
            //                        c.Status == "A")  // c.OrgType != "CR", "CH", "CN"
            //                .OrderBy(c => c.Name)
            //                .ToList()
            //            .Select(c => new SelectListItem()
            //            {
            //                Value = c.Id.ToString(),
            //                Text = c.Name
            //            })
            //            // .OrderBy(c => c.Text)
            //            .ToList();


            return vm;
        }

        public JsonResult GetNextUnitCodePrefixByAcronym(string strAcronym)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }
            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, strCode = "" });

            var tempCode = strAcronym.ToUpper(); // + tempCnt; //+ string.Format("{0:N0}", tempCnt);
            var fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
            if (fsCount == 0) return Json(new { taskSuccess = true, strCode = tempCode });
            else
            {
                var tempCnt = 1; tempCode = strAcronym.ToUpper() + tempCnt; //+ string.Format("{0:N0}", tempCnt);
                fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
                var res = false;
                while (fsCount > 0 && fsCount < 10)
                {
                    tempCnt++; tempCode = strAcronym.ToUpper() + tempCnt; //+ string.Format("{0:N0}", tempCnt);
                    fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
                    //
                    res = fsCount == 0;
                }

                return Json(new { taskSuccess = res, strCode = tempCode });
            }
        }
        public string GetNextUnitCodePrefixByAcronym_jsonString(string strAcronym)
        {
            // if (_context == null)
                // if (!InitializeUserLogging()) return string.Empty;

            var tempCode = strAcronym.ToUpper(); // + tempCnt; // string.Format("{0:N0}", tempCnt);
            var fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
            if (fsCount == 0) return tempCode; // @"{'taskSuccess' : " + true + ", strRes :'" + tempCode + "'}";
            else
            {
                var tempCnt = 1; tempCode = strAcronym.ToUpper() + tempCnt; // + string.Format("{0:N0}", tempCnt);
                fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
                var res = false;
                while (fsCount > 0 && fsCount < 10)
                {
                    tempCnt++; tempCode = strAcronym.ToUpper() + tempCnt; //+ string.Format("{0:N0}", tempCnt);
                    fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
                    //
                    res = fsCount == 0;
                }

                return tempCode;  // @"{'taskSuccess' : " + res + ", strRes :'" + tempCode + "'}";
            }
        }
        public JsonResult GetNextCUCodeByAcronym(string prefixCode, int? oAppGloOwnId, int? oChurchBodyId)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, strCode = string.Empty });

            // Church Unit parent can be NULL -- that's network within the CB  //&& c.OrgType != "CR"
            var fsCount = _context.ChurchUnit.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId);
            var tempCnt = fsCount + 1; var tempCode = prefixCode.ToUpper() + string.Format("{0:D3}", tempCnt);
            fsCount = _context.ChurchUnit.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.GlobalUnitCode == tempCode);
            if (fsCount == 0) return Json(new { taskSuccess = true, strCode = tempCode });
            else
            {
                tempCnt++; tempCode = prefixCode.ToUpper() + string.Format("{0:D3}", tempCnt);
                fsCount = _context.ChurchUnit.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.GlobalUnitCode == tempCode);
                var res = false;
                while (fsCount > 0 && fsCount < 10)
                {
                    tempCnt++; tempCode = prefixCode.ToUpper() + string.Format("{0:D3}", tempCnt);
                    fsCount = _context.ChurchUnit.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.GlobalUnitCode == tempCode);
                    //
                    res = fsCount == 0;
                }

                return Json(new { taskSuccess = res, strCode = tempCode });
            }
        }

        public string GetNextCUCodeByAcronym_jsonString(string prefixCode, int? oAppGloOwnId, int? oChurchBodyId)
        {
            // if (_context == null)
                // if (!InitializeUserLogging()) return string.Empty;

            var fsCount = _context.ChurchUnit.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId);//&& c.OrgType != "CR"
            var tempCnt = fsCount + 1; var tempCode = prefixCode.ToUpper() + string.Format("{0:D3}", tempCnt);
            fsCount = _context.ChurchUnit.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.GlobalUnitCode == tempCode);
            if (fsCount == 0) return tempCode; // @"{'taskSuccess' : " + true + ", strRes :'" + tempCode + "'}"; 
            else
            {
                tempCnt++; tempCode = prefixCode.ToUpper() + string.Format("{0:D3}", tempCnt);
                fsCount = _context.ChurchUnit.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.GlobalUnitCode == tempCode);
                var res = false;
                while (fsCount > 0 && fsCount < 10)
                {
                    tempCnt++; tempCode = prefixCode.ToUpper() + string.Format("{0:D3}", tempCnt);
                    fsCount = _context.ChurchUnit.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.GlobalUnitCode == tempCode);
                    //
                    res = fsCount == 0;
                }

                return tempCode; // @"{'taskSuccess' : " + res + ", strRes :'" + tempCode + "'}";
            }
        }
        public JsonResult GetNextRootCUCodeByParentCU(string prefixCode, int? oAppGloOwnId, int? oChurchBodyId, int? oParChurchUnitId, string strUnitCode = "")
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            //get the church code
            //get the church code
            if (string.IsNullOrEmpty(strUnitCode))
            {
                var template = new { taskSuccess = String.Empty, strRes = String.Empty };   // var definition = new { Name = "" };
                var jsCBUnitCode = GetNextCUCodeByAcronym_jsonString(prefixCode, oAppGloOwnId, oChurchBodyId);  // string json1 = @"{'Name':'James'}";
                var jsOut = JsonConvert.DeserializeAnonymousType(jsCBUnitCode, template);

                if (jsOut != null)
                    if (bool.Parse(jsOut.taskSuccess) == true)
                        strUnitCode = jsOut.strRes;
            }


            // if (_context == null)
                // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, strCode = string.Empty });

            var oParCU = _context.ChurchUnit.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.Id == oParChurchUnitId && c.Status == "A").FirstOrDefault();
            if (oParCU != null && !string.IsNullOrEmpty(strUnitCode))
            {
                var strRootCode = oParCU.RootUnitCode + (!string.IsNullOrEmpty(oParCU.RootUnitCode) ? "--" + strUnitCode : strUnitCode);
                return Json(new { taskSuccess = true, strCode = strRootCode }); 

                //if (!string.IsNullOrEmpty(oParCU.RootUnitCode))
                //    strUnitCode = oParCU.RootUnitCode + "--" + strUnitCode; // return Json(new { taskSuccess = true, strCode = oParCU.RootUnitCode + "--" + strUnitCode });
            }

            return Json(new { taskSuccess = true, strCode = strUnitCode });
        }

        public string GetNextRootCUCodeByParentCU_jsonString(string prefixCode, int? oAppGloOwnId, int? oParChurchUnitId, int? oChurchBodyId, string strUnitCode = "")
        {
            //get the church code
            if (string.IsNullOrEmpty(strUnitCode))
                strUnitCode = GetNextCUCodeByAcronym_jsonString(prefixCode, oAppGloOwnId, oChurchBodyId);

            // if (_context == null)
                // if (!InitializeUserLogging()) return string.Empty;

            var oParCU = _context.ChurchUnit.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.Id == oParChurchUnitId && c.Status == "A").FirstOrDefault();
            if (oParCU != null && !string.IsNullOrEmpty(strUnitCode))
            {
                var strRootCode = oParCU.RootUnitCode + (!string.IsNullOrEmpty(oParCU.RootUnitCode) ? "--" + strUnitCode : strUnitCode);
                return strRootCode;

                //if (!string.IsNullOrEmpty(oParCU.RootUnitCode))
                //    strUnitCode = oParCU.RootUnitCode + "--" + strUnitCode; // @"{'taskSuccess' : " + true + ", strRes :'" + oParCB.RootUnitCode + "--" + strCBUnitCode + "'}"; 
            }

            return strUnitCode; // string.Empty; // @"{'taskSuccess' : " + false + ", strRes :''}";
        }
        public string GetParentUnitId_NameByRootCode(string strRootCode, int? oParentUnitCLId, int? oAGOId)
        {
            // if (_context == null)
                // if (!InitializeUserLogging()) return string.Empty;

            if (string.IsNullOrEmpty(strRootCode)) return string.Empty;

            string[] arr = new string[] { strRootCode };
            if (strRootCode.Contains("--")) arr = strRootCode.Split("--");  // else it should be the ROOT... and would not get this far

            if (arr.Length > 0)
            {
                // get the list of CBs...
                var oCBList = _context.ChurchUnit.AsNoTracking() //.Include(t=>t.ChurchLevel)
                    .Where(c => c.AppGlobalOwnerId == oAGOId && c.Status == "A" && c.TargetChurchLevelId == oParentUnitCLId).ToList();
                var oCBPar = oCBList.Where(c => arr.Contains(c.GlobalUnitCode)).FirstOrDefault();

                if (oCBPar != null) return oCBPar.Id + "--" + oCBPar.Name;
            }

            // not found... unless err
            return string.Empty;
        }
        public JsonResult GetParentUnitId_NameByRootCode_json(string strRootCode, int? oParentUnitCLId, int? oAGOId)
        {  // c.TargetChurchLevelId == oParentUnitCLId && (currUnitId == null || (currUnitId != null && c.Id != currUnitId))
            var strParentUnit = GetParentUnitId_NameByRootCode(strRootCode, oParentUnitCLId, oAGOId);
            return Json(new { taskSuccess = !string.IsNullOrEmpty(strParentUnit), strIdName = strParentUnit });
        }
         
        public JsonResult GetChurchUnitListByRootCode(string strRootCode, int? oAGOId, int? oParUnitCLId, string strOrgTypeCode, bool addEmpty = false)
        {

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAGOId != null ? oAGOId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            var oCUList = new List<SelectListItem>();
            // if (_context == null)
                // if (!InitializeUserLogging()) return Json(oCUList);
            ///
            var strParentUnit = GetParentUnitId_NameByRootCode(strRootCode, oParUnitCLId, oAGOId);
            string[] arr = new string[] { strParentUnit };
            if (strParentUnit.Contains("--")) arr = strParentUnit.Split("--");
            int? oParCBId = arr.Length > 0 ? int.Parse(arr[0]) : (int?)null;
            ///   
            oCUList = _context.ChurchUnit  //.Include(t => t.ChurchLev&&el)
                .Where(c => c.AppGlobalOwnerId == oAGOId && c.OwnedByChurchBodyId == oParCBId && c.OrgType == strOrgTypeCode && c.Status == "A")
                .OrderBy(c => c.Name)
                .ToList()
            .Select(c => new SelectListItem()
            {
                Value = c.Id.ToString(),
                Text = c.Name
            })
            .OrderBy(c => c.Text)
            .ToList();

            if (addEmpty) oCUList.Insert(0, new SelectListItem { Value = "", Text = "Select..." });
            return Json(oCUList);
        }

        public JsonResult GetChurchUnitListByParentCB(int? oAGOId, int? oUnitCBId, string strOrgTypeCode, bool addEmpty = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAGOId != null ? oAGOId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            var oCUList = new List<SelectListItem>();
            // if (_context == null)
                // if (!InitializeUserLogging()) return Json(oCUList);
            ///// 
            //oCUList = _context.ChurchUnit  //.Include(t => t.ChurchLev&&el)
            //    .Where(c => c.AppGlobalOwnerId == oAGOId && c.OwnedByChurchBodyId == oUnitCBId && c.OrgType == strOrgTypeCode && c.Status == "A")
            //    .OrderBy(c => c.Name)
            //    .ToList()
            //.Select(c => new SelectListItem()
            //{
            //    Value = c.Id.ToString(),
            //    Text = c.Name
            //})
            //.OrderBy(c => c.Text)
            //.ToList();


            var oCU_List_1 = _context.ChurchUnit.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel) //.Include(t => t.AppGlobalOwner) //
                               .Where(c => c.AppGlobalOwnerId == oAGOId && c.OwnedByChurchBodyId == oUnitCBId && c.OrgType == strOrgTypeCode && c.Status == "A").ToList();  //  && c.Status == "A"  // (c.OrgType != "CP") // || c.OrgType=="SC"

            oCUList = oCU_List_1.Where(c =>
                               (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList()
                               //.OrderByDescending(c => c.Name).ToList()

                              .Select(c => new SelectListItem()
                              {
                                  Value = c.Id.ToString(),
                                  Text = c.Name
                              })
            .OrderBy(c => c.Text)
            .ToList();


            if (addEmpty) oCUList.Insert(0, new SelectListItem { Value = "", Text = "Select Unit" });
            return Json(oCUList);
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddOrEdit_CU(ChurchUnitModel vm)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }

            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");
            var strDesc = "Church unit";
            // var _userTask = "Attempted accessing/modifying " + strDesc.ToLower(); 

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again.", pageIndex = vm.pageIndex });
            if (vm.oChurchUnit == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again.", pageIndex = vm.pageIndex });

            ChurchUnit _oChanges = vm.oChurchUnit;


            /// server validations
            ///   
            if (string.IsNullOrEmpty(_oChanges.Name))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please provide the " + strDesc.ToLower() + " name", pageIndex = vm.pageIndex });

            if (string.IsNullOrEmpty(_oChanges.OrgType))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church unit organisation type is not specified", pageIndex = vm.pageIndex });

            strDesc = GetChuOrgTypeDesc(_oChanges.OrgType); // _oChanges.OrgType == "CH" ? "Congregation Head-unit" : _oChanges.OrgType == "CN" ? "Congregation" : "Church unit";

            if (_oChanges.AppGlobalOwnerId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specify the denomination (church).", pageIndex = vm.pageIndex });

            var oAGO = _context.AppGlobalOwner.Find(_oChanges.AppGlobalOwnerId);
            if (oAGO == null)  // let's know the denomination... for prefic code
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Denomination (church) for " + strDesc.ToLower() + " could not be found. Please refresh and try again", pageIndex = vm.pageIndex });

            //// check...
            //if (string.IsNullOrEmpty(oAGO.PrefixKey))
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church prefix code has not been specified. Hint: configure via denomination" });

            if (_oChanges.OwnedByChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specify the attached congregation.", pageIndex = vm.pageIndex });

            if (_oChanges.TargetChurchLevelId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specify the church level.", pageIndex = vm.pageIndex });

            var oCULevel = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.TargetChurchLevelId).FirstOrDefault();
            if (oCULevel == null)  // ... parent church level > church unit level
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church unit level could not be found. Please refresh and try again", pageIndex = vm.pageIndex });


            ///// get the parent id            
            //var parDesc = "church unit";
            //switch (vm.oCBLevelCount)
            //{
            //    case 1: parDesc = vm.strChurchLevel_1; break;   //_oChanges.ParentChurchBodyId = vm.ChurchBodyId_1; 
            //    case 2: parDesc = vm.strChurchLevel_2; break;   //_oChanges.ParentChurchBodyId = vm.ChurchBodyId_2; 
            //    case 3: parDesc = vm.strChurchLevel_3; break;   //_oChanges.ParentChurchBodyId = vm.ChurchBodyId_3; 
            //    case 4: parDesc = vm.strChurchLevel_4; break;   //_oChanges.ParentChurchBodyId = vm.ChurchBodyId_4; 
            //    case 5: parDesc = vm.strChurchLevel_5; break;   //_oChanges.ParentChurchBodyId = vm.ChurchBodyId_5;
            //}


            //if (_oChanges.ParentUnitId == null)   // warn!
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church units structure is networked. Provide the parent " + parDesc.ToLower(), pageIndex = vm.pageIndex });

            if (_oChanges.ParentUnitId != null)
            {
                if (_oChanges.ParentUnitCBId == null)  // let's know the parent church unit... parent church level > church unit level
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church body of parent unit not specified.", pageIndex = vm.pageIndex });
                
                if (_oChanges.ParentUnitId == _oChanges.Id)  // let's know the parent church unit... parent church level > church unit level
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church unit cannot be self-parented. Please choose different unit", pageIndex = vm.pageIndex });

                var oCUParCB = _context.ChurchBody.Include(t => t.ChurchLevel)
                                .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.ParentUnitCBId).FirstOrDefault();

                if (oCUParCB == null)  // let's know the parent church unit... parent church level > church unit level
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Parent unit church body could not be found. Please refresh and try again", pageIndex = vm.pageIndex });

                if (oCULevel.LevelIndex < oCUParCB.ChurchLevel?.LevelIndex)  // ... parent church level > church unit level
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church unit level cannot be higher or same as parent church unit. Please select the correct parent unit or change church unit level", pageIndex = vm.pageIndex });
                  
            }
            else
            {
                if (_oChanges.ParentUnitCBId != null) _oChanges.ParentUnitCBId = null;
            }
        
            //if (_oChanges.CtryAlpha3Code == null)   // auto-fill the country and regions using the parent details...
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please provide the base country.", pageIndex = vm.pageIndex });

            if (_oChanges.DateFormed != null)
                if (_oChanges.DateFormed.Value > DateTime.Today)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Date formed cannot be later than today.", pageIndex = vm.pageIndex });

            if (_oChanges.DateInnaug != null)
                if (_oChanges.DateInnaug.Value > DateTime.Today)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Date innaugurated cannot be later than today.", pageIndex = vm.pageIndex });
                    
            if (_oChanges.DateFormed != null && _oChanges.DateInnaug != null)
                if (_oChanges.DateFormed > _oChanges.DateInnaug)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Date formed cannot be later than date innaugurated.", pageIndex = vm.pageIndex });

            if (_oChanges.Status == "D")
            {
                if (_oChanges.DateDeactive != null)
                    if (_oChanges.DateDeactive.Value > DateTime.Today)
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Date deactive cannot be later than today.", pageIndex = vm.pageIndex });

                if (_oChanges.DateFormed != null && _oChanges.DateDeactive != null)
                    if (_oChanges.DateFormed > _oChanges.DateDeactive)
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Date formed cannot be later than date deactivated.", pageIndex = vm.pageIndex });

                if (_oChanges.DateInnaug != null && _oChanges.DateDeactive != null)
                    if (_oChanges.DateInnaug > _oChanges.DateDeactive)
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Date innaugurated cannot be later than date deactivated.", pageIndex = vm.pageIndex });
            }

            if (_oChanges.OrgType == "CG" && _oChanges.GenderStatus == null)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specify the gender status else change to [uncheck] generational.", pageIndex = vm.pageIndex });

            if (_oChanges.OrgType != "CG" && _oChanges.IsUnitGen == true)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Only church grouping types can be generational", pageIndex = vm.pageIndex });

            if (_oChanges.OrgType == "CG" && _oChanges.IsUnitGen == true && (_oChanges.UnitMinAge == null || _oChanges.UnitMaxAge == null))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please specify age brackets for generational unit", pageIndex = vm.pageIndex });

            if (_oChanges.OrgType == "CG" && _oChanges.IsUnitGen == true && _oChanges.IsAgeBracketOverlaps == false && _oChanges.UnitMinAge != null && _oChanges.UnitMaxAge != null)
            {
                var oCU_CGList = _context.ChurchUnit.AsNoTracking().Include(t=> t.OwnedByChurchBody).Include(t=> t.TargetChurchLevel)
                    .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.OrgType == "CG" && c.Status == "A" &&
                    ((c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId && c.SharingStatus == "N") || (c.SharingStatus != "N"))).ToList();

                //exclude current for update..
                if (_oChanges.Id > 0) oCU_CGList = oCU_CGList.Where(c => c.Id != _oChanges.Id).ToList();

                // Age bracket is INCLUSIVE...
                oCU_CGList = oCU_CGList.Where(c =>
                                   (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                oCU_CGList = oCU_CGList.Where(c => (_oChanges.UnitMinAge.Value <= (c.UnitMinAge != null ? c.UnitMinAge.Value : (int?)null) && _oChanges.UnitMaxAge.Value >= (c.UnitMaxAge != null ? c.UnitMaxAge.Value : (int?)null)) ||
                                                   (_oChanges.UnitMinAge.Value <= (c.UnitMinAge != null ? c.UnitMinAge.Value : (int?)null) && _oChanges.UnitMaxAge.Value >= (c.UnitMinAge != null ? c.UnitMinAge.Value : (int?)null)) ||
                                                   (_oChanges.UnitMinAge.Value <= (c.UnitMaxAge != null ? c.UnitMaxAge.Value : (int?)null) && _oChanges.UnitMaxAge.Value >= (c.UnitMaxAge != null ? c.UnitMaxAge.Value : (int?)null)) ||
                                                   (_oChanges.UnitMinAge.Value >= (c.UnitMinAge != null ? c.UnitMinAge.Value : (int?)null) && _oChanges.UnitMaxAge.Value <= (c.UnitMaxAge != null ? c.UnitMaxAge.Value : (int?)null))).ToList();

                if (oCU_CGList.Count() > 0)
                    return Json(new
                    {
                        taskSuccess = false,
                        oCurrId = _oChanges.Id,
                        userMess = "Age-bracket specified for unit, '" + _oChanges.Name + "' overlaps with that of another unit, '" +  oCU_CGList[0].Name + "' [of: " + 
                                    (oCU_CGList[0].TargetChurchLevel != null ? (!string.IsNullOrEmpty(oCU_CGList[0].TargetChurchLevel?.CustomName) ? oCU_CGList[0].TargetChurchLevel.CustomName : oCU_CGList[0].TargetChurchLevel.Name) : "<church level>") + ", " +
                                    (oCU_CGList[0].OwnedByChurchBody != null ? oCU_CGList[0].OwnedByChurchBody.Name : "<church unit>") + "]. Hint: Age bracket is inclusive.",
                        pageIndex = vm.pageIndex
                    });

            }


            if (!_oChanges.IsFullAutonomy)
            {
                if (!_oChanges.IsSupervisedByParentUnit)
                {
                    if (_oChanges.SupervisedByUnitId == null)  // let's know the parent church unit... parent church level > church unit level
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church body of supervising unit not specified.", pageIndex = vm.pageIndex });

                    if (_oChanges.SupervisedByUnitCBId == null)
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specify supervising church body else turn off autonomy or choose parent-supervision", pageIndex = vm.pageIndex });

                    if (_oChanges.SupervisedByUnitCBId == _oChanges.Id)
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church unit cannot be self-supervised unless has autonomy. Please choose different unit", pageIndex = vm.pageIndex });

                    if (_oChanges.SupervisedByUnitId == _oChanges.ParentUnitId)
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Supervising unit specified is same as parent unit. Please choose the supervised by parent unit option", pageIndex = vm.pageIndex });
                     
                }
                else // supervised by parent unit
                {
                    if (_oChanges.ParentUnitId == null)  // let's know the parent church unit... parent church level > church unit level
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church unit is supervised by parent unit. Specify the parent unit else modify option", pageIndex = vm.pageIndex });

                    _oChanges.SupervisedByUnitId = _oChanges.ParentUnitId; 
                    _oChanges.SupervisedByUnitCBId = _oChanges.ParentUnitCBId; 
                }
            }
            else
            {
                _oChanges.IsSupervisedByParentUnit = false;
                _oChanges.SupervisedByUnitId = null;
                _oChanges.SupervisedByUnitCBId = null;
            }
             

            var arrData = "";
            arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<ChurchUnitModel>(arrData) : vm;
            var oCU = vmMod.oChurchUnit;
             

            ChurchBody oCU_CB = null;
            if (oCU != null) oCU_CB = oCU.OwnedByChurchBody;

            var fetchQry = true;
            if (oCU_CB != null) if (oCU_CB.ChurchLevel != null) fetchQry = false;
            if (fetchQry) oCU_CB = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                                    .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.OwnedByChurchBodyId).FirstOrDefault();

            if (oCU_CB == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " church body could be verified. Please refresh data and try again." });
             

            try
            {
                ///
                ModelState.Remove("oChurchUnit.OwnedByChurchBodyId");
                ModelState.Remove("oChurchUnit.AppGlobalOwnerId");
                ModelState.Remove("oChurchUnit.ParentUnitId");
                ModelState.Remove("oChurchUnit.ParentUnitCBId");
                ModelState.Remove("oChurchUnit.SupervisedByUnitId");
                ModelState.Remove("oChurchUnit.SupervisedByUnitCBId");
                ModelState.Remove("oChurchUnit.ContactInfoId");
                ModelState.Remove("oChurchUnit.TargetChurchLevelId");
                ModelState.Remove("oChurchUnit.OrgType");
                ModelState.Remove("oChurchUnit.GlobalUnitCode");
                ModelState.Remove("oChurchUnit.RootUnitCode");
                ModelState.Remove("oAppGlobalOwn.UnitCodeCustom");
                //
                //  ModelState.Remove("oCurrChurchUnit.Id");
                //  ModelState.Remove("oCurrChurchUnit.Name");
                //
                ModelState.Remove("oChurchUnit.CreatedByUserId");
                ModelState.Remove("oChurchUnit.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed to load the data to save. Please refresh and try again.", pageIndex = vm.pageIndex });


                //church code   
                if (string.IsNullOrEmpty(_oChanges.GlobalUnitCode))
                {
                    //oCU_CB = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                    //    .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.OwnedByChurchBodyId).FirstOrDefault();
                    
                    var strCodePRFX = oCU_CB != null ? oCU_CB.Acronym : "";   // oCU.OwnedByChurchBody.Acronym;
                    if (string.IsNullOrEmpty(strCodePRFX))
                    {
                        strCodePRFX = "GBL"; // GL - Global
                        if (oCU_CB != null) if (oCU_CB.ChurchLevel != null) if (!string.IsNullOrEmpty(oCU_CB.ChurchLevel.Acronym)) strCodePRFX = oCU_CB.ChurchLevel.Acronym;
                    }
                    strCodePRFX = strCodePRFX + "/CU";

                    var jsCode = GetNextCUCodeByAcronym_jsonString(strCodePRFX, _oChanges.AppGlobalOwnerId, _oChanges.OwnedByChurchBodyId);
                    _oChanges.GlobalUnitCode = jsCode;
                }


                ////root church code  
                //if (string.IsNullOrEmpty(_oChanges.RootUnitCode) && !string.IsNullOrEmpty(_oChanges.GlobalUnitCode))
                //{
                //    var jsCode = GetNextRootCUCodeByParentCU_jsonString("", _oChanges.AppGlobalOwnerId, _oChanges.ParentUnitId, _oChanges.OwnedByChurchBodyId, _oChanges.GlobalUnitCode);
                //    _oChanges.RootUnitCode = jsCode;
                //}


                //root church code  ... parent Unit is optional
                var genNewRootCode = string.IsNullOrEmpty(_oChanges.RootUnitCode); 
                if (!genNewRootCode && _oChanges.ParentUnitId != null)
                {
                    var oCUPar = _context.ChurchUnit  //.Include(t => t.ChurchLevel)
                                .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.OwnedByChurchBodyId == _oChanges.ParentUnitCBId && c.Id == _oChanges.ParentUnitId).FirstOrDefault();
                    if (oCUPar != null) genNewRootCode = !_oChanges.RootUnitCode.Contains(oCUPar.RootUnitCode); // parent path diff from child path
                }
                        
                if (genNewRootCode)    // (string.IsNullOrEmpty(_oChanges.RootChurchCode) && !string.IsNullOrEmpty(_oChanges.GlobalChurchCode))
                {
                    // var template = new { taskSuccess = String.Empty, strRes = String.Empty };
                    var jsCode = GetNextRootCUCodeByParentCU_jsonString("", _oChanges.AppGlobalOwnerId, _oChanges.ParentUnitId, _oChanges.OwnedByChurchBodyId, _oChanges.GlobalUnitCode);
                    _oChanges.RootUnitCode = jsCode;
                }

                 
                // check...
                if (string.IsNullOrEmpty(_oChanges.GlobalUnitCode) || string.IsNullOrEmpty(_oChanges.RootUnitCode))
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Unit code and Root unit code for " + strDesc.ToLower() + " must be specified", pageIndex = vm.pageIndex });


                // church logo
                if (vm.UnitLogoFile != null) // _oChanges.ChurchBodyLogo != null)
                {
                    if (string.Compare(_oChanges.UnitLogo, (Guid.NewGuid().ToString() + "_" + vm.UnitLogoFile.FileName)) != 0)
                    {
                        string strFilename = null;
                        if (vm.UnitLogoFile.Length > 0) // vm.ChurchLogoFile != null && 
                        {
                            string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");
                            strFilename = Guid.NewGuid().ToString() + "_" + vm.UnitLogoFile.FileName;
                            string filePath = Path.Combine(uploadFolder, strFilename);
                            vm.UnitLogoFile.CopyTo(new FileStream(filePath, FileMode.Create));
                        }
                        else
                        {
                            if (vm.oChurchBody.Id != 0) strFilename = vm.strUnitLogo;
                        }

                        _oChanges.UnitLogo = strFilename;
                    }
                }

                //if (_oChanges.UnitLogo != null)
                //{
                //    if (_oChanges.UnitLogo.ToLower() != (Guid.NewGuid().ToString() + "_" + vm.UnitLogoFile.FileName).ToLower())
                //    {
                //        string strFilename = null;
                //        if (vm.UnitLogoFile != null && vm.UnitLogoFile.Length > 0)
                //        {
                //            string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");
                //            strFilename = Guid.NewGuid().ToString() + "_" + vm.UnitLogoFile.FileName;
                //            string filePath = Path.Combine(uploadFolder, strFilename);
                //            vm.UnitLogoFile.CopyTo(new FileStream(filePath, FileMode.Create));
                //        }
                //        else
                //        {
                //            if (vm.oChurchBody.Id != 0) strFilename = vm.strUnitLogo;
                //        }

                //        _oChanges.UnitLogo = strFilename;
                //    }
                //}

                //
                var tm = DateTime.Now;
                _oChanges.LastMod = tm;
                _oChanges.LastModByUserId = vm.oUserId_Logged;

                //_oChanges.ParentUnitCBId = _oChanges.ParentUnitId == null ? (int?)null : _oChanges.ParentUnitCBId;
                //_oChanges.Status = vm.bl_IsActivated ? "A" : "D";
                //_oChanges.IsUnitGen = vm.bl_IsUnitGen;
                //_oChanges.IsAgeBracketOverlaps = vm.bl_IsAgeBracketOverlaps;

                ///  
                var _reset = _oChanges.Id == 0;

                //validate...
                var _userTask = "Attempted saving " + strDesc.ToLower() + ", " + _oChanges.Name.ToUpper();  // _userTask = "Added new " + strDesc.ToLower() + ", " + _oChanges.Name.ToUpper() + " successfully";   //  _userTask = "Updated " + strDesc.ToLower() + ", " + _oChanges.Name.ToUpper() + " successfully";
                                                                                                            //using (var _cbCtx = new ChurchModelContext(_context.Database.GetDbConnection().ConnectionString))

                //// check if already created... across shared and local
                //var oCU_CurrList = new List<ChurchUnit>();
                //if (_oChanges.SharingStatus == "N")   // thus unit is shared across other congregations... get the shared list of // OrgType //
                //{
                //    oCU_CurrList = _context.ChurchUnit.AsNoTracking() .Include(t=>t.OwnedByChurchBody).Include(t => t.TargetChurchLevel) // ParentUnitId can be NULL
                //                      .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.OrgType == _oChanges.OrgType && c.Status == "A" &&
                //                      c.ParentUnitId == _oChanges.ParentUnitId && c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId && c.SharingStatus == "N").ToList();
                //}
                //else 
                //{ 
                //    oCU_CurrList = _context.ChurchUnit.AsNoTracking().Include(t => t.OwnedByChurchBody).Include(t=>t.TargetChurchLevel)   // ParentUnitId not relevant
                //                      .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.OrgType == _oChanges.OrgType && c.Status == "A" &&
                //                      ((c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId && c.SharingStatus == "N") || (c.SharingStatus != "N"))).ToList();

                //    oCU_CurrList = oCU_CurrList.Where(c =>
                //                       (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();
                //}

                ////exclude current for update..
                //if (_oChanges.Id > 0) oCU_CurrList = oCU_CurrList.Where(c => c.Id != _oChanges.Id).ToList();

                //oCU_CurrList = oCU_CurrList.Where(c => c.Name == _oChanges.Name).ToList();
                //if (oCU_CurrList.Count > 0)
                //    return Json(new
                //    {
                //        taskSuccess = false,
                //        oCurrId = _oChanges.Id,
                //        userMess = strDesc + ", " + _oChanges.Name + " already exists [in the " +
                //        (oCU_CurrList[0].TargetChurchLevel != null ? (!string.IsNullOrEmpty(oCU_CurrList[0].TargetChurchLevel.CustomName) ? oCU_CurrList[0].TargetChurchLevel.CustomName : oCU_CurrList[0].TargetChurchLevel.Name) : "church unit")
                //        + ": " + oCU_CurrList[0].OwnedByChurchBody.Name + "]",
                //        pageIndex = vm.pageIndex
                //    });



                var oCU_CurrList = _context.ChurchUnit.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel) // NVPCategoryId can be NULL
                                .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Status == "A" &&   //&& c.NVPCode == _oChanges.NVPCode 
                                      (c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId || c.SharingStatus != "N"))
                                .ToList();

                if (oCU_CB.ChurchLevel != null)
                    oCU_CurrList = oCU_CurrList.Where(c => c.OwnedByChurchBody.ChurchLevel.LevelIndex <= oCU_CB.ChurchLevel.LevelIndex).ToList();

                oCU_CurrList = oCU_CurrList.Where(c =>
                                   (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB))))
                                   .ToList();

                //}

                //exclude current for update..
                if (_oChanges.Id > 0) oCU_CurrList = oCU_CurrList.Where(c => c.Id != _oChanges.Id).ToList();

                oCU_CurrList = oCU_CurrList.Where(c => c.ParentUnitId == _oChanges.ParentUnitId && string.Compare(c.Name, _oChanges.Name, true) == 0)
                                             .ToList();

                if (oCU_CurrList.Count() > 0)
                {
                    object strVal = _oChanges.Name.ToUpper();
                    var _strDesc = strDesc + " specified, '" + strVal + "' " +
                        (oCU_CurrList[0].OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId ? "already exists in local church unit" :
                        "is already shared in a higher level church unit" +
                        (oCU_CurrList[0].OwnedByChurchBody?.ChurchLevel != null ? " (at " + (!string.IsNullOrEmpty(oCU_CurrList[0].OwnedByChurchBody?.ChurchLevel?.CustomName) ?
                                        oCU_CurrList[0].OwnedByChurchBody?.ChurchLevel?.CustomName : oCU_CurrList[0].OwnedByChurchBody?.ChurchLevel?.Name) + ": " +
                                            oCU_CurrList[0].OwnedByChurchBody.Name + ")" : ""));
                    ///
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = _strDesc, pageIndex = vm.pageIndex });
                }
                 

                if (_oChanges.Id == 0)
                {  
                    var oCBVal = _context.ChurchUnit.AsNoTracking().Include(t => t.OwnedByChurchBody).Include(t => t.TargetChurchLevel)
                        .Where(c => c.AppGlobalOwnerId == oCU.AppGlobalOwnerId && ((oCU.GlobalUnitCode != null && c.GlobalUnitCode == oCU.GlobalUnitCode) || 
                                            (oCU.UnitCodeCustom != null && c.OwnedByChurchBodyId==oCU.OwnedByChurchBodyId && c.UnitCodeCustom == oCU.UnitCodeCustom))).FirstOrDefault();     
                    
                    if (oCBVal != null) 
                        return Json(new { taskSuccess = false, oCurrId = oCU.Id, userMess = "Unit codes must be unique." + Environment.NewLine + 
                            oCBVal.Name + " has same unit code: '" + oCBVal.GlobalUnitCode + "' or custom code: '" + oCBVal.UnitCodeCustom + "' [in the " +
                            (oCBVal.TargetChurchLevel != null ? (!string.IsNullOrEmpty(oCBVal.TargetChurchLevel.CustomName) ? oCBVal.TargetChurchLevel.CustomName : oCBVal.TargetChurchLevel.Name) : "church unit")
                            + ": " + oCBVal.OwnedByChurchBody.Name + "]", pageIndex = vm.pageIndex });

                    _oChanges.Created = tm;
                    _oChanges.CreatedByUserId = vm.oUserId_Logged;
                    _context.Add(_oChanges);

                    ViewBag.UserMsg = "Saved " + strDesc.ToLower() + (!string.IsNullOrEmpty(_oChanges.Name) ? ", '" + _oChanges.Name + "'" : "") + " successfully.";
                    _userTask = "Added new " + strDesc.ToLower() + (!string.IsNullOrEmpty(_oChanges.Name) ? ", '" + _oChanges.Name + "'" : "") + " successfully";
                }

                else
                {  
                    var oCBVal = _context.ChurchUnit.AsNoTracking().Include(t => t.OwnedByChurchBody).Include(t => t.TargetChurchLevel)
                        .Where(c => c.Id != oCU.Id && c.AppGlobalOwnerId == oCU.AppGlobalOwnerId && ((oCU.GlobalUnitCode != null && c.GlobalUnitCode == oCU.GlobalUnitCode) ||
                                            (oCU.UnitCodeCustom != null && c.OwnedByChurchBodyId == oCU.OwnedByChurchBodyId && c.UnitCodeCustom == oCU.UnitCodeCustom))).FirstOrDefault();

                    if (oCBVal != null) 
                        return Json(new { taskSuccess = false, oCurrId = oCU.Id, userMess = "Unit codes must be unique." + Environment.NewLine + 
                            oCBVal.Name + " has same unit code: '" + oCBVal.GlobalUnitCode + "' or custom code: '" + oCBVal.UnitCodeCustom + "' [in the " +
                            (oCBVal.TargetChurchLevel != null ? (!string.IsNullOrEmpty(oCBVal.TargetChurchLevel.CustomName) ? oCBVal.TargetChurchLevel.CustomName : oCBVal.TargetChurchLevel.Name) : "church unit")
                            + ": " + oCBVal.OwnedByChurchBody.Name + "]", pageIndex = vm.pageIndex });


                    _context.Update(_oChanges);
                    //var _strDesc = strDesc.Length > 0 ? strDesc.Substring(0, 1).ToUpper() + strDesc.Substring(1) : "Denomination ";

                    ViewBag.UserMsg = strDesc + (!string.IsNullOrEmpty(_oChanges.Name) ? ", '" + _oChanges.Name + "'" : "") + " updated successfully.";
                    _userTask = "Updated " + strDesc.ToLower() + (!string.IsNullOrEmpty(_oChanges.Name) ? ", '" + _oChanges.Name + "'" : "") + " successfully";
                }


                //save denomination first... 
                _context.SaveChanges(); // await  _cbCtx.SaveChangesAsync();


                //DetachAllEntities(_cbCtx);
                // }

                // refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");

                var _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "T",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oUserId_Logged, _tm, _tm, vm.oUserId_Logged, vm.oUserId_Logged) );


                var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);
                TempData["oVmCurr"] = _vmMod; TempData.Keep();

                return Json(new { taskSuccess = true, oCurrId = _oChanges.Id, resetNew = _reset, userMess = ViewBag.UserMsg, pageIndex = vm.pageIndex });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed saving church unit details. Err: " + ex.Message, pageIndex = vm.pageIndex });
            }
        }
        public IActionResult Delete_CU(int? oAppGloOwnId, int? oChurchBodyId, int? loggedUserId, int id, bool forceDeleteConfirm = false)
        {

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            //// refreshValues...
            //var _connstr_CL = this.GetCL_DBConnString();
            //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");


            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");

            // var strDesc = setIndex == 1 ? "System profile" : setIndex == 2 ? "Church admin profile" : "Church user profile";
            var strDesc = "Church unit";
            var tm = DateTime.Now; var _tm = DateTime.Now; var _userTask = "Attempted saving  " + strDesc;
            //
            try
            {
                var strUserDenom = "RCMS Client";

                //if (setIndex != 1)
                //{
                //    if (oAppGloOwnId == null || oChurchUnitId == null)
                //        return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Denomination/church of " + strDesc + " unknown. Please refesh and try again." });

                //    var oAGO = _context.AppGlobalOwner.Find(oAppGloOwnId);
                //    var oCU = _context.ChurchUnit.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchUnitId).FirstOrDefault();

                //    if (oAGO == null || oCU == null)
                //        return Json(new { taskSuccess = false, oCurrId = "", userMess = "Specified denomination and church unit could not be retrieved. Please refresh and try again.", signOutToLogIn = false });

                //    strUserDenom = oCU.Name + (!string.IsNullOrEmpty(oAGO.Acronym) ? ", " + oAGO.Acronym : oAGO.OwnerName);
                //    strUserDenom = "--" + (string.IsNullOrEmpty(strUserDenom) ? "Denomination: " + strUserDenom : strUserDenom);
                //}


                var oCU = _context.ChurchUnit.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAppGloOwnId &&
                                          (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == oChurchBodyId)).FirstOrDefault(); // .Include(c => c.ChurchUnits)
                if (oCU == null)
                {
                    _userTask = "Attempted deleting " + strDesc.ToLower(); // + ", " + (strTag + ":- " + oCU.CBValue);  // var _userTask = "Attempted saving  " + strDesc;
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                         "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                        );

                    return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = strDesc + " to delete could not be retrieved." });
                }

                var strTag = oCU.Name;
                var saveDelete = true;
                // ensuring cascade delete where there's none!

                //check CBCategory for this UP to delete 

                //var CBs = _context.ChurchUnit.Where(c => c.ParentUnitId == oCU.Id || c.churchbody == oCU.MSTR_ParentUnitId ||
                //                            c.Id == oCU.Id || c.MSTR_ChurchUnitId == oCU.ParentUnitId ||
                //                            c.OwnedByChurchUnitId == oCU.Id || c.SupervisedByChurchUnitId == oCU.Id ||).ToList();
                var CUs = _context.ChurchUnit.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ParentUnitId == oCU.Id).ToList();
               // var CRs = _context.ChurchRole.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ApplyToChurchUnitId == oCU.Id).ToList();
                var MCUs = _context.MemberChurchUnit.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchUnitId == oCU.Id).ToList();
                var MCRs = _context.MemberChurchRole.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchUnitId == oCU.Id).ToList();

                //using (var _userCtx = new MSTR_DbContext(_context.Database.GetDbConnection().ConnectionString))
                //{
                if ((CUs.Count() + MCUs.Count() + MCRs.Count()) > 0)//+ CRs.Count() 
                {
                    if (forceDeleteConfirm == false)
                    {
                        var strConnTabs = "Church unit, Church role, Member church unit, Member church role";
                        saveDelete = false;

                        // check user privileges to determine... administrator rights
                        //log...
                        _userTask = "Attempted deleting " + strDesc.ToLower();
                        _tm = DateTime.Now;
                        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                            );

                        return Json(new
                        {
                            taskSuccess = false,
                            tryForceDelete = false,
                            oCurrId = id,
                            userMess = "Specified " + strDesc.ToLower() +
                                            " to delete has been used elsewhere in the system [" + strConnTabs + "]. Delete cannot be done unless dependent-references are removed."
                        });
                    }

                    //to be executed only for higher privileges... // FORCE-DELETE...
                }

                //successful...
                if (saveDelete)
                {
                    _context.ChurchUnit.Remove(oCU);
                    _context.SaveChanges();

                    //   DetachAllEntities(_userCtx);

                    //audit...
                    _userTask = "Deleted " + strDesc.ToLower();
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                            );

                    return Json(new { taskSuccess = true, tryForceDelete = false, oCurrId = oCU.Id, userMess = strDesc + " successfully deleted." });
                }

                //}


                _userTask = "Attempted deleting " + strDesc.ToLower() + " -- but FAILED. Data unavailable.";   // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                );

                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "No " + strDesc.ToLower() + " data available to delete. Try again" });
            }

            catch (Exception ex)
            {
                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [ ID= " + id + "] FAILED. ERR: " + ex.Message;  // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                    "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                   );
                //
                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Failed deleting " + strDesc.ToLower() + ". Err: " + ex.Message });
            }
        }
         

        //CRL

        [HttpGet]
        public IActionResult AddOrEdit_CRL(int id = 0, int? oParentChurchRoleId = null, int? oAppGloOwnId = null, int? oChurchBodyId = null, int? oUserId = null, int setIndex = 16)
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return View("_ErrorPage");
                    }
                }



                // if (!InitializeUserLogging())
                // return RedirectToAction("LoginUserAcc", "UserLogin");

                if (oAppGloOwnId == null) oAppGloOwnId = this._oLoggedAGO.Id;
                if (oChurchBodyId == null) oChurchBodyId = this._oLoggedCB.Id;
                if (oUserId == null) oUserId = this._oLoggedUser.Id;

                var strDesc = "Church Role";
                var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();  // _userTask = "Attempted creating new denomination (church)"; // _userTask = "Opened denomination (church)-" + oCFT_MDL.oChurchFaithType.FaithDescription;

                var oAGO = _context.AppGlobalOwner.Find(oAppGloOwnId);
                var oCB_OwnedBy = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchBodyId).FirstOrDefault();
                if (oAGO == null || oCB_OwnedBy == null)  // || oCRL_Parent == null church roles may be networked...
                {
                    
                    return PartialView("_ErrorPage");
                }

                var oCRLModel = new ChurchRoleModel();
                if (id == 0)
                {
                    //create user and init... 
                    oCRLModel.oChurchRole = new ChurchRole();
                    oCRLModel.oChurchRole.AppGlobalOwnerId = oAppGloOwnId;
                    oCRLModel.oAppGloOwnId = oAppGloOwnId;
                    oCRLModel.oChurchBodyId = oChurchBodyId;
                    oCRLModel.numChurchLevel_Index = _context.ChurchLevel.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId);  //use what's configured... not digit at AGO

                    oCRLModel.oAppGlobalOwn = oAGO;
                    oCRLModel.oChurchBody = oCB_OwnedBy; //parent church body of the UNIT
                    oCRLModel.strRootChurchBodyCode = oCB_OwnedBy.RootChurchCode;
                    
                    oCRLModel.oChurchRole.OwnedByChurchBodyId = oChurchBodyId; // this._oLoggedCB.Id;
                    oCRLModel.strChurchBody = oCB_OwnedBy.Name; //this._oLoggedCB.Name; 
                    oCRLModel.strCBLevel = oCB_OwnedBy.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB_OwnedBy.ChurchLevel.CustomName) ? oCB_OwnedBy.ChurchLevel.CustomName : oCB_OwnedBy.ChurchLevel.Name) : "";

                    //var strCodePRFX = oCRLModel.oChurchBody.Acronym;
                    //if (string.IsNullOrEmpty(strCodePRFX)) strCodePRFX = oCB_OwnedBy.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB_OwnedBy.ChurchLevel.Acronym) ? oCB_OwnedBy.ChurchLevel.Acronym : "GBL") : "GBL";  // GL - Global
                    //strCodePRFX = strCodePRFX + "/CRL"; // (!string.IsNullOrEmpty(strCodePRFX) ? "/CU" : "GL/CU");
                    //var jsCode = GetNextCUCodeByAcronym_jsonString(strCodePRFX, oCRLModel.oChurchRole.AppGlobalOwnerId, oCRLModel.oChurchRole.OwnedByChurchBodyId);  // string json1 = @"{'Name':'James'}";
                    //oCRLModel.oChurchRole.GlobalRoleCode = jsCode;

                    //var strCodePRFX = oCRLModel.oChurchBody.Acronym;
                    //if (string.IsNullOrEmpty(strCodePRFX)) strCodePRFX = oCB_OwnedBy.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB_OwnedBy.ChurchLevel.Acronym) ? oCB_OwnedBy.ChurchLevel.Acronym : "GBL") : "GBL";  // GL - Global
                    //strCodePRFX = strCodePRFX + "/CRL"; // (!string.IsNullOrEmpty(strCodePRFX) ? "/CU" : "GL/CU");
                    //var jsCode = GetNextCUCodeByAcronym_jsonString(strCodePRFX, oCRLModel.oChurchRole.AppGlobalOwnerId, oCRLModel.oChurchRole.OwnedByChurchBodyId);  // string json1 = @"{'Name':'James'}";
                    //oCRLModel.oChurchRole.GlobalRoleCode = jsCode;



                    var oCRL_Parent = _context.ChurchRole.AsNoTracking().Include(t => t.OwnedByChurchBody).Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oParentChurchRoleId).FirstOrDefault();
                    oCRLModel.strParentRole = oCRL_Parent != null ? oCRL_Parent.Name : "None. (choose supervising role)";
                    oCRLModel.strParentRoleOrgTypeCode = oCRL_Parent != null ? oCRL_Parent.OrgType : "";
                    oCRLModel.strParentRoleOrgType = oCRL_Parent != null ? GetChuOrgTypeDesc(oCRL_Parent.OrgType) : ""; // this.dlCBDivOrgTypes[0].Desc;
                    oCRLModel.oChurchRole.ParentRoleId = oParentChurchRoleId; // team ex. Session or local council ... oCRL_Parent != null ? oCRL_Parent.Id : (int?)null;
                    oCRLModel.oChurchRole.ParentRoleCBId = oCRL_Parent != null ? (oCRL_Parent.OwnedByChurchBody != null ? oCRL_Parent.OwnedByChurchBody.Id : (int?)null) : (int?)null;
                    oCRLModel.strParentRoleCB = oCRL_Parent != null ? (oCRL_Parent.OwnedByChurchBody != null ? oCRL_Parent.OwnedByChurchBody.Name : "") : ""; //None. [choose Supervising Role unit]
                    oCRLModel.numParentRoleCLId = oCRL_Parent != null ? (oCRL_Parent.OwnedByChurchBody != null ? oCRL_Parent.OwnedByChurchBody.ChurchLevelId : (int?)null) : (int?)null;

                    ///
                    oCRLModel.oChurchRole.TargetChurchLevelId = oCRL_Parent != null ? oCRL_Parent.TargetChurchLevelId : (int?)null;  //may not be diff tho... but same or lower 
                   // oCRLModel.strCBLevel = "Role's Church Level";
                    oCRLModel.oChurchRole.OrgType = "CP"; // TM... oCRL_Parent.OrgType;  //may not be diff tho...  lookup ... CR, CH, CN, GB [default], IB
                    oCRLModel.strOrgType = GetChuOrgTypeDesc(oCRLModel.oChurchRole.OrgType);  // TM or CP
                    oCRLModel.oChurchRole.Created = DateTime.Now;
                    oCRLModel.oChurchRole.LastMod = DateTime.Now;
                   // oCRLModel.oChurchRole.IsFullAutonomy = true;

                  //  oCRLModel.oChurchRole.IsSupervisedByParentUnit = true;
                   // oCRLModel.strSupervisedByUnit = "None. (choose supervising unit)";  //!string.IsNullOrEmpty(oCRLModel.strParentChurchRole) ? oCRLModel.strParentChurchRole : "Choose Supervising Unit";
                  //  oCRLModel.oChurchRole.SupervisedByUnitId = oCRLModel.oChurchRole.ParentUnitId; // assuming... parent unit is supervising... [default] else [user can] change  
                  //  oCRLModel.oChurchRole.SupervisedByUnitCBId = oCRLModel.oChurchRole.ParentUnitCBId; // (int?)null; 
                  //  oCRLModel.numSupervisedByUnitCLId = oCRLModel.numParentUnitCLId;  // must be higher CL or same 
                  //  oCRLModel.strSupervisedByUnitCB = "None. (choose unit congregation)";
                    //
                    // oCRLModel.strSupervisedByUnitCB = "Supervising Unit Congregation";
                    // oCRLModel.numSupervisedByUnitCBId = (int?)null; // must be higher CB
                     
                    //oCRLModel.oChurchRole.IsApplyToClergyOnly  = false;
                    //oCRLModel.oChurchRole.IsUnitGen = false;

                    ///
                    oCRLModel.strAppGlobalOwn = oCRLModel.oAppGlobalOwn.OwnerName;
                    oCRLModel.oChurchRole.ApplyToGender = "X";  // Male- M, Female -F, Mixed - X ... Chairperson (X), Chairman (M), Lady Pastor (F)
                    oCRLModel.oChurchRole.SharingStatus = "N";
                    //oCRLModel.oChurchRole.OwnedByChurchBodyId = this._oLoggedCB.Id;
                    oCRLModel.oChurchRole.ChurchWorkStatus = "OP";  // OPerationalized - OP, STructure only - ST  
                    oCRLModel.oChurchRole.Status = "A";

                    oCRLModel.oChurchRole.IsApplyToMainstreamUnit = true;
                    oCRLModel.strApplyToChurchUnit = "Mainstream";
                    oCRLModel.bl_IsActivated = true;

                    //oCRLModel.bl_IsUnitGen = false;
                    //oCRLModel.bl_IsAgeBracketOverlaps = false;
                    ///
                    oCRLModel.strOrgType = GetChuOrgTypeDesc(oCRLModel.oChurchRole.OrgType);
                    oCRLModel.strStatus = GetStatusDesc(oCRLModel.oChurchRole.Status);

                    oCRLModel.strOwnershipCode = "O";  // I -- Inherited, O -- Originated   i.e. currChurchRole == OwnedByChurchRole
                    oCRLModel.strOwnershipStatus = GetAdhocStatusDesc(oCRLModel.strOwnershipCode);
                    oCRLModel.strChurchWorkStatus = GetAdhocStatusDesc(oCRLModel.oChurchRole.ChurchWorkStatus);
                    oCRLModel.strSharingStatus = GetSharingStatusDesc(oCRLModel.oChurchRole.SharingStatus);

                    oCRLModel.strChurchLevel_OwnedByCB = oCRLModel.strCBLevel; // oCB_OwnedBy != null ? (oCB_OwnedBy.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB_OwnedBy.ChurchLevel.CustomName) ? oCB_OwnedBy.ChurchLevel.CustomName : oCB_OwnedBy.ChurchLevel.Name) : "") : "";
                    oCRLModel.strOwnedByChurchBody = oCRLModel.strChurchBody; // oCB_OwnedBy != null ? oCB_OwnedBy.Name : "";

                    ///
                    _userTask = "Attempted creating new " + strDesc.ToLower();

                }
                else
                {
                    var oCRL_List_1 = _context.ChurchRole.AsNoTracking().Include(t => t.OwnedByChurchBody).Include(t => t.ApplyToChurchUnit) //.Include(t => t.Country)
                            .Where(c => c.Id == id && c.AppGlobalOwnerId == _oLoggedAGO.Id && // c.TargetChurchLevel.LevelIndex >= this._oLoggedCB.ChurchLevel.LevelIndex &&
                                       (c.OrgType == "CP" || c.OrgType == "TM")).ToList();

                    //oCRL_List_1 = oCRL_List_1.Where(c =>
                    //                   (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    oCRLModel = (
                        from t_crl in oCRL_List_1
                        from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == t_crl.AppGlobalOwnerId)
                        from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_crl.AppGlobalOwnerId && c.Id == t_crl.OwnedByChurchBodyId)
                        from t_cl in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_crl.AppGlobalOwnerId && c.Id == t_crl.TargetChurchLevelId)
                        from t_cu_apl in _context.ChurchUnit.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_crl.AppGlobalOwnerId && c.Id == t_crl.ApplyToChurchUnitId).DefaultIfEmpty()
                        from t_crl_p in _context.ChurchRole.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_crl.AppGlobalOwnerId && c.Id == t_crl.ParentRoleId).DefaultIfEmpty()
                        from t_cb_p in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_crl.AppGlobalOwnerId && c.Id == t_crl.ParentRoleCBId).DefaultIfEmpty()
                        from t_cl_p in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_crl.AppGlobalOwnerId && c.Id == (t_crl_p != null ? t_crl_p.TargetChurchLevelId : (int?)null)).DefaultIfEmpty()
                        
                        select new ChurchRoleModel()
                        {
                            oAppGloOwnId = t_crl.AppGlobalOwnerId,
                            oAppGlobalOwn = t_ago,
                            oChurchBody = t_cb, // t_crl.OwnedByChurchBody,
                            oChurchBodyId = t_cb != null ? t_cb.Id : (int?)null,
                            /// 
                            oChurchRole = t_crl,
                            strChurchRole = t_crl.Name,
                            //strAppGlobalOwn = t_ago.OwnerName + (!string.IsNullOrEmpty(t_ago.OwnerName) ? (t_ci_ago != null ? (t_ci_ago.Country != null ? t_ci_ago.Country.EngName : "") : "") : ""),
                            //                            
                            strParentRole = t_crl_p != null ? t_crl_p.Name : "None. (choose supervising role)",
                            strParentRoleOrgTypeCode = t_crl_p != null ? t_crl_p.OrgType : "",
                            strParentRoleOrgType = t_crl_p != null ? GetChuOrgTypeDesc(t_crl_p.OrgType) : "",
                            strParentRoleCB = t_cb_p != null ? t_cb_p.Name : "",
                            // numParentUnitCBId = t_crl_p != null ? (t_crl_p.OwnedByChurchBody != null ? t_crl_p.OwnedByChurchBody.Id : (int?)null) : (int?)null, 
                            numParentRoleCLId = t_cb_p != null ? t_cb_p.ChurchLevelId : (int?)null,
                            ///
                            strChurchBody = t_cb != null ? t_cb.Name : "",  
                            strRootChurchBodyCode = t_cb != null ? t_cb.RootChurchCode : "",
                            strCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",
                            ///
                            numChurchLevel_Index = t_cl.LevelIndex,
                            strTargetChurchLevel = (t_crl.TargetChurchLevelId == null && t_crl.OrgType == "CR") ? "Church Root" : (!string.IsNullOrEmpty(t_cl.CustomName) ? t_cl.CustomName : t_cl.Name),
                            strOrgType = GetChuOrgTypeDesc(t_crl.OrgType),
                            strGenderStatus = GetGenderDesc(t_crl.ApplyToGender),

                            strApplyToChurchUnitOrgTypeCode = t_cu_apl != null ? t_cu_apl.OrgType : "",
                            strApplyToChurchUnitOrgType = t_cu_apl != null ? GetChuOrgTypeDesc(t_cu_apl.OrgType) : "",
                            strApplyToChurchUnit = t_crl.IsApplyToMainstreamUnit ? "Mainstream" : (t_cu_apl != null ? t_cu_apl.Name : ""),

                            //strFaithTypeCategory = t_ago.strFaithTypeCategory, // t_ago != null ? ((!string.IsNullOrEmpty(t_ago.strFaithTypeCategory) && !string.IsNullOrEmpty(t_ago.strFaithTypeStream) ? t_ago.strFaithTypeCategory + ", " + t_ago.strFaithTypeStream : t_ago.strFaithTypeCategory + t_ago.strFaithTypeStream).Trim()) : "",
                            //strCountry = t_crl.Country != null ? (!string.IsNullOrEmpty(t_crl.Country.EngName) ? t_crl.Country.EngName : t_crl.Country.CtryAlpha3Code) : t_crl.CtryAlpha3Code,  //t_crl.Country != null ? t_crl.Country.EngName : "",
                            //strCountryRegion = t_crl.CountryRegion != null ? t_crl.CountryRegion.Name : "",
                            strParentUnit_HeaderDesc = t_cl_p != null ? (!string.IsNullOrEmpty(t_cl_p.CustomName) ? t_cl_p.CustomName : "Supervising Role") : "Supervising Role",
                            bl_IsActivated = t_crl.Status == "A", 
                             
                            strStatus = GetStatusDesc(t_crl.Status),
                            strOwnershipCode = t_crl.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I", //t_cb.Id == t_crl.OwnedByChurchBodyId ? "O" : "I",
                            strOwnershipStatus = GetAdhocStatusDesc(t_crl.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                            strChurchWorkStatus = GetAdhocStatusDesc(t_crl.ChurchWorkStatus),
                            strSharingStatus = GetSharingStatusDesc(t_crl.SharingStatus),

                            strChurchLevel_OwnedByCB = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",
                            strOwnedByChurchBody = t_cb != null ? t_cb.Name : "", 

                        })
                        .FirstOrDefault();

                    var chkValidModel = oCRLModel != null;
                    chkValidModel = chkValidModel ? oCRLModel.oChurchRole != null : chkValidModel;
                    if (!chkValidModel)
                    {  //page not found error
                        
                        return View("_ErrorPage");
                    }
                }



                //// load the cb tree ... can be congregation tho
                //oCRLModel.oCBLevelCount = oCRLModel.numChurchLevel_Index; // - 1;        // oCRLLevelCount -= 2;  // less requesting CB
                //List<ChurchLevel> oCBLevelList = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == oCRLModel.oChurchBody.AppGlobalOwnerId && c.LevelIndex > 0 && c.LevelIndex <= oCRLModel.numChurchLevel_Index).ToList().OrderBy(c => c.LevelIndex).ToList();

                //if (oCRLModel.oCBLevelCount > 0 && oCBLevelList.Count > 0)
                //{
                //    oCRLModel.strChurchLevel_1 = !string.IsNullOrEmpty(oCBLevelList[0].CustomName) ? oCBLevelList[0].CustomName : oCBLevelList[0].Name;
                //    ViewBag.strChurchLevel_1 = oCRLModel.strChurchLevel_1;
                //    ///
                //    var oCRL_1 = _context.ChurchBody.Include(t => t.ChurchLevel)
                //                      .Where(c => c.AppGlobalOwnerId == oCRLModel.oChurchBody.AppGlobalOwnerId && // c.Status == "A" && 
                //                            c.ChurchLevel.LevelIndex == 1 && c.OrgType == "CR") //c.TargetChurchLevelId == oCBLevelList[0].Id &&
                //                      .FirstOrDefault();

                //    if (oCRL_1 != null)
                //    { oCRLModel.ChurchBodyId_1 = oCRL_1.Id; oCRLModel.strChurchBody_1 = oCRL_1.Name + " [Church Root]"; }

                //    ViewBag.ChurchBodyId_1 = oCRLModel.ChurchBodyId_1;
                //    ViewBag.strChurchBody_1 = oCRLModel.strChurchBody_1;

                //    ///
                //    if (oCRLModel.oCBLevelCount > 1)
                //    {
                //        oCRLModel.strChurchLevel_2 = !string.IsNullOrEmpty(oCBLevelList[1].CustomName) ? oCBLevelList[1].CustomName : oCBLevelList[1].Name;
                //        ViewBag.strChurchLevel_2 = oCRLModel.strChurchLevel_2;
                //        ///
                //        var lsCB_2 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCRLModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[1].Id).ToList();
                //        var oCRL_2 = lsCB_2.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCRLModel.oChurchBody.RootChurchCode, c.Id, oCRLModel.oChurchBody.ParentChurchBodyId)).ToList();
                //        if (oCRL_2.Count() != 0)
                //        { oCRLModel.ChurchBodyId_2 = oCRL_2[0].Id; oCRLModel.strChurchBody_2 = oCRL_2[0].Name; }
                //        ViewBag.ChurchBodyId_2 = oCRLModel.ChurchBodyId_2; ViewBag.strChurchBody_2 = oCRLModel.strChurchBody_2;

                //        if (oCRLModel.oCBLevelCount > 2)
                //        {
                //            oCRLModel.strChurchLevel_3 = !string.IsNullOrEmpty(oCBLevelList[2].CustomName) ? oCBLevelList[2].CustomName : oCBLevelList[2].Name;
                //            ViewBag.strChurchLevel_3 = oCRLModel.strChurchLevel_3;

                //            var lsCB_3 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCRLModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[2].Id).ToList();
                //            var oCRL_3 = lsCB_3.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCRLModel.oChurchBody.RootChurchCode, c.Id, oCRLModel.oChurchBody.ParentChurchBodyId)).ToList();
                //            if (oCRL_3.Count() != 0)
                //            { oCRLModel.ChurchBodyId_3 = oCRL_3[0].Id; oCRLModel.strChurchBody_3 = oCRL_3[0].Name; }
                //            ViewBag.ChurchBodyId_3 = oCRLModel.ChurchBodyId_3; ViewBag.strChurchBody_3 = oCRLModel.strChurchBody_3;


                //            if (oCRLModel.oCBLevelCount > 3)
                //            {
                //                oCRLModel.strChurchLevel_4 = !string.IsNullOrEmpty(oCBLevelList[3].CustomName) ? oCBLevelList[3].CustomName : oCBLevelList[3].Name;
                //                ViewBag.strChurchLevel_4 = oCRLModel.strChurchLevel_4;

                //                var lsCB_4 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCRLModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[3].Id).ToList();
                //                var oCRL_4 = lsCB_4.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCRLModel.oChurchBody.RootChurchCode, c.Id, oCRLModel.oChurchBody.ParentChurchBodyId)).ToList();
                //                if (oCRL_4.Count() != 0)
                //                { oCRLModel.ChurchBodyId_4 = oCRL_4[0].Id; oCRLModel.strChurchBody_4 = oCRL_4[0].Name; }
                //                ViewBag.ChurchBodyId_4 = oCRLModel.ChurchBodyId_4; ViewBag.strChurchBody_4 = oCRLModel.strChurchBody_4;


                //                if (oCRLModel.oCBLevelCount > 4)
                //                {
                //                    oCRLModel.strChurchLevel_5 = !string.IsNullOrEmpty(oCBLevelList[4].CustomName) ? oCBLevelList[4].CustomName : oCBLevelList[4].Name;
                //                    ViewBag.strChurchLevel_5 = oCRLModel.strChurchLevel_4;

                //                    var lsCB_5 = _context.ChurchBody.Where(c => c.AppGlobalOwnerId == oCRLModel.oChurchBody.AppGlobalOwnerId && c.ChurchLevelId == oCBLevelList[4].Id).ToList();
                //                    var oCRL_5 = lsCB_5.Where(c => IsAncestor_ChurchBody(c.RootChurchCode, oCRLModel.oChurchBody.RootChurchCode, c.Id, oCRLModel.oChurchBody.ParentChurchBodyId)).ToList();
                //                    if (oCRL_5.Count() != 0)
                //                    { oCRLModel.ChurchBodyId_5 = oCRL_5[0].Id; oCRLModel.strChurchBody_5 = oCRL_5[0].Name; }
                //                    ViewBag.ChurchBodyId_5 = oCRLModel.ChurchBodyId_5; ViewBag.strChurchBody_5 = oCRLModel.strChurchBody_5;
                //                }
                //            }
                //        }
                //    }
                //}




                _userTask = "Opened " + strDesc.ToLower() + ", " + oCRLModel.oAppGlobalOwn.OwnerName;

                oCRLModel.setIndex = setIndex;
                // oAGO_MDL.subSetIndex = subSetIndex; 

                oCRLModel.oUserId_Logged = this._oLoggedUser.Id;
                oCRLModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                oCRLModel.oChurchBodyId_Logged = this._oLoggedCB.Id;

                /// load lookups
                oCRLModel = this.popLookups_CRL(oCRLModel, oCRLModel.oChurchRole);

                var tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "T",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                var _oCRLModel = Newtonsoft.Json.JsonConvert.SerializeObject(oCRLModel);
                TempData["oVmCurrMod"] = _oCRLModel; TempData.Keep();



                return PartialView("_AddOrEdit_CRL", oCRLModel);

            }

            catch (Exception ex)
            {
                //page not found error
                
                return View("_ErrorPage");
            }
        }

        public ChurchRoleModel popLookups_CRL(ChurchRoleModel vm, ChurchRole oCurrChurchRole)
        {
            if (vm == null || oCurrChurchRole == null) return vm;
            //
            vm.lkpStatuses = new List<SelectListItem>();
            foreach (var dl in dlGenStatuses)
            { if (dl.Val == "A" || dl.Val == "B" || dl.Val == "D") vm.lkpStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpSharingStatuses = new List<SelectListItem>();
            foreach (var dl in dlShareStatus) { vm.lkpSharingStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpGenderStatuses = new List<SelectListItem>();
            foreach (var dl in dlGenderStatuses) { vm.lkpGenderStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpChurchWorkStatuses = new List<SelectListItem>();
            foreach (var dl in dlChuWorkStats) { vm.lkpChurchWorkStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpOfficeTermTypes = new List<SelectListItem>();
            foreach (var dl in dlOfficeTermType) { vm.lkpOfficeTermTypes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpOrgTypes_CRL = new List<SelectListItem>();
            foreach (var dl in dlCBDivOrgTypes)
            { //  dl.Val=="CR" || dl.Val == "CH" || dl.Val == "CN"
                if (dl.Val == "CP" || dl.Val == "TM")   //  CP, TMdl.Val == "GB" || dl.Val == "IB" || dl.Val == "CO" || dl.Val == "DP" || dl.Val == "CE" || dl.Val == "CG" || dl.Val == "SC"
                    vm.lkpOrgTypes_CRL.Add(new SelectListItem
                    {
                        Value = dl.Val,
                        Text = dl.Desc,
                        // Disabled = (dl.Val == "CH" || dl.Val == "CN") 
                    });
            }

            vm.lkpOrgTypes_ApplyToUnit = new List<SelectListItem>();
            foreach (var dl in dlCBDivOrgTypes)
            { //  dl.Val=="CR" || dl.Val == "CH" || dl.Val == "CN"  -- controlled by vendor, partially modified by client
                if (dl.Val == "GB" || dl.Val == "IB" || dl.Val == "CO" || dl.Val == "DP" || dl.Val == "CE" || dl.Val == "CG" || dl.Val == "SC")   //  // CP, TM
                    vm.lkpOrgTypes_ApplyToUnit.Add(new SelectListItem
                    {
                        Value = dl.Val,
                        Text = dl.Desc,
                        // Disabled = (dl.Val == "CH" || dl.Val == "CN") 
                    });
            }



            // role Unit will depend on the church body [congregation, district or higher level]
            //vm.lkpOrgTypes_Parent = new List<SelectListItem>();
            //foreach (var dl in dlCBDivOrgTypes)
            //{ //  != CR, IB, CH, CN, CE
            //    if (dl.Val == "TM" || dl.Val == "CP" || dl.Val == "GB" || dl.Val == "CO" || dl.Val == "DP" || dl.Val == "CG" || dl.Val == "SC" )
            //        vm.lkpOrgTypes_Parent.Add(new SelectListItem
            //        {
            //            Value = dl.Val,
            //            Text = dl.Desc,
            //            // Disabled = (dl.Val == "CH" || dl.Val == "CN") 
            //        });
            //}


            //var oCL = _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == oCurrChurchRole.AppGlobalOwnerId && c.Id == oCurrChurchRole.TargetChurchLevelId).FirstOrDefault();
            //var numCLIndex = oCL != null ? oCL.LevelIndex : (int?)null;

            //var currUnitLevelIndex = this._oLoggedCB?.ChurchLevel.LevelIndex;  //district (3)
            var oCL_List = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == oCurrChurchRole.AppGlobalOwnerId).ToList();
            vm.lkpChurchLevels = oCL_List  //.Where(c => c.LevelIndex >= (int)currUnitLevelIndex)
                                          .OrderByDescending(c => c.LevelIndex)
                                          .Select(c => new SelectListItem()
                                          {
                                              Value = c.Id.ToString(),
                                              Text = !string.IsNullOrEmpty(c.CustomName) ? c.CustomName : c.Name,
                                             // Disabled = c.LevelIndex < (int)currUnitLevelIndex  // presbytery (2) < district (3)  < congregation (4)
                                              //Disabled = (numCLIndex == (int?)null || c.LevelIndex < numCLIndex || oCurrChurchRole.OrgType == "CH" || oCurrChurchRole.OrgType == "CN")
                                          })
                                          .ToList();


            // var currUnitLevelIndex = this._oLoggedCB?.ChurchLevel?.LevelIndex;  // district (3) <= Congregation (4)
            var oCBLevel = this._oLoggedCB.ChurchLevel;
            if (oCBLevel == null) oCBLevel = _context.ChurchLevel.AsNoTracking()
                    .Where(c => c.AppGlobalOwnerId == this._oLoggedCB.AppGlobalOwnerId && c.Id == this._oLoggedCB.ChurchLevelId).FirstOrDefault();
            var currUnitLevelIndex = oCBLevel != null ? oCBLevel.LevelIndex : 0;
            vm.lkpChurchLevels_CRL = oCL_List //.Where(c => c.LevelIndex >= (int)currUnitLevelIndex)
                                          .OrderByDescending(c => c.LevelIndex)
                                          .Select(c => new SelectListItem()
                                          {
                                              Value = c.Id.ToString(),
                                              Text = !string.IsNullOrEmpty(c.CustomName) ? c.CustomName : c.Name,
                                              Disabled = c.LevelIndex < (int)currUnitLevelIndex  // presbytery (2) < district (3)  < congregation (4)
                                              //Disabled = (numCLIndex == (int?)null || c.LevelIndex < numCLIndex || oCurrChurchRole.OrgType == "CH" || oCurrChurchRole.OrgType == "CN")
                                          })
                                          .ToList();

            //vm.lkpCountries = _context.ChurchRole.ToList()  //.Where(c => c.Display == true)
            //                              .Select(c => new SelectListItem()
            //                              {
            //                                  Value = c.CtryAlpha3Code, // .ToString(),
            //                                  Text = c.EngName
            //                              })
            //                              .OrderBy(c => c.Text)
            //                              .ToList();


            //vm.lkpParentChurchBodies = _context.ChurchBody  //.Include(t => t.ChurchLevel)
            //            .Where(c => c.AppGlobalOwnerId == oCurrChurchRole.AppGlobalOwnerId && // c.ParentBodyChurchBodyId == oCurrChurchBody.ParentBodyChurchBodyId &&
            //                       (c.OrgType == "CH" || c.OrgType == "CN") && c.Status == "A")  // c.OrgType != "CR"
            //                .OrderBy(c => c.Name)
            //                .ToList()
            //            .Select(c => new SelectListItem()
            //            {
            //                Value = c.Id.ToString(),
            //                Text = c.Name
            //            })
            //            // .OrderBy(c => c.Text)
            //            .ToList();


            // Supervising Role could span across church levels. ex. cong. Minister-in-charge < District Minister
            //vm.lkpParentChurchRoles = _context.ChurchRole  //.Include(t => t.ChurchLevel)  
            //            .Where(c => c.AppGlobalOwnerId == oCurrChurchRole.AppGlobalOwnerId && c.OwnedByChurchBodyId == vm.numParentUnitCBId &&
            //                        c.ParentUnitOrgType == oCurrChurchRole.ParentUnitOrgType && // c.OwnedByChurchBody.ChurchLevelId == vm.numParentUnitCLId &&                                 
            //                       (c.OrgType == "GB" || c.OrgType == "IB" || c.OrgType == "CO" || c.OrgType == "DP" || c.OrgType == "CE" || c.OrgType == "CG" || c.OrgType == "SC") &&
            //                        c.Status == "A")  // c.OrgType != "CR", "CH", "CN"
            //                .OrderBy(c => c.Name)
            //                .ToList()
            //            .Select(c => new SelectListItem()
            //            {
            //                Value = c.Id.ToString(),
            //                Text = c.Name
            //            })
            //            // .OrderBy(c => c.Text)
            //            .ToList();


            return vm;
        }




        public JsonResult GetNextRoleCodePrefixByAcronym(string strAcronym)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, strCode = "" });

            var tempCode = strAcronym.ToUpper(); // + tempCnt; //+ string.Format("{0:N0}", tempCnt);
            var fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
            if (fsCount == 0) return Json(new { taskSuccess = true, strCode = tempCode });
            else
            {
                var tempCnt = 1; tempCode = strAcronym.ToUpper() + tempCnt; //+ string.Format("{0:N0}", tempCnt);
                fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
                var res = false;
                while (fsCount > 0 && fsCount < 10)
                {
                    tempCnt++; tempCode = strAcronym.ToUpper() + tempCnt; //+ string.Format("{0:N0}", tempCnt);
                    fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
                    //
                    res = fsCount == 0;
                }

                return Json(new { taskSuccess = res, strCode = tempCode });
            }
        }
        public string GetNextRoleCodePrefixByAcronym_jsonString(string strAcronym)
        {
            // if (_context == null)
            // if (!InitializeUserLogging()) return string.Empty;

            var tempCode = strAcronym.ToUpper(); // + tempCnt; // string.Format("{0:N0}", tempCnt);
            var fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
            if (fsCount == 0) return tempCode; // @"{'taskSuccess' : " + true + ", strRes :'" + tempCode + "'}";
            else
            {
                var tempCnt = 1; tempCode = strAcronym.ToUpper() + tempCnt; // + string.Format("{0:N0}", tempCnt);
                fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
                var res = false;
                while (fsCount > 0 && fsCount < 10)
                {
                    tempCnt++; tempCode = strAcronym.ToUpper() + tempCnt; //+ string.Format("{0:N0}", tempCnt);
                    fsCount = _context.AppGlobalOwner.AsNoTracking().Count(c => c.RootChurchCode == tempCode);
                    //
                    res = fsCount == 0;
                }

                return tempCode;  // @"{'taskSuccess' : " + res + ", strRes :'" + tempCode + "'}";
            }
        }
        public JsonResult GetNextCRLCodeByAcronym(string prefixCode, int? oAppGloOwnId, int? oChurchBodyId)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, strCode = string.Empty });

            // Church Role parent can be NULL -- that's network within the CB  //&& c.OrgType != "CR"
            var fsCount = _context.ChurchRole.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId);
            var tempCnt = fsCount + 1; var tempCode = prefixCode.ToUpper() + string.Format("{0:D3}", tempCnt);
            fsCount = _context.ChurchRole.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.GlobalRoleCode == tempCode);
            if (fsCount == 0) return Json(new { taskSuccess = true, strCode = tempCode });
            else
            {
                tempCnt++; tempCode = prefixCode.ToUpper() + string.Format("{0:D3}", tempCnt);
                fsCount = _context.ChurchRole.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.GlobalRoleCode == tempCode);
                var res = false;
                while (fsCount > 0 && fsCount < 10)
                {
                    tempCnt++; tempCode = prefixCode.ToUpper() + string.Format("{0:D3}", tempCnt);
                    fsCount = _context.ChurchRole.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.GlobalRoleCode == tempCode);
                    //
                    res = fsCount == 0;
                }

                return Json(new { taskSuccess = res, strCode = tempCode });
            }
        }

        public string GetNextCRLCodeByAcronym_jsonString(string prefixCode, int? oAppGloOwnId, int? oChurchBodyId)
        {
            // if (_context == null)
            // if (!InitializeUserLogging()) return string.Empty;

            var fsCount = _context.ChurchRole.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId);//&& c.OrgType != "CR"
            var tempCnt = fsCount + 1; var tempCode = prefixCode.ToUpper() + string.Format("{0:D3}", tempCnt);
            fsCount = _context.ChurchRole.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.GlobalRoleCode == tempCode);
            if (fsCount == 0) return tempCode; // @"{'taskSuccess' : " + true + ", strRes :'" + tempCode + "'}"; 
            else
            {
                tempCnt++; tempCode = prefixCode.ToUpper() + string.Format("{0:D3}", tempCnt);
                fsCount = _context.ChurchRole.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.GlobalRoleCode == tempCode);
                var res = false;
                while (fsCount > 0 && fsCount < 10)
                {
                    tempCnt++; tempCode = prefixCode.ToUpper() + string.Format("{0:D3}", tempCnt);
                    fsCount = _context.ChurchRole.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.GlobalRoleCode == tempCode);
                    //
                    res = fsCount == 0;
                }

                return tempCode; // @"{'taskSuccess' : " + res + ", strRes :'" + tempCode + "'}";
            }
        }
        public JsonResult GetNextRootCRLCodeByParentCRL(string prefixCode, int? oAppGloOwnId, int? oChurchBodyId, int? oParChurchRoleId, string strRoleCode = "")
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            //get the church code
            //get the church code
            if (string.IsNullOrEmpty(strRoleCode))
            {
                var template = new { taskSuccess = String.Empty, strRes = String.Empty };   // var definition = new { Name = "" };
                var jsCBRoleCode = GetNextCRLCodeByAcronym_jsonString(prefixCode, oAppGloOwnId, oChurchBodyId);  // string json1 = @"{'Name':'James'}";
                var jsOut = JsonConvert.DeserializeAnonymousType(jsCBRoleCode, template);

                if (jsOut != null)
                    if (bool.Parse(jsOut.taskSuccess) == true)
                        strRoleCode = jsOut.strRes;
            }


            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, strCode = string.Empty });

            var oParCRL = _context.ChurchRole.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.Id == oParChurchRoleId && c.Status == "A").FirstOrDefault();
            if (oParCRL != null && !string.IsNullOrEmpty(strRoleCode))
            {
                var strRootCode = oParCRL.RootRoleCode + (!string.IsNullOrEmpty(oParCRL.RootRoleCode) ? "--" + strRoleCode : strRoleCode);
                return Json(new { taskSuccess = true, strCode = strRootCode });

                //if (!string.IsNullOrEmpty(oParCRL.RootRoleCode))
                //    strRoleCode = oParCRL.RootRoleCode + "--" + strRoleCode; // return Json(new { taskSuccess = true, strCode = oParCRL.RootRoleCode + "--" + strRoleCode });
            }

            return Json(new { taskSuccess = true, strCode = strRoleCode });
        }

        public string GetNextRootCRLCodeByParentCRL_jsonString(string prefixCode, int? oAppGloOwnId, int? oParChurchRoleId, int? oChurchBodyId, string strRoleCode = "")
        {
            //get the church code
            if (string.IsNullOrEmpty(strRoleCode))
                strRoleCode = GetNextCRLCodeByAcronym_jsonString(prefixCode, oAppGloOwnId, oChurchBodyId);

            // if (_context == null)
            // if (!InitializeUserLogging()) return string.Empty;

            var oParCRL = _context.ChurchRole.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.OwnedByChurchBodyId == oChurchBodyId && c.Id == oParChurchRoleId && c.Status == "A").FirstOrDefault();
            if (oParCRL != null && !string.IsNullOrEmpty(strRoleCode))
            {
                var strRootCode = oParCRL.RootRoleCode + (!string.IsNullOrEmpty(oParCRL.RootRoleCode) ? "--" + strRoleCode : strRoleCode);
                return strRootCode;

                //if (!string.IsNullOrEmpty(oParCRL.RootRoleCode))
                //    strRoleCode = oParCRL.RootRoleCode + "--" + strRoleCode; // @"{'taskSuccess' : " + true + ", strRes :'" + oParCB.RootRoleCode + "--" + strCBRoleCode + "'}"; 
            }

            return strRoleCode; // string.Empty; // @"{'taskSuccess' : " + false + ", strRes :''}";
        }
        public string GetParentRoleId_NameByRootCode(string strRootCode, int? oParentRoleCLId, int? oAGOId)
        {
            // if (_context == null)
            // if (!InitializeUserLogging()) return string.Empty;

            if (string.IsNullOrEmpty(strRootCode)) return string.Empty;

            string[] arr = new string[] { strRootCode };
            if (strRootCode.Contains("--")) arr = strRootCode.Split("--");  // else it should be the ROOT... and would not get this far

            if (arr.Length > 0)
            {
                // get the list of CBs...
                var oCBList = _context.ChurchRole.AsNoTracking() //.Include(t=>t.ChurchLevel)
                    .Where(c => c.AppGlobalOwnerId == oAGOId && c.Status == "A" && c.TargetChurchLevelId == oParentRoleCLId).ToList();
                var oCBPar = oCBList.Where(c => arr.Contains(c.GlobalRoleCode)).FirstOrDefault();

                if (oCBPar != null) return oCBPar.Id + "--" + oCBPar.Name;
            }

            // not found... unless err
            return string.Empty;
        }
        public JsonResult GetParentRoleId_NameByRootCode_json(string strRootCode, int? oParentRoleCLId, int? oAGOId)
        {  // c.TargetChurchLevelId == oParentRoleCLId && (currRoleId == null || (currRoleId != null && c.Id != currRoleId))
            var strParentRole = GetParentRoleId_NameByRootCode(strRootCode, oParentRoleCLId, oAGOId);
            return Json(new { taskSuccess = !string.IsNullOrEmpty(strParentRole), strIdName = strParentRole });
        }

        public JsonResult GetChurchRoleListByRootCode(string strRootCode, int? oAGOId, int? oParRoleCLId, string strOrgTypeCode, bool addEmpty = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAGOId != null ? oAGOId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            var oCRLList = new List<SelectListItem>();
            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(oCRLList);
            ///
            var strParentRole = GetParentRoleId_NameByRootCode(strRootCode, oParRoleCLId, oAGOId);
            string[] arr = new string[] { strParentRole };
            if (strParentRole.Contains("--")) arr = strParentRole.Split("--");
            int? oParCBId = arr.Length > 0 ? int.Parse(arr[0]) : (int?)null;
            ///   
            oCRLList = _context.ChurchRole  //.Include(t => t.ChurchLev&&el)
                .Where(c => c.AppGlobalOwnerId == oAGOId && c.OwnedByChurchBodyId == oParCBId && c.OrgType == strOrgTypeCode && c.Status == "A")
                .OrderBy(c => c.Name)
                .ToList()
            .Select(c => new SelectListItem()
            {
                Value = c.Id.ToString(),
                Text = c.Name
            })
            .OrderBy(c => c.Text)
            .ToList();

            if (addEmpty) oCRLList.Insert(0, new SelectListItem { Value = "", Text = "Select..." });
            return Json(oCRLList);
        }
        public JsonResult GetChurchRoleListByParentCB(int? oAGOId, int? oRoleCBId, string strOrgTypeCode, bool addEmpty = false)
        {

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAGOId != null ? oAGOId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            var oCRLList = new List<SelectListItem>();
            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(oCRLList);
            /// 
            //oCRLList = _context.ChurchRole  //.Include(t => t.ChurchLev&&el)
            //    .Where(c => c.AppGlobalOwnerId == oAGOId && c.OwnedByChurchBodyId == oRoleCBId && c.OrgType == strOrgTypeCode && c.Status == "A")
            //    .OrderBy(c => c.Name)
            //    .ToList()

            var oCR_List_1 = _context.ChurchUnit.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel) //.Include(t => t.AppGlobalOwner) //
                       .Where(c => c.AppGlobalOwnerId == oAGOId && c.OwnedByChurchBodyId == oRoleCBId && c.OrgType == strOrgTypeCode && c.Status == "A").ToList();  //  && c.Status == "A"  // (c.OrgType != "CP") // || c.OrgType=="SC"

            oCRLList = oCR_List_1.Where(c =>
                               (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList()
        //.OrderByDescending(c => c.Name).ToList()

        .Select(c => new SelectListItem()
            {
                Value = c.Id.ToString(),
                Text = c.Name
            })
            .OrderBy(c => c.Text)
            .ToList();

            if (addEmpty) oCRLList.Insert(0, new SelectListItem { Value = "", Text = "Select Role" });
            return Json(oCRLList);
        }




        //public JsonResult GetChurchRoleListByParentCB(int? oAGOId, int? oRoleCBId, string strOrgTypeCode, bool addEmpty = false)
        //{
        //    var oCUList = new List<SelectListItem>();
        //    // if (_context == null)
        //        // if (!InitializeUserLogging()) return Json(oCUList);
        //    /// 
        //    var oCUList_1 = _context.ChurchRole  //.Include(t => t.ChurchLev&&el)
        //        .Where(c => c.AppGlobalOwnerId == oAGOId && c.OwnedByChurchBodyId == oRoleCBId && c.OrgType == strOrgTypeCode && c.Status == "A").ToList();

        //    oCUList = oCUList_1.Where(c =>
        //                              (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
        //                              (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
        //                              (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB))))
        //        .OrderBy(c => c.Name)
        //        .ToList()
        //    .Select(c => new SelectListItem()
        //    {
        //        Value = c.Id.ToString(),
        //        Text = c.Name
        //    })
        //    .OrderBy(c => c.Text)
        //    .ToList();

        //    if (addEmpty) oCUList.Insert(0, new SelectListItem { Value = "", Text = "Select Role" });
        //    return Json(oCUList);
        //}




        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddOrEdit_CRL(ChurchRoleModel vm)
        {

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");
            var strDesc = "Church role";
            // var _userTask = "Attempted accessing/modifying " + strDesc.ToLower(); 

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again.", pageIndex = vm.pageIndex });
            if (vm.oChurchRole == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again.", pageIndex = vm.pageIndex });

            ChurchRole _oChanges = vm.oChurchRole;


            /// server validations
            ///   
            if (string.IsNullOrEmpty(_oChanges.Name))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please provide the " + strDesc.ToLower() + " name", pageIndex = vm.pageIndex });

            if (string.IsNullOrEmpty(_oChanges.OrgType))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church role type is not specified", pageIndex = vm.pageIndex });

            strDesc = GetChuOrgTypeDesc(_oChanges.OrgType); // _oChanges.OrgType == "CH" ? "Congregation Head-unit" : _oChanges.OrgType == "CN" ? "Congregation" : "Church role";

            if (_oChanges.AppGlobalOwnerId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specify the denomination (church).", pageIndex = vm.pageIndex });

            var oAGO = _context.AppGlobalOwner.Find(_oChanges.AppGlobalOwnerId);
            if (oAGO == null)  // let's know the denomination... for prefic code
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Denomination (church) for " + strDesc.ToLower() + " could not be found. Please refresh and try again", pageIndex = vm.pageIndex });

            //// check...
            //if (string.IsNullOrEmpty(oAGO.PrefixKey))
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church prefix code has not been specified. Hint: configure via denomination" });

            if (_oChanges.OwnedByChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specify the attached (initiating) congregation.", pageIndex = vm.pageIndex });

            if (_oChanges.TargetChurchLevelId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specify the church level.", pageIndex = vm.pageIndex });

            var oCRL_Level = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.TargetChurchLevelId).FirstOrDefault();
            if (oCRL_Level == null)  // ... parent church level > church role level
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Role church level could not be found. Please refresh and try again", pageIndex = vm.pageIndex });

            if (this._oLoggedCB.ChurchLevel?.LevelIndex > oCRL_Level.LevelIndex)  // ... role church level > logged CB role level
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church role level cannot be higher than the level of host congregation.", pageIndex = vm.pageIndex });


            ///// get the parent id            
            //var parDesc = "church role";
            //switch (vm.oCBLevelCount)
            //{
            //    case 1: parDesc = vm.strChurchLevel_1; break;   //_oChanges.ParentChurchBodyId = vm.ChurchBodyId_1; 
            //    case 2: parDesc = vm.strChurchLevel_2; break;   //_oChanges.ParentChurchBodyId = vm.ChurchBodyId_2; 
            //    case 3: parDesc = vm.strChurchLevel_3; break;   //_oChanges.ParentChurchBodyId = vm.ChurchBodyId_3; 
            //    case 4: parDesc = vm.strChurchLevel_4; break;   //_oChanges.ParentChurchBodyId = vm.ChurchBodyId_4; 
            //    case 5: parDesc = vm.strChurchLevel_5; break;   //_oChanges.ParentChurchBodyId = vm.ChurchBodyId_5;
            //}

            //if (_oChanges.ParentRoleId == null)   // warn!
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church roles structure can be networked. Provide the parent " + parDesc.ToLower(), pageIndex = vm.pageIndex });

            //var oCRLParCB = _context.ChurchBody.Include(t => t.ChurchLevel)
            //    .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.ParentRoleCBId).FirstOrDefault();

            //if (oCRLParCB == null)  // let's know the parent church role... parent church level > church role level
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Parent (supervising) role could not be found. Please refresh and try again", pageIndex = vm.pageIndex });

            //if (oCRLLevel.LevelIndex < oCRLParCB.ChurchLevel?.LevelIndex)  // ... parent church level > church role level
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church role level cannot be higher or same as parent (supervising) role. Please select the correct Supervising Role or change role church level", pageIndex = vm.pageIndex });


            if (_oChanges.ParentRoleId != null)
            {
                if (_oChanges.ParentRoleCBId == null)  // let's know the parent church role... parent church level > church role level
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church body of supervising role not specified.", pageIndex = vm.pageIndex });

                if (_oChanges.ParentRoleId == _oChanges.Id)  // let's know the parent church role... parent church level > church role level
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church role cannot be self-parented. Please choose different role or clear supervision", pageIndex = vm.pageIndex });

                var oCUParCB = _context.ChurchBody.Include(t => t.ChurchLevel)
                                .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.ParentRoleCBId).FirstOrDefault();

                if (oCUParCB == null)  // let's know the parent church role... parent church level > church role level
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Parent church role could not be found. Please refresh and try again", pageIndex = vm.pageIndex });

                if (oCUParCB.ChurchLevel?.LevelIndex > oCRL_Level.LevelIndex)  // ... parent church level (higher) < church role level
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church level of operation cannot be higher or same as supervising church role. Please select the correct parent role or change church level", pageIndex = vm.pageIndex });

            }
            else
            {
                if (_oChanges.ParentRoleCBId != null) _oChanges.ParentRoleCBId = null; 
            }

             
            if (_oChanges.MinNumAllowed > _oChanges.MaxNumAllowed)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Maximum roles allowed cannot be less than the minimum roles allowed.", pageIndex = vm.pageIndex });


            if (!_oChanges.IsApplyToMainstreamUnit)
            {
                if (_oChanges.ApplyToChurchUnitId == null)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church unit to apply the church role not specified. Hint: check mainstream if not specific to any unit", pageIndex = vm.pageIndex });
            }
            else 
                _oChanges.ApplyToChurchUnitId = (int?)null;  // Apply to units belong to the Owned-by congregation initiating the role

            if (string.IsNullOrEmpty(_oChanges.Status))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church role status is required", pageIndex = vm.pageIndex });


            /// initial validations

            var arrData = "";
            arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<ChurchRoleModel>(arrData) : vm;
            var oCRL = vmMod.oChurchRole;

            ChurchBody oCRL_CB = null;
            if (oCRL != null) oCRL_CB = oCRL.OwnedByChurchBody;

            var fetchQry = true;
            if (oCRL_CB != null) if (oCRL_CB.ChurchLevel != null) fetchQry = false;
            if (fetchQry) oCRL_CB = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                                    .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.OwnedByChurchBodyId).FirstOrDefault();

            if (oCRL_CB == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " church body could be verified. Please refresh data and try again." });


             
            try
            {
                ///
                ModelState.Remove("oChurchRole.OwnedByChurchBodyId");
                ModelState.Remove("oChurchRole.AppGlobalOwnerId");
                ModelState.Remove("oChurchRole.ParentRoleId");
                ModelState.Remove("oChurchRole.ParentRoleCBId");  
                ModelState.Remove("oChurchRole.TargetChurchLevelId");
                ModelState.Remove("oChurchRole.OrgType");    
                ModelState.Remove("oChurchRole.ApplyToChurchUnitId");    
                //
                ModelState.Remove("oChurchRole.CreatedByUserId");
                ModelState.Remove("oChurchRole.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed to load the data to save. Please refresh and try again.", pageIndex = vm.pageIndex });

                 
                // next validations
                //church code   
                if (string.IsNullOrEmpty(_oChanges.GlobalRoleCode))
                {
                   // var oCRL_CB = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                        //.Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.OwnedByChurchBodyId).FirstOrDefault();

                    var strCodePRFX = oCRL_CB != null ? oCRL_CB.Acronym : "";   // oCRL.OwnedByChurchBody.Acronym;
                    if (string.IsNullOrEmpty(strCodePRFX))
                    {
                        strCodePRFX = "GBL"; // GL - Global
                        if (oCRL_CB != null) if (oCRL_CB.ChurchLevel != null) if (!string.IsNullOrEmpty(oCRL_CB.ChurchLevel.Acronym)) strCodePRFX = oCRL_CB.ChurchLevel.Acronym;
                    }
                    strCodePRFX = strCodePRFX + "/CRL";

                    var jsCode = GetNextCRLCodeByAcronym_jsonString(strCodePRFX, _oChanges.AppGlobalOwnerId, _oChanges.OwnedByChurchBodyId);
                    _oChanges.GlobalRoleCode = jsCode;
                }


                //root church code  
                if (string.IsNullOrEmpty(_oChanges.RootRoleCode) && !string.IsNullOrEmpty(_oChanges.GlobalRoleCode))
                {
                    var jsCode = GetNextRootCRLCodeByParentCRL_jsonString("", _oChanges.AppGlobalOwnerId, _oChanges.ParentRoleId, _oChanges.OwnedByChurchBodyId, _oChanges.GlobalRoleCode);
                    _oChanges.RootRoleCode = jsCode;
                }


                // check...
                if (string.IsNullOrEmpty(_oChanges.GlobalRoleCode) || string.IsNullOrEmpty(_oChanges.RootRoleCode))
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Role code and Root role code for " + strDesc.ToLower() + " must be specified", pageIndex = vm.pageIndex });

                 

                //
                var tm = DateTime.Now;
                _oChanges.LastMod = tm;
                _oChanges.LastModByUserId = vm.oUserId_Logged;

                //  _oChanges.ParentRoleCBId = _oChanges.ParentRoleId == null ? (int?)null : _oChanges.ParentRoleCBId;
                //   _oChanges.Status = vm.bl_IsActivated ? "A" : "D";              

                /////  
                //var _reset = _oChanges.Id == 0;

                ////validate...
                //var _userTask = "Attempted saving " + strDesc.ToLower() + ", " + _oChanges.Name.ToUpper();

                //var oCRL_List = new List<ChurchRole>();
                //if (oCRL.SharingStatus == "N")   // thus unit is shared across other congregations... get the shared list of // OrgType //
                //{
                //    oCRL_List = _context.ChurchRole.AsNoTracking().Include(t => t.OwnedByChurchBody).Include(t => t.TargetChurchLevel) // ParentRoleId can be NULL
                //                      .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.OrgType == oCRL.OrgType && c.Status == "A" &&
                //                      c.ParentRoleId == oCRL.ParentRoleId && c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId && c.SharingStatus == "N").ToList();
                //}
                //else
                //{
                //    oCRL_List = _context.ChurchRole.AsNoTracking().Include(t => t.OwnedByChurchBody).Include(t => t.TargetChurchLevel)   // ParentRoleId not relevant
                //                      .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.OrgType == oCRL.OrgType && c.Status == "A" &&
                //                      ((c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId && c.SharingStatus == "N") || (c.SharingStatus != "N"))).ToList();

                //    //exclude current for update..
                //    // if (_oChanges.Id > 0) oCRL_CBList = oCRL_CBList.Where(c => c.Id != _oChanges.Id).ToList();

                //    oCRL_List = oCRL_List.Where(c =>
                //                       (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();
                //}

                //if (_oChanges.Id == 0)
                //{
                //    var oCRL_CB = oCRL_List.Where(c => c.AppGlobalOwnerId == oCRL.AppGlobalOwnerId && c.Name == oCRL.Name).FirstOrDefault();
                //    if (oCRL_CB != null)
                //        return Json(new
                //        {
                //            taskSuccess = false,
                //            oCurrId = oCRL.Id,
                //            userMess = strDesc + ", " + oCRL.Name + " already exists [in the " +
                //            (oCRL_CB.TargetChurchLevel != null ? (!string.IsNullOrEmpty(oCRL_CB.TargetChurchLevel.CustomName) ? oCRL_CB.TargetChurchLevel.CustomName : oCRL_CB.TargetChurchLevel.Name) : "church unit")
                //            + ": " + oCRL_CB.OwnedByChurchBody.Name + "]",
                //            pageIndex = vm.pageIndex
                //        });

                //    _oChanges.Created = tm;
                //    _oChanges.CreatedByUserId = vm.oUserId_Logged;
                //    _context.Add(_oChanges);

                //    ViewBag.UserMsg = "Saved " + strDesc.ToLower() + (!string.IsNullOrEmpty(_oChanges.Name) ? ", '" + _oChanges.Name + "'" : "") + " successfully.";
                //    _userTask = "Added new " + strDesc.ToLower() + (!string.IsNullOrEmpty(_oChanges.Name) ? ", '" + _oChanges.Name + "'" : "") + " successfully";
                //}

                //else
                //{
                //    var oCRL_CB = oCRL_List.Where(c => c.Id != oCRL.Id && c.AppGlobalOwnerId == oCRL.AppGlobalOwnerId && c.Name == oCRL.Name).FirstOrDefault();
                //    if (oCRL_CB != null)
                //        return Json(new
                //        {
                //            taskSuccess = false,
                //            oCurrId = oCRL.Id,
                //            userMess = strDesc + ", " + oCRL.Name + " already exists [in the " +
                //            (oCRL_CB.TargetChurchLevel != null ? (!string.IsNullOrEmpty(oCRL_CB.TargetChurchLevel.CustomName) ? oCRL_CB.TargetChurchLevel.CustomName : oCRL_CB.TargetChurchLevel.Name) : "church unit")
                //            + ": " + oCRL_CB.OwnedByChurchBody.Name + "]",
                //            pageIndex = vm.pageIndex
                //        });


                //    _context.Update(_oChanges);
                //    //var _strDesc = strDesc.Length > 0 ? strDesc.Substring(0, 1).ToUpper() + strDesc.Substring(1) : "Denomination ";

                //    ViewBag.UserMsg = strDesc + (!string.IsNullOrEmpty(_oChanges.Name) ? ", '" + _oChanges.Name + "'" : "") + " updated successfully.";
                //    _userTask = "Updated " + strDesc.ToLower() + (!string.IsNullOrEmpty(_oChanges.Name) ? ", '" + _oChanges.Name + "'" : "") + " successfully";
                //}



                ////save denomination first... 
                //_context.SaveChanges(); // await  _cbCtx.SaveChangesAsync();



                ///  
                var _reset = _oChanges.Id == 0;

                //validate...
                var _userTask = "Attempted saving " + strDesc.ToLower() + ", " + _oChanges.Name.ToUpper();  // _userTask = "Added new " + strDesc.ToLower() + ", " + _oChanges.Name.ToUpper() + " successfully";   //  _userTask = "Updated " + strDesc.ToLower() + ", " + _oChanges.Name.ToUpper() + " successfully";
                                                                                                            //using (var _cbCtx = new ChurchModelContext(_context.Database.GetDbConnection().ConnectionString))

                //// check if already created... ACROSS SHARED AND localized
                //var oCRL_CurrList = new List<ChurchRole>();
                //if (_oChanges.SharingStatus == "N") 
                //{
                //    oCRL_CurrList = _context.ChurchRole.AsNoTracking().Include(t => t.OwnedByChurchBody).Include(t => t.TargetChurchLevel) // ParentRoleId can be NULL
                //                      .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.OrgType == _oChanges.OrgType && c.Status == "A" &&
                //                      c.ParentRoleId == _oChanges.ParentRoleId && c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId && c.SharingStatus == "N").ToList();
                //}
                //else  // thus Role is shared across other congregations... get the shared list of // OrgType //
                //{
                //    oCRL_CurrList = _context.ChurchRole.AsNoTracking().Include(t => t.OwnedByChurchBody).Include(t => t.TargetChurchLevel)   // ParentRoleId not relevant
                //                      .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.OrgType == _oChanges.OrgType && c.Status == "A" &&
                //                      ((c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId && c.SharingStatus == "N") || (c.SharingStatus != "N"))).ToList();

                //    oCRL_CurrList = oCRL_CurrList.Where(c =>
                //                       (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();
                //}

                ////exclude current for update..
                // if (_oChanges.Id > 0) oCRL_CurrList = oCRL_CurrList.Where(c => c.Id != _oChanges.Id).ToList();

                //oCRL_CurrList = oCRL_CurrList.Where(c => c.Name == _oChanges.Name).ToList();
                //if (oCRL_CurrList.Count > 0)
                //    return Json(new
                //    {
                //        taskSuccess = false,
                //        oCRLrrId = _oChanges.Id,
                //        userMess = strDesc + ", " + _oChanges.Name + " already exists [in the " +
                //        (oCRL_CurrList[0].TargetChurchLevel != null ? (!string.IsNullOrEmpty(oCRL_CurrList[0].TargetChurchLevel.CustomName) ? oCRL_CurrList[0].TargetChurchLevel.CustomName : oCRL_CurrList[0].TargetChurchLevel.Name) : "church role")
                //        + ": " + oCRL_CurrList[0].OwnedByChurchBody.Name + "]", pageIndex = vm.pageIndex
                //    });


                //// check if already created... across shared and local
                //var oCRL_CurrList = new List<ChurchRole>();
                //oCRL_CurrList = _context.ChurchRole.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel) // NVPCategoryId can be NULL
                //                  .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Status == "A" &&  // c.NVPCode == _oChanges.NVPCode && 
                //                  ((c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId) || (c.OwnedByChurchBody.ChurchLevel.LevelIndex < oCRL.OwnedByChurchBody.ChurchLevel.LevelIndex && c.SharingStatus != "N")))
                //                  .ToList();

                //oCRL_CurrList = oCRL_CurrList.Where(c =>
                //                   (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB))))
                //                   .ToList();
                ////}

                ////exclude current for update..
                //if (_oChanges.Id > 0) oCRL_CurrList = oCRL_CurrList.Where(c => c.Id != _oChanges.Id).ToList();
                //oCRL_CurrList = oCRL_CurrList.Where(c => (c.ParentRoleId == null || c.ParentRoleId == _oChanges.ParentRoleId) && c.Name.ToLower() == _oChanges.Name.ToLower())
                //                        .ToList();

                //if (oCRL_CurrList.Count() > 0)
                //{
                //    object strVal = _oChanges.Name;
                //    var _strDesc = strDesc + " specified, '" + strVal + "' " +
                //        (oCRL_CurrList[0].OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId ? "already exists in local church body" :
                //        "is already shared in higher level church body" +
                //        " (at " + (oCRL_CurrList[0].OwnedByChurchBody?.ChurchLevel != null ? (!string.IsNullOrEmpty(oCRL_CurrList[0].OwnedByChurchBody?.ChurchLevel?.CustomName) ? oCRL_CurrList[0].OwnedByChurchBody?.ChurchLevel?.CustomName : oCRL_CurrList[0].OwnedByChurchBody?.ChurchLevel?.Name) + ": " + oCRL_CurrList[0].OwnedByChurchBody.Name + ")" : "church body"));
                //    ///
                //    return Json(new { taskSuccess = false, oCRLrrId = _oChanges.Id, userMess = _strDesc, pageIndex = vm.pageIndex });
                //}



                var oCRL_CurrList = _context.ChurchRole.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel) // NVPCategoryId can be NULL
                                .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Status == "A" &&   //&& c.NVPCode == _oChanges.NVPCode 
                                      (c.OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId || c.SharingStatus != "N"))
                                .ToList();

                if (oCRL_CB.ChurchLevel != null)
                    oCRL_CurrList = oCRL_CurrList.Where(c => c.OwnedByChurchBody.ChurchLevel.LevelIndex <= oCRL_CB.ChurchLevel.LevelIndex).ToList();

                oCRL_CurrList = oCRL_CurrList.Where(c =>
                                   (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB))))
                                   .ToList();

                //}

                //exclude current for update..
                if (_oChanges.Id > 0) oCRL_CurrList = oCRL_CurrList.Where(c => c.Id != _oChanges.Id).ToList();

                oCRL_CurrList = oCRL_CurrList.Where(c => (c.ParentRoleId == _oChanges.ParentRoleId) && string.Compare(c.Name, _oChanges.Name, true) == 0)
                                             .ToList();

                if (oCRL_CurrList.Count() > 0)
                {
                    object strVal = _oChanges.Name.ToUpper(); 
                    var _strDesc = strDesc + " specified, '" + strVal + "' " +
                        (oCRL_CurrList[0].OwnedByChurchBodyId == _oChanges.OwnedByChurchBodyId ? "already exists in local church unit" :
                        "is already shared in a higher level church unit" +
                        (oCRL_CurrList[0].OwnedByChurchBody?.ChurchLevel != null ? " (at " + (!string.IsNullOrEmpty(oCRL_CurrList[0].OwnedByChurchBody?.ChurchLevel?.CustomName) ?
                                        oCRL_CurrList[0].OwnedByChurchBody?.ChurchLevel?.CustomName : oCRL_CurrList[0].OwnedByChurchBody?.ChurchLevel?.Name) + ": " +
                                            oCRL_CurrList[0].OwnedByChurchBody.Name + ")" : ""));
                    ///
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = _strDesc, pageIndex = vm.pageIndex }); 
                }



                if (_oChanges.Id == 0)
                { 
                    var oCBVal = _context.ChurchRole.AsNoTracking().Include(t => t.OwnedByChurchBody).Include(t => t.TargetChurchLevel)
                        .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && _oChanges.GlobalRoleCode != null && c.GlobalRoleCode == _oChanges.GlobalRoleCode).FirstOrDefault();
                    if (oCBVal != null)
                        return Json(new
                        {
                            taskSuccess = false,
                            oCRLrrId = _oChanges.Id,
                            userMess = "Role codes must be unique." + Environment.NewLine +
                            oCBVal.Name + " has same Role code: '" + oCBVal.GlobalRoleCode + "' [in the " +
                            (oCBVal.TargetChurchLevel != null ? (!string.IsNullOrEmpty(oCBVal.TargetChurchLevel.CustomName) ? oCBVal.TargetChurchLevel.CustomName : oCBVal.TargetChurchLevel.Name) : "church role")
                            + ": " + oCBVal.OwnedByChurchBody.Name + "]",
                            pageIndex = vm.pageIndex
                        });

                    _oChanges.Created = tm;
                    _oChanges.CreatedByUserId = vm.oUserId_Logged;
                    _context.Add(_oChanges);

                    ViewBag.UserMsg = "Saved " + strDesc.ToLower() + (!string.IsNullOrEmpty(_oChanges.Name) ? ", '" + _oChanges.Name + "'" : "") + " successfully.";
                    _userTask = "Added new " + strDesc.ToLower() + (!string.IsNullOrEmpty(_oChanges.Name) ? ", '" + _oChanges.Name + "'" : "") + " successfully";
                }

                else
                { 
                    var oCBVal = _context.ChurchRole.AsNoTracking().Include(t => t.OwnedByChurchBody).Include(t => t.TargetChurchLevel)
                        .Where(c => c.Id != _oChanges.Id && c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && _oChanges.GlobalRoleCode != null && c.GlobalRoleCode == _oChanges.GlobalRoleCode)
                                        .FirstOrDefault();
                    if (oCBVal != null) return Json(new
                    {
                        taskSuccess = false,
                        oCRLrrId = _oChanges.Id,
                        userMess = "Role codes must be unique." + Environment.NewLine +
                            oCBVal.Name + " has same Role code: '" + oCBVal.GlobalRoleCode + "' [in the " +
                            (oCBVal.TargetChurchLevel != null ? (!string.IsNullOrEmpty(oCBVal.TargetChurchLevel.CustomName) ? oCBVal.TargetChurchLevel.CustomName : oCBVal.TargetChurchLevel.Name) : "church role")
                            + ": " + oCBVal.OwnedByChurchBody.Name + "]",
                        pageIndex = vm.pageIndex
                    });


                    _context.Update(_oChanges);
                    //var _strDesc = strDesc.Length > 0 ? strDesc.Substring(0, 1).ToUpper() + strDesc.Substring(1) : "Denomination ";

                    ViewBag.UserMsg = strDesc + (!string.IsNullOrEmpty(_oChanges.Name) ? ", '" + _oChanges.Name + "'" : "") + " updated successfully.";
                    _userTask = "Updated " + strDesc.ToLower() + (!string.IsNullOrEmpty(_oChanges.Name) ? ", '" + _oChanges.Name + "'" : "") + " successfully";
                }


                //save denomination first... 
                _context.SaveChanges(); // await  _cbCtx.SaveChangesAsync();

                 

                var _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "T",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vm.oUserId_Logged, _tm, _tm, vm.oUserId_Logged, vm.oUserId_Logged) );


                var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);
                TempData["oVmCurr"] = _vmMod; TempData.Keep();

                return Json(new { taskSuccess = true, oCurrId = _oChanges.Id, resetNew = _reset, userMess = ViewBag.UserMsg, pageIndex = vm.pageIndex });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed saving church role details. Err: " + ex.Message, pageIndex = vm.pageIndex });
            }
        }

        public IActionResult Delete_CRL(int? oAppGloOwnId, int? oChurchBodyId, int? loggedUserId, int id, bool forceDeleteConfirm = false)
        {

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }

            //// refreshValues...
            //var _connstr_CL = this.GetCL_DBConnString();
            //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");


            // if (!InitializeUserLogging())
            // return RedirectToAction("LoginUserAcc", "UserLogin");

            // var strDesc = setIndex == 1 ? "System profile" : setIndex == 2 ? "Church admin profile" : "Church user profile";
            var strDesc = "Church role";
            var tm = DateTime.Now; var _tm = DateTime.Now; var _userTask = "Attempted saving  " + strDesc;
            //
            try
            {
                var strUserDenom = "RCMS Client";

                //if (setIndex != 1)
                //{
                //    if (oAppGloOwnId == null || oChurchRoleId == null)
                //        return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Denomination/church of " + strDesc + " unknown. Please refesh and try again." });

                //    var oAGO = _context.AppGlobalOwner.Find(oAppGloOwnId);
                //    var oCRL = _context.ChurchRole.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchRoleId).FirstOrDefault();

                //    if (oAGO == null || oCRL == null)
                //        return Json(new { taskSuccess = false, oCurrId = "", userMess = "Specified denomination and church role could not be retrieved. Please refresh and try again.", signOutToLogIn = false });

                //    strUserDenom = oCRL.Name + (!string.IsNullOrEmpty(oAGO.Acronym) ? ", " + oAGO.Acronym : oAGO.OwnerName);
                //    strUserDenom = "--" + (string.IsNullOrEmpty(strUserDenom) ? "Denomination: " + strUserDenom : strUserDenom);
                //}


                var oCRL = _context.ChurchRole.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAppGloOwnId &&
                                          (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == oChurchBodyId)).FirstOrDefault(); // .Include(c => c.ChurchRoles)
                if (oCRL == null)
                {
                    _userTask = "Attempted deleting " + strDesc.ToLower(); // + ", " + (strTag + ":- " + oCRL.CBValue);  // var _userTask = "Attempted saving  " + strDesc;
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                         "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                        );

                    return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = strDesc + " to delete could not be retrieved." });
                }

                var strTag = oCRL.Name;
                var saveDelete = true;
                // ensuring cascade delete where there's none!

                //check CBCategory for this UP to delete 

                //var CBs = _context.ChurchRole.Where(c => c.ParentUnitId == oCRL.Id || c.churchbody == oCRL.MSTR_ParentUnitId ||
                //                            c.Id == oCRL.Id || c.MSTR_ChurchRoleId == oCRL.ParentUnitId ||
                //                            c.OwnedByChurchRoleId == oCRL.Id || c.SupervisedByChurchRoleId == oCRL.Id ||).ToList();
                var CRs = _context.ChurchRole.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ParentRoleId == oCRL.Id).ToList();  
                var MCRs = _context.MemberChurchRole.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchRoleId == oCRL.Id).ToList();

                //using (var _userCtx = new MSTR_DbContext(_context.Database.GetDbConnection().ConnectionString))
                //{
                if ((CRs.Count() + CRs.Count() + MCRs.Count()) > 0)
                {
                    if (forceDeleteConfirm == false)
                    {
                        var strConnTabs = "Church role, Member church role";
                        saveDelete = false;

                        // check user privileges to determine... administrator rights
                        //log...
                        _userTask = "Attempted deleting " + strDesc.ToLower();
                        _tm = DateTime.Now;
                        _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                            );

                        return Json(new
                        {
                            taskSuccess = false,
                            tryForceDelete = false,
                            oCurrId = id,
                            userMess = "Specified " + strDesc.ToLower() +
                                            " to delete has been used elsewhere in the system [" + strConnTabs + "]. Delete cannot be done unless dependent-references are removed."
                        });
                    }

                    //to be executed only for higher privileges... // FORCE-DELETE...
                }

                //successful...
                if (saveDelete)
                {
                    _context.ChurchRole.Remove(oCRL);
                    _context.SaveChanges();

                    //   DetachAllEntities(_userCtx);

                    //audit...
                    _userTask = "Deleted " + strDesc.ToLower();
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                            );

                    return Json(new { taskSuccess = true, tryForceDelete = false, oCurrId = oCRL.Id, userMess = strDesc + " successfully deleted." });
                }

                //}


                _userTask = "Attempted deleting " + strDesc.ToLower() + " -- but FAILED. Data unavailable.";   // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                );

                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "No " + strDesc.ToLower() + " data available to delete. Try again" });
            }

            catch (Exception ex)
            {
                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [ ID= " + id + "] FAILED. ERR: " + ex.Message;  // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                                    "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                                   );
                //
                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Failed deleting " + strDesc.ToLower() + ". Err: " + ex.Message });
            }
        }


        //CLA

        //CLARD

        //CMT

        //CMS

        //CT






        // MCCF

        [HttpGet]  
        public IActionResult AddOrEdit_ADHC(int setIndex = 0, int? oAppGloOwnId = null, int? oChurchBodyId = null, int? oUserId = null)
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return View("_ErrorPage");
                    }
                }

                // if (!InitializeUserLogging())
                // return RedirectToAction("LoginUserAcc", "UserLogin");

                if (oAppGloOwnId == null) oAppGloOwnId = this._oLoggedAGO.Id;
                if (oChurchBodyId == null) oChurchBodyId = this._oLoggedCB.Id;
                if (oUserId == null) oUserId = this._oLoggedUser.Id;

                var oAGO = _context.AppGlobalOwner.Find(oAppGloOwnId);
                var oCB_OwnedBy = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchBodyId).FirstOrDefault();
                if (oAGO == null || oCB_OwnedBy == null)  // || oCU_Parent == null church units may be networked...
                {
                    
                    return PartialView("_ErrorPage");
                }   // oCPRModel.oChurchPeriod.OwnedByChurchBodyId = oChurchBodyId; 


                var strDesc = "Parameter";
                var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();  // _userTask = "Attempted creating new denomination (church)"; // _userTask = "Opened denomination (church)-" + oCFT_MDL.oChurchFaithType.FaithDescription;

                
                    var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.OwnedByChurchBody)
                                       .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && 
                                                  (c.NVPCode == "MCCF" || c.NVPCode == "CPRD" || c.NVPCode == "CTS" || c.NVPCode == "GEN_AGE_GRP" || c.NVPCode == "YN_PRMT")).ToList();  //Yes, No parameters

                oNVP_List_1 = oNVP_List_1.Where(c =>
                                       (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    var oNVP_List = (
                                    from t_nvp in oNVP_List_1.ToList()
                                    from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == t_nvp.AppGlobalOwnerId)
                                        // from t_nvp_c in _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_nvp.AppGlobalOwnerId && c.Id == t_nvp.NVPCategoryId).DefaultIfEmpty()
                                        // from t_ctry in _context.Country.AsNoTracking().Where(c => c.CtryAlpha3Code == t_nvp.CtryAlpha3Code).DefaultIfEmpty()
                                    from t_cb_o in _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == t_nvp.OwnedByChurchBodyId).DefaultIfEmpty()

                                    select new AppUtilityNVPModel()
                                    {
                                        oAppGloOwnId = t_nvp.AppGlobalOwnerId,
                                        oAppGlobalOwn = t_ago, //t_nvp.AppGlobalOwner,
                                        oChurchBodyId = t_nvp.OwnedByChurchBodyId,
                                        oChurchBody = t_nvp.OwnedByChurchBody,
                                        ///
                                        oAppUtilityNVP = t_nvp,
                                        modOwnedByChurchBody = t_cb_o,

                                        // strAppUtilityNVP = t_nvp.ValueType == "T" || t_nvp.ValueType == null ? t_nvp.NVPValue : (t_nvp.ValueType == "N" ? t_nvp.NVPNumVal.ToString() : (t_nvp.ValueType == "D" ? (t_nvp.NVPFromDate != null && t_nvp.NVPToDate != null ? (String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPFromDate) + " - " + String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPToDate)) : ((t_nvp.NVPFromDate != null ? String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPFromDate) : "") + ((t_nvp.NVPToDate != null ? String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPToDate) : "")))) : null)),
                                        //
                                        //strNVPValue_Cumm = t_nvp.ValueType == "T" ? t_nvp.NVPValue :
                                        //             (t_nvp.ValueType == "N" ? String.Format("{0:N0}", t_nvp.NVPNumVal) :
                                        //             (t_nvp.ValueType == "D" ? ((t_nvp.NVPFromDate != null ? DateTime.Parse(t_nvp.NVPFromDate.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "") +
                                        //             (t_nvp.NVPToDate != null ? "-" + DateTime.Parse(t_nvp.NVPFromDate.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "")) : null)),

                                        //strNVPValue = t_nvp.NVPValue,
                                        //numAppUtilityNVP = t_nvp.ValueType == "N" ? t_nvp.NVPNumVal : (int?)null,
                                        //dt1AppUtilityNVP = t_nvp.ValueType == "D" ? t_nvp.NVPFromDate : (DateTime?)null,
                                        //dt2AppUtilityNVP = t_nvp.ValueType == "D" ? t_nvp.NVPToDate : (DateTime?)null,


                                        /// 
                                        strNVPValue_Cumm = t_nvp.ValueType == "T" || t_nvp.ValueType == null ? t_nvp.NVPValue :
                                                          (t_nvp.ValueType == "N" ? ((t_nvp.NVPNumVal != null && t_nvp.NVPNumValTo != null ? t_nvp.NVPNumVal.ToString() + " - " + t_nvp.NVPNumValTo.ToString() : ((t_nvp.NVPNumVal != null ? t_nvp.NVPNumVal.ToString() : "") + (t_nvp.NVPNumValTo != null ? t_nvp.NVPNumValTo.ToString() : "")))) :
                                                          (t_nvp.ValueType == "D" ? (t_nvp.NVPFromDate != null && t_nvp.NVPToDate != null ? (String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPFromDate) + " - " + String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPToDate)) : ((t_nvp.NVPFromDate != null ? String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPFromDate) : "") + ((t_nvp.NVPToDate != null ? String.Format("{0:d MMM yyyy}", (DateTime)t_nvp.NVPToDate) : "")))) : null)),
                                        ///
                                        strNVPValue = t_nvp.ValueType == "T" ? t_nvp.NVPValue : null,
                                        numAppUtilityNVP = t_nvp.ValueType == "N" ? t_nvp.NVPNumVal : (int?)null,
                                        numAppUtilityNVPTo = t_nvp.ValueType == "N" ? t_nvp.NVPNumValTo : (int?)null,
                                        dt1AppUtilityNVP = t_nvp.ValueType == "D" ? t_nvp.NVPFromDate : (DateTime?)null,
                                        dt2AppUtilityNVP = t_nvp.ValueType == "D" ? t_nvp.NVPToDate : (DateTime?)null,

                                        ///
                                        strNVPCode = t_nvp.NVPCode,  // MCCF
                                        strNVPSubCode = t_nvp.NVPSubCode,  // AUTO=Y/N, PFX, PFX_DLM, SFX, SFX_DLM, LDZR
                                        strNVPTag = GetNVPTagDesc(t_nvp.NVPCode),
                                        strNVPSubTag = GetNVPSubTagDesc(t_nvp.NVPSubCode),

                                        //numOrderIndex = t_nvp.OrderIndex,
                                        //strNVPCategory = t_nvp_c != null ? t_nvp_c.NVPValue : "",
                                        //strCountry = t_ctry != null ? (!string.IsNullOrEmpty(t_ctry.EngName) ? t_ctry.EngName : t_ctry.CtryAlpha3Code) : "",
                                        // strOccurFrequency = GetPeriodDesc(t_nvp.OccurFreqCode),
                                        //strNVPStatus = GetStatusDesc(t_nvp.NVPStatus),

                                        bl_NVPStatus_Active = t_nvp.NVPStatus == "A",
                                        // bl_ApplyToClergyOnly = t_nvp.ApplyToClergyOnly,
                                        // bl_IsAvailable = t_nvp.IsAvailable,
                                        // bl_IsDeceased = t_nvp.IsDeceased, 
                                        //
                                        strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "",
                                        strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "",
                                        strOwnershipCode = t_nvp.OwnedByChurchBodyId != null ? (t_nvp.OwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N",
                                        strOwnershipStatus = t_nvp.OwnedByChurchBodyId != null ? (t_nvp.OwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (t_nvp.OwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None",
                                        strSharingStatus = GetSharingStatusDesc(t_nvp.SharingStatus)
                                    })
                                    // .OrderBy(c => c.strNVPCode).ThenBy(c => c.numOrderIndex)
                                    //.ThenBy(c => c.strNVPValue).ThenBy(c => c.numAppUtilityNVP).ThenByDescending(c => c.dt1AppUtilityNVP).ThenByDescending(c => c.dt2AppUtilityNVP)
                                    .ToList();

                    // create the MCCF model from the List on the fly...

                    var oADHC_Model = new AdhocParameterModel();

                    // var oNVPModel = new AppUtilityNVPModel();
                    oADHC_Model.oUserId_Logged = _oLoggedUser.Id;
                    oADHC_Model.oChurchBodyId_Logged = this._oLoggedCB.Id;
                    oADHC_Model.oChurchBodyId = this._oLoggedCB.Id;
                    oADHC_Model.oChurchBody = this._oLoggedCB;
                    oADHC_Model.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                    oADHC_Model.oAppGloOwnId = this._oLoggedAGO.Id;
                    oADHC_Model.oAppGlobalOwn = this._oLoggedAGO;
                    oADHC_Model.pageIndex = 1;
                  //  oADHC_Model.filterIndex = filterIndex;
                    oADHC_Model.setIndex = (int)setIndex;
                    oADHC_Model.tempSetIndex = (int)setIndex;
                //  oADHC_Model.subSetIndex = (int)subSetIndex;
                    oADHC_Model.lsAppUtilityNVPModels = oNVP_List;


                // CPRD -- 21
                // 25 --- any..
                if (setIndex == 0 || setIndex == 6 || setIndex == 25 || setIndex == 21)
                {
                    var oCPRD_Model = new ChurchPeriodDefinitionModel();
                    var oCPRDList = oNVP_List.Where(c => c.oAppUtilityNVP.NVPCode == "CPRD").ToList();
                    ///
                    if (oCPRDList.Count > 0)
                    {
                        oCPRD_Model.modNVPCode = oCPRDList[0].oAppUtilityNVP.NVPCode;  // "CPRD"; 
                        ///
                        var oCPRDList_AP = oCPRDList.Where(c => c.oAppUtilityNVP.NVPSubCode.EndsWith("_AP")).ToList();
                        oCPRD_Model.modSharingStatus_AP = oCPRDList_AP.Count > 0 ? oCPRDList_AP[0].oAppUtilityNVP.SharingStatus : "N";  // at least 1 is enough...
                        oCPRD_Model.modOwnedByChurchBodyId_AP = oCPRDList_AP.Count > 0 ? oCPRDList_AP[0].modOwnedByChurchBody?.Id : this._oLoggedCB.Id;  
                        oCPRD_Model.modOwnedByChurchBody_AP = oCPRDList_AP.Count > 0 ? oCPRDList_AP[0].modOwnedByChurchBody : this._oLoggedCB;
                        /// 
                        var oCPRD_ST_AP = oCPRDList.Where(c => c.oAppUtilityNVP.NVPSubCode == "CPRD_ST_AP").FirstOrDefault();
                        oCPRD_Model.PeriodStartDate_AP  = oCPRD_ST_AP != null ? (DateTime)oCPRD_ST_AP.oAppUtilityNVP?.NVPFromDate : (DateTime?)null;
                        var oCPRD_INT_AP = oCPRDList.Where(c => c.oAppUtilityNVP.NVPSubCode == "CPRD_INT_AP").FirstOrDefault();
                        oCPRD_Model.numPeriodInterval_AP = oCPRD_INT_AP != null ? oCPRD_INT_AP.oAppUtilityNVP?.NVPNumVal : (decimal?)null;
                        oCPRD_Model.strIntervalFrequency_AP = oCPRD_INT_AP != null ? oCPRD_INT_AP.oAppUtilityNVP?.OccurFreqCode : null;
                        //var oCPRD_PIF_AP = oCPRDList.Where(c => c.oAppUtilityNVP.NVPSubCode == "CPRD_PIF_AP").FirstOrDefault();
                        //oCPRD_Model.strIntervalFrequency_AP = oCPRD_PIF_AP != null ? oCPRD_PIF_AP.oAppUtilityNVP?.NVPValue : null;
                        var oCPRD_DAYS_AP = oCPRDList.Where(c => c.oAppUtilityNVP.NVPSubCode == "CPRD_DAYS_AP").FirstOrDefault();
                        oCPRD_Model.numPeriodIntervalDays_AP = oCPRD_DAYS_AP != null ? oCPRD_DAYS_AP.oAppUtilityNVP?.NVPNumVal : (decimal?)null;
                        ///
                        var tcb_o_AP = oCPRD_Model.modOwnedByChurchBody_AP;
                        oCPRD_Model.strChurchLevel_OwnedByCB_AP = tcb_o_AP != null ? (tcb_o_AP.ChurchLevel != null ? (!string.IsNullOrEmpty(tcb_o_AP.ChurchLevel.CustomName) ? tcb_o_AP.ChurchLevel.CustomName : tcb_o_AP.ChurchLevel.Name) : "") : "";
                        oCPRD_Model.strOwnedByChurchBody_AP = tcb_o_AP != null ? tcb_o_AP.Name : "";
                        oCPRD_Model.strOwnershipCode_AP = oCPRD_Model.modOwnedByChurchBodyId_AP != null ? (oCPRD_Model.modOwnedByChurchBodyId_AP != this._oLoggedCB.Id ? "I" : (oCPRD_Model.modOwnedByChurchBodyId_AP == this._oLoggedCB.Id ? "O" : "X")) : "N";
                        oCPRD_Model.strOwnershipStatus_AP = oCPRD_Model.modOwnedByChurchBodyId_AP != null ? (oCPRD_Model.modOwnedByChurchBodyId_AP != this._oLoggedCB.Id ? "Shared" : (oCPRD_Model.modOwnedByChurchBodyId_AP == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None";
                        oCPRD_Model.strSharingStatus_AP = GetSharingStatusDesc(oCPRD_Model.modSharingStatus_AP);
                        ///
                        ///
                        var oCPRDList_CP = oCPRDList.Where(c => c.oAppUtilityNVP.NVPSubCode.EndsWith("_CP")).ToList();
                        oCPRD_Model.modSharingStatus_CP = oCPRDList_CP.Count > 0 ? oCPRDList_CP[0].oAppUtilityNVP.SharingStatus : "N";  // at least 1 is enough...
                        oCPRD_Model.modOwnedByChurchBodyId_CP = oCPRDList_CP.Count > 0 ? oCPRDList_CP[0].modOwnedByChurchBody?.Id : this._oLoggedCB.Id;
                        oCPRD_Model.modOwnedByChurchBody_CP = oCPRDList_CP.Count > 0 ? oCPRDList_CP[0].modOwnedByChurchBody : this._oLoggedCB; 
                        ///
                        var oCPRD_ST_CP = oCPRDList.Where(c => c.oAppUtilityNVP.NVPSubCode == "CPRD_ST_CP").FirstOrDefault();
                        oCPRD_Model.PeriodStartDate_CP = oCPRD_ST_CP != null ? (DateTime)oCPRD_ST_CP.oAppUtilityNVP?.NVPFromDate : (DateTime?)null;
                        var oCPRD_INT_CP = oCPRDList.Where(c => c.oAppUtilityNVP.NVPSubCode == "CPRD_INT_CP").FirstOrDefault();
                        oCPRD_Model.numPeriodInterval_CP = oCPRD_INT_CP != null ? oCPRD_INT_CP.oAppUtilityNVP?.NVPNumVal : (decimal?)null;
                        oCPRD_Model.strIntervalFrequency_CP = oCPRD_INT_AP != null ? oCPRD_INT_CP.oAppUtilityNVP?.OccurFreqCode : null;
                        var oCPRD_DAYS_CP = oCPRDList.Where(c => c.oAppUtilityNVP.NVPSubCode == "CPRD_DAYS_CP").FirstOrDefault();
                        oCPRD_Model.numPeriodIntervalDays_CP = oCPRD_DAYS_CP != null ? oCPRD_DAYS_CP.oAppUtilityNVP?.NVPNumVal : (decimal?)null;
                        //var oCPRD_PIF_CP = oCPRDList.Where(c => c.oAppUtilityNVP.NVPSubCode == "CPRD_PIF_CP").FirstOrDefault();
                        //oCPRD_Model.strIntervalFrequency_CP = oCPRD_PIF_CP != null ? oCPRD_PIF_CP.oAppUtilityNVP?.NVPValue : null;
                        ///
                        var tcb_o_CP = oCPRD_Model.modOwnedByChurchBody_CP;
                        oCPRD_Model.strChurchLevel_OwnedByCB_CP = tcb_o_CP != null ? (tcb_o_CP.ChurchLevel != null ? (!string.IsNullOrEmpty(tcb_o_CP.ChurchLevel.CustomName) ? tcb_o_CP.ChurchLevel.CustomName : tcb_o_CP.ChurchLevel.Name) : "") : "";
                        oCPRD_Model.strOwnedByChurchBody_CP = tcb_o_CP != null ? tcb_o_CP.Name : "";
                        oCPRD_Model.strOwnershipCode_CP = oCPRD_Model.modOwnedByChurchBodyId_CP != null ? (oCPRD_Model.modOwnedByChurchBodyId_CP != this._oLoggedCB.Id ? "I" : (oCPRD_Model.modOwnedByChurchBodyId_CP == this._oLoggedCB.Id ? "O" : "X")) : "N";
                        oCPRD_Model.strOwnershipStatus_CP = oCPRD_Model.modOwnedByChurchBodyId_CP != null ? (oCPRD_Model.modOwnedByChurchBodyId_CP != this._oLoggedCB.Id ? "Shared" : (oCPRD_Model.modOwnedByChurchBodyId_CP == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None";
                        oCPRD_Model.strSharingStatus_CP = GetSharingStatusDesc(oCPRD_Model.modSharingStatus_CP);
                        ///
                        ///
                        var oSameAsAccPer = oCPRDList.Where(c => c.oAppUtilityNVP.NVPSubCode == "CPEQLAP").FirstOrDefault();
                        oCPRD_Model.bl_IsChuPeriodSameAsAccPeriod = oSameAsAccPer != null ? oSameAsAccPer.strNVPValue == "Y" : false;
                         
                    }
                    else
                    {
                        oCPRD_Model.modNVPCode = "CPRD";
                        ///  
                        oCPRD_Model.modSharingStatus_AP = "N";
                        oCPRD_Model.modOwnedByChurchBodyId_AP = oChurchBodyId; // this._oLoggedCB.Id; //  oCPRD_Model.modOwnedByChurchBody_AP = this._oLoggedCB; 
                        var t_cb_o = _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == oCPRD_Model.modOwnedByChurchBodyId_AP).FirstOrDefault();
                        oCPRD_Model.modOwnedByChurchBody_AP = t_cb_o;
                        ///
                        var ts = new DateTime(DateTime.Now.Year, 1, 1);
                        oCPRD_Model.PeriodStartDate_AP = ts.Date;  // null;
                        oCPRD_Model.numPeriodInterval_AP = 1; // null;
                        oCPRD_Model.numPeriodIntervalDays_AP = DateTime.IsLeapYear(DateTime.Now.Year) ? 366 : 365; // null;
                        oCPRD_Model.strIntervalFrequency_AP = "Y"; //year-- null;
                        ///
                        oCPRD_Model.strChurchLevel_OwnedByCB_AP = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "";
                        oCPRD_Model.strOwnedByChurchBody_AP = t_cb_o != null ? t_cb_o.Name : "";
                        oCPRD_Model.strOwnershipCode_AP = oCPRD_Model.modOwnedByChurchBodyId_AP != null ? (oCPRD_Model.modOwnedByChurchBodyId_AP != this._oLoggedCB.Id ? "I" : (oCPRD_Model.modOwnedByChurchBodyId_AP == this._oLoggedCB.Id ? "O" : "X")) : "N";
                        oCPRD_Model.strOwnershipStatus_AP = oCPRD_Model.modOwnedByChurchBodyId_AP != null ? (oCPRD_Model.modOwnedByChurchBodyId_AP != this._oLoggedCB.Id ? "Shared" : (oCPRD_Model.modOwnedByChurchBodyId_AP == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None";
                        oCPRD_Model.strSharingStatus_AP = GetSharingStatusDesc(oCPRD_Model.modSharingStatus_AP);
                        ///
                        ///
                        oCPRD_Model.modSharingStatus_CP = oCPRD_Model.modSharingStatus_AP; // "N";
                        oCPRD_Model.modOwnedByChurchBodyId_CP = oCPRD_Model.modOwnedByChurchBodyId_AP; // this._oLoggedCB.Id; //  oCPRD_Model.modOwnedByChurchBody_CP = this._oLoggedCB; 
                       // var t_cb_o = _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == oCPRD_Model.modOwnedByChurchBodyId_CP).FirstOrDefault();
                        oCPRD_Model.modOwnedByChurchBody_CP = oCPRD_Model.modOwnedByChurchBody_AP; //t_cb_o;
                        ///
                        oCPRD_Model.PeriodStartDate_CP = oCPRD_Model.PeriodStartDate_AP; // null;
                        oCPRD_Model.numPeriodInterval_CP = oCPRD_Model.numPeriodInterval_AP; // null;
                        oCPRD_Model.numPeriodIntervalDays_CP = oCPRD_Model.numPeriodIntervalDays_AP; // null;
                        oCPRD_Model.strIntervalFrequency_CP = oCPRD_Model.strIntervalFrequency_AP; // null;
                        ///
                        oCPRD_Model.strChurchLevel_OwnedByCB_CP = oCPRD_Model.strChurchLevel_OwnedByCB_AP; // t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "";
                        oCPRD_Model.strOwnedByChurchBody_CP = oCPRD_Model.strOwnedByChurchBody_AP; // t_cb_o != null ? t_cb_o.Name : "";
                        oCPRD_Model.strOwnershipCode_CP = oCPRD_Model.strOwnershipCode_AP; // oCPRD_Model.modOwnedByChurchBodyId_CP != null ? (oCPRD_Model.modOwnedByChurchBodyId_CP != this._oLoggedCB.Id ? "I" : (oCPRD_Model.modOwnedByChurchBodyId_CP == this._oLoggedCB.Id ? "O" : "X")) : "N";
                        oCPRD_Model.strOwnershipStatus_CP = oCPRD_Model.strOwnershipStatus_AP; // oCPRD_Model.modOwnedByChurchBodyId_CP != null ? (oCPRD_Model.modOwnedByChurchBodyId_CP != this._oLoggedCB.Id ? "Shared" : (oCPRD_Model.modOwnedByChurchBodyId_CP == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None";
                        oCPRD_Model.strSharingStatus_CP = oCPRD_Model.strSharingStatus_AP; // GetSharingStatusDesc(oCPRD_Model.modSharingStatus_CP);
                        ///
                        ///
                        oCPRD_Model.bl_IsChuPeriodSameAsAccPeriod = true;
                    }

                    //oADHC_Model.strSampleTextLDZR = oADHC_Model.strPrefix + (oADHC_Model.bl_IsLeadingZeros ? "0001" : "1") + oADHC_Model.strSuffix;
                    //oADHC_Model.oAppUtilityNVP = new AppUtilityNVP();

                    oCPRD_Model.tempSetIndex = oADHC_Model.tempSetIndex;
                    oADHC_Model.oChurchPeriodDefinitionModel = oCPRD_Model;
                    //oADHC_Model.lsAppUtilityNVPModels = oCPRDList;
                    //ViewData["oSetupData_CPRD_List"] = oCPRDList;
                    // oADHC_Model.oMemberCustomCodeFormatModel = oADHC_Model;
                    
                   // ViewData["oAppUtilityCPRDModel"] = oADHC_Model;
                                       

                    ///// specific parameter...
                    //if (setIndex == 21) {
                    //    var _oADHC_Model_1 = Newtonsoft.Json.JsonConvert.SerializeObject(oADHC_Model);
                    //    TempData["oVmCurrMod"] = _oADHC_Model_1; TempData.Keep();

                    //    return PartialView("_AddOrEdit_ADHC", oADHC_Model);
                    //}                    
                }

                // MCCF -- 22
                if (setIndex == 0 || setIndex == 6 || setIndex == 25 ||  setIndex == 22)
                {
                    var oMCCF_Model = new MemberCustomCodeFormatModel();
                    var oMCCFList = oNVP_List.Where(c => c.oAppUtilityNVP.NVPCode == "MCCF").ToList();
                    ///
                    if (oMCCFList.Count > 0)
                    {
                        oMCCF_Model.modNVPCode = oMCCFList[0].oAppUtilityNVP.NVPCode;  // at least 1 is enough...
                        oMCCF_Model.modSharingStatus = oMCCFList[0].oAppUtilityNVP.SharingStatus;  // at least 1 is enough...
                        oMCCF_Model.modOwnedByChurchBodyId = oMCCFList[0].modOwnedByChurchBody?.Id; // oAppUtilityNVP.OwnedByChurchBodyId; 
                        oMCCF_Model.modOwnedByChurchBody = oMCCFList[0].modOwnedByChurchBody;
                        ///
                        var oAUT_GN = oMCCFList.Where(c => c.oAppUtilityNVP.NVPSubCode == "AUT_GN").FirstOrDefault();
                        oMCCF_Model.bl_IsAutogenMCCFCode = oAUT_GN != null ? oAUT_GN.strNVPValue == "Y" : false;

                        var oPFX = oMCCFList.Where(c => c.oAppUtilityNVP.NVPSubCode == "PFX").FirstOrDefault();
                        oMCCF_Model.strPrefix = oPFX != null ? oPFX.strNVPValue : "";
                        //var oPFX_DLM = oMCCFList.Where(c => c.oAppUtilityNVP.NVPSubCode == "PFX_DLM").FirstOrDefault();
                        //oMCCF_Model.strPrefixDelim = oPFX_DLM != null ? oPFX_DLM.strNVPValue : "";
                        var oSFX = oMCCFList.Where(c => c.oAppUtilityNVP.NVPSubCode == "SFX").FirstOrDefault();
                        oMCCF_Model.strSuffix = oSFX != null ? oSFX.strNVPValue : "";
                        //var oSFX_DLM = oMCCFList.Where(c => c.oAppUtilityNVP.NVPSubCode == "SFX_DLM").FirstOrDefault();
                        //oMCCF_Model.strSuffixDelim = oSFX_DLM != null ? oSFX_DLM.strNVPValue : "";
                        var oLDZR = oMCCFList.Where(c => c.oAppUtilityNVP.NVPSubCode == "LDZR").FirstOrDefault();
                        oMCCF_Model.bl_IsLeadingZeros = oLDZR != null ? oLDZR.strNVPValue == "Y" : false;
                        ///
                        //oMCCF_Model.modSharingStatus = "N";
                        //oMCCF_Model.modOwnedByChurchBodyId = oChurchBodyId; // this._oLoggedCB.Id; //  oMCCF_Model.modOwnedByChurchBody = this._oLoggedCB; 
                        //var t_cb_o = _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == oMCCF_Model.modOwnedByChurchBodyId).FirstOrDefault();
                        //oMCCF_Model.modOwnedByChurchBody = t_cb_o;
                        ///
                        var t_cb_o = oMCCF_Model.modOwnedByChurchBody;
                        oMCCF_Model.strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "";
                        oMCCF_Model.strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "";
                        oMCCF_Model.strOwnershipCode = oMCCF_Model.modOwnedByChurchBodyId != null ? (oMCCF_Model.modOwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (oMCCF_Model.modOwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N";
                        oMCCF_Model.strOwnershipStatus = oMCCF_Model.modOwnedByChurchBodyId != null ? (oMCCF_Model.modOwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (oMCCF_Model.modOwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None";
                        oMCCF_Model.strSharingStatus = GetSharingStatusDesc(oMCCF_Model.modSharingStatus);
                    }
                    else
                    {
                        oMCCF_Model.modNVPCode = "MCCF";
                        oMCCF_Model.modSharingStatus = "N";
                        oMCCF_Model.modOwnedByChurchBodyId = oChurchBodyId; // this._oLoggedCB.Id;
                        /// 
                        var t_cb_o = _context.ChurchBody.Include(t => t.ChurchLevel).AsNoTracking()
                                        .Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == oMCCF_Model.modOwnedByChurchBodyId).FirstOrDefault();
                        oMCCF_Model.modOwnedByChurchBody = t_cb_o;
                        ///
                        oMCCF_Model.strChurchLevel_OwnedByCB = t_cb_o != null ? (t_cb_o.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb_o.ChurchLevel.CustomName) ? t_cb_o.ChurchLevel.CustomName : t_cb_o.ChurchLevel.Name) : "") : "";
                        oMCCF_Model.strOwnedByChurchBody = t_cb_o != null ? t_cb_o.Name : "";
                        oMCCF_Model.strOwnershipCode = oMCCF_Model.modOwnedByChurchBodyId != null ? (oMCCF_Model.modOwnedByChurchBodyId != this._oLoggedCB.Id ? "I" : (oMCCF_Model.modOwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "X")) : "N";
                        oMCCF_Model.strOwnershipStatus = oMCCF_Model.modOwnedByChurchBodyId != null ? (oMCCF_Model.modOwnedByChurchBodyId != this._oLoggedCB.Id ? "Shared" : (oMCCF_Model.modOwnedByChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Indeterminate")) : "None";
                        oMCCF_Model.strSharingStatus = GetSharingStatusDesc(oMCCF_Model.modSharingStatus);
                        ///
                        ///
                        oMCCF_Model.bl_IsLeadingZeros = false;
                    }

                    oMCCF_Model.strSampleTextLDZR = oMCCF_Model.strPrefix + (oMCCF_Model.bl_IsLeadingZeros ? "0001" : "1") + oMCCF_Model.strSuffix;
                    //oADHC_Model.oAppUtilityNVP = new AppUtilityNVP();

                    oMCCF_Model.tempSetIndex = oADHC_Model.tempSetIndex;
                    oADHC_Model.oMemberCustomCodeFormatModel = oMCCF_Model;                    
                   // ViewData["oSetupData_MCCF_List"] = oMCCFList;
                    // oADHC_Model.oMemberCustomCodeFormatModel = oADHC_Model;
                   // oADHC_Model.tempSetIndex = oADHC_Model.tempSetIndex;
                    //ViewData["oAppUtilityMCCFModel"] = oADHC_Model;

                    

                    ///// specific parameter...
                    //if (setIndex == 22) {
                    //    var _oADHC_Model_2 = Newtonsoft.Json.JsonConvert.SerializeObject(oADHC_Model);
                    //    TempData["oVmCurrMod"] = _oADHC_Model_2; TempData.Keep();

                    //    return PartialView("_AddOrEdit_ADHC", oADHC_Model); 
                    //}
                }

                // MTS -- 23
                if (setIndex == 0 || setIndex == 6 || setIndex == 25 || setIndex == 23)
                {

                }



                /// load lookups
                /// popLookups_ADHC
                oADHC_Model = this.popLookups_ADHC(oADHC_Model); //, oADHC_Model.oAppUtilityNVP);

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");

                var tm = DateTime.Now;
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "T",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                var _oADHC_Model = Newtonsoft.Json.JsonConvert.SerializeObject(oADHC_Model);
                TempData["oVmCurrMod"] = _oADHC_Model; TempData.Keep();
                 

                return PartialView("_AddOrEdit_ADHC", oADHC_Model);
            }

            catch (Exception ex)
            {
                //page not found error
                
                return View("_ErrorPage");
            }
        }

        public AdhocParameterModel popLookups_ADHC(AdhocParameterModel vm) //, AppUtilityNVP oCurrNVP)
        {
            if (vm == null ) return vm;  // || oCurrNVP == null
            //
            //vm.lkpStatuses = new List<SelectListItem>();
            //foreach (var dl in dlGenStatuses) 
            //{ if (dl.Val == "A" || dl.Val=="B") vm.lkpStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpSharingStatuses = new List<SelectListItem>();
            foreach (var dl in dlShareStatus)
            { vm.lkpSharingStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpPeriodTypes = new List<SelectListItem>();
            foreach (var dl in dlPeriodTypes)
            { vm.lkpPeriodTypes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vm.lkpIntervalFreqs = new List<SelectListItem>();
            foreach (var dl in dlIntervalFreqs)
            { vm.lkpIntervalFreqs.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

             
            //
            return vm;
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddOrEdit_ADHC(AdhocParameterModel vm)
        {

            var strDesc = "Adhoc parameter";
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return View("_ErrorPage");
                    }
                }

                // if (!InitializeUserLogging())
                // return RedirectToAction("LoginUserAcc", "UserLogin");

                // vm.modNVPCode = string.IsNullOrEmpty(vm.modNVPCode) ? "ADHC" : vm.modNVPCode;

                if (vm == null) 
                    return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
                // if (vm.oAppUtilityNVP == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

                //var arrData = "";
                //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
                //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberCustomCodeFormatModel>(arrData) : vm;

                // AppUtilityNVP _oChanges = null; // vm.oAppUtilityNVP;  // vmMod = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as UserProfileModel : vmMod; TempData.Keep();

               // if (vmMod == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again.", pageIndex = 2 });

                //if (vmMod.lsAppUtilityNVPModels == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = "No changes made to '" + strDesc + "' data. Reload data and try saving again", pageIndex = vm.pageIndex });
                //if (vmMod.lsAppUtilityNVPModels.Count == 0) return Json(new { taskSuccess = false, oCurrId = "", userMess = "No changes made to " + strDesc + " data.", pageIndex = vm.pageIndex });

                //if (vm.oAppGloOwnId == null || vm.oChurchBodyId == null)
                //    return Json(new { taskSuccess = false, oCurrId = (int?)null, userMess = "Owner of settings could not be detrmined. Please check login or refresh data and retry" });
                 
                // initial validations done!  
                if (vm.oAppGloOwnId == null) vm.oAppGloOwnId = this._oLoggedAGO.Id;
                if (vm.oChurchBodyId == null) vm.oChurchBodyId = this._oLoggedCB.Id;


                // return View(vm);
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = "", userMess = "Saving data failed. Please refresh and try again", pageIndex = vm.pageIndex });


                var _oCntAdd = 0; var _oCntUpd = 0;

                // oCPRD  ...
                if (vm.oMemberCustomCodeFormatModel != null)
                {   //       
                    var oCPRD = vm.oChurchPeriodDefinitionModel;
                    var oCPRDList = _context.AppUtilityNVP.AsNoTracking().Where(c => c.NVPCode == "CPRD").ToList();
                    var numCPRDNextCount = oCPRDList.Count();

                    ///  CPRD_ST_CP
                    var oCPRD_ST_CP = oCPRDList.Where(c => c.NVPSubCode == "CPRD_ST_CP").FirstOrDefault();
                    if (oCPRD_ST_CP != null)
                    {
                        oCPRD_ST_CP.AppGlobalOwnerId = vm.oAppGloOwnId;
                        oCPRD_ST_CP.ChurchBodyId = vm.oChurchBodyId;
                        //
                        oCPRD_ST_CP.OwnedByChurchBodyId = oCPRD.modOwnedByChurchBodyId_CP;
                        oCPRD_ST_CP.SharingStatus = oCPRD.modSharingStatus_CP;
                        oCPRD_ST_CP.NVPCode = oCPRD.modNVPCode;
                        // oCPRD_ST_CP.NVPSubCode = "CPRD_ST_CP";
                        oCPRD_ST_CP.ValueType = "D";
                        oCPRD_ST_CP.OrderIndex = oCPRD.numOrderIndex;
                        oCPRD_ST_CP.NVPFromDate = oCPRD.PeriodStartDate_CP;
                        oCPRD_ST_CP.LastMod = DateTime.Now;
                        oCPRD_ST_CP.LastModByUserId = this._oLoggedUser.Id;
                        //
                        _oCntUpd++;
                        _context.Update(oCPRD_ST_CP);
                    }
                    else  // doesn't exist... create it.
                    {
                        numCPRDNextCount++;
                        AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                        {
                            AppGlobalOwnerId = vm.oAppGloOwnId,
                            ChurchBodyId = vm.oChurchBodyId,
                            //
                            OwnedByChurchBodyId = oCPRD.modOwnedByChurchBodyId_CP,
                            SharingStatus = oCPRD.modSharingStatus_CP,
                            NVPCode = oCPRD.modNVPCode,
                            NVPSubCode = "CPRD_ST_CP",
                            ValueType = "D",
                            NVPFromDate = oCPRD.PeriodStartDate_CP,
                            OrderIndex = numCPRDNextCount,
                            Created = DateTime.Now,
                            LastMod = DateTime.Now,
                            CreatedByUserId = this._oLoggedUser.Id,
                            LastModByUserId = this._oLoggedUser.Id,
                        };
                        //
                        _oCntAdd++;
                        _context.Add(oNVPAdd);
                    }

                    ///  CPRD_INT_CP
                    var oCPRD_INT_CP = oCPRDList.Where(c => c.NVPSubCode == "CPRD_INT_CP").FirstOrDefault();
                    if (oCPRD_INT_CP != null)
                    {
                        oCPRD_INT_CP.AppGlobalOwnerId = vm.oAppGloOwnId;
                        oCPRD_INT_CP.ChurchBodyId = vm.oChurchBodyId;
                        //
                        oCPRD_INT_CP.OwnedByChurchBodyId = oCPRD.modOwnedByChurchBodyId_CP;
                        oCPRD_INT_CP.SharingStatus = oCPRD.modSharingStatus_CP;
                        oCPRD_INT_CP.NVPCode = oCPRD.modNVPCode;
                        // oCPRD_INT_CP.NVPSubCode = "CPRD_INT_CP";
                        oCPRD_INT_CP.ValueType = "N";                        
                        oCPRD_INT_CP.NVPNumVal = oCPRD.numPeriodInterval_CP;
                        oCPRD_INT_CP.OccurFreqCode = oCPRD.strIntervalFrequency_CP;
                        oCPRD_INT_CP.OrderIndex = oCPRD.numOrderIndex;
                        oCPRD_INT_CP.LastMod = DateTime.Now;
                        oCPRD_INT_CP.LastModByUserId = this._oLoggedUser.Id;
                        //
                        _oCntUpd++;
                        _context.Update(oCPRD_INT_CP);
                    }
                    else  // doesn't exist... create it.
                    {
                        numCPRDNextCount++;
                        AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                        {
                            AppGlobalOwnerId = vm.oAppGloOwnId,
                            ChurchBodyId = vm.oChurchBodyId,
                            //
                            OwnedByChurchBodyId = oCPRD.modOwnedByChurchBodyId_CP,
                            SharingStatus = oCPRD.modSharingStatus_CP,
                            NVPCode = oCPRD.modNVPCode,
                            NVPSubCode = "CPRD_INT_CP",
                            ValueType = "N",
                            NVPNumVal = oCPRD.numPeriodInterval_CP,
                            OccurFreqCode = oCPRD.strIntervalFrequency_CP,
                            OrderIndex = numCPRDNextCount,
                            Created = DateTime.Now,
                            LastMod = DateTime.Now,
                            CreatedByUserId = this._oLoggedUser.Id,
                            LastModByUserId = this._oLoggedUser.Id,
                        };
                        //
                        _oCntAdd++;
                        _context.Add(oNVPAdd);
                    }

                    ///  CPRD_DAYS_CP
                    var oCPRD_DAYS_CP = oCPRDList.Where(c => c.NVPSubCode == "CPRD_DAYS_CP").FirstOrDefault();
                    if (oCPRD_DAYS_CP != null)
                    {
                        oCPRD_DAYS_CP.AppGlobalOwnerId = vm.oAppGloOwnId;
                        oCPRD_DAYS_CP.ChurchBodyId = vm.oChurchBodyId;
                        //
                        oCPRD_DAYS_CP.OwnedByChurchBodyId = oCPRD.modOwnedByChurchBodyId_CP;
                        oCPRD_DAYS_CP.SharingStatus = oCPRD.modSharingStatus_CP;
                        oCPRD_DAYS_CP.NVPCode = oCPRD.modNVPCode;
                        // oCPRD_DAYS_CP.NVPSubCode = "CPRD_DAYS_CP";
                        oCPRD_DAYS_CP.ValueType = "N";
                        oCPRD_DAYS_CP.OrderIndex = oCPRD.numOrderIndex;
                        oCPRD_DAYS_CP.NVPNumVal = oCPRD.numPeriodIntervalDays_CP;
                        oCPRD_DAYS_CP.LastMod = DateTime.Now;
                        oCPRD_DAYS_CP.LastModByUserId = this._oLoggedUser.Id;
                        //
                        _oCntUpd++;
                        _context.Update(oCPRD_DAYS_CP);
                    }
                    else  // doesn't exist... create it.
                    {
                        numCPRDNextCount++;
                        AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                        {
                            AppGlobalOwnerId = vm.oAppGloOwnId,
                            ChurchBodyId = vm.oChurchBodyId,
                            //
                            OwnedByChurchBodyId = oCPRD.modOwnedByChurchBodyId_CP,
                            SharingStatus = oCPRD.modSharingStatus_CP,
                            NVPCode = oCPRD.modNVPCode,
                            NVPSubCode = "CPRD_DAYS_CP",
                            ValueType = "N",
                            NVPNumVal = oCPRD.numPeriodIntervalDays_CP,
                            OrderIndex = numCPRDNextCount,
                            Created = DateTime.Now,
                            LastMod = DateTime.Now,
                            CreatedByUserId = this._oLoggedUser.Id,
                            LastModByUserId = this._oLoggedUser.Id,
                        };
                        //
                        _oCntAdd++;
                        _context.Add(oNVPAdd);
                    }

                    /////  CPRD_PIF_CP
                    //var oCPRD_PIF_CP = oCPRDList.Where(c => c.NVPSubCode == "CPRD_PIF_CP").FirstOrDefault();
                    //if (oCPRD_PIF_CP != null)
                    //{
                    //    oCPRD_PIF_CP.AppGlobalOwnerId = vm.oAppGloOwnId;
                    //    oCPRD_PIF_CP.ChurchBodyId = vm.oChurchBodyId;
                    //    //
                    //    oCPRD_PIF_CP.OwnedByChurchBodyId = oCPRD.modOwnedByChurchBodyId_CP;
                    //    oCPRD_PIF_CP.SharingStatus = oCPRD.modSharingStatus_CP;
                    //    oCPRD_PIF_CP.NVPCode = oCPRD.modNVPCode;
                    //    // oCPRD_PIF_CP.NVPSubCode = "CPRD_PIF_CP";
                    //    oCPRD_PIF_CP.ValueType = "T";
                    //    oCPRD_PIF_CP.OrderIndex = oCPRD.numOrderIndex;
                    //    oCPRD_PIF_CP.NVPValue = oCPRD.strIntervalFrequency_CP;
                    //    oCPRD_PIF_CP.LastMod = DateTime.Now;
                    //    oCPRD_PIF_CP.LastModByUserId = this._oLoggedUser.Id;
                    //    //
                    //    _oCntUpd++;
                    //    _context.Update(oCPRD_PIF_CP);
                    //}
                    //else  // doesn't exist... create it.
                    //{
                    //    numCPRDNextCount++;
                    //    AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                    //    {
                    //        AppGlobalOwnerId = vm.oAppGloOwnId,
                    //        ChurchBodyId = vm.oChurchBodyId,
                    //        //
                    //        OwnedByChurchBodyId = oCPRD.modOwnedByChurchBodyId_CP,
                    //        SharingStatus = oCPRD.modSharingStatus_CP,
                    //        NVPCode = oCPRD.modNVPCode,
                    //        NVPSubCode = "CPRD_PIF_CP",
                    //        ValueType = "T",
                    //        NVPValue = oCPRD.strIntervalFrequency_CP,
                    //        OrderIndex = numCPRDNextCount,
                    //        Created = DateTime.Now,
                    //        LastMod = DateTime.Now,
                    //        CreatedByUserId = this._oLoggedUser.Id,
                    //        LastModByUserId = this._oLoggedUser.Id,
                    //    };
                    //    //
                    //    _oCntAdd++;
                    //    _context.Add(oNVPAdd);
                    //}

                    ///////
                    
                    ///  CPEQLAP  ... church period same as account period
                    var oCPEQLAP = oCPRDList.Where(c => c.NVPSubCode == "CPEQLAP").FirstOrDefault();
                    if (oCPEQLAP != null)
                    {
                        oCPEQLAP.AppGlobalOwnerId = vm.oAppGloOwnId;
                        oCPEQLAP.ChurchBodyId = vm.oChurchBodyId;
                        //
                        oCPEQLAP.OwnedByChurchBodyId = oCPRD.modOwnedByChurchBodyId_AP;
                        oCPEQLAP.SharingStatus = oCPRD.modSharingStatus_AP;
                        oCPEQLAP.NVPCode = oCPRD.modNVPCode;
                        // oCPEQLAP.NVPSubCode = "CPEQLAP";
                        oCPEQLAP.ValueType = "B";  //BOOL
                        oCPEQLAP.NVPValue = oCPRD.bl_IsChuPeriodSameAsAccPeriod ? "Y" : "N";
                        oCPEQLAP.OrderIndex = oCPRD.numOrderIndex;
                        oCPEQLAP.LastMod = DateTime.Now;
                        oCPEQLAP.LastModByUserId = this._oLoggedUser.Id;
                        //
                        _oCntUpd++;
                        _context.Update(oCPEQLAP);
                    }
                    else  // doesn't exist... create it.
                    {
                        numCPRDNextCount++;
                        AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                        {
                            AppGlobalOwnerId = vm.oAppGloOwnId,
                            ChurchBodyId = vm.oChurchBodyId,
                            //
                            OwnedByChurchBodyId = oCPRD.modOwnedByChurchBodyId_AP,
                            SharingStatus = oCPRD.modSharingStatus_AP,
                            NVPCode = oCPRD.modNVPCode,
                            NVPSubCode = "CPEQLAP",
                            ValueType = "B",  //bool
                            NVPValue = oCPRD.bl_IsChuPeriodSameAsAccPeriod ? "Y" : "N",
                            OrderIndex = numCPRDNextCount,
                            Created = DateTime.Now,
                            LastMod = DateTime.Now,
                            CreatedByUserId = this._oLoggedUser.Id,
                            LastModByUserId = this._oLoggedUser.Id,
                        };
                        //
                        _oCntAdd++;
                        _context.Add(oNVPAdd);
                    }

                    ///
                    ///////

                    //if (!oCPRD.bl_IsChuPeriodSameAsAccPeriod)
                    //{
                       ///  CPRD_ST_AP
                        var oCPRD_ST_AP = oCPRDList.Where(c => c.NVPSubCode == "CPRD_ST_AP").FirstOrDefault();
                        if (oCPRD_ST_AP != null)
                        {
                            oCPRD_ST_AP.AppGlobalOwnerId = vm.oAppGloOwnId;
                            oCPRD_ST_AP.ChurchBodyId = vm.oChurchBodyId;
                            //
                            oCPRD_ST_AP.OwnedByChurchBodyId = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modOwnedByChurchBodyId_AP : oCPRD.modOwnedByChurchBodyId_CP;
                            oCPRD_ST_AP.SharingStatus = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modSharingStatus_AP : oCPRD.modSharingStatus_CP;
                            oCPRD_ST_AP.NVPCode = oCPRD.modNVPCode;
                            // oCPRD_ST_AP.NVPSubCode = "CPRD_ST_AP";
                            oCPRD_ST_AP.ValueType = "D";
                            oCPRD_ST_AP.NVPFromDate = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.PeriodStartDate_AP : oCPRD.PeriodStartDate_CP;   
                            oCPRD_ST_AP.OrderIndex = oCPRD.numOrderIndex;
                            oCPRD_ST_AP.LastMod = DateTime.Now;
                            oCPRD_ST_AP.LastModByUserId = this._oLoggedUser.Id;
                            //
                            _oCntUpd++;
                            _context.Update(oCPRD_ST_AP);
                        }
                        else  // doesn't exist... create it.
                        {
                            numCPRDNextCount++;
                            AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                            {
                                AppGlobalOwnerId = vm.oAppGloOwnId,
                                ChurchBodyId = vm.oChurchBodyId,
                                //
                                OwnedByChurchBodyId = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modOwnedByChurchBodyId_AP : oCPRD.modOwnedByChurchBodyId_CP,
                                SharingStatus = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modSharingStatus_AP : oCPRD.modSharingStatus_CP,
                                NVPCode = oCPRD.modNVPCode,
                                NVPSubCode = "CPRD_ST_AP",
                                ValueType = "D",
                                NVPFromDate = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.PeriodStartDate_AP : oCPRD.PeriodStartDate_CP,
                                OrderIndex = numCPRDNextCount,
                                Created = DateTime.Now,
                                LastMod = DateTime.Now,
                                CreatedByUserId = this._oLoggedUser.Id,
                                LastModByUserId = this._oLoggedUser.Id,
                            };
                            //
                            _oCntAdd++;
                            _context.Add(oNVPAdd);
                        }

                        ///  CPRD_INT_AP
                        var oCPRD_INT_AP = oCPRDList.Where(c => c.NVPSubCode == "CPRD_INT_AP").FirstOrDefault();
                        if (oCPRD_INT_AP != null)
                        {
                            oCPRD_INT_AP.AppGlobalOwnerId = vm.oAppGloOwnId;
                            oCPRD_INT_AP.ChurchBodyId = vm.oChurchBodyId;
                            //
                            oCPRD_INT_AP.OwnedByChurchBodyId = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modOwnedByChurchBodyId_AP : oCPRD.modOwnedByChurchBodyId_CP;
                            oCPRD_INT_AP.SharingStatus = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modSharingStatus_AP : oCPRD.modSharingStatus_CP;
                            oCPRD_INT_AP.NVPCode = oCPRD.modNVPCode;
                            // oCPRD_INT_AP.NVPSubCode = "CPRD_INT_AP";
                            oCPRD_INT_AP.ValueType = "N";
                            oCPRD_INT_AP.NVPNumVal = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.numPeriodInterval_AP : oCPRD.numPeriodInterval_CP;  
                            oCPRD_INT_AP.OccurFreqCode = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.strIntervalFrequency_AP : oCPRD.strIntervalFrequency_CP;  
                            oCPRD_INT_AP.OrderIndex = oCPRD.numOrderIndex;
                            oCPRD_INT_AP.LastMod = DateTime.Now;
                            oCPRD_INT_AP.LastModByUserId = this._oLoggedUser.Id;
                            //
                            _oCntUpd++;
                            _context.Update(oCPRD_INT_AP);
                        }
                        else  // doesn't exist... create it.
                        {
                            numCPRDNextCount++;
                            AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                            {
                                AppGlobalOwnerId = vm.oAppGloOwnId,
                                ChurchBodyId = vm.oChurchBodyId,
                                //
                                OwnedByChurchBodyId = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modOwnedByChurchBodyId_AP : oCPRD.modOwnedByChurchBodyId_CP,
                                SharingStatus = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modSharingStatus_AP : oCPRD.modSharingStatus_CP,
                                NVPCode = oCPRD.modNVPCode,
                                NVPSubCode = "CPRD_INT_AP",
                                ValueType = "N",
                                NVPNumVal = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.numPeriodInterval_AP : oCPRD.numPeriodInterval_CP,
                                OccurFreqCode = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.strIntervalFrequency_AP : oCPRD.strIntervalFrequency_CP,
                                OrderIndex = numCPRDNextCount,
                                Created = DateTime.Now,
                                LastMod = DateTime.Now,
                                CreatedByUserId = this._oLoggedUser.Id,
                                LastModByUserId = this._oLoggedUser.Id,
                            };
                            //
                            _oCntAdd++;
                            _context.Add(oNVPAdd);
                        }

                        ///  CPRD_DAYS_AP
                        var oCPRD_DAYS_AP = oCPRDList.Where(c => c.NVPSubCode == "CPRD_DAYS_AP").FirstOrDefault();
                        if (oCPRD_DAYS_AP != null)
                        {
                            oCPRD_DAYS_AP.AppGlobalOwnerId = vm.oAppGloOwnId;
                            oCPRD_DAYS_AP.ChurchBodyId = vm.oChurchBodyId;
                            //
                            oCPRD_DAYS_AP.OwnedByChurchBodyId = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modOwnedByChurchBodyId_AP : oCPRD.modOwnedByChurchBodyId_CP;
                            oCPRD_DAYS_AP.SharingStatus = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modSharingStatus_AP : oCPRD.modSharingStatus_CP;
                            oCPRD_DAYS_AP.NVPCode = oCPRD.modNVPCode;
                            // oCPRD_DAYS_AP.NVPSubCode = "CPRD_DAYS_AP";
                            oCPRD_DAYS_AP.ValueType = "N";
                            oCPRD_DAYS_AP.NVPNumVal = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.numPeriodIntervalDays_AP : oCPRD.numPeriodIntervalDays_CP;
                            oCPRD_DAYS_AP.OrderIndex = oCPRD.numOrderIndex;
                            oCPRD_DAYS_AP.LastMod = DateTime.Now;
                            oCPRD_DAYS_AP.LastModByUserId = this._oLoggedUser.Id;
                            //
                            _oCntUpd++;
                            _context.Update(oCPRD_DAYS_AP);
                        }
                        else  // doesn't exist... create it.
                        {
                            numCPRDNextCount++;
                            AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                            {
                                AppGlobalOwnerId = vm.oAppGloOwnId,
                                ChurchBodyId = vm.oChurchBodyId,
                                //
                                OwnedByChurchBodyId = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modOwnedByChurchBodyId_AP : oCPRD.modOwnedByChurchBodyId_CP,
                                SharingStatus = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modSharingStatus_AP : oCPRD.modSharingStatus_CP,
                                NVPCode = oCPRD.modNVPCode,
                                NVPSubCode = "CPRD_DAYS_AP",
                                ValueType = "N",
                                NVPNumVal = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.numPeriodIntervalDays_AP : oCPRD.numPeriodIntervalDays_CP,
                                OrderIndex = numCPRDNextCount,
                                Created = DateTime.Now,
                                LastMod = DateTime.Now,
                                CreatedByUserId = this._oLoggedUser.Id,
                                LastModByUserId = this._oLoggedUser.Id,
                            };
                            //
                            _oCntAdd++;
                            _context.Add(oNVPAdd);
                        }

                        /////  CPRD_PIF_AP
                        //var oCPRD_PIF_AP = oCPRDList.Where(c => c.NVPSubCode == "CPRD_PIF_AP").FirstOrDefault();
                        //if (oCPRD_PIF_AP != null)
                        //{
                        //    oCPRD_PIF_AP.AppGlobalOwnerId = vm.oAppGloOwnId;
                        //    oCPRD_PIF_AP.ChurchBodyId = vm.oChurchBodyId;
                        //    //
                        //    oCPRD_PIF_AP.OwnedByChurchBodyId = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modOwnedByChurchBodyId_AP : oCPRD.modOwnedByChurchBodyId_CP;
                        //    oCPRD_PIF_AP.SharingStatus = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modSharingStatus_AP : oCPRD.modSharingStatus_CP;
                        //    oCPRD_PIF_AP.NVPCode = oCPRD.modNVPCode;
                        //    // oCPRD_PIF_AP.NVPSubCode = "CPRD_PIF_AP";
                        //    oCPRD_PIF_AP.ValueType = "T";
                        //    oCPRD_PIF_AP.NVPValue = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.strIntervalFrequency_AP : oCPRD.strIntervalFrequency_CP;
                        //    oCPRD_PIF_AP.OrderIndex = oCPRD.numOrderIndex;
                        //    oCPRD_PIF_AP.LastMod = DateTime.Now;
                        //    oCPRD_PIF_AP.LastModByUserId = this._oLoggedUser.Id;
                        //    //
                        //    _oCntUpd++;
                        //    _context.Update(oCPRD_PIF_AP);
                        //}
                        //else  // doesn't exist... create it.
                        //{
                        //    numCPRDNextCount++;
                        //    AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                        //    {
                        //        AppGlobalOwnerId = vm.oAppGloOwnId,
                        //        ChurchBodyId = vm.oChurchBodyId,
                        //        //
                        //        OwnedByChurchBodyId = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modOwnedByChurchBodyId_AP : oCPRD.modOwnedByChurchBodyId_CP,
                        //        SharingStatus = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.modSharingStatus_AP : oCPRD.modSharingStatus_CP,
                        //        NVPCode = oCPRD.modNVPCode,
                        //        NVPSubCode = "CPRD_PIF_AP",
                        //        ValueType = "T",
                        //        NVPValue = !oCPRD.bl_IsChuPeriodSameAsAccPeriod ? oCPRD.strIntervalFrequency_AP : oCPRD.strIntervalFrequency_CP,
                        //        OrderIndex = numCPRDNextCount,
                        //        Created = DateTime.Now,
                        //        LastMod = DateTime.Now,
                        //        CreatedByUserId = this._oLoggedUser.Id,
                        //        LastModByUserId = this._oLoggedUser.Id,
                        //    };
                        //    //
                        //    _oCntAdd++;
                        //    _context.Add(oNVPAdd);
                        //}
                   // }

                }


                // MCCF
                if (vm.oMemberCustomCodeFormatModel != null)
                {
                    var oMCCF = vm.oMemberCustomCodeFormatModel;
                    var oMCCFList = _context.AppUtilityNVP.AsNoTracking().Where(c => c.NVPCode == "MCCF").ToList();
                    var numMCCFNextCount = oMCCFList.Count();
                    /// AUT_GN
                    var oAUT_GN = oMCCFList.Where(c => c.NVPSubCode == "AUT_GN").FirstOrDefault();
                    if (oAUT_GN != null)
                    {
                        oAUT_GN.AppGlobalOwnerId = vm.oAppGloOwnId;
                        oAUT_GN.ChurchBodyId = vm.oChurchBodyId;
                        //
                        oAUT_GN.OwnedByChurchBodyId = oMCCF.modOwnedByChurchBodyId;
                        oAUT_GN.SharingStatus = oMCCF.modSharingStatus;
                        oAUT_GN.NVPCode = oMCCF.modNVPCode;
                        // oAUT_GN.NVPSubCode = "AUT_GN";
                        oAUT_GN.ValueType = "B";  // bool
                        oAUT_GN.NVPValue = oMCCF.bl_IsAutogenMCCFCode ? "Y" : "N";
                        oAUT_GN.LastMod = DateTime.Now;
                        oAUT_GN.LastModByUserId = this._oLoggedUser.Id;
                        //
                        _oCntUpd++;
                        _context.Update(oAUT_GN);
                    }
                    else  // doesn't exist... create it.
                    {
                        numMCCFNextCount++;
                        AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                        {
                            AppGlobalOwnerId = vm.oAppGloOwnId,
                            ChurchBodyId = vm.oChurchBodyId,
                            //
                            OwnedByChurchBodyId = oMCCF.modOwnedByChurchBodyId,
                            SharingStatus = oMCCF.modSharingStatus,
                            NVPCode = oMCCF.modNVPCode,
                            NVPSubCode = "AUT_GN",
                            ValueType = "B",  // BOOL
                            NVPValue = oMCCF.bl_IsAutogenMCCFCode ? "Y" : "N",
                            OrderIndex = numMCCFNextCount,
                            Created = DateTime.Now,
                            LastMod = DateTime.Now,
                            CreatedByUserId = this._oLoggedUser.Id,
                            LastModByUserId = this._oLoggedUser.Id,
                        };
                        //
                        _oCntAdd++;
                        _context.Add(oNVPAdd);
                    }

                    // Prefix     
                    var oPFX = oMCCFList.Where(c => c.NVPSubCode == "PFX").FirstOrDefault();
                    if (oPFX != null)
                    {
                        oPFX.AppGlobalOwnerId = vm.oAppGloOwnId;
                        oPFX.ChurchBodyId = vm.oChurchBodyId;
                        //
                        oPFX.OwnedByChurchBodyId = oMCCF.modOwnedByChurchBodyId;
                        oPFX.SharingStatus = oMCCF.modSharingStatus;
                        oPFX.NVPCode = oMCCF.modNVPCode;
                       // oPFX.NVPSubCode = "PFX";
                        oPFX.ValueType = "T";
                        oPFX.NVPValue = oMCCF.strPrefix;
                        oPFX.OrderIndex = numMCCFNextCount;
                        oPFX.LastMod = DateTime.Now;
                        oPFX.LastModByUserId = this._oLoggedUser.Id;
                        //
                        _oCntUpd++;
                        _context.Update(oPFX);
                    }
                    else  // doesn't exist... create it.
                    {
                        numMCCFNextCount++;
                        AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                        {
                            AppGlobalOwnerId = vm.oAppGloOwnId, // vm.oAppGloOwnId_Logged,
                            ChurchBodyId = vm.oChurchBodyId, //vm.oChurchBodyId_Logged,
                            //
                            OwnedByChurchBodyId = oMCCF.modOwnedByChurchBodyId,
                            SharingStatus = oMCCF.modSharingStatus, 
                            NVPCode = oMCCF.modNVPCode,
                            NVPSubCode = "PFX",
                            ValueType = "T",
                            NVPValue = oMCCF.strPrefix,
                            OrderIndex = numMCCFNextCount,
                            Created = DateTime.Now,
                            LastMod = DateTime.Now,
                            CreatedByUserId = this._oLoggedUser.Id,
                            LastModByUserId = this._oLoggedUser.Id,
                        };
                        //
                        _oCntAdd++;
                        _context.Add(oNVPAdd);
                    } 

                    // Suffix   
                    var oSFX = oMCCFList.Where(c => c.NVPSubCode == "SFX").FirstOrDefault();
                    if (oSFX != null)
                    {
                        oSFX.AppGlobalOwnerId = vm.oAppGloOwnId;
                        oSFX.ChurchBodyId = vm.oChurchBodyId;
                        //
                        oSFX.OwnedByChurchBodyId = oMCCF.modOwnedByChurchBodyId;
                        oSFX.SharingStatus = oMCCF.modSharingStatus;
                        oSFX.NVPCode = oMCCF.modNVPCode;
                        oSFX.ValueType = "T";

                        oSFX.LastMod = DateTime.Now;
                        oSFX.LastModByUserId = this._oLoggedUser.Id;
                        //
                        _oCntUpd++;
                        _context.Update(oSFX);
                    }
                    else  // doesn't exist... create it.
                    {
                        numMCCFNextCount++;
                        AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                        {
                            AppGlobalOwnerId = vm.oAppGloOwnId, // vm.oAppGloOwnId_Logged,
                            ChurchBodyId = vm.oChurchBodyId, //vm.oChurchBodyId_Logged,
                            //
                            OwnedByChurchBodyId = oMCCF.modOwnedByChurchBodyId,
                            SharingStatus = oMCCF.modSharingStatus,
                            NVPCode = oMCCF.modNVPCode,
                            NVPSubCode = "SFX",
                            ValueType = "T",
                            NVPValue = oMCCF.strSuffix,
                            OrderIndex = numMCCFNextCount,
                            Created = DateTime.Now,
                            LastMod = DateTime.Now,
                            CreatedByUserId = this._oLoggedUser.Id,
                            LastModByUserId = this._oLoggedUser.Id,
                        };
                        //
                        _oCntAdd++;
                        _context.Add(oNVPAdd);
                    } 

                    // Leading Zeros 
                    var oLDZR = oMCCFList.Where(c => c.NVPSubCode == "LDZR").FirstOrDefault();
                    if (oLDZR != null)
                    {
                        oLDZR.AppGlobalOwnerId = vm.oAppGloOwnId;
                        oLDZR.ChurchBodyId = vm.oChurchBodyId;
                        //
                        oLDZR.OwnedByChurchBodyId = oMCCF.modOwnedByChurchBodyId;
                        oLDZR.SharingStatus = oMCCF.modSharingStatus;
                        oLDZR.NVPCode = oMCCF.modNVPCode;
                        // oLDZR.oAppUtilityNVP.NVPSubCode = "LDZR";
                        oLDZR.ValueType = "B";
                        oLDZR.NVPValue = oMCCF.bl_IsLeadingZeros ? "Y" : "N";
                        oLDZR.LastMod = DateTime.Now;
                        oLDZR.LastModByUserId = this._oLoggedUser.Id;
                        //
                        _oCntUpd++;
                        _context.Update(oLDZR);
                    }
                    else  // doesn't exist... create it.
                    {
                        numMCCFNextCount++;
                        AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                        {
                            AppGlobalOwnerId = vm.oAppGloOwnId,
                            ChurchBodyId = vm.oChurchBodyId,
                            //
                            OwnedByChurchBodyId = oMCCF.modOwnedByChurchBodyId,
                            SharingStatus = oMCCF.modSharingStatus,
                            NVPCode = oMCCF.modNVPCode,
                            NVPSubCode = "LDZR",
                            ValueType = "B",
                            NVPValue = oMCCF.bl_IsLeadingZeros ? "Y" : "N",
                            OrderIndex = numMCCFNextCount,
                            Created = DateTime.Now,
                            LastMod = DateTime.Now,
                            CreatedByUserId = this._oLoggedUser.Id,
                            LastModByUserId = this._oLoggedUser.Id,
                        };
                        //
                        _oCntAdd++;
                        _context.Add(oNVPAdd);
                    }
                }
               

                var _userTask = "";
                if ((_oCntAdd + _oCntUpd) > 0)
                {
                    if (_oCntAdd > 0)
                    {
                        _userTask = "Configured " + _oCntAdd + " new details for '" + strDesc.ToLower() + "' successfully.";
                        ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + "Configured " + _oCntAdd + " new " + strDesc.ToLower() + " details.";
                    }

                    if (_oCntUpd > 0)
                    {
                        _userTask = !string.IsNullOrEmpty(_userTask) ? _userTask + ". " : "" + "Update (" + _oCntUpd + ") of '" + strDesc.ToLower() + "' done successfully.";
                        ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + _oCntUpd + " details for '" + strDesc.ToLower() + "' updated.";
                    }

                    //save all...
                    _context.SaveChanges(); // await _ctryCtx.SaveChangesAsync();


                    //// refreshValues...
                    //var _connstr_CL = this.GetCL_DBConnString();
                    //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");

                     

                    var _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                         "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, this._oLoggedUser.Id, _tm, _tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                        );

                    return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, pageIndex = vm.pageIndex });
                }


                return Json(new { taskSuccess = false, userMess = "Saving data failed. No update found. You may reload and try again.", pageIndex = vm.pageIndex });

            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = (int?)null, userMess = "Failed saving '" + strDesc + "' details. Err: " + ex.Message });
            }
        }





        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddOrEdit_MCCF(MemberCustomCodeFormatModel vm)
        {
            var strDesc = "Custom Member Code Format";
            try
            {
                // if (!InitializeUserLogging())
                    // return RedirectToAction("LoginUserAcc", "UserLogin");
                 
                vm.modNVPCode = string.IsNullOrEmpty(vm.modNVPCode) ? "MCCF" : vm.modNVPCode;

                if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
                // if (vm.oAppUtilityNVP == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

                var arrData = "";
                arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
                var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberCustomCodeFormatModel>(arrData) : vm;

                // AppUtilityNVP _oChanges = null; // vm.oAppUtilityNVP;  // vmMod = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as UserProfileModel : vmMod; TempData.Keep();
                 
                if (vmMod == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again.", pageIndex = 2 });
               
                if (vmMod.lsAppUtilityNVPModels == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = "No changes made to '" + strDesc + "' data. Reload data and try saving again", pageIndex = vm.pageIndex });
                //if (vmMod.lsAppUtilityNVPModels.Count == 0) return Json(new { taskSuccess = false, oCurrId = "", userMess = "No changes made to " + strDesc + " data.", pageIndex = vm.pageIndex });

                if (vm.modOwnedByChurchBodyId == null || string.IsNullOrEmpty(vm.modSharingStatus))
                    return Json(new { taskSuccess = false, oCurrId = vm.modNVPCode, userMess = "Owner of settings could not be detrmined. Please check login or refresh data and retry" });


                // initial validations done! 



                // var oNVP = vmMod.oAppUtilityNVP;
                // oNVP.ChurchBody = vmMod.oChurchBody;
                 
                if (vm.oAppGloOwnId == null) vm.oAppGloOwnId = this._oLoggedAGO.Id;
                if (vm.oChurchBodyId == null) vm.oChurchBodyId = this._oLoggedCB.Id;


                // return View(vm);
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = "", userMess = "Saving data failed. Please refresh and try again", pageIndex = vm.pageIndex });
                 

                // AUT_GN
                var _oCntAdd = 0; var _oCntUpd = 0;
                var oAUT_GN = vmMod.lsAppUtilityNVPModels.Where(c => c.oAppUtilityNVP.NVPSubCode == "AUT_GN").FirstOrDefault();
                if (oAUT_GN != null)
                {                   
                    oAUT_GN.oAppUtilityNVP.AppGlobalOwnerId = vm.oAppGloOwnId;
                    oAUT_GN.oAppUtilityNVP.ChurchBodyId = vm.oChurchBodyId;
                    oAUT_GN.oAppUtilityNVP.OwnedByChurchBodyId = vm.modOwnedByChurchBodyId;
                    oAUT_GN.oAppUtilityNVP.SharingStatus = vm.modSharingStatus;
                    oAUT_GN.oAppUtilityNVP.NVPCode = vm.modNVPCode;
                   // oAUT_GN.oAppUtilityNVP.NVPSubCode = "AUT_GN";
                    oAUT_GN.oAppUtilityNVP.ValueType = "T";
                    oAUT_GN.oAppUtilityNVP.NVPValue = vm.bl_IsAutogenMCCFCode ? "Y" : "N";
                    oAUT_GN.oAppUtilityNVP.LastMod = DateTime.Now;
                    oAUT_GN.oAppUtilityNVP.LastModByUserId = this._oLoggedUser.Id;
                    //
                    _oCntUpd++;
                    _context.Update(oAUT_GN.oAppUtilityNVP);
                }
                else  // doesn't exist... create it.
                {
                    AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                    {
                        AppGlobalOwnerId = vm.oAppGloOwnId, 
                        ChurchBodyId = vm.oChurchBodyId,  
                        OwnedByChurchBodyId = vm.modOwnedByChurchBodyId,
                        SharingStatus = vm.modSharingStatus,
                        NVPCode = vm.modNVPCode,
                        NVPSubCode = "AUT_GN",
                        ValueType = "T",
                        NVPValue = vm.bl_IsAutogenMCCFCode ? "Y" : "N",
                        Created = DateTime.Now,
                        LastMod = DateTime.Now,
                        CreatedByUserId = this._oLoggedUser.Id,
                        LastModByUserId = this._oLoggedUser.Id,
                    };
                    //
                    _oCntAdd++;
                    _context.Add(oNVPAdd);
                }


                // Prefix   
                var oPFX = vmMod.lsAppUtilityNVPModels.Where(c => c.oAppUtilityNVP.NVPSubCode == "PFX").FirstOrDefault();
                if (oPFX != null)
                {
                    oPFX.oAppUtilityNVP.AppGlobalOwnerId = vm.oAppGloOwnId;
                    oPFX.oAppUtilityNVP.ChurchBodyId = vm.oChurchBodyId;
                    oPFX.oAppUtilityNVP.OwnedByChurchBodyId = vm.modOwnedByChurchBodyId;
                    oPFX.oAppUtilityNVP.SharingStatus = vm.modSharingStatus;
                    oPFX.oAppUtilityNVP.NVPCode = vm.modNVPCode;
                    oPFX.oAppUtilityNVP.ValueType = "T";
                    oPFX.oAppUtilityNVP.LastMod = DateTime.Now;
                    oPFX.oAppUtilityNVP.LastModByUserId = this._oLoggedUser.Id;
                    //
                    _oCntUpd++;
                    _context.Update(oPFX.oAppUtilityNVP);
                }
                else  // doesn't exist... create it.
                {
                    AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                    {
                        AppGlobalOwnerId = vm.oAppGloOwnId, // vm.oAppGloOwnId_Logged,
                        ChurchBodyId = vm.oChurchBodyId, //vm.oChurchBodyId_Logged,
                        OwnedByChurchBodyId = vm.modOwnedByChurchBodyId,
                        SharingStatus = vm.modSharingStatus,
                        NVPCode = vm.modNVPCode,
                        NVPSubCode = "PFX",
                        ValueType = "T", 
                        NVPValue = vm.strPrefix, 
                        Created = DateTime.Now,
                        LastMod = DateTime.Now,
                        CreatedByUserId = this._oLoggedUser.Id,
                        LastModByUserId = this._oLoggedUser.Id,
                    };
                    //
                    _oCntAdd++;
                    _context.Add(oNVPAdd);
                }


                //// Prefix delim  
                //var oPFX_DLM = vmMod.lsAppUtilityNVPModels.Where(c => c.oAppUtilityNVP.NVPSubCode == "PFX_DLM").FirstOrDefault();
                //if (oPFX_DLM != null)
                //{
                //    oPFX_DLM.oAppUtilityNVP.NVPCode = vm.modNVPCode;
                //    oPFX_DLM.oAppUtilityNVP.ValueType = "T";
                //    oPFX_DLM.oAppUtilityNVP.AppGlobalOwnerId = vm.oAppGloOwnId;
                //    oPFX_DLM.oAppUtilityNVP.ChurchBodyId = vm.oChurchBodyId;
                //    oPFX_DLM.oAppUtilityNVP.LastMod = DateTime.Now;
                //    oPFX_DLM.oAppUtilityNVP.LastModByUserId = this._oLoggedUser.Id;
                //    //
                //    _oCntUpd++;
                //    _context.Update(oPFX_DLM.oAppUtilityNVP);
                //}
                //else  // doesn't exist... create it.
                //{
                //    AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                //    {
                //        AppGlobalOwnerId = vm.oAppGloOwnId, // vm.oAppGloOwnId_Logged,
                //        ChurchBodyId = vm.oChurchBodyId, //vm.oChurchBodyId_Logged,
                //        NVPCode = vm.modNVPCode,
                //        NVPSubCode = "PFX_DLM",
                //        ValueType = "T",
                //        NVPValue = vm.oAppUtilityNVP.NVPValue,
                //        Created = DateTime.Now,
                //        LastMod = DateTime.Now,
                //        CreatedByUserId = this._oLoggedUser.Id,
                //        LastModByUserId = this._oLoggedUser.Id,
                //    };
                //    //
                //    _oCntAdd++;
                //    _context.Add(oNVPAdd);
                //}


                // Suffix   
                var oSFX = vmMod.lsAppUtilityNVPModels.Where(c => c.oAppUtilityNVP.NVPSubCode == "SFX").FirstOrDefault();
                if (oSFX != null)
                {
                    oSFX.oAppUtilityNVP.AppGlobalOwnerId = vm.oAppGloOwnId;
                    oSFX.oAppUtilityNVP.ChurchBodyId = vm.oChurchBodyId;
                    oSFX.oAppUtilityNVP.OwnedByChurchBodyId = vm.modOwnedByChurchBodyId;
                    oSFX.oAppUtilityNVP.SharingStatus = vm.modSharingStatus;
                    oSFX.oAppUtilityNVP.NVPCode = vm.modNVPCode;
                    oSFX.oAppUtilityNVP.ValueType = "T";

                    oSFX.oAppUtilityNVP.LastMod = DateTime.Now;
                    oSFX.oAppUtilityNVP.LastModByUserId = this._oLoggedUser.Id;
                    //
                    _oCntUpd++;
                    _context.Update(oSFX.oAppUtilityNVP);
                }
                else  // doesn't exist... create it.
                {
                    AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                    {
                        AppGlobalOwnerId = vm.oAppGloOwnId, // vm.oAppGloOwnId_Logged,
                        ChurchBodyId = vm.oChurchBodyId, //vm.oChurchBodyId_Logged,
                        OwnedByChurchBodyId = vm.modOwnedByChurchBodyId,
                        SharingStatus = vm.modSharingStatus,
                        NVPCode = vm.modNVPCode,
                        NVPSubCode = "SFX",
                        ValueType = "T",
                        NVPValue = vm.strSuffix,
                        Created = DateTime.Now,
                        LastMod = DateTime.Now,
                        CreatedByUserId = this._oLoggedUser.Id,
                        LastModByUserId = this._oLoggedUser.Id,
                    };
                    //
                    _oCntAdd++;
                    _context.Add(oNVPAdd);
                }


                //// Suffix delim  
                //var oSFX_DLM = vmMod.lsAppUtilityNVPModels.Where(c => c.oAppUtilityNVP.NVPSubCode == "SFX_DLM").FirstOrDefault();
                //if (oSFX_DLM != null)
                //{
                //    oSFX_DLM.oAppUtilityNVP.NVPCode = vm.modNVPCode;
                //    oSFX_DLM.oAppUtilityNVP.ValueType = "T";
                //    oSFX_DLM.oAppUtilityNVP.AppGlobalOwnerId = vm.oAppGloOwnId;
                //    oSFX_DLM.oAppUtilityNVP.ChurchBodyId = vm.oChurchBodyId;
                //    oSFX_DLM.oAppUtilityNVP.LastMod = DateTime.Now;
                //    oSFX_DLM.oAppUtilityNVP.LastModByUserId = this._oLoggedUser.Id;
                //    //
                //    _oCntUpd++;
                //    _context.Update(oSFX_DLM.oAppUtilityNVP);
                //}
                //else  // doesn't exist... create it.
                //{
                //    AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                //    {
                //        AppGlobalOwnerId = vm.oAppGloOwnId, // vm.oAppGloOwnId_Logged,
                //        ChurchBodyId = vm.oChurchBodyId, //vm.oChurchBodyId_Logged,
                //        NVPCode = vm.modNVPCode,
                //        NVPSubCode = "SFX_DLM",
                //        ValueType = "T",
                //        NVPValue = vm.oAppUtilityNVP.NVPValue,
                //        Created = DateTime.Now,
                //        LastMod = DateTime.Now,
                //        CreatedByUserId = this._oLoggedUser.Id,
                //        LastModByUserId = this._oLoggedUser.Id,
                //    };
                //    //
                //    _oCntAdd++;
                //    _context.Add(oNVPAdd);
                //}


                // Leading Zeros 
                var oLDZR = vmMod.lsAppUtilityNVPModels.Where(c => c.oAppUtilityNVP.NVPSubCode == "LDZR").FirstOrDefault();
                if (oLDZR != null)
                {
                    oLDZR.oAppUtilityNVP.AppGlobalOwnerId = vm.oAppGloOwnId;
                    oLDZR.oAppUtilityNVP.ChurchBodyId = vm.oChurchBodyId;
                    oLDZR.oAppUtilityNVP.OwnedByChurchBodyId = vm.modOwnedByChurchBodyId;
                    oLDZR.oAppUtilityNVP.SharingStatus = vm.modSharingStatus;
                    oLDZR.oAppUtilityNVP.NVPCode = vm.modNVPCode;
                    // oLDZR.oAppUtilityNVP.NVPSubCode = "LDZR";
                    oLDZR.oAppUtilityNVP.ValueType = "T";
                    oLDZR.oAppUtilityNVP.NVPValue = vm.bl_IsLeadingZeros ? "Y" : "N";
                    oLDZR.oAppUtilityNVP.LastMod = DateTime.Now;
                    oLDZR.oAppUtilityNVP.LastModByUserId = this._oLoggedUser.Id;
                    //
                    _oCntUpd++;
                    _context.Update(oLDZR.oAppUtilityNVP);
                }
                else  // doesn't exist... create it.
                {
                    AppUtilityNVP oNVPAdd = new AppUtilityNVP()
                    {
                        AppGlobalOwnerId = vm.oAppGloOwnId,
                        ChurchBodyId = vm.oChurchBodyId,
                        OwnedByChurchBodyId = vm.modOwnedByChurchBodyId,
                        SharingStatus = vm.modSharingStatus,
                        NVPCode = vm.modNVPCode,
                        NVPSubCode = "LDZR",
                        ValueType = "T",
                        NVPValue = vm.bl_IsAutogenMCCFCode ? "Y" : "N",
                        Created = DateTime.Now,
                        LastMod = DateTime.Now,
                        CreatedByUserId = this._oLoggedUser.Id,
                        LastModByUserId = this._oLoggedUser.Id,
                    };
                    //
                    _oCntAdd++;
                    _context.Add(oNVPAdd);
                }
 
                  

                var _userTask = "";
                if ((_oCntAdd + _oCntUpd) > 0)
                {
                    if (_oCntAdd > 0)
                    {
                        _userTask = "Configured " + _oCntAdd + " new details for '" + strDesc.ToLower() + "' successfully.";
                        ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + "Configured " + _oCntAdd + " new " + strDesc.ToLower() + " details.";
                    }

                    if (_oCntUpd > 0)
                    {
                        _userTask = !string.IsNullOrEmpty(_userTask) ? _userTask + ". " : "" + "Updated configurations for " + _oCntUpd + " details of '" + strDesc.ToLower() + "' successfully.";
                        ViewBag.UserMsg = (!string.IsNullOrEmpty(ViewBag.UserMsg) ? ViewBag.UserMsg + ". " : "") + Environment.NewLine + Environment.NewLine + _oCntUpd + " details for '" + strDesc.ToLower() + "' updated.";
                    }

                    //save all...
                    _context.SaveChanges(); // await _ctryCtx.SaveChangesAsync();

                    //// refreshValues...
                    //var _connstr_CL = this.GetCL_DBConnString();
                    //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");

                    var _tm = DateTime.Now;
                    _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, this._oLoggedAGO.Id, this._oLoggedCB.Id, "N",
                                         "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, this._oLoggedUser.Id, _tm, _tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                                        ); 

                    return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, pageIndex = vm.pageIndex });
                }
                 

                return Json(new { taskSuccess = false, userMess = "Saving data failed. No update found. You may reload and try again.", pageIndex = vm.pageIndex });
                  
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = vm.modNVPCode, userMess = "Failed saving '" + strDesc + "' details. Err: " + ex.Message });
            }
        }

    }
}
