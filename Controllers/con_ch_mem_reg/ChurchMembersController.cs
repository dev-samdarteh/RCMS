using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using RhemaCMS.Models;
using System.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Http;
using RhemaCMS.Models.MSTRModels;
using RhemaCMS.Models.CLNTModels;
using RhemaCMS.Controllers.con_adhc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using RhemaCMS.Models.Adhoc;
using Microsoft.AspNetCore.Hosting;
using RhemaCMS.Models.ViewModels.vm_cl;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.IO;
using System.Globalization;
using Newtonsoft.Json;
using System.Net.Mail;
using System.Net;


namespace RhemaCMS.Controllers.con_ch_mem_reg
{
    public class ChurchMembersController : Controller
    {
        private readonly MSTR_DbContext _masterContext;
        private ChurchModelContext _context;
        private readonly IWebHostEnvironment _hostingEnvironment;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly ITempDataDictionaryFactory _tempDataDictionaryFactory;
        ///
        //private string _strClientConn;

      //  private string _clientDBConnString;
        private UserProfile _oLoggedUser;
        // private UserRole _oLoggedRole;
        private MSTRChurchBody _oLoggedCB_MSTR;
        private MSTRAppGlobalOwner _oLoggedAGO_MSTR;

        // private bool isCurrValid = false;
        private UserSessionPrivilege oUserLogIn_Priv = null;

        /// localized
        private ChurchBody _oLoggedCB;
        private AppGlobalOwner _oLoggedAGO;

        ///
        private string strCountryCode_dflt = (string)null;
        private string strCountryName_dflt = "";
        private string strCountryCURR1_dflt = "";
        private string strCountryCURR2_dflt = "";

        // this attr is used by most of the models... save in memory [class var]
        private CountryCustom oCTRYDefault;
        private ChurchPeriod oCPRDefault; 
        private CurrencyCustom oCURRDefault; 

        // private bool isCurrValid = false;
        // private UserSessionPrivilege oUserLogIn_Priv = null;
        ///        
        private List<DiscreteLookup> dlGenStatuses = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlStatus = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlTaskStatuses = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlHealthStatuses = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlGenderBase = new List<DiscreteLookup>();
       // private List<DiscreteLookup> dlPersTitle = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlGenderType = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlPrebuitFilter = new List<DiscreteLookup>();
         
        private List<DiscreteLookup> dlOfficeTermType = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlMarriageType = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlMaritalStatus = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlMemRelStatus = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlSectorScope = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlRolestatus = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlMemTypeCode = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlFamRelCateg = new List<DiscreteLookup>();
        private List<NumberDiscreteLookup> dlLangProfLvl = new List<NumberDiscreteLookup>();
        private List<DiscreteLookup> dlCBDivOrgTypes = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlShareStatus = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlShareStatus_Any = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlOwnerStatus = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlVis_Statuses = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlChurchType = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlChuWorkStat = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlChurchFellowType = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlFaithAffiliateType = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlChuWorkStats = new List<DiscreteLookup>();
        //private List<DiscreteLookup> dlNVPCodes = new List<DiscreteLookup>();
        //private List<DiscreteLookup> dlNVPValTypes = new List<DiscreteLookup>();
        // private List<DiscreteLookup> dlNVPCategories = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlPeriodTypes = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlIntervalFreqs = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlSemesters = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlQuarters = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlMonths = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlDays = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlActivityTypes = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlGenderStatuses = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlEnrollStatuses = new List<DiscreteLookup>();
        private List<DiscreteLookup> dlDepartStatuses = new List<DiscreteLookup>();

        private readonly IConfiguration _configuration;
        private string _clientDBConn;

        //IWebHostEnvironment hostingEnvironment,
        //            IHttpContextAccessor httpContextAccessor, ITempDataDictionaryFactory tempDataDictionaryFactory)
        //        {
        //            _hostingEnvironment = hostingEnvironment;
        //            _masterContext = masterContext;
        //            // _context = context;

        //            _httpContextAccessor = httpContextAccessor;
        //            _tempDataDictionaryFactory = tempDataDictionaryFactory;

        public ChurchMembersController(MSTR_DbContext masterContext, IWebHostEnvironment hostingEnvironment,
            IHttpContextAccessor httpContextAccessor, ITempDataDictionaryFactory tempDataDictionaryFactory, ChurchModelContext clientCtx, IConfiguration configuration)
        {
            try
            { 
                _hostingEnvironment = hostingEnvironment;
                _masterContext = masterContext;
                _configuration = configuration;


                _httpContextAccessor = httpContextAccessor;
                _tempDataDictionaryFactory = tempDataDictionaryFactory;


                // get user logon info... authenticate else logout
                if (!SetUserLogged())
                    RedirectToAction("LoginUserAcc", "UserLogin");


                // get user logon details... from memory
                // _oLoggedRole = oUserLogIn_Priv.UserRole; 

                var isAuth = this.oUserLogIn_Priv != null;
                //  if (!isAuth) isAuth = SetUserLogged();

                if (isAuth)
                {
                    this._oLoggedUser = this.oUserLogIn_Priv.UserProfile;
                    this._oLoggedCB_MSTR = this.oUserLogIn_Priv.ChurchBody;
                    this._oLoggedAGO_MSTR = this.oUserLogIn_Priv.AppGlobalOwner;
                    this._oLoggedUser.strChurchCode_AGO = this._oLoggedAGO_MSTR != null ? this._oLoggedAGO_MSTR.GlobalChurchCode : "";
                    this._oLoggedUser.strChurchCode_CB = this._oLoggedCB_MSTR != null ? this._oLoggedCB_MSTR.GlobalChurchCode : "";
                    ///
                    this._oLoggedCB = this.oUserLogIn_Priv.ChurchBody_CLNT;
                    this._oLoggedAGO = this.oUserLogIn_Priv.AppGlobalOwner_CLNT;
                }


                if (this._oLoggedUser == null)
                    RedirectToAction("LoginUserAcc", "UserLogin");

                if (this._oLoggedUser.AppGlobalOwnerId == null || this._oLoggedUser.ChurchBodyId == null)
                    RedirectToAction("LoginUserAcc", "UserLogin");


                // _context = context;
                //  this._context = clientCtx;

                this._clientDBConn = AppUtilties.GetNewDBConnString_CL(_masterContext, _configuration, this._oLoggedUser.AppGlobalOwnerId);

                if (clientCtx == null)
                    _context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser.AppGlobalOwnerId);

                //_context = GetClientDBContext();


                /// synchronize AGO, CL, CB, CTRY  or @login 
                // this._clientDBConnString = _context.Database.GetDbConnection().ConnectionString;

                /// get the localized data... using the MSTR data
                if (this._context != null && (this._oLoggedAGO == null || this._oLoggedCB == null))
                {
                    this._oLoggedAGO = this._context.AppGlobalOwner.AsNoTracking()
                                        .Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.GlobalChurchCode == this._oLoggedUser.strChurchCode_AGO).FirstOrDefault();  // one record table...
                    this._oLoggedCB = this._context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                                        .Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.MSTR_ChurchBodyId == this._oLoggedUser.ChurchBodyId && c.GlobalChurchCode == this._oLoggedUser.strChurchCode_CB).FirstOrDefault();
                }



                ///// synchronize AGO, CL, CB, CTRY  or @login 
                //// this._clientDBConnString = _context.Database.GetDbConnection().ConnectionString;

                ///// get the localized data... using the MSTR data
                //if (_context != null)
                //{
                //    this._oLoggedAGO = _context.AppGlobalOwner.AsNoTracking()
                //                        .Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.GlobalChurchCode == this._oLoggedUser.strChurchCode_AGO).FirstOrDefault();  // one record table...

                //    this._oLoggedCB = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                //                        .Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.MSTR_ChurchBodyId == this._oLoggedUser.ChurchBodyId && c.GlobalChurchCode == this._oLoggedUser.strChurchCode_CB).FirstOrDefault();
                //}


            }
            catch (Exception ex)
            {
                RedirectToAction("LoginUserAcc", "UserLogin");
            }



            ////load the dash
            //LoadClientDashboardValues();



            ///
            dlGenStatuses.Add(new DiscreteLookup() { Category = "GenStatus", Val = "A", Desc = "Active" });
            dlGenStatuses.Add(new DiscreteLookup() { Category = "GenStatus", Val = "T", Desc = "In-Transit" });  
            dlGenStatuses.Add(new DiscreteLookup() { Category = "GenStatus", Val = "P", Desc = "Pending" });
            dlGenStatuses.Add(new DiscreteLookup() { Category = "GenStatus", Val = "H", Desc = "On-Hold" });
            dlGenStatuses.Add(new DiscreteLookup() { Category = "GenStatus", Val = "B", Desc = "Blocked" });  // temporal suspend
            dlGenStatuses.Add(new DiscreteLookup() { Category = "GenStatus", Val = "D", Desc = "Deactive" });  // deleted accounts 
            dlGenStatuses.Add(new DiscreteLookup() { Category = "GenStatus", Val = "E", Desc = "Expired" });
            dlGenStatuses.Add(new DiscreteLookup() { Category = "GenStatus", Val = "X", Desc = "Closed" });  // non-active account ... transfers, death etc


            dlTaskStatuses.Add(new DiscreteLookup() { Category = "TaskStatus", Val = "P", Desc = "Pending" });
            dlTaskStatuses.Add(new DiscreteLookup() { Category = "TaskStatus", Val = "H", Desc = "On-Hold" });
            dlTaskStatuses.Add(new DiscreteLookup() { Category = "TaskStatus", Val = "I", Desc = "In Progress" });

            dlTaskStatuses.Add(new DiscreteLookup() { Category = "TaskStatus", Val = "X", Desc = "Cancelled" });
            //dlTaskStatuses.Add(new DiscreteLookup() { Category = "TaskStatus", Val = "I", Desc = "Aborted" });
            //dlTaskStatuses.Add(new DiscreteLookup() { Category = "TaskStatus", Val = "I", Desc = "Terminated" });
            dlTaskStatuses.Add(new DiscreteLookup() { Category = "TaskStatus", Val = "D", Desc = "Declined" });
            dlTaskStatuses.Add(new DiscreteLookup() { Category = "TaskStatus", Val = "C", Desc = "Waived" });  // Force complete

            dlTaskStatuses.Add(new DiscreteLookup() { Category = "TaskStatus", Val = "A", Desc = "Completed" });  //Approved
            //dlTaskStatuses.Add(new DiscreteLookup() { Category = "TaskStatus", Val = "I", Desc = "Approved" });


            //dlApprovalStepStatuses.Add(new DiscreteLookup() { Category = "ApprovalStepStatus", Val = "N", Desc = "N/A" });
            //dlApprovalStepStatuses.Add(new DiscreteLookup() { Category = "ApprovalStepStatus", Val = "P", Desc = "Pending" });
            //dlApprovalStepStatuses.Add(new DiscreteLookup() { Category = "ApprovalStepStatus", Val = "I", Desc = "In Progress" });
            //dlApprovalStepStatuses.Add(new DiscreteLookup() { Category = "ApprovalStepStatus", Val = "H", Desc = "On Hold" });
            //dlApprovalStepStatuses.Add(new DiscreteLookup() { Category = "ApprovalStepStatus", Val = "A", Desc = "Approved" });
            //dlApprovalStepStatuses.Add(new DiscreteLookup() { Category = "ApprovalStepStatus", Val = "C", Desc = "Force Complete" });
            //dlApprovalStepStatuses.Add(new DiscreteLookup() { Category = "ApprovalStepStatus", Val = "D", Desc = "Declined" });  //Denied
            //dlApprovalStepStatuses.Add(new DiscreteLookup() { Category = "ApprovalStepStatus", Val = "R", Desc = "Recalled" });
            //dlApprovalStepStatuses.Add(new DiscreteLookup() { Category = "ApprovalStepStatus", Val = "X", Desc = "Cancelled" });


            dlHealthStatuses.Add(new DiscreteLookup() { Category = "HealthStatus", Val = "A", Desc = "Fit /Well (Active)" });
            dlHealthStatuses.Add(new DiscreteLookup() { Category = "HealthStatus", Val = "D", Desc = "Physically-challenged" });  /// Disability
            dlHealthStatuses.Add(new DiscreteLookup() { Category = "HealthStatus", Val = "R", Desc = "Recuperating (Recovering)" });  /// responding to treatment
            dlHealthStatuses.Add(new DiscreteLookup() { Category = "HealthStatus", Val = "S", Desc = "Sick (Indiposed)" });
            dlHealthStatuses.Add(new DiscreteLookup() { Category = "HealthStatus", Val = "I", Desc = "Invalid (Long-term ailment)" });

            dlEnrollStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "W", Desc = "Walk-in" });
            dlEnrollStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "T", Desc = "Church Transfer" });
            dlEnrollStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "I", Desc = "Invite /Referral" });
            //dlEnrollStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "I", Desc = "Church Invite" });            
            //dlEnrollStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "I", Desc = "Group Invite" });
            //dlEnrollStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "I", Desc = "Member Invite" });            
            dlEnrollStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "P", Desc = "Through Parent" });
            dlEnrollStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "M", Desc = "Via Marriage" });
            dlEnrollStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "O", Desc = "other" });


            dlDepartStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "T", Desc = "Church Transfer" });
            dlDepartStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "R", Desc = "Official Request Out" });
            dlDepartStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "U", Desc = "Unannounced" });            
            dlDepartStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "D", Desc = "Death" });
            dlDepartStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "M", Desc = "Via Marriage" });
            dlDepartStatuses.Add(new DiscreteLookup() { Category = "EnrollStatus", Val = "O", Desc = "other" });
              


            dlVis_Statuses.Add(new DiscreteLookup() { Category = "Vis_Stat", Val = "D", Desc = "Draft /Deactive" });
            dlVis_Statuses.Add(new DiscreteLookup() { Category = "Vis_Stat", Val = "A", Desc = "Active" });
            dlVis_Statuses.Add(new DiscreteLookup() { Category = "Vis_Stat", Val = "P", Desc = "Prospect" });
            dlVis_Statuses.Add(new DiscreteLookup() { Category = "Vis_Stat", Val = "N", Desc = "New Convert" });
            dlVis_Statuses.Add(new DiscreteLookup() { Category = "Vis_Stat", Val = "M", Desc = "Member" });

            dlRolestatus.Add(new DiscreteLookup() { Category = "RoleStatus", Val = "C", Desc = "Current" });
            dlRolestatus.Add(new DiscreteLookup() { Category = "RoleStatus", Val = "P", Desc = "Past" });

            dlGenderType.Add(new DiscreteLookup() { Category = "GenderType", Val = "M", Desc = "Male" });
            dlGenderType.Add(new DiscreteLookup() { Category = "GenderType", Val = "F", Desc = "Female" });
            dlGenderType.Add(new DiscreteLookup() { Category = "GenderType", Val = "O", Desc = "Other" });
            ///
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "0", Desc = "All members" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "1", Desc = "New Converts" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "2", Desc = "Church Leaders (Mainstream)" });  /// core to the church ... 
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "3", Desc = "All Church Leaders" });  /// core to the church ... 
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "4", Desc = "Male Members" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "5", Desc = "Female Members" });
            /// 
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "7", Desc = "Active Profile" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "8", Desc = "Pending - On-Hold" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "9", Desc = "Trash - Deactive" });
            ///
            ///
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "11", Desc = "Children" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "12", Desc = "Youth" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "13", Desc = "Young Adult" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "14", Desc = "Adult" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "15", Desc = "Aged" });
            ///
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "17", Desc = "Married" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "18", Desc = "Not-married" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "19", Desc = "Widowed" });
            ///
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "21", Desc = "Sick" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "22", Desc = "Bereaved" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "23", Desc = "Deceased" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "24", Desc = "Past Members" });
            ///
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "27", Desc = "Communicant" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "28", Desc = "Baptized" });
            ///
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "30", Desc = "Working/Empoloyed" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "31", Desc = "Unemployed" });
            dlPrebuitFilter.Add(new DiscreteLookup() { Category = "MemFilter", Val = "32", Desc = "Retired" });
             

            // case "T": return "Tenure";    case "Y": return " Person Age (years)"; //years
            dlOfficeTermType.Add(new DiscreteLookup() { Category = "OfficeTermType", Val = "T", Desc = "Tenure" });
            dlOfficeTermType.Add(new DiscreteLookup() { Category = "OfficeTermType", Val = "Y", Desc = "Person Age (years)" });

            //dlGenderBase.Add(new DiscreteLookup() { Category = "GenderBase", Val = "M", Desc = "Male" });
            //dlGenderBase.Add(new DiscreteLookup() { Category = "GenderBase", Val = "F", Desc = "Female" });
            //dlGenderBase.Add(new DiscreteLookup() { Category = "GenderBase", Val = "M", Desc = "Mixed" });

            dlMemTypeCode.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "N", Desc = "New Convert" }); // FULLY automate... MBD, MCI, MLS, MCP, MCL, MCLAc, MCET, MS [ MT, MS -- unassigned ], MCA, MTP    add New convert as *special Visitor [ on diff interface ]  ... [Member data] to be linked with [New Convert data] ... New Convert Class
            dlMemTypeCode.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "A", Desc = "Affiliate" });  //regular guest / invited guest,  visiting missionaries, workers can be assigned temporal membership status -- MBD, MCI, MCP, MCL
            dlMemTypeCode.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "X", Desc = "Excommunicated" }); /// temp [for sometime and reinstated or ]... perm [expelled!]
            /// dlMemTypeCode.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "T", Desc = "In-Transit" }); // jux like the Congregant ... only that he has not reported physically yet --> result of TRANSFERS
            dlMemTypeCode.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "C", Desc = "Member" }); // has all modules [21] -- MBD, MCI, MLS, MFR, MCP, MED, MPB, MWE --- MCL [MCL, MCLAc, MCET], MCM [MS, MT, MS], MCG, MCR, MRR, MCA, MCT, MTP, MCV [visits** when sick or regular checkups]
           
            //dlMemTypeCode.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "L", Desc = "Church Leader" });  /// Mainstream church leadership [elders abd the like]
            //dlMemTypeCode.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "P", Desc = "Lay Pastor" });   /// lay [P]astor
            //dlMemTypeCode.Add(new DiscreteLookup() { Category = "MemTypeCode", Val = "M", Desc = "Minister" });   // Ordained...
            

            ///Marriage registered Number may be required
            dlMarriageType.Add(new DiscreteLookup() { Category = "MarrType", Val = "C", Desc = "Customary" });
            dlMarriageType.Add(new DiscreteLookup() { Category = "MarrType", Val = "O", Desc = "Ordinance" });
            dlMarriageType.Add(new DiscreteLookup() { Category = "MarrType", Val = "X", Desc = "Other" });

            dlLangProfLvl.Add(new NumberDiscreteLookup() { Category = "LangProfLvl", Val = 1, Desc = "Novice /Basic :-somehow speak" }); // somehow speak  ... dim-gray
            dlLangProfLvl.Add(new NumberDiscreteLookup() { Category = "LangProfLvl", Val = 2, Desc = "Intermediate :-moderately speak and/or write" });  // moderately speak and/or write
            dlLangProfLvl.Add(new NumberDiscreteLookup() { Category = "LangProfLvl", Val = 3, Desc = "Fluent :-can speak well and/or somehow write" });  //can speak well and/or somehow write ... 
            dlLangProfLvl.Add(new NumberDiscreteLookup() { Category = "LangProfLvl", Val = 4, Desc = "Proficient /Advanced :-can speak and write" });  // Proficient /Advanced can speak and write ... 
            dlLangProfLvl.Add(new NumberDiscreteLookup() { Category = "LangProfLvl", Val = 5, Desc = "Native -owns it; can speak and write well" });  // can speak and write well ... green

            //dlSectorScope.Add(new DiscreteLookup() { Category = "GenderBase", Val = "M", Desc = "Mainstream" });
            //dlSectorScope.Add(new DiscreteLookup() { Category = "GenderBase", Val = "G", Desc = "Church Group" });
            //dlSectorScope.Add(new DiscreteLookup() { Category = "GenderBase", Val = "C", Desc = "Working Committee" });
            //dlSectorScope.Add(new DiscreteLookup() { Category = "GenderBase", Val = "O", Desc = "Other" });


            dlMaritalStatus.Add(new DiscreteLookup() { Category = "MarrStatus", Val = "S", Desc = "Single" });
            dlMaritalStatus.Add(new DiscreteLookup() { Category = "MarrStatus", Val = "M", Desc = "Married" });
            dlMaritalStatus.Add(new DiscreteLookup() { Category = "MarrStatus", Val = "X", Desc = "Separated" });
            dlMaritalStatus.Add(new DiscreteLookup() { Category = "MarrStatus", Val = "D", Desc = "Divorced" });
            dlMaritalStatus.Add(new DiscreteLookup() { Category = "MarrStatus", Val = "W", Desc = "Widowed" });
          //  dlMaritalStatus.Add(new DiscreteLookup() { Category = "MarrStatus", Val = "C", Desc = "Co-habit" });
            dlMaritalStatus.Add(new DiscreteLookup() { Category = "MarrStatus", Val = "O", Desc = "Other" });

            dlMemRelStatus.Add(new DiscreteLookup() { Category = "MemRelStatus", Val = "A", Desc = "Active" });
            dlMemRelStatus.Add(new DiscreteLookup() { Category = "MemRelStatus", Val = "I", Desc = "Indisposed" });
            dlMemRelStatus.Add(new DiscreteLookup() { Category = "MemRelStatus", Val = "D", Desc = "Deceased" });

            ///N-uclear, E-xtended, F-aith Related, V-aried relation 
            dlFamRelCateg.Add(new DiscreteLookup() { Category = "FamRelType", Val = "N", Desc = "Nuclear" });
            dlFamRelCateg.Add(new DiscreteLookup() { Category = "FamRelType", Val = "E", Desc = "Extended" });
            //dlFamRelCateg.Add(new DiscreteLookup() { Category = "FamRelType", Val = "A", Desc = "Associate" });
            //dlFamRelCateg.Add(new DiscreteLookup() { Category = "FamRelType", Val = "F", Desc = "Faith-related" });  // Faith-related, Variant,   
            //dlFamRelCateg.Add(new DiscreteLookup() { Category = "FamRelType", Val = "Q", Desc = "Acquaintance" });       
            //dlFamRelCateg.Add(new DiscreteLookup() { Category = "FamRelType", Val = "V", Desc = "Varried" });
            dlFamRelCateg.Add(new DiscreteLookup() { Category = "FamRelType", Val = "O", Desc = "Other" });

            //ChurchFellowType L - Yes, local congregation. C - Yes, different congregation. E - No [external person]
            dlChurchFellowType.Add(new DiscreteLookup() { Category = "ChurchFellowType", Val = "L", Desc = "Local congregation" });
            dlChurchFellowType.Add(new DiscreteLookup() { Category = "ChurchFellowType", Val = "C", Desc = "Different congregation" });
            dlChurchFellowType.Add(new DiscreteLookup() { Category = "ChurchFellowType", Val = "E", Desc = "Member unavailable or External (outside denomination)" });



            /// public string FaithAffiliationExtCon { get; set; }  // Christian, Non-Christian ... MUS-uslim, ATR-African Traditional Religion, NAN- N/A [None]
          ///
            dlFaithAffiliateType.Add(new DiscreteLookup() { Category = "FaithAffiliateType", Val = "C", Desc = "Christian" });
            dlFaithAffiliateType.Add(new DiscreteLookup() { Category = "FaithAffiliateType", Val = "X", Desc = "Non-Christian" });
            dlFaithAffiliateType.Add(new DiscreteLookup() { Category = "FaithAffiliateType", Val = "N", Desc = "N/A (None)" });
             
            /// 
            //SharingStatus { get; set; }  // A - Share with all sub-congregations, C - Share with child congregations only, N - Do not share
            dlShareStatus.Add(new DiscreteLookup() { Category = "ShrStat", Val = "N", Desc = "Do not roll-down (share)" });
            dlShareStatus.Add(new DiscreteLookup() { Category = "ShrStat", Val = "C", Desc = "Roll-down (share) for direct child congregations" });
            dlShareStatus.Add(new DiscreteLookup() { Category = "ShrStat", Val = "A", Desc = "Roll-down (share) for all sub-congregations" });
              

            dlShareStatus_Any.Add(new DiscreteLookup() { Category = "ShrStatAny", Val = "N", Desc = "Do not share with any congregation (localized)" });  //case "N": return "Do not share with any congregation [localized]";
            dlShareStatus_Any.Add(new DiscreteLookup() { Category = "ShrStatAny", Val = "C", Desc = "Share with only child congregations (below)" }); //case "C": return "Share with only child congregations (below)";
            dlShareStatus_Any.Add(new DiscreteLookup() { Category = "ShrStatAny", Val = "D", Desc = "Share with all sub-congregations (down-deep)" }); //case "D": return "Share with all sub-congregations (down-deep)";
            dlShareStatus_Any.Add(new DiscreteLookup() { Category = "ShrStatAny", Val = "P", Desc = "Share with only parent congregation (above)" }); //case "P": return "Share with only parent congregation (above)";
            dlShareStatus_Any.Add(new DiscreteLookup() { Category = "ShrStatAny", Val = "H", Desc = "Share with all parent congregations (up-high)" }); //case "H": return "Share with all parent congregations (up-high)";
            dlShareStatus_Any.Add(new DiscreteLookup() { Category = "ShrStatAny", Val = "R", Desc = "Share with all congregations on same route (top-down)" }); //case "R": return "Share with all congregations on same route (top-down)";
            dlShareStatus_Any.Add(new DiscreteLookup() { Category = "ShrStatAny", Val = "A", Desc = "Share with all congregations within denomination" + (this._oLoggedAGO != null ? (!string.IsNullOrEmpty(this._oLoggedAGO.Acronym) ? " (" + this._oLoggedAGO.Acronym + ")" : "") : "") });   //case "A": return "Share with all congregations within denomination" + (!string.IsNullOrEmpty(strAGOAcronym) ? " [" + strAGOAcronym + "]" : "");
              

            // OwnershipStatus { get; set; }  // I -- Inherited, O -- Originated   i.e. currChurchBody == OwnedByChurchBody
            dlOwnerStatus.Add(new DiscreteLookup() { Category = "OwnStat", Val = "O", Desc = "Originated" });
            dlOwnerStatus.Add(new DiscreteLookup() { Category = "OwnStat", Val = "I", Desc = "Inherited" });

            dlChuWorkStats.Add(new DiscreteLookup() { Category = "ChuWorkStat", Val = "OP", Desc = "Operational" });
            dlChuWorkStats.Add(new DiscreteLookup() { Category = "ChuWorkStat", Val = "ST", Desc = "Structure only" });

            //dlGenderStatuses.Add(new DiscreteLookup() { Category = "GenderStat", Val = "M", Desc = "Male" });
            //dlGenderStatuses.Add(new DiscreteLookup() { Category = "GenderStat", Val = "F", Desc = "Female" });
            //dlGenderStatuses.Add(new DiscreteLookup() { Category = "GenderStat", Val = "X", Desc = "Mixed" });

            dlPeriodTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "CP", Desc = "Church Calendar Period" });
            dlPeriodTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "AP", Desc = "Accounting Period" });
            //  dlPeriodTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "DF", Desc = "Default Period" });
            dlPeriodTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "CS", Desc = "Custom Period" });
            dlPeriodTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "DF", Desc = "Interval Definition" });

            dlIntervalFreqs.Add(new DiscreteLookup() { Category = "Interval", Val = "D", Desc = "Day" });
            dlIntervalFreqs.Add(new DiscreteLookup() { Category = "Interval", Val = "W", Desc = "Week" });
            dlIntervalFreqs.Add(new DiscreteLookup() { Category = "Interval", Val = "M", Desc = "Month" });
            dlIntervalFreqs.Add(new DiscreteLookup() { Category = "Interval", Val = "S", Desc = "Semester" });
            dlIntervalFreqs.Add(new DiscreteLookup() { Category = "Interval", Val = "Y", Desc = "Year" });

            // pair with the specific year... ex. 2021-Sem-1, 2021-Sem-2, 2023-Sem-2
            dlSemesters.Add(new DiscreteLookup() { Category = "CPR-Sem", Val = "S1", Desc = "Semester-1" });
            dlSemesters.Add(new DiscreteLookup() { Category = "CPR-Sem", Val = "S2", Desc = "Semester-2" });

            // pair with the specific year... ex. 2021-Qtr-1, 2022-Qtr-2, 2023-Qtr-4  // 2021-Quarter-1
            dlQuarters.Add(new DiscreteLookup() { Category = "CPR-Qtr", Val = "Q1", Desc = "Quarter-1" });
            dlQuarters.Add(new DiscreteLookup() { Category = "CPR-Qtr", Val = "Q2", Desc = "Quarter-2" });
            dlQuarters.Add(new DiscreteLookup() { Category = "CPR-Qtr", Val = "Q3", Desc = "Quarter-3" });
            dlQuarters.Add(new DiscreteLookup() { Category = "CPR-Qtr", Val = "Q4", Desc = "Quarter-4" });

            // pair with the specific year... ex. 2021-Jan, 2022-Feb, 2023-Dec  ... 2021-January
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M1", Desc = "Jan" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M2", Desc = "Feb" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M3", Desc = "Mar" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M4", Desc = "Apr" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M5", Desc = "May" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M6", Desc = "Jun" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M7", Desc = "Jul" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M8", Desc = "Aug" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M9", Desc = "Sep" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M10", Desc = "Oct" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M11", Desc = "Nov" });
            dlMonths.Add(new DiscreteLookup() { Category = "CPR-Mon", Val = "M12", Desc = "Dec" });


            // MA - Member Activity, GA - General Activity, EV - Event-related, MR - Member related
            //dlActivityTypes.Add(new DiscreteLookup() { Category = "ActivityType", Val = "MA", Desc = "Member Activity" });
            //dlActivityTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "GA", Desc = "General Activity" });
            //dlActivityTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "EV", Desc = "Event-related" });
            //dlActivityTypes.Add(new DiscreteLookup() { Category = "PeriodType", Val = "GA", Desc = "Member-related" });

            dlActivityTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_MA", Desc = "General Churchlife" });  // baptism, confirmation etc.
            dlActivityTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_MR", Desc = "Member-related" });   // naming, funeral, wedding
            dlActivityTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_EV", Desc = "Event-related" });   // calendar programs
            dlActivityTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_GA", Desc = "Adhoc Activity" });  // Others  
             

            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CR", Desc = "Church Head (Apex)" }); //--CB[church body]  ... General CB
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "GB", Desc = "Governing Body" }); //... General CB
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "IB", Desc = "Independent Unit" }); //... General CB

            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CH", Desc = "Congregation Head-unit" });  // oversight directly on congregations ... General CB
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CN", Desc = "Congregation" });  // to look up congregation by church code [short or full path]  -- ... General CB

            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "DP", Desc = "Department" });  //   Ministry -- CSU [church sector unit] ... department with units, offices, cttees or church groupings
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CE", Desc = "Church Enterprise" }); //...   -- CSU 
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CO", Desc = "Church Office" }); //...  CSU [church sector unit] ... office setup ex. President, Secretary or Moderator
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CG", Desc = "Church Grouping" }); //-- groups, associations   --CSU  ... grouping of members as a unit incl clubs, unions
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "SC", Desc = "Standing Committee" }); // Working Committee   -- CSU 

            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CP", Desc = "Position/Role" });
            dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "TM", Desc = "Team/Batch" });   // Working Team .. group of roles/pos or other teams ex. Session = presbyters + agents [ minister + catechist]  -- CR  [church roles]  // -- CR    


            //dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CR", Desc = "Church Head (Apex)" }); //--CB[church body]  ... General CB
            //dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "GB", Desc = "Governing Body" }); //... General CB
            //dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "IB", Desc = "Independent Unit" }); //... General CB 

            //dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CO", Desc = "Church Office" }); //...  CSU [church sector unit] ... office setup ex. President, Secretary or Moderator
            //dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "DP", Desc = "Department" });  //   Ministry -- CSU [church sector unit] ... department with units, offices, cttees or church groupings
            //dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CG", Desc = "Church Grouping" }); //-- groups, associations   --CSU  ... grouping of members as a unit incl clubs, unions
            //dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "SC", Desc = "Standing Committee" }); // Working Committee   -- CSU 
            //dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CE", Desc = "Church Enterprise" }); //...   -- CSU
            //dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CP", Desc = "Church Position/Role" });
            //dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "TM", Desc = "Team/Batch" });   // Working Team .. group of roles/pos   -- CR  [church roles]  // -- CR    

            //dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CH", Desc = "Congregation Head-unit" });  // oversight directly on congregations ... General CB
            //dlCBDivOrgTypes.Add(new DiscreteLookup() { Category = "CBDivOrgType", Val = "CN", Desc = "Congregation" });  // to look up congregation by church code [short or full path]  -- ... General CB


            //// NVP Tags            
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CLA", Desc = "Churchlife Activity" });  //17 and Procedure
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CLARD", Desc = "Churchlife Activity Requirement Definition" });  //18         
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "TTL", Desc = "Title" });
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "UOM", Desc = "Unit of Measure" });
            ////
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "LSPK", Desc = "Language Spoken" });  // 8
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "NIDT", Desc = "National ID Type" });  // 10
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "INST", Desc = "Institution Type" });  // 11
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CTT", Desc = "Certificate Type" }); // 12
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CR", Desc = "Church Rank" });  //15
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CMT", Desc = "Church Member Type" });  // 19
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CMS", Desc = "Church Member Status" });  //20           
            //                                                                                                            //       
            //                                                                                                            // dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CH_TRNF", Desc = "Church Transfer Settings" });
            //                                                                                                            // dlNVPCodes.Add(new DiscreteLookup() { Category = "CT", Val = "CT", Desc = "Church Transfer Settings" });  //21
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "VIS_AGE_BRC", Desc = "Visitor Age Bracket" });
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "CLA_BAP_CNF", Desc = "Baptism and Confirmation Details" });  //CLA_BAP_PRC, CLA_CNF_PRC   [...Practice] = Y/N
            //dlNVPCodes.Add(new DiscreteLookup() { Category = "NVPCode", Val = "ASS_CATEG", Desc = "Asset Category" });

            //dlNVPValTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "T", Desc = "String (Text)" });
            //dlNVPValTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "N", Desc = "Numeric" });
            //dlNVPValTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "D", Desc = "Date" });
            //// dlNVPValTypes.Add(new DiscreteLookup() { Category = "NVPValType", Val = "B", Desc = "Bool" });

            ///// ... 
            //dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "INST_ELE", Desc = "Basic /Elementary" });
            //dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "INST_SEC", Desc = "Secondary /Second-Cycle" });
            //dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "INST_TER", Desc = "Tertiary /Advanced Study" });
            /////
            ////  MA - Member Activity, GA - General Activity, EV - Event-related, MR - Member Related  
            //dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_MA", Desc = "General Churchlife" });  // baptism, confirmation etc.
            //dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_MR", Desc = "Member-related" });   // naming, funeral, wedding
            //dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_EV", Desc = "Event-related" });   // calendar programs
            //dlNVPCategories.Add(new DiscreteLookup() { Category = "NVPValType", Val = "CLA_GA", Desc = "Adhoc Activity" });  // Others

        }

         //"A", Desc = "Fit /Well (Active)" });
         //"R", Desc = "Recuperating (Recovering)" }
         //"S", Desc = "Sick (Indiposed)" });
         //"I", Desc = "Invalid (Long-term ailment)"


        public static string GetStatusDesc(string oCode)
        {
            switch (oCode)
            {
                case "A": return "Active";
                case "T": return "In-Transit";
                case "H": return "On Hold";
                case "B": return "Blocked";
                case "D": return "Deactive"; // deleted account
                case "P": return "Pending";
                case "E": return "Expired";
                case "X": return "Closed";  // non-active --- death, transferred

                default: return oCode;
            }
        }

        public static string GetRelationStatusDesc(string oCode)
        {
            switch (oCode)
            {
                case "A": return "Active";
                // case "I": return "Indisposed";
                case "D": return "Deceased";
          

                default: return oCode;
            }
        }

        public static string GetHealthStatusDesc(string oCode)
        {
            switch (oCode)
            {
                case "A": return "Fit /Well"; //"A", Desc = "Fit /Well (Active)" 
                case "D": return "Physically-challenged"; /// D- Disability
                case "R": return "Recuperating";   //"R", Desc = "Recuperating (Recovering)"
                case "S": return "Sick";     //"S", Desc = "Sick (Indiposed)"
                case "I": return "Invalid";     //"I", Desc = "Invalid (Long-term ailment)"

                default: return oCode;
            }
        }


        public static string GetEnrollStatusDesc(string oCode)
        {
            switch (oCode)
            {
                case "T": return "Church Transfer"; 
                case "I": return "Invite /Referral";
                case "W": return "Walk-in";   
                case "P": return "Through Parent"; // Parent-led
                case "M": return "Via Marriage"; 
                case "O": return "Other";  

                default: return oCode;
            }
        }

        public static string GetDepartStatusDesc(string oCode)
        {
            switch (oCode)
            {
                
                case "T": return "Church Transfer";
                case "R": return "Official Request Out"; // Walk-out
                case "U": return "Unannounced";
                case "D": return "Death";                
                case "M": return "Via Marriage";
                case "O": return "Other";

                default: return oCode;
            }
        }

        public static string GetRelationCategoryDesc(string oCode)
        {
            switch (oCode)
            {
                case "N": return "Nuclear";
                case "E": return "Extended";
                case "O": return "Others";

                default: return oCode;
            }
        }

        public static string GetFaithAffilateDesc(string oCode)
        {
            switch (oCode)
            {
                case "C": return "Christian";
                case "X": return "Non-Christian";
                case "N": return "N/A (None)"; 

                default: return oCode;
            }
        }

        public static string GetTaskStatusDesc(string oCode)
        {
            switch (oCode)
            {  //  P-Pending, I-In Progress, O-On-Hold, T-Terminated/Aborted, C-Completed, D-Deactive/Failed/Denied, 
                case "P": return "Pending";
                case "H": return "On-Hold";
                case "I": return "In Progress";                
            
              case "X": return "Cancelled";
                //case "X": return "Aborted";
                //case "T": return "Terminated";

                case "C": return "Waived";   // force complete
                case "A": return "Completed";  // Approved
                case "D": return "Declined"; // "Failed";

                default: return oCode;
            }
        }

        public static string GetLangProfDesc(int? oCode)
        {
            switch (oCode)
            {
                case 1: return "Novice";
                case 2: return "Intermediate";
                case 3: return "Fluent";
                case 4: return "Advanced";
                case 5: return "Native";

                default: return "None";
            }
        }

        public static string GetMaritalStatDesc(string oCode)
        {
            switch (oCode)
            {
                case "S": return "Single";
                case "M": return "Married";
                case "X": return "Separated";
                case "D": return "Divorced";
                case "W": return "Widowed";
                case "C": return "Co-habit";
                case "O": return "Other";

                default: return "N/A";
            }
        }

        public static string GetMarriageTypeDesc(string oCode)
        {
            switch (oCode)
            {
                case "C": return "Customary";
                case "O": return "Ordinance"; 
                case "X": return "Other";

                default: return "N/A";
            }
        }

        public static string GetVis_StatusDesc(string oCode)
        {
            switch (oCode)
            {
                case "D": return "Draft /Deactive";
                case "A": return "Active";
                case "C": return "Become New Convert";
                case "M": return "Migrated to Member";

                default: return oCode;
            }
        }

        public static string GetMemClassDesc(string oCode)
        {
            switch (oCode)
            {
                case "I": return "Internal";   // members
                case "E": return "External";   // yet to become members                     

                default: return oCode;
            }
        }

        public static string GetMemTypeDesc(string oCode)
        {
            switch (oCode)
            {
                case "M": return "Minister";   // Ordained...
                case "P": return "Lay Pastor";  /// lay [P]astor
                case "L": return "Church Leader";
                case "C": return "Member";
             //   case "T": return "In-Transit";      // Transfer states 
                case "N": return "New Convert";      // Transfer states 
                case "A": return "Affiliate";
                case "G": return "Guest";  /// Regular Visitor

                default: return oCode;
            }
        }



        //private ChurchModelContext GetClientDBContext() //UserProfile oUserLogged = null)
        //{
        //    var isAuth = this.oUserLogIn_Priv != null;
        //    if (!isAuth) isAuth = SetUserLogged();
        //    //else
        //    //{
        //    if (!isAuth)
        //    {
        //        RedirectToAction("LoginUserAcc", "UserLogin"); return null;
        //    }
        //    else
        //    {
        //        if (this.oUserLogIn_Priv == null)
        //        {
        //            RedirectToAction("LoginUserAcc", "UserLogin"); return null;
        //        }
        //        else
        //        {
        //            if (this.oUserLogIn_Priv.UserProfile == null)
        //            {
        //                RedirectToAction("LoginUserAcc", "UserLogin"); return null;
        //            }
        //            else
        //            {
        //                var oClientConfig = _masterContext.ClientAppServerConfig.AsNoTracking().Where(c => c.AppGlobalOwnerId == this.oUserLogIn_Priv.UserProfile.AppGlobalOwnerId && c.Status == "A").FirstOrDefault();
        //                //var oClientConfig = _masterContext.ClientAppServerConfig.Where(c => c.AppGlobalOwnerId == 4 && c.Status == "A").FirstOrDefault();
        //                if (oClientConfig != null)
        //                {
        //                    //// get and mod the conn
        //                    //var _clientDBConnString = "";
        //                    //var conn = new SqlConnectionStringBuilder(_masterContext.Database.GetDbConnection().ConnectionString);
        //                    //conn.DataSource = oClientConfig.ServerName; conn.InitialCatalog = oClientConfig.DbaseName; conn.UserID = oClientConfig.SvrUserId; conn.Password = oClientConfig.SvrPassword; conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;
        //                    //_clientDBConnString = conn.ConnectionString;

        //                    //// test the NEW DB conn
        //                    //var _clientContext = new ChurchModelContext(_clientDBConnString);

        //                    // var _clientDBConnString = "";
        //                    var conn = new SqlConnectionStringBuilder(_masterContext.Database.GetDbConnection().ConnectionString);
        //                    conn.DataSource = oClientConfig.ServerName; conn.InitialCatalog = oClientConfig.DbaseName;
        //                    conn.UserID = oClientConfig.SvrUserId; conn.Password = oClientConfig.SvrPassword;
        //                    conn.IntegratedSecurity = false; conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;

        //                    this._clientDBConnString = conn.ConnectionString;

        //                    // test the NEW DB conn
        //                    var _clientContext = new ChurchModelContext(_clientDBConnString);

        //                    if (!_clientContext.Database.CanConnect())
        //                        RedirectToAction("LoginUserAcc", "UserLogin");

        //                    //// _oLoggedRole = oUserLogIn_Priv.UserRole; 
        //                    //this._oLoggedUser = this.oUserLogIn_Priv.UserProfile;
        //                    //this._oLoggedCB_MSTR = this.oUserLogIn_Priv.ChurchBody;
        //                    //this._oLoggedAGO_MSTR = this.oUserLogIn_Priv.AppGlobalOwner;
        //                    //this._oLoggedUser.strChurchCode_AGO = this._oLoggedAGO_MSTR != null ? this._oLoggedAGO_MSTR.GlobalChurchCode : "";
        //                    //this._oLoggedUser.strChurchCode_CB = this._oLoggedCB_MSTR != null ? this._oLoggedCB_MSTR.GlobalChurchCode : "";

        //                    ///// synchronize AGO, CL, CB, CTRY  or @login 
        //                    //// this._clientDBConnString = _context.Database.GetDbConnection().ConnectionString;

        //                    ///// get the localized data... using the MSTR data
        //                    //this._oLoggedAGO = _clientContext.AppGlobalOwner.AsNoTracking().Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId && c.GlobalChurchCode == this._oLoggedUser.strChurchCode_AGO).FirstOrDefault();  // one record table...
        //                    //this._oLoggedCB = _clientContext.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.MSTR_AppGlobalOwnerId == this._oLoggedUser.AppGlobalOwnerId &&
        //                    //                        c.MSTR_ChurchBodyId == this._oLoggedUser.ChurchBodyId && c.GlobalChurchCode == this._oLoggedUser.strChurchCode_CB).FirstOrDefault();


        //                    // load the dash b/f
        //                    // LoadClientDashboardValues();

        //                    return _clientContext;
        //                }
        //                else
        //                { // db config not found             
        //                    RedirectToAction("LoginUserAcc", "UserLogin"); return null;
        //                }
        //            }
        //        }
        //    }
        //}






        // private bool isUserAuthorized = false;  


         

        private bool SetUserLogged()
        {
            var isUserAuthorized = false;
            if (TempData == null)
            {
                var httpContext = _httpContextAccessor.HttpContext;
                var tempData = _tempDataDictionaryFactory.GetTempData(httpContext);

                if (tempData.ContainsKey("UserLogIn_oUserPrivCol"))
                {
                    var tempPrivList = tempData["UserLogIn_oUserPrivCol"] as string;
                    if (string.IsNullOrEmpty(tempPrivList)) RedirectToAction("LoginUserAcc", "UserLogin");
                    // De-serialize the string to object
                    this.oUserLogIn_Priv = Newtonsoft.Json.JsonConvert.DeserializeObject<UserSessionPrivilege>(tempPrivList);
                    isUserAuthorized = this.oUserLogIn_Priv != null;

                    if (!tempData.ContainsKey("_bckUserLogIn_oUserPrivCol"))
                    {
                        tempData["_bckUserLogIn_oUserPrivCol"] = tempData["UserLogIn_oUserPrivCol"];
                        tempData.Keep();
                    }

                    ////
                    //isCurrValid = oUserLogIn_Priv.UserSessionPermList?.Count > 0;
                    //if (isCurrValid)
                    //{
                    //    this._oLoggedUser = this.oUserLogIn_Priv.UserProfile;

                    //    // check permission for Core life...  given the sets of permissions
                    //     isUserAuthorized = true;
                    //}
                }

                else if (tempData.ContainsKey("_bckUserLogIn_oUserPrivCol"))
                {
                    var tempPrivList = tempData["_bckUserLogIn_oUserPrivCol"] as string;
                    if (string.IsNullOrEmpty(tempPrivList)) RedirectToAction("LoginUserAcc", "UserLogin");
                    // De-serialize the string to object
                    this.oUserLogIn_Priv = Newtonsoft.Json.JsonConvert.DeserializeObject<UserSessionPrivilege>(tempPrivList);
                    isUserAuthorized = this.oUserLogIn_Priv != null;
                    tempData["UserLogIn_oUserPrivCol"] = tempData["_bckUserLogIn_oUserPrivCol"];
                    tempData.Keep();
                }

                else isUserAuthorized = false; // RedirectToAction("LoginUserAcc", "UserLogin");
            }
            else
            {
                if (TempData.ContainsKey("UserLogIn_oUserPrivCol"))
                {
                    var tempPrivList = TempData["UserLogIn_oUserPrivCol"] as string;
                    if (string.IsNullOrEmpty(tempPrivList)) RedirectToAction("LoginUserAcc", "UserLogin");
                    // De serialize the string to object
                    this.oUserLogIn_Priv = Newtonsoft.Json.JsonConvert.DeserializeObject<UserSessionPrivilege>(tempPrivList);
                    isUserAuthorized = this.oUserLogIn_Priv != null;

                    if (!TempData.ContainsKey("_bckUserLogIn_oUserPrivCol"))
                    {
                        TempData["_bckUserLogIn_oUserPrivCol"] = TempData["UserLogIn_oUserPrivCol"];
                        TempData.Keep();
                    }

                    //
                    //isCurrValid = oUserLogIn_Priv.UserSessionPermList?.Count > 0;
                    //if (isCurrValid)
                    //{
                    //    this._oLoggedUser = this.oUserLogIn_Priv.UserProfile;

                    //    // check permission for Core life...  given the sets of permissions
                    //     isUserAuthorized = true; 
                    //}
                }

                else if (TempData.ContainsKey("_bckUserLogIn_oUserPrivCol"))
                {
                    var tempPrivList = TempData["_bckUserLogIn_oUserPrivCol"] as string;
                    if (string.IsNullOrEmpty(tempPrivList)) RedirectToAction("LoginUserAcc", "UserLogin");
                    // De-serialize the string to object
                    this.oUserLogIn_Priv = Newtonsoft.Json.JsonConvert.DeserializeObject<UserSessionPrivilege>(tempPrivList);
                    isUserAuthorized = this.oUserLogIn_Priv != null;
                }

                else isUserAuthorized = false; // RedirectToAction("LoginUserAcc", "UserLogin");
            }

            return isUserAuthorized;
        }

         
        public static string GetConcatMemberName(string title, string fn, string mn, string ln, bool profileDispFormat = false, bool dispTitle = false, bool lnSTRT = false, bool capSTRT = false, bool capLn = false)
        {            
            if (!lnSTRT && capSTRT) fn = fn.ToUpper();
            else if (lnSTRT && capSTRT) ln = ln.ToUpper();

            if (capLn) ln = ln.ToUpper();

            if (lnSTRT)
            {
                if (profileDispFormat)
                    return ((((dispTitle ? title : "") + " " + ln).Trim() + " " + mn).Trim() + " " + fn).Trim();
                else
                    return (((ln + ' ' + mn).Trim() + " " + fn).Trim() + " " + (dispTitle && !string.IsNullOrEmpty(title) ? "(" + title + ")" : "")).Trim();
            }
            else
            {
                if (profileDispFormat)
                    return ((((dispTitle ? title : "") + ' ' + fn).Trim() + " " + mn).Trim() + " " + ln).Trim();
                else
                    return (((fn + ' ' + mn).Trim() + " " + ln).Trim() + " " + (dispTitle && !string.IsNullOrEmpty(title) ? "(" + title + ")" : "")).Trim();
            }
        }

        public static string GetConcatLinkedEntities(string entitySub, string entityMain)
        {
            var strDesig = ((!string.IsNullOrEmpty(entitySub) && !string.IsNullOrEmpty(entityMain) ?
                                                        entitySub + ", " + entityMain : entitySub + entityMain).Trim());
            return strDesig;
        }
               
        public static string GetGenderDesc(string oCode)
        {
            switch (oCode)
            {
                case "M": return "Male";
                case "F": return "Female";
                case "X": return "Mixed";
                case "O": return "Gender (Other)"; 

                default: return oCode;
            }
        }
        public static string GetChurchActivityDesc(string oCode)
        {
            switch (oCode)
            {
                case "MA": return "Member Activity";
                case "GA": return "General Activity";
                case "EV": return "Event-related";
                case "MR": return "Member-related";

                default: return oCode;
            }
        }

        /// church role can be both local or in higher /lower congregations ... actually: role cud be anywhere [history], plus current roles [curr CB or elsewhere within church]
        /// N- Do NOT share, C-share with Child CB only (below), D- Share with all sub congregations [down, descendants],  P- Share with Parent congregation (above), 
        /// H- Share with all parent congregations - oversee [up, ancestor, forefather, Head CB], R- Share with congregations on same ROUTE [line], A- Share with all congregations within denomination [<denom.name>] 

        public static string GetMemInfoSharingStatusDesc(string oCode, string strAGOAcronym = "")
        {
            // if (string.IsNullOrEmpty(strAGOAcronym)) strAGOAcronym = (this._oLoggedAGO != null ? (!string.IsNullOrEmpty(this._oLoggedAGO.Acronym) ? " (" + this._oLoggedAGO.Acronym + ")" : "") : "");
            
            switch (oCode)
            {
                case "N": return "Do not share with any congregation [localized]";
                case "C": return "Share with only child congregations (below)";
                case "D": return "Share with all sub-congregations (down-deep)";
                case "P": return "Share with only parent congregation (above)";
                case "H": return "Share with all parent congregations (up-high)";
                case "R": return "Share with all congregations on same route (top-down)";
                case "A": return "Share with all congregations within denomination" + (!string.IsNullOrEmpty(strAGOAcronym) ? " [" + strAGOAcronym + "]" : "");  // [PCG], [COP]

                default: return oCode;
            }
        }

        public static string GetSharingStatusDesc(string oCode)
        {
            switch (oCode)
            {
                case "N": return "Do not roll-down (share)";
                case "C": return "Roll-down (share) for direct child congregations";
                case "A": return "Roll-down (share) for all sub-congregations";

                default: return oCode;
            }
        }

        public static string GetNVPTagDesc(string oCode)
        {
            switch (oCode)
            {
                case "UOM": return "Unit of Measure";
                case "TTL": return "Title";
                case "ASS_CATEG": return "Asset Category";
                case "CH_TRNF": return "Church Transfer Setting";
                case "VIS_AGE_BRC": return "Visitor Age Bracket";
                case "CLA_BAP_CNF": return "Baptism and Confirmation Detail";
                ///
                case "LSPK": return "Language Spoken";
                case "NIDT": return "National ID Type";
                case "INST": return "Institution Type";
                case "CTT": return "Certificate Type";
                case "CR": return "Church Rank";
                case "CMT": return "Church Member Type";
                case "CMS": return "Church Member Status";

                case "CPRD": return "Church Period Definition";
                case "MCCF": return "Custom Member Code Format";
                case "CTS": return "Church Transfer Settings";

                default: return oCode;

            }
        }
        public static string GetNVPSubTagDesc(string oCode)
        {
            switch (oCode)
            {
                /// INST .. 11
                // case "INST_PRE": return "Pre-School";
                case "INST_ELE": return "Basic /Elementary";   // Class/Basic 1 - 9
                case "INST_SEC": return "Secondary /Second-Cycle";
                case "INST_TER": return "Tertiary /Advanced Study";

                /// CLA .. 17
                case "CLA_MA": return "General Churchlife";
                case "CLA_MR": return "Member-related";
                case "CLA_EV": return "Event-related";
                case "CLA_GA": return "Adhoc Activity";

                // CPRD .........   ...  ...   ...    ...    ...
                case "CPRD_ST_CP": return "Church Period Starting Date";
                case "CPRD_INT_CP": return "Church Period Interval";
                // case "CPRD_PIF_CP": return "Period Interval Frequency";
                case "CPRD_DAYS_CP": return "Church Period Interval-Days";
                ///
                case "CPEQLAP": return "Church Period same as Account Period";
                ///
                case "CPRD_ST_AP": return "Accounting Period Starting Date";
                case "CPRD_INT_AP": return "Accounting Period Interval";
                // case "CPRD_PIF_AP": return "Accounting Interval Frequency";
                case "CPRD_DAYS_AP": return "Accounting Period Interval-Days";
                ///
                // MCCF .........   ...  ...   ...    ...    ...
                case "AUT_GN": return "Auto-generate Member Custom Code";
                case "PFX": return "Member Custom Code - Prefix";
                case "SFX": return "Member Custom Code - Suffix";
                case "LDZR": return "Member Custom Code - Leading Zero(0)";


                /// others

                default: return oCode;

            }
        }


        //AuditType -- TRANSACTIONAL = T, NAVIGATIONAL = N, LOGIN /LOGOUT = L 
        public static string GetAuditTypeDesc(string oCode)
        {
            switch (oCode)
            {
                case "L": return "Login/Logout";
                case "N": return "Navigational";
                case "T": return "Transactional";

                default: return oCode;
            }
        }
        public static string GetChuOrgTypeDesc(string oCode)
        {
            switch (oCode)
            {
                case "CR": return "Church Head (Apex)";
                case "GB": return "Governing Body";
                case "CO": return "Church Office";
                case "DP": return "Church Department";
                case "CG": return "Church Grouping";
                case "SC": return "Standing Committee";
                case "CE": return "Church Enterprise";
                case "CP": return "Church Position/Role";
                case "TM": return "Team/Batch";
                case "IB": return "Independent Unit";
                case "CH": return "Congregation Head-unit";
                case "CN": return "Congregation";

                default: return oCode;
            }
        }
        public static object GetChuOrgTypeDetail(string oCode, bool returnSetIndex)
        {
            switch (oCode)
            {
                case "CR": if (returnSetIndex) return 0; else return "Church Head (Apex)";
                case "GB": if (returnSetIndex) return 1; else return "Governing Body";
                case "CO": if (returnSetIndex) return 2; else return "Church Office";
                case "DP": if (returnSetIndex) return 3; else return "Church Department";
                case "CG": if (returnSetIndex) return 4; else return "Church Grouping";
                case "SC": if (returnSetIndex) return 5; else return "Standing Committee";
                case "CE": if (returnSetIndex) return 6; else return "Church Enterprise";
                case "CP": if (returnSetIndex) return 7; else return "Church Position/Role";
                case "TM": if (returnSetIndex) return 8; else return "Batch/Team";
                case "IB": if (returnSetIndex) return 9; else return "Independent Unit";  // Independent Body e.g. Boards, Trustees
                case "CH": if (returnSetIndex) return 10; else return "Congregation Head-unit";
                case "CN": if (returnSetIndex) return 11; else return "Congregation";

                default: return oCode;
            }
        }
        public static string GetChuOrgTypeCode(int setIndex)
        {
            switch (setIndex)
            {
                case 0: return "CR";
                case 1: return "GB";
                case 2: return "CO";
                case 3: return "DP";
                case 4: return "CG";
                case 5: return "SC";
                case 6: return "CE";
                case 7: return "TM";
                case 8: return "CP";
                case 9: return "IB";
                case 10: return "CH";
                case 11: return "CN";

                default: return "";
            }
        }
        public static string GetAdhocStatusDesc(string oCode)
        {
            switch (oCode)
            {
                case "T": return "Tenure";
                case "Y": return "Age (years)"; //years

                //OwnershipStatus
                case "O": return "Owned";  // Originated";
                case "I": return "Shared"; // "Inherited"; "";Inherit

                //ChurchWorkStatus
                case "ST": return "Structure only";
                case "OP": return "Operational";

                //case "GA": return "General Activity";//GA-- General activ, ER-Event Role,  MC--Member Churchlife Activity related, EV-Church E-vent related
                //case "ER": return "Event Role";
                //case "MC": return "Member Churchlife";
                //case "EV": return "Event";

                default: return oCode;
            }
        }


        public static string GetDayOfWeeksDesc(string oCode, bool days = false)
        {
            switch (oCode)
            {
                case "Su": return "Sunday";
                case "Mo": if (days) return "Monday"; else return "Monthly";
                case "Tu": return "Tuesday";
                case "We": return "Wednesday";
                case "Th": return "Thursday";
                case "Fr": return "Friday";
                case "Sa": return "Saturday";

                case "Da": return "Daily";
                case "Wk": return "Weekly";
                case "Bw": return "Bi-Weekly";
                //case "Mo": return "Monthly";
                case "Bm": return "Bi-Monthly";
                case "Qt": return "Quarterly";
                case "Yr": return "Yearly";

                default: return oCode;
            }
        }
        public static string GetPeriodDesc(string oCode)
        {
            switch (oCode)
            {
                case "AP": return "Accounting Period";
                case "CP": return "Church Calendar Period";

                case "Y": return "Year";
                case "S": return "Semester";
                case "M": return "Month";
                case "W": return "Week";
                case "D": return "Day";

                case "S1": return "Semester-1";
                case "S2": return "Semester-2";
                case "Q1": return "Quarter-1";
                case "Q2": return "Quarter-2";
                case "Q3": return "Quarter-3";
                case "Q4": return "Quarter-4";
                case "M1": return "January";
                case "M2": return "February";
                case "M3": return "March";
                case "M4": return "April";
                case "M5": return "May";
                case "M6": return "June";
                case "M7": return "July";
                case "M8": return "August";
                case "M9": return "September";
                case "M10": return "October";
                case "M11": return "November";
                case "M12": return "December";

                default: return oCode;
            }
        }

        


        //private bool InitializeUserLogging()
        //{
        //    try
        //    {
        //        SetUserLogged();

        //        if (!isCurrValid)
        //        {
        //            ViewData["strUserLoginFailMess"] = "Client user profile validation unsuccessful.";
        //            //RedirectToAction("LoginUserAcc", "UserLogin"); 
        //            return false;
        //        }

        //        if (oUserLogIn_Priv.UserProfile == null)
        //        {
        //            ViewData["strUserLoginFailMess"] = "Client user profile not found. Please try again or contact System Admin";
        //            // RedirectToAction("LoginUserAcc", "UserLogin"); 
        //            return false;
        //        }

        //        // store login in session 
        //        var _oUserPrivilegeCol = oUserLogIn_Priv;
        //        var privList = Newtonsoft.Json.JsonConvert.SerializeObject(_oUserPrivilegeCol);
        //        TempData["UserLogIn_oUserPrivCol"] = privList; TempData.Keep();

        //        ///
        //       // _oLoggedRole = oUserLogIn_Priv.UserRole;
        //        _oLoggedUser = oUserLogIn_Priv.UserProfile;
        //        _oLoggedMSTR_CB = oUserLogIn_Priv.ChurchBody;
        //        _oLoggedMSTR_AGO = oUserLogIn_Priv.AppGlobalOwner;
        //        _oLoggedUser.strChurchCode_AGO = _oLoggedMSTR_AGO != null ? _oLoggedMSTR_AGO.GlobalChurchCode : "";
        //        _oLoggedUser.strChurchCode_CB = _oLoggedMSTR_CB != null ? _oLoggedMSTR_CB.GlobalChurchCode : "";

        //        this._context = GetClientDBContext(_oLoggedUser);

        //        if (this._context == null)
        //        {
        //            ViewData["strUserLoginFailMess"] = "Client database connection unsuccessful. Please try again or contact System Admin";
        //            // return RedirectToAction("LoginUserAcc", "UserLogin"); 
        //            ModelState.AddModelError("", "Client database connection unsuccessful. Please try again or contact System Admin");
        //            ///
        //            return false;
        //            // RedirectToAction("Index", "Home");  //return View(oHomeDash);
        //        }

        //        this._clientDBConnString = _context.Database.GetDbConnection().ConnectionString;

        //        //// store ctx in session 
        //        //var _tempContext = this._context;
        //        //var _ctx = Newtonsoft.Json.JsonConvert.SerializeObject(_tempContext);
        //        //TempData["UserLogIn_oDBContext_Client"] = _ctx; TempData.Keep();

        //        /// synchronize AGO, CL, CB, CTRY  or @login 

        //        /// get the localized data... using the MSTR data
        //        _oLoggedAGO = _context.AppGlobalOwner.AsNoTracking().Where(c => c.MSTR_AppGlobalOwnerId == _oLoggedUser.AppGlobalOwnerId && c.GlobalChurchCode == _oLoggedUser.strChurchCode_AGO).FirstOrDefault();  // one record table...
        //        _oLoggedCB = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.MSTR_AppGlobalOwnerId == _oLoggedUser.AppGlobalOwnerId && c.MSTR_ChurchBodyId == _oLoggedUser.ChurchBodyId &&
        //                                                c.GlobalChurchCode == _oLoggedUser.strChurchCode_CB).FirstOrDefault();

        //        if (_oLoggedAGO == null || _oLoggedCB == null)
        //        {
        //            ViewData["strUserLoginFailMess"] = "Client Church unit details could not be verified. Please try again or contact System Admin";
        //            ///
        //            // RedirectToAction("LoginUserAcc", "UserLogin"); 
        //            return false;
        //        }

        //        /// master control DB
        //        ViewData["strAppName"] = "Rhema-CMS";
        //        ViewData["strAppNameMod"] = "Church Dashboard";
        //        ViewData["strAppCurrUser"] = !string.IsNullOrEmpty(_oLoggedUser.UserDesc) ? _oLoggedUser.UserDesc : "[Current user]";
        //        ViewData["oMSTR_AppGloOwnId_Logged"] = _oLoggedUser.AppGlobalOwnerId;
        //        ViewData["oMSTR_ChurchBodyId_Logged"] = _oLoggedUser.ChurchBodyId;

        //        ViewData["oCBOrgType_Logged"] = _oLoggedCB.OrgType;  // CH, CN but subscriber may come from other units like Church Office or Church Group HQ

        //        ViewData["strModCodes"] = String.Join(", ", oUserLogIn_Priv.arrAssignedModCodes);
        //        ViewData["bl_IsModAccessVAA0"] = oUserLogIn_Priv.IsModAccessVAA0;
        //        ViewData["bl_IsModAccessDS00"] = oUserLogIn_Priv.IsModAccessDS00;
        //        ViewData["bl_IsModAccessAC01"] = oUserLogIn_Priv.IsModAccessAC01;
        //        ViewData["bl_IsModAccessMR02"] = oUserLogIn_Priv.IsModAccessMR02;
        //        ViewData["bl_IsModAccessCL03"] = oUserLogIn_Priv.IsModAccessCL03;
        //        ViewData["bl_IsModAccessCA04"] = oUserLogIn_Priv.IsModAccessCA04;
        //        ViewData["bl_IsModAccessFM05"] = oUserLogIn_Priv.IsModAccessFM05;
        //        ViewData["bl_IsModAccessRA06"] = oUserLogIn_Priv.IsModAccessRA06;
        //        ///                
        //        ViewData["strAssignedRoleCodes"] = String.Join(", ", oUserLogIn_Priv.arrAssignedRoleCodes);
        //        ViewData["strAssignedRoleNames"] = String.Join(", ", oUserLogIn_Priv.arrAssignedRoleNames);
        //        ViewData["strAssignedGroupNames"] = String.Join(", ", oUserLogIn_Priv.arrAssignedGroupNames);
        //        //  ViewData["strAssignedGroupDesc"] = String.Join(", ", oUserLogIn_Priv.arrAssignedGroupsDesc);
        //        ViewData["strAssignedPermCodes"] = String.Join(", ", oUserLogIn_Priv.arrAssignedPermCodes);

        //        //ViewData["strAppCurrUser_ChRole"] = String.Join(", ", oUserLogIn_Priv.arrAssignedRolesDesc);  // _oLoggedRole.RoleName; // "System Adminitrator";
        //        //ViewData["strAppCurrUser_RoleCateg"] = String.Join(", ", oUserLogIn_Priv.arrAssignedRoleCodes);  //_oLoggedRole.RoleName; // "SUP_ADMN";  // CH_ADMN | CF_ADMN | CH_RGTR | CF_RGTR | CH_ACCT | CF_ACCT | CH_CUST | CH_CUST

        //        ViewData["strAppCurrUserPhoto_Filename"] = _oLoggedUser.UserPhoto;
        //        ViewData["strAppLogo_Filename"] = "df_rhema.jpg"; //"~/img_db/df_rhema.jpg"; // oAppGloOwn?.ChurchLogo;
        //        ///
        //        /// client control DB
        //        ViewData["oAppGloOwnId_Logged"] = _oLoggedAGO.Id;
        //        ViewData["oChurchBodyId_Logged"] = _oLoggedCB.Id;
        //        ViewData["oChurchBodyOrgType_Logged"] = _oLoggedCB.OrgType;
        //        ViewData["strClientLogo_Filename"] = _oLoggedAGO?.ChurchLogo;

        //        ViewData["strClientChurchName"] = _oLoggedAGO.OwnerName;
        //        ViewData["strClientBranchName"] = _oLoggedCB.Name;
        //        ViewData["strClientChurchLevel"] = !string.IsNullOrEmpty(_oLoggedCB.ChurchLevel?.CustomName) ? _oLoggedCB.ChurchLevel?.CustomName : _oLoggedCB.ChurchLevel?.Name;  // Assembly, Presbytery etc

        //        // refreshValues...
        //        // LoadClientDashboardValues(this._clientDBConnString, this._oLoggedUser);

        //        return true;
        //    }

        //    catch (Exception)
        //    {
        //        throw;
        //    }
        //}
        //private bool CheckCurrentClientDBContext()
        //{
        //    try
        //    {
        //        SetUserLogged();
        //        if (!isCurrValid)
        //        {
        //            ViewData["strUserLoginFailMess"] = "Client user profile validation unsuccessful.";
        //            //RedirectToAction("LoginUserAcc", "UserLogin"); 
        //            return false;
        //        }

        //        if (oUserLogIn_Priv.UserProfile == null)
        //        {
        //            ViewData["strUserLoginFailMess"] = "Client user profile not found. Please try again or contact System Admin";
        //            // RedirectToAction("LoginUserAcc", "UserLogin"); 
        //            return false;
        //        }

        //        if (TempData == null)
        //        {
        //            var httpContext = _httpContextAccessor.HttpContext;
        //            var tempData = _tempDataDictionaryFactory.GetTempData(httpContext);

        //            if (tempData.ContainsKey("UserLogIn_oDBContext_Client"))
        //            {
        //                var _con = tempData["UserLogIn_oDBContext_Client"] as string;
        //                if (string.IsNullOrEmpty(_con)) RedirectToAction("LoginUserAcc", "UserLogin");
        //                // De serialize the string to object
        //                this._context = Newtonsoft.Json.JsonConvert.DeserializeObject<ChurchModelContext>(_con);
        //                if (this._context == null)
        //                    this._context = GetClientDBContext(this._oLoggedUser);
        //            }

        //            else
        //            {
        //                this._context = GetClientDBContext(this._oLoggedUser);
        //            }
        //        }
        //        else
        //        {
        //            if (TempData.ContainsKey("UserLogIn_oDBContext_Client"))
        //            {
        //                var _con1 = TempData["UserLogIn_oDBContext_Client"] as string;
        //                if (string.IsNullOrEmpty(_con1)) RedirectToAction("LoginUserAcc", "UserLogin");
        //                // De serialize the string to object
        //                this._context = Newtonsoft.Json.JsonConvert.DeserializeObject<ChurchModelContext>(_con1);
        //                //
        //                if (this._context == null)
        //                    this._context = GetClientDBContext(this._oLoggedUser);
        //            }

        //            else
        //            {
        //                this._context = GetClientDBContext(this._oLoggedUser);
        //            }

        //        }

        //        //// store ctx in session 
        //        //var _tempContext = this._context; 
        //        //var _ctx = Newtonsoft.Json.JsonConvert.SerializeObject(_tempContext);
        //        //TempData["UserLogIn_oDBContext_Client"] = _ctx; TempData.Keep();

        //        if (this._context != null) this._clientDBConnString = _context.Database.GetDbConnection().ConnectionString;
        //        ///
        //        return (this._context != null);
        //    }

        //    catch (Exception)
        //    {
        //        throw;
        //    }
        //}

        //private bool userAuthorized = false;
        //private void SetUserLogged()
        //{
        //    if (TempData == null)
        //    {
        //        var httpContext = _httpContextAccessor.HttpContext;
        //        var tempData = _tempDataDictionaryFactory.GetTempData(httpContext);

        //        if (tempData.ContainsKey("UserLogIn_oUserPrivCol"))
        //        {
        //            var tempPrivList = tempData["UserLogIn_oUserPrivCol"] as string;
        //            if (string.IsNullOrEmpty(tempPrivList)) RedirectToAction("LoginUserAcc", "UserLogin");
        //            // De serialize the string to object
        //            this.oUserLogIn_Priv = Newtonsoft.Json.JsonConvert.DeserializeObject<UserSessionPrivilege>(tempPrivList);
        //            //
        //            isCurrValid = oUserLogIn_Priv.UserSessionPermList?.Count > 0;
        //            if (isCurrValid)
        //            {
        //                this._oLoggedUser = this.oUserLogIn_Priv.UserProfile;

        //                //ViewBag.oAppGloOwnLogged = oUserLogIn_Priv.AppGlobalOwner;
        //                //ViewBag.oChuBodyLogged = oUserLogIn_Priv.ChurchBody;
        //                //ViewBag.oUserLogged = oUserLogIn_Priv.UserProfile;

        //                // check permission for Core life...  given the sets of permissions
        //                userAuthorized = oUserLogIn_Priv.UserSessionPermList.Count > 0; //(oUserLogIn_Priv.Find(x => x.PermissionName == "_A0__System_Administration" || x.PermissionName == "xxx") != null);
        //            }
        //        }

        //        else RedirectToAction("LoginUserAcc", "UserLogin");
        //    }
        //    else
        //    {
        //        if (TempData.ContainsKey("UserLogIn_oUserPrivCol"))
        //        {
        //            var tempPrivList = TempData["UserLogIn_oUserPrivCol"] as string;
        //            if (string.IsNullOrEmpty(tempPrivList)) RedirectToAction("LoginUserAcc", "UserLogin");
        //            // De serialize the string to object
        //            this.oUserLogIn_Priv = Newtonsoft.Json.JsonConvert.DeserializeObject<UserSessionPrivilege>(tempPrivList);
        //            //
        //            isCurrValid = oUserLogIn_Priv.UserSessionPermList?.Count > 0;
        //            if (isCurrValid)
        //            {
        //                this._oLoggedUser = this.oUserLogIn_Priv.UserProfile;
        //                //ViewBag.oAppGloOwnLogged = oUserLogIn_Priv.AppGlobalOwner;
        //                //ViewBag.oChuBodyLogged = oUserLogIn_Priv.ChurchBody;
        //                //ViewBag.oUserLogged = oUserLogIn_Priv.UserProfile;

        //                // check permission for Core life...  given the sets of permissions
        //                userAuthorized = true; //oUserLogIn_Priv.Count > 0; //(oUserLogIn_Priv.Find(x => x.PermissionName == "_A0__System_Administration" || x.PermissionName == "xxx") != null);
        //            }
        //        }

        //        else RedirectToAction("LoginUserAcc", "UserLogin");
        //    }
        //}

        //private ChurchModelContext GetClientDBContext(UserProfile oUserLogged)
        //{
        //    var oClientConfig = _masterContext.ClientAppServerConfig.Where(c => c.AppGlobalOwnerId == oUserLogged.AppGlobalOwnerId && c.Status == "A").FirstOrDefault();
        //    if (oClientConfig != null)
        //    {
        //        //// get and mod the conn
        //        //var _clientDBConnString = "";
        //        //var conn = new SqlConnectionStringBuilder(_masterContext.Database.GetDbConnection().ConnectionString);
        //        //conn.DataSource = oClientConfig.ServerName; conn.InitialCatalog = oClientConfig.DbaseName; conn.UserID = oClientConfig.SvrUserId; conn.Password = oClientConfig.SvrPassword; conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;
        //        //_clientDBConnString = conn.ConnectionString;

        //        //// test the NEW DB conn
        //        //var _clientContext = new ChurchModelContext(_clientDBConnString);

        //        var _clientDBConnString = "";
        //        var conn = new SqlConnectionStringBuilder(_masterContext.Database.GetDbConnection().ConnectionString);
        //        conn.DataSource = oClientConfig.ServerName; conn.InitialCatalog = oClientConfig.DbaseName;
        //        conn.UserID = oClientConfig.SvrUserId; conn.Password = oClientConfig.SvrPassword;
        //        conn.IntegratedSecurity = false; conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;

        //        _clientDBConnString = conn.ConnectionString;

        //        // test the NEW DB conn
        //        var _clientContext = new ChurchModelContext(_clientDBConnString);

        //        if (_clientContext.Database.CanConnect())
        //            return _clientContext;
        //    }

        //    //
        //    return null;
        //}

        private string GetDefaultCountryInfo()   // GHA--Ghana--GHC--GHS
        {
            try
            {

                this.strCountryCode_dflt = (string)null; this.strCountryName_dflt = ""; this.strCountryCURR1_dflt = ""; this.strCountryCURR2_dflt = "";
                var strCTRYInfo = "";
                if (TempData.ContainsKey("oDefaultCountryInfo"))
                {
                    strCTRYInfo = TempData["oDefaultCountryInfo"] as string;
                    var isSuccess = oUserLogIn_Priv.UserSessionPermList?.Count > 0;
                    if (isSuccess)
                    {
                        strCTRYInfo = this.strCountryCode_dflt + "--" + this.strCountryName_dflt + "--" + this.strCountryCURR1_dflt + "--" + this.strCountryCURR2_dflt;  // GHA--Ghana--GHC--GHS
                        TempData["oDefaultCountryInfo"] = strCTRYInfo; TempData.Keep();
                        return strCTRYInfo;  // GHA--Ghana--GHC--GHS
                    }
                }

                // country -- default if not specified
                var oCTRY_List = _context.CountryCustom.AsNoTracking().Include(t => t.Country).Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.ChurchBodyId == this._oLoggedCB.Id).ToList();
                var oCTRY_List_d = oCTRY_List.Where(c => c.IsDefaultCountry == true).FirstOrDefault();
                if (oCTRY_List_d == null && oCTRY_List.Count > 0) oCTRY_List_d = oCTRY_List[0];
                if (oCTRY_List_d != null)
                {
                    this.strCountryCode_dflt = oCTRY_List_d.CtryAlpha3Code;
                    this.strCountryName_dflt = oCTRY_List_d.Country != null ? (!string.IsNullOrEmpty(oCTRY_List_d.Country.EngName) ? oCTRY_List_d.Country.EngName : oCTRY_List_d.Country.CtryAlpha3Code) : "";
                    this.strCountryCURR1_dflt = oCTRY_List_d.Country != null ? oCTRY_List_d.Country.CurrSymbol : "";
                    this.strCountryCURR2_dflt = oCTRY_List_d.Country != null ? oCTRY_List_d.Country.Curr3LISOSymbol : "";
                }
                //strCountryCode_dflt = oCTRY_List_d != null ? oCTRY_List_d.CtryAlpha3Code : "";
                //strCountry_dflt = oCTRY_List_d != null ? (oCTRY_List_d.Country != null ? (!string.IsNullOrEmpty(oCTRY_List_d.Country.EngName) ? oCTRY_List_d.Country.EngName : oCTRY_List_d.Country.CtryAlpha3Code) : "") : "";

                //  ...
                strCTRYInfo = this.strCountryCode_dflt + "--" + this.strCountryName_dflt + "--" + this.strCountryCURR1_dflt + "--" + this.strCountryCURR2_dflt;  // GHA--Ghana--GHC--GHS
                TempData["oDefaultCountryInfo"] = strCTRYInfo; TempData.Keep();
                return strCTRYInfo;  // GHA--Ghana--GHC--GHS
            }

            catch (Exception ex)
            {
                return "";
            }
        }
         

        //private void LoadClientDashboardValues(string clientDBConnString, UserProfile oLoggedUser)
        //{
        //    // using (var dashContext = new ChurchModelContext(clientDBConnString))
        //    using (var clientContext = new ChurchModelContext(clientDBConnString)) // ("Server=RHEMA-SDARTEH;Database=DBRCMS_MS_TEST;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true") ) // AppUtilties.GetNewDBContext_MS(_context, "DBRCMS_CL_TEST"))  // MSTR_DbContext()) //
        //    {
        //        if (clientContext.Database.CanConnect() == false) clientContext.Database.OpenConnection();
        //        else if (clientContext.Database.GetDbConnection().State != System.Data.ConnectionState.Open) clientContext.Database.OpenConnection();

        //        //get Currency
        //        var curr = clientContext.Currency.Where(c => c.AppGlobalOwnerId == oLoggedUser.AppGlobalOwnerId && c.ChurchBodyId == oLoggedUser.ChurchBodyId && c.IsBaseCurrency == true).FirstOrDefault();
        //        ViewData["CB_CurrUsed"] = curr != null ? curr.Acronym : ""; // "GHS"

        //        var clientAGO = clientContext.AppGlobalOwner.Where(c => c.MSTR_AppGlobalOwnerId == oLoggedUser.AppGlobalOwnerId && c.Status == "A").FirstOrDefault();
        //        var clientCB = clientContext.ChurchBody.Where(c => c.MSTR_AppGlobalOwnerId == oLoggedUser.AppGlobalOwnerId && c.MSTR_ChurchBodyId == oLoggedUser.ChurchBodyId && c.Status == "A").FirstOrDefault();
        //        ///
        //        var qrySuccess = false;
        //        if (clientAGO != null && clientCB != null)
        //        {
        //            var res = (from dummyRes in new List<string> { "X" }
        //                       join tcb_sb in clientContext.ChurchBody.Where(c => c.Status == "A" && (c.OrgType == "CR" || c.OrgType == "CH" || c.OrgType == "CN") &&
        //                                           c.AppGlobalOwnerId == clientAGO.Id && c.ParentChurchBodyId == clientCB.Id) on 1 equals 1 into _tcb_sb
        //                       // join tcb in clientContext.MSTRChurchBody.Where(c => c.Status == "A" && (c.OrgType == "CH" || c.OrgType == "CN")) on 1 equals 1 into _tcb
        //                       // join tsr in clientContext.UserRole.Where(c => c.RoleStatus == "A" && c.AppGlobalOwnerId == null && c.ChurchBodyId == null) on 1 equals 1 into _tsr
        //                       //join tcm in clientContext.ChurchMember.Where(c => c.Status == "A" &&
        //                       //                    c.AppGlobalOwnerId == clientAGO.Id && c.ChurchBodyId == clientCB.Id) on 1 equals 1 into _tcm
        //                       // join tms in clientContext.UserProfile.Where(c => c.ProfileScope == "V" && c.UserStatus == "A") on 1 equals 1 into _tms
        //                       // join tsubs in clientContext.AppSubscription.Where(c => c.Slastatus == "A") on 1 equals 1 into _tsubs
        //                       // join ttc in clientContext.UserAuditTrail.Where(c => c.EventDate.Date == DateTime.Now.Date) on 1 equals 1 into _ttc
        //                       // join tdb in clientContext.ClientAppServerConfig.Select(c => c.DbaseName).Distinct() on 1 equals 1 into _tdb

        //                       select new
        //                       {
        //                           cnt_tcb_sb = _tcb_sb.Count(),
        //                           // cnt_tcm = _tcm.Count(),
        //                           ///
        //                           //cnt_tms = _tms.Count(),
        //                           //cnt_tsubs = _tsubs.Count(),
        //                           //cnt_tdb = _tdb.Count(),
        //                           // cnt_ttc = _ttc.Count(),
        //                           //cnt_tcln_d = _tcln_d.Count(),
        //                           //cnt_tcln_a = _tcln_a.Count()
        //                       })
        //                    .ToList();
        //            //.ToListAsync();

        //            ///
        //            if (res.Count() > 0)
        //            {
        //                qrySuccess = true;
        //                ViewData["CB_SubCongCount"] = String.Format("{0:N0}", res[0].cnt_tcb_sb);
        //                ViewData["CB_MemListCount"] = String.Format("{0:N0}", 100); // res[0].cnt_tcm); 
        //                ViewData["CBWeek_NewMemListCount"] = String.Format("{0:N0}", 100); // res[0].cnt_tsubs);
        //                ViewData["CBWeek_NewConvertsCount"] = String.Format("{0:N0}", 100); //res[0].cnt_tdb);
        //                ViewData["CBWeek_VisitorsCount"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_a);
        //                ViewData["CBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_d);
        //                ViewData["CBWeek_PaymentsAmt"] = String.Format("{0:N0}", 100); //res[0].cnt_tcln_d); 
        //            }

        //            var resAudits = _masterContext.UserAuditTrail.Where(c => c.EventDate.Date == DateTime.Now.Date);
        //            // var cnt_ttc = resAudits.Count();
        //            ViewData["TodaysAuditCount"] = String.Format("{0:N0}", resAudits.Count());


        //            ////String.Format(1234 % 1 == 0 ? "{0:N0}" : "{0:N2}", 1234);
        //            //var curr = _context.Currency.Where(c => c.AppGlobalOwnerId == oAppGloOwnId_Logged && c.ChurchBodyId == oChuBodyId_Logged && c.IsBaseCurrency == true).FirstOrDefault(); 
        //            //oHomeDash.strCurrUsed = curr != null ? curr.Acronym : ""; // "GHS";
        //            //oHomeDash.SupCongCount = String.Format("{0:N0}", 25);
        //            //oHomeDash.MemListCount = String.Format("{0:N0}", 4208); ViewBag.MemListCount = oHomeDash.MemListCount;
        //            //oHomeDash.NewMemListCount = String.Format("{0:N0}", 17); ViewBag.NewMemListCount = oHomeDash.NewMemListCount;
        //            //oHomeDash.NewConvertsCount = String.Format("{0:N0}", 150); ViewBag.NewConvertsCount = oHomeDash.NewConvertsCount;
        //            //oHomeDash.VisitorsCount = String.Format("{0:N0}", 9); ViewBag.VisitorsCount = oHomeDash.VisitorsCount;
        //            //oHomeDash.ReceiptsAmt = String.Format("{0:N2}", 1700);
        //            //oHomeDash.PaymentsAmt = String.Format("{0:N2}", 105.491); 
        //        }

        //        if (!qrySuccess)
        //        {
        //            ViewData["numCB_SubCongCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCB_MemListCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_NewMemListCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_NewConvertsCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_VisitorsCount"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 0);
        //            ViewData["numCBWeek_PaymentsAmt"] = String.Format("{0:N0}", 0);
        //            ///
        //            ViewData["numCBToday_AuditCount"] = String.Format("{0:N0}", 0);
        //        }

        //        // close connection
        //        clientContext.Database.CloseConnection();
        //    }
        //}


        private async Task LoadClientDashboardValues()  ///(string clientDBConnString) //, UserProfile oLoggedUser)
        {

            /// Load basic values...
            ///
            /// master control DB
            ViewData["strAppName"] = "Rhema-CMS";
            ViewData["strAppNameMod"] = "Church Dashboard";
            ViewData["strAppCurrUser"] = !string.IsNullOrEmpty(this._oLoggedUser.UserDesc) ? this._oLoggedUser.UserDesc : "[Current user]";
            ViewData["oMSTR_AppGloOwnId_Logged"] = this._oLoggedUser.AppGlobalOwnerId;
            ViewData["oMSTR_ChurchBodyId_Logged"] = this._oLoggedUser.ChurchBodyId;

            ViewData["oCBOrgType_Logged"] = this._oLoggedCB.OrgType;  // CH, CN but subscriber may come from other units like Church Office or Church Group HQ

            ViewData["strModCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedModCodes);
            ViewData["bl_IsModAccessVAA0"] = this.oUserLogIn_Priv.IsModAccessVAA0;
            ViewData["bl_IsModAccessDS00"] = this.oUserLogIn_Priv.IsModAccessDS00;
            ViewData["bl_IsModAccessAC01"] = this.oUserLogIn_Priv.IsModAccessAC01;
            ViewData["bl_IsModAccessMR02"] = this.oUserLogIn_Priv.IsModAccessMR02;
            ViewData["bl_IsModAccessCL03"] = this.oUserLogIn_Priv.IsModAccessCL03;
            ViewData["bl_IsModAccessCA04"] = this.oUserLogIn_Priv.IsModAccessCA04;
            ViewData["bl_IsModAccessFM05"] = this.oUserLogIn_Priv.IsModAccessFM05;
            ViewData["bl_IsModAccessRA06"] = this.oUserLogIn_Priv.IsModAccessRA06;
            ///                
            ViewData["strAssignedRoleCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleCodes);
            ViewData["strAssignedRoleNames"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleNames);
            ViewData["strAssignedGroupNames"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedGroupNames);
            //  ViewData["strAssignedGroupDesc"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedGroupsDesc);
            ViewData["strAssignedPermCodes"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedPermCodes);


            //ViewData["strAppCurrUser_ChRole"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRolesDesc);  //_oLoggedRole.RoleName; // "System Adminitrator";
            //ViewData["strAppCurrUser_RoleCateg"] = String.Join(", ", this.oUserLogIn_Priv.arrAssignedRoleCodes);  //_oLoggedRole.RoleName; // "SUP_ADMN";  // CH_ADMN | CF_ADMN | CH_RGTR | CF_RGTR | CH_ACCT | CF_ACCT | CH_CUST | CH_CUST

            ViewData["strAppCurrUserPhoto_Filename"] = this._oLoggedUser.UserPhoto;
            ///
            /// client control DB
            ViewData["oAppGloOwnId_Logged"] = this._oLoggedAGO.Id;
            ViewData["oChurchBodyId_Logged"] = this._oLoggedCB.Id;
            ViewData["oChurchBodyOrgType_Logged"] = this._oLoggedCB.OrgType;
            ViewData["strClientLogo_Filename"] = this._oLoggedAGO?.ChurchLogo;
            ViewData["strAppLogo_Filename"] = "~/frontend/dist/img/rhema_logo.png"; // oAppGloOwn?.ChurchLogo;
            ViewData["strClientChurchName"] = this._oLoggedAGO.OwnerName;
            ViewData["strClientBranchName"] = this._oLoggedCB.Name;
            ViewData["strClientChurchLevel"] = !string.IsNullOrEmpty(this._oLoggedCB.ChurchLevel?.CustomName) ? this._oLoggedCB.ChurchLevel?.CustomName : this._oLoggedCB.ChurchLevel?.Name;  // Assembly, Presbytery etc
            ViewData["strClientBranchParentName"] = this._oLoggedCB.ParentChurchBody != null ? this._oLoggedCB.ParentChurchBody.Name : "";


            ViewData["CB_SubCongCount"] = String.Format("{0:N0}", 0);
            ViewData["CB_MemListCount"] = String.Format("{0:N0}", 0); // res[0].cnt_tcm); //
            ViewData["CBWeek_NewMemListCount"] = String.Format("{0:N0}", 0); // res[0].cnt_tsubs);
            ViewData["CBWeek_NewConvertsCount"] = String.Format("{0:N0}", 0); //res[0].cnt_tdb);
            ViewData["CBWeek_VisitorsCount"] = String.Format("{0:N0}", 0); //res[0].cnt_tcln_a);
            ViewData["CBWeek_ReceiptsAmt"] = String.Format("{0:N0}", 0); //res[0].cnt_tcln_d);
            ViewData["CBWeek_PaymentsAmt"] = String.Format("{0:N0}", 0); //res[0].cnt_tcln_d); 
            ViewData["TodaysAuditCount"] = String.Format("{0:N0}", 0);
                         
        }



        //private async Task LogUserActivity_AppMainUserAuditTrail(UserAuditTrail oUserTrail)
        //{ // var oUserTrail = _masterContext.UserAuditTrail.Where(c => ((c.AppGlobalOwnerId == null && c.ChurchBodyId == null && churchCode=="000000") || (c.AppGlobalOwnerId== oAppGloOwnId && c.ChurchBodyId == oCurrChuBodyId))
        //    if (oUserTrail != null)
        //    {
        //        // var tempCtx = _context;
        //        using (var logCtx = new MSTR_DbContext(_masterContext.Database.GetDbConnection().ConnectionString)) // ("Server=RHEMA-SDARTEH;Database=DBRCMS_MS_TEST;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true") ) // AppUtilties.GetNewDBContext_MS(_context, "DBRCMS_CL_TEST"))  // MSTR_DbContext()) //
        //        {
        //            if (logCtx.Database.CanConnect() == false) logCtx.Database.OpenConnection();
        //            else if (logCtx.Database.GetDbConnection().State != System.Data.ConnectionState.Open) logCtx.Database.OpenConnection();

        //            // var a = logCtx.Database.GetDbConnection().ConnectionString;
        //            // var b = _masterContext.Database.GetDbConnection().ConnectionString;

        //            /// 
        //            logCtx.UserAuditTrail.Add(oUserTrail);
        //            await logCtx.SaveChangesAsync();

        //            //logCtx.SaveChanges();

        //            logCtx.Entry(oUserTrail).State = EntityState.Detached;
        //            ///
        //            //DetachAllEntities(logCtx);

        //            // close connection
        //            logCtx.Database.CloseConnection();

        //            //logCtx.Dispose();
        //        }
        //    }
        //}
        //private async Task LogUserActivity_ClientUserAuditTrail(UserAuditTrail_CL oUserTrail, string clientDBConnString)
        //{ // var oUserTrail = _masterContext.UserAuditTrail.Where(c => ((c.AppGlobalOwnerId == null && c.ChurchBodyId == null && churchCode=="000000") || (c.AppGlobalOwnerId== oAppGloOwnId && c.ChurchBodyId == oCurrChuBodyId))
        //    if (oUserTrail != null)
        //    {
        //        // var tempCtx = _context;
        //        if (!string.IsNullOrEmpty(clientDBConnString))
        //        {
        //            using (var logCtx = new ChurchModelContext(clientDBConnString)) // ("Server=RHEMA-SDARTEH;Database=DBRCMS_MS_TEST;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true") ) // AppUtilties.GetNewDBContext_MS(_context, "DBRCMS_CL_TEST"))  // MSTR_DbContext()) //
        //            {
        //                //logCtx = _context;
        //                //var conn = new Microsoft.Data.SqlClient.SqlConnectionStringBuilder(_context.Database.GetDbConnection().ConnectionString);
        //                ////  "DefaultConnection": "Server=RHEMA-SDARTEH;Database=DBRCMS_MS_DEV;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true"
        //                //conn.DataSource = "RHEMA-SDARTEH"; conn.InitialCatalog = "DBRCMS_CL_TEST"; conn.UserID = "sa"; conn.Password = "sadmin"; conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;
        //                /////
        //                //logCtx.Database.GetDbConnection().ConnectionString = conn.ConnectionString;

        //                if (logCtx.Database.CanConnect() == false) logCtx.Database.OpenConnection();
        //                else if (logCtx.Database.GetDbConnection().State != System.Data.ConnectionState.Open) logCtx.Database.OpenConnection();

        //                // var a = logCtx.Database.GetDbConnection().ConnectionString;
        //                // var b = _masterContext.Database.GetDbConnection().ConnectionString;

        //                ///
        //                logCtx.UserAuditTrail_CL.Add(oUserTrail);
        //                await logCtx.SaveChangesAsync();

        //                //logCtx.SaveChanges();

        //                logCtx.Entry(oUserTrail).State = EntityState.Detached;
        //                ///
        //                //DetachAllEntities(logCtx);

        //                // close connection
        //                logCtx.Database.CloseConnection();

        //                //logCtx.Dispose();
        //            }
        //        }
        //    }

        //}



        private async Task LogUserActivity_AppMainUserAuditTrail(UserAuditTrail oUserTrail)  //, MSTR_DbContext currContext = null, string strTempConn = "")
        { // var oUserTrail = _masterContext.UserAuditTrail.Where(c => ((c.AppGlobalOwnerId == null && c.ChurchBodyId == null && churchCode=="000000") || (c.AppGlobalOwnerId== oAppGloOwnId && c.ChurchBodyId == oCurrChuBodyId))
            if (oUserTrail != null)
            {
                // MSTR_DbContext currContext = null, string strTempConn = ""
                //var _cs = strTempConn;
                //if (string.IsNullOrEmpty(_cs))

                var _cs = AppUtilties.GetNewDBConnString_MS(_configuration);  /// this._configuration.GetConnectionString("DefaultConnection"); //["ConnectionStrings:DefaultConnection"]; /// _masterContext.Database.GetDbConnection().ConnectionString

                if (!string.IsNullOrEmpty(_cs))
                {
                    using (var logCtx = new MSTR_DbContext(_cs)) // ("Server=RHEMA-SDARTEH;Database=DBRCMS_MS_TEST;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true") ) // AppUtilties.GetNewDBContext_MS(_context, "DBRCMS_CL_TEST"))  // MSTR_DbContext()) //
                    {
                        if (logCtx.Database.CanConnect() == false)
                            logCtx.Database.OpenConnection();
                        else if (logCtx.Database.GetDbConnection().State != System.Data.ConnectionState.Open)
                            logCtx.Database.OpenConnection();

                        // var a = logCtx.Database.GetDbConnection().ConnectionString;
                        // var b = _masterContext.Database.GetDbConnection().ConnectionString;

                        /// 
                        logCtx.UserAuditTrail.Add(oUserTrail);
                        await logCtx.SaveChangesAsync();

                        //logCtx.SaveChanges();

                        logCtx.Entry(oUserTrail).State = EntityState.Detached;
                        ///
                        //DetachAllEntities(logCtx);

                        // close connection
                        logCtx.Database.CloseConnection();

                        //logCtx.Dispose();
                    }
                }

            }
        }

        private async Task LogUserActivity_ClientUserAuditTrail(UserAuditTrail_CL oUserTrail)  //, string strTempConn = ""
        { // var oUserTrail = _masterContext.UserAuditTrail.Where(c => ((c.AppGlobalOwnerId == null && c.ChurchBodyId == null && churchCode=="000000") || (c.AppGlobalOwnerId== oAppGloOwnId && c.ChurchBodyId == oCurrChuBodyId))
            if (oUserTrail != null)
            {
                // var tempCtx = _context;
                //  if (!string.IsNullOrEmpty(clientDBConnString))
                // {

                //// refreshValues... 
                //this._clientDBConn = AppUtilties.GetNewDBConnString_CL(_masterContext, _configuration, this._oLoggedUser.AppGlobalOwnerId);
                //_context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser.AppGlobalOwnerId);

                var _connstr_CL = AppUtilties.GetNewDBConnString_CL(_masterContext, _configuration, this._oLoggedUser.AppGlobalOwnerId); /// this.GetCL_DBConnString();
                if (!string.IsNullOrEmpty(_connstr_CL))
                {
                    using (var logCtx = new ChurchModelContext(_connstr_CL)) // ("Server=RHEMA-SDARTEH;Database=DBRCMS_MS_TEST;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true") ) // AppUtilties.GetNewDBContext_MS(_context, "DBRCMS_CL_TEST"))  // MSTR_DbContext()) //
                    {
                        //logCtx = _context;
                        //var conn = new Microsoft.Data.SqlClient.SqlConnectionStringBuilder(_context.Database.GetDbConnection().ConnectionString);
                        ////  "DefaultConnection": "Server=RHEMA-SDARTEH;Database=DBRCMS_MS_DEV;User Id=sa;Password=sadmin;Trusted_Connection=True;MultipleActiveResultSets=true"
                        //conn.DataSource = "RHEMA-SDARTEH"; conn.InitialCatalog = "DBRCMS_CL_TEST"; conn.UserID = "sa"; conn.Password = "sadmin"; conn.MultipleActiveResultSets = true; conn.TrustServerCertificate = true;
                        /////
                        //logCtx.Database.GetDbConnection().ConnectionString = conn.ConnectionString;

                        try
                        {
                            if (logCtx.Database.CanConnect() == false)
                                logCtx.Database.OpenConnection();
                            else if (logCtx.Database.GetDbConnection().State != System.Data.ConnectionState.Open)
                                logCtx.Database.OpenConnection();

                            // var a = logCtx.Database.GetDbConnection().ConnectionString;
                            // var b = _masterContext.Database.GetDbConnection().ConnectionString;

                            /// 
                            logCtx.UserAuditTrail_CL.Add(oUserTrail);
                            await logCtx.SaveChangesAsync();

                            //logCtx.SaveChanges();

                            logCtx.Entry(oUserTrail).State = EntityState.Detached;
                            ///
                            //DetachAllEntities(logCtx);

                            // close connection
                            logCtx.Database.CloseConnection();

                            //logCtx.Dispose();

                        }

                        catch (Exception ex)
                        {
                            throw;
                        }
                    }
                }


                //   }
            }
        }



        public void DetachAllEntities(MSTR_DbContext ctx)
        {
            var changedEntriesCopy = ctx.ChangeTracker.Entries()
                .Where(e => e.State == EntityState.Added ||
                            e.State == EntityState.Modified ||
                            e.State == EntityState.Deleted)
                .ToList();

            foreach (var entry in changedEntriesCopy)
                entry.State = EntityState.Detached;
        }
        public void DetachAllEntities(ChurchModelContext ctx)
        {
            var changedEntriesCopy = ctx.ChangeTracker.Entries()
                .Where(e => e.State == EntityState.Added ||
                            e.State == EntityState.Modified ||
                            e.State == EntityState.Deleted)
                .ToList();

            foreach (var entry in changedEntriesCopy)
                entry.State = EntityState.Detached;
        }
        private static bool IsAncestor_ChurchBody(ChurchBody oAncestorChurchBody, ChurchBody oCurrChurchBody)  // Ancestor of ? ... Taifa -- Grace. swapped -->> Descendant of ?
        {
            if (oAncestorChurchBody == null || oCurrChurchBody == null) return false;
            //string ChurchCodeFullPath { get; set; }  //R0000-0000-0000-0000-0000-0000 

            if (oAncestorChurchBody.Id == oCurrChurchBody.ParentChurchBodyId) return true;
            if (string.IsNullOrEmpty(oAncestorChurchBody.RootChurchCode) || string.IsNullOrEmpty(oCurrChurchBody.RootChurchCode)) return false;
            if (string.Compare(oAncestorChurchBody.RootChurchCode, oCurrChurchBody.RootChurchCode) == 0) return true;  // same CB .. owned

            string[] arr = new string[] { oCurrChurchBody.RootChurchCode };
            if (oCurrChurchBody.RootChurchCode.Contains("--")) arr = oCurrChurchBody.RootChurchCode.Split("--");  // else it should be the ROOT... and would not get this far

            if (arr.Length > 0)
            {
                var ancestorCode = oAncestorChurchBody.RootChurchCode;
                var tempCode = oCurrChurchBody.RootChurchCode;

                if (string.Compare(ancestorCode, tempCode) == 0) return true;
                var k = arr.Length - 1;
                for (var i = arr.Length - 1; i >= 0; i--)
                {
                    if (tempCode.Contains("--" + arr[i])) tempCode = tempCode.Replace("--" + arr[i], "");
                    if (string.Compare(ancestorCode, tempCode) == 0) return true;
                }
            }

            return false;
        }
        private static bool IsAncestor_ChurchBody(string strAncestorRootCode, string strCurrChurchBodyRootCode, int? ancestorChurchBodyId = null, int? currChurchBodyId = null)
        {
            // if (oAncestorChurchBody == null) return false;
            //string ChurchCodeFullPath { get; set; }  //R0000-0000-0000-0000-0000-0000 

            if (currChurchBodyId != null && ancestorChurchBodyId == currChurchBodyId) return true;

            if (string.IsNullOrEmpty(strAncestorRootCode) || string.IsNullOrEmpty(strCurrChurchBodyRootCode)) return false;
            if (string.Compare(strAncestorRootCode, strCurrChurchBodyRootCode) == 0) return true;

            string[] arr = new string[] { strCurrChurchBodyRootCode };
            if (strCurrChurchBodyRootCode.Contains("--")) arr = strCurrChurchBodyRootCode.Split("--");

            if (arr.Length > 0)
            {
                var ancestorCode = strAncestorRootCode;
                var tempCode = strCurrChurchBodyRootCode;

                var k = arr.Length - 1;
                for (var i = arr.Length - 1; i >= 0; i--)
                {
                    if (tempCode.Contains("--" + arr[i])) tempCode = tempCode.Replace("--" + arr[i], "");
                    if (string.Compare(ancestorCode, tempCode) == 0) return true;
                }
            }

            return false;
        }

        private static bool IsDescendant_ChurchBody(ChurchBody oDescendantChurchBody, ChurchBody oCurrChurchBody)  // Ancestor of ? ... Taifa -- Grace. swapped -->> Descendant of ?
        {
            if (oDescendantChurchBody == null || oCurrChurchBody == null) return false;
            //string ChurchCodeFullPath { get; set; }  //R0000-0000-0000-0000-0000-0000 

            if (oDescendantChurchBody.ParentChurchBodyId == oCurrChurchBody.Id) return true;  // father /child
            if (string.IsNullOrEmpty(oDescendantChurchBody.RootChurchCode) || string.IsNullOrEmpty(oCurrChurchBody.RootChurchCode)) return false;
            if (string.Compare(oDescendantChurchBody.RootChurchCode, oCurrChurchBody.RootChurchCode) == 0) return true;  // same CB .. owned

            string[] arr = new string[] { oDescendantChurchBody.RootChurchCode };
            if (oDescendantChurchBody.RootChurchCode.Contains("--")) arr = oDescendantChurchBody.RootChurchCode.Split("--");  // else it should be the ROOT... and would not get this far

            if (arr.Length > 0)
            {
                var ancestorCode = oCurrChurchBody.RootChurchCode;
                var tempCode = oDescendantChurchBody.RootChurchCode;

                if (string.Compare(ancestorCode, tempCode) == 0) return true;   // same CB .. owned
                var k = arr.Length - 1;
                for (var i = arr.Length - 1; i >= 0; i--)
                {
                    if (tempCode.Contains("--" + arr[i])) tempCode = tempCode.Replace("--" + arr[i], "");
                    if (string.Compare(ancestorCode, tempCode) == 0) return true;
                }
            }

            return false;
        }

        private static bool IsDescendant_ChurchBody(string strDescendantRootCode, string strCurrChurchBodyRootCode, int? descendantChurchBodyId = null, int? currChurchBodyId = null)
        {
            // if (oAncestorChurchBody == null) return false;
            //string ChurchCodeFullPath { get; set; }  //R0000-0000-0000-0000-0000-0000 

            if (currChurchBodyId != null && descendantChurchBodyId == currChurchBodyId) return true; // same CB

            if (string.IsNullOrEmpty(strDescendantRootCode) || string.IsNullOrEmpty(strCurrChurchBodyRootCode)) return false;
            if (string.Compare(strDescendantRootCode, strCurrChurchBodyRootCode) == 0) return true;  // same CB

            string[] arr = new string[] { strDescendantRootCode };
            if (strDescendantRootCode.Contains("--")) arr = strDescendantRootCode.Split("--");

            if (arr.Length > 0)
            {
                var ancestorCode = strCurrChurchBodyRootCode; // // same CB .. owned
                var tempCode = strDescendantRootCode;

                var k = arr.Length - 1;
                for (var i = arr.Length - 1; i >= 0; i--)
                {
                    if (tempCode.Contains("--" + arr[i])) tempCode = tempCode.Replace("--" + arr[i], "");
                    if (string.Compare(ancestorCode, tempCode) == 0) return true;
                }
            }

            return false;
        }



        /// <summary>
        ///  [GetTargetCB] browses thru CBs
        ///  works with [GetChurchLevel_ListByChurchLevel]
        ///  always add the ... call the [triggerChurchLevel_TCB]... functions in the modal or form to auto fill....
        /// </summary>
        /// <param name="oChurchLevelId"></param>
        /// <param name="oAppGloOwnId"></param>
        /// <param name="isLowerLevel"></param>
        /// <param name="isInclusive"></param>
        /// <param name="addEmpty"></param>
        /// <returns></returns>
        /// 
        /// 
        /// Begin ----
      
        [HttpGet]
        public IActionResult GetTargetCB(int? oAppGloOwnId = null, int? oChurchBodyId = null, int? oTargetCBId = null,
                                       string strId_TCB = "", string strName_TCB = "", string strCLId_TCB = "", string strCLName_TCB = "", string strCLTag_TCB = "")
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return View("_ErrorPage");
                    }
                }


                var oCBModel = new TargetCBModel();
                oCBModel.oAppGloOwnId = oAppGloOwnId;     // current AGO of request
                oCBModel.oChurchBodyId = oChurchBodyId;  // current CB of request 
                ///
                // initialize
                var _oTargetCBId = oTargetCBId;
                oCBModel.oTargetCLId = null; // oTargetCLId; 
                ///
                if (oTargetCBId != null)
                {
                    oCBModel.oTargetCBId = oTargetCBId;     // target CB of request == initial CB ...  
                    // _oTargetCBId = oTargetCBId;
                }
                else
                {
                    oCBModel.oTargetCBId = this._oLoggedCB.Id;
                    _oTargetCBId = this._oLoggedCB.Id;
                }
                 

                ///
                oCBModel.strId_TCB = strId_TCB != null ? strId_TCB : "";
                oCBModel.strName_TCB = strName_TCB != null ? strName_TCB : "";
                oCBModel.strCLId_TCB = strCLId_TCB != null ? strCLId_TCB : "";
                oCBModel.strCLName_TCB = strCLName_TCB != null ? strCLName_TCB : "";
                oCBModel.strCLTag_TCB = strCLTag_TCB != null ? strCLTag_TCB : "Church Body";
                ///
                if (oCBModel.oAppGloOwnId == null)
                    return View("_ErrorPage");  // || oCBModel.oChurchBodyId == null current denom and cong cannot be null

                //if (oCBModel.oTargetCBId == null) oCBModel.oTargetCBId = oCBModel.oChurchBodyId;


                //if (oCBModel.oTargetCB != null ) return View("_ErrorPage");
                oCBModel.numChurchLevel_Index = _context.ChurchLevel.AsNoTracking().Count(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId); //oCBModel.oTargetCB.ChurchLevel.LevelIndex;
                oCBModel.strTargetCB = "None. (choose church body)"; oCBModel.strTargetCL = "";
                oCBModel.arrRootCBIds = new List<object>();
                oCBModel.arrRootCBNames = new List<string>();
                for (int k = 0; k < 10; k++)
                {
                    oCBModel.arrRootCBIds.Add((int?)null); // initialize the template
                    oCBModel.arrRootCBNames.Add(""); // initialize the template 
                }

                //init... all
                oCBModel.strChurchLevel_1 = ""; oCBModel.strChurchLevel_2 = ""; oCBModel.strChurchLevel_3 = ""; oCBModel.strChurchLevel_4 = ""; oCBModel.strChurchLevel_5 = "";
                oCBModel.strChurchLevel_6 = ""; oCBModel.strChurchLevel_7 = ""; oCBModel.strChurchLevel_8 = ""; oCBModel.strChurchLevel_9 = ""; oCBModel.strChurchLevel_10 = "";
                ///
                ViewBag.strChurchLevel_1 = oCBModel.strChurchLevel_1; ViewBag.strChurchLevel_2 = oCBModel.strChurchLevel_2; ViewBag.strChurchLevel_3 = oCBModel.strChurchLevel_3; ViewBag.strChurchLevel_4 = oCBModel.strChurchLevel_4; ViewBag.strChurchLevel_5 = oCBModel.strChurchLevel_5;
                ViewBag.strChurchLevel_6 = oCBModel.strChurchLevel_6; ViewBag.strChurchLevel_7 = oCBModel.strChurchLevel_7; ViewBag.strChurchLevel_8 = oCBModel.strChurchLevel_8; ViewBag.strChurchLevel_9 = oCBModel.strChurchLevel_9; ViewBag.strChurchLevel_10 = oCBModel.strChurchLevel_10;


                ///
                oCBModel.oTargetCB = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel) //.Include(t => t.ParentChurchBody)
                                    .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId && c.Id == oCBModel.oTargetCBId)
                                    .FirstOrDefault();

                /// pre-load the list...
                if (_oTargetCBId != null && oCBModel.oTargetCB != null)
                {
                    oCBModel.oTargetCLId = oCBModel.oTargetCB.ChurchLevelId;
                    oCBModel.strTargetCB = oCBModel.oTargetCB != null ? oCBModel.oTargetCB.Name : ""; //oCBModel.oTargetCB.Name;
                    oCBModel.strTargetCL = !string.IsNullOrEmpty(oCBModel.oTargetCB.ChurchLevel.CustomName) ? oCBModel.oTargetCB.ChurchLevel.CustomName : oCBModel.oTargetCB.ChurchLevel.Name;

                    oCBModel.arrRootCBCodes = oCBModel.oTargetCB != null ? oCBModel.oTargetCB.RootChurchCode.Split("--").ToList<string>() : new List<string>();
                    // oCBModel.oTargetCLId = currCB.ChurchLevelId;

                    // get the CB path... use either ChurchCode [must av bn ordered! else trouble..] or CB Id to trace path...
                    var masterCBList = _context.ChurchBody.AsNoTracking().Include(t => t.ParentChurchBody).Include(t => t.ChurchLevel)
                                        .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId &&
                                        (oCBModel.oTargetCB == null || (oCBModel.oTargetCB != null && oCBModel.arrRootCBCodes.Contains(c.GlobalChurchCode))))
                                        .ToList();

                    //var masterCBList = (from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                    //                               .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId &&
                    //                               (oCBModel.oTargetCB == null || (oCBModel.oTargetCB != null && oCBModel.arrRootCBCodes.Contains(c.GlobalChurchCode))))
                    //                    from t_cb_p in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                    //                               .Where(c => c.AppGlobalOwnerId == t_cb.AppGlobalOwnerId && c.Id == t_cb.ParentChurchBodyId).DefaultIfEmpty()
                    //                    select new ChurchBody()
                    //                    {
                    //                        Id = t_cb.Id,
                    //                        AppGlobalOwnerId = t_cb.AppGlobalOwnerId,
                    //                        ChurchLevelId = t_cb.ChurchLevelId,
                    //                        Name = t_cb.Name,
                    //                        GlobalChurchCode = t_cb.GlobalChurchCode,
                    //                        RootChurchCode = t_cb.RootChurchCode,
                    //                        OrgType = t_cb.OrgType,
                    //                        ParentChurchBodyId = t_cb.ParentChurchBodyId,
                    //                        ContactInfoId = t_cb.ContactInfoId,
                    //                        IsWaiveSubscription = t_cb.IsWaiveSubscription,
                    //                        SubscriptionKey = t_cb.SubscriptionKey,
                    //                        LicenseKey = t_cb.LicenseKey,
                    //                        CtryAlpha3Code = t_cb.CtryAlpha3Code,
                    //                        CountryRegionId = t_cb.CountryRegionId,
                    //                        Comments = t_cb.Comments,
                    //                        ChurchWorkStatus = t_cb.ChurchWorkStatus,
                    //                        Status = t_cb.Status,
                    //                        ///
                    //                        ParentChurchBody = t_cb_p,
                    //                    })
                    //                    .ToList();

                    /////
                    //var oCBNextParent = masterCBList.Where(c => c.Id == oCBModel.oTargetCB.Id && c.GlobalChurchCode == oCBModel.oTargetCB.GlobalChurchCode).FirstOrDefault();
                    //var listCount = 0;
                    //if (oCBNextParent != null)
                    //{
                    //    listCount = (oCBNextParent.ChurchLevel != null ? oCBNextParent.ChurchLevel.LevelIndex : listCount);
                    //    listCount = listCount - 1;
                    //    oCBModel.arrRootCBIds[listCount] = oCBNextParent.Id;
                    //    oCBModel.arrRootCBNames[listCount] = oCBNextParent.Name;
                    //}

                    ///
                    var listCount = 0;
                    ChurchBody oCBNextParent = oCBModel.oTargetCB;   // initial CB
                    if (masterCBList.Count > 1)   // leave the root... to append later
                    {
                        if (oCBNextParent == null) oCBNextParent = masterCBList.Where(c => c.Id == oCBModel.oTargetCB.Id && c.GlobalChurchCode == oCBModel.oTargetCB.GlobalChurchCode).FirstOrDefault();

                        if (oCBNextParent != null)
                        {
                            if (oCBNextParent.ChurchLevel == null) oCBNextParent.ChurchLevel = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == oCBNextParent.AppGlobalOwnerId && c.Id == oCBNextParent.ChurchLevelId).FirstOrDefault();
                            ///
                            if (oCBNextParent.ChurchLevel != null)
                            {
                                listCount = oCBNextParent.ChurchLevel.LevelIndex; // (oCBNextParent.ChurchLevel != null ? oCBNextParent.ChurchLevel.LevelIndex : listCount);
                                listCount = listCount - 1;
                                oCBModel.arrRootCBIds[listCount] = oCBNextParent.Id;
                                oCBModel.arrRootCBNames[listCount] = oCBNextParent.Name;
                            }
                        }
                    }


                    for (int i = listCount - 1; i > 0; i--)
                    {
                        if (oCBNextParent.ParentChurchBody == null)
                            oCBNextParent.ParentChurchBody = _context.ChurchBody
                                .Where(c => c.AppGlobalOwnerId == oCBNextParent.AppGlobalOwnerId && c.Id == oCBNextParent.ParentChurchBodyId).FirstOrDefault();

                        var oNextCC = "";
                        if (oCBNextParent.ParentChurchBody != null) oNextCC = oCBNextParent.ParentChurchBody.GlobalChurchCode;
                        ///
                        oCBNextParent = masterCBList.Where(c => c.Id == oCBNextParent.ParentChurchBodyId && c.GlobalChurchCode == oNextCC).FirstOrDefault();
                        if (oCBNextParent == null) break; // loop out

                        oCBModel.arrRootCBIds[i] = oCBNextParent.Id;
                        oCBModel.arrRootCBNames[i] = oCBNextParent.Name;
                    }


                    //for (int i = listCount - 1; i > 0; i--)
                    //{
                    //    oCBNextParent = masterCBList
                    //        .Where(c => c.Id == oCBNextParent.ParentChurchBodyId && c.GlobalChurchCode == oCBNextParent.ParentChurchBody.GlobalChurchCode)
                    //        .FirstOrDefault();
                    //    if (oCBNextParent != null)
                    //    {
                    //        oCBModel.arrRootCBIds[i] = oCBNextParent.Id;
                    //        oCBModel.arrRootCBNames[i] = oCBNextParent.Name;
                    //    }
                    //}


                    // add the root
                    oCBNextParent = masterCBList.Where(c => c.OrgType == "CR" && c.ParentChurchBodyId == null).FirstOrDefault();
                    if (oCBNextParent != null)
                    {
                        oCBModel.arrRootCBIds[0] = oCBNextParent.Id;  // base CB usually the name of the church -- CR
                        oCBModel.arrRootCBNames[0] = oCBNextParent.Name + " (Church Head)";  // base CB usually the name of the church -- CR
                    }
                }

                else
                {
                    // add the root
                    var oCBNextParent = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)  // .Include(t => t.ParentChurchBody)
                                        .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId && c.OrgType == "CR" && c.ParentChurchBodyId == null).FirstOrDefault();
                    if (oCBNextParent != null)
                    {
                        oCBModel.arrRootCBIds[0] = oCBNextParent.Id;  // base CB usually the name of the church -- CR
                        oCBModel.arrRootCBNames[0] = oCBNextParent.Name + " (Church Head)";  // base CB usually the name of the church -- CR
                    }
                }


                oCBModel.oCBLevelCount = oCBModel.numChurchLevel_Index; // - 1;        // oCBLevelCount -= 2;  // less requesting CB
                List<ChurchLevel> oCBLevelList = _context.ChurchLevel
                    .Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId && c.LevelIndex > 0 && c.LevelIndex <= oCBModel.numChurchLevel_Index)
                    .ToList().OrderBy(c => c.LevelIndex).ToList();
                ///
                if (oCBModel.oCBLevelCount > 0 && oCBLevelList.Count > 0)
                {
                    oCBModel.strChurchLevel_1 = !string.IsNullOrEmpty(oCBLevelList[0].CustomName) ? oCBLevelList[0].CustomName : oCBLevelList[0].Name;
                    ViewBag.strChurchLevel_1 = oCBModel.strChurchLevel_1;

                    if (oCBModel.oCBLevelCount > 1)
                    {
                        oCBModel.strChurchLevel_2 = !string.IsNullOrEmpty(oCBLevelList[1].CustomName) ? oCBLevelList[1].CustomName : oCBLevelList[1].Name;
                        ViewBag.strChurchLevel_2 = oCBModel.strChurchLevel_2;

                        if (oCBModel.oCBLevelCount > 2)
                        {
                            oCBModel.strChurchLevel_3 = !string.IsNullOrEmpty(oCBLevelList[2].CustomName) ? oCBLevelList[2].CustomName : oCBLevelList[2].Name;
                            ViewBag.strChurchLevel_3 = oCBModel.strChurchLevel_3;

                            if (oCBModel.oCBLevelCount > 3)
                            {
                                oCBModel.strChurchLevel_4 = !string.IsNullOrEmpty(oCBLevelList[3].CustomName) ? oCBLevelList[3].CustomName : oCBLevelList[3].Name;
                                ViewBag.strChurchLevel_4 = oCBModel.strChurchLevel_4;

                                if (oCBModel.oCBLevelCount > 4)
                                {
                                    oCBModel.strChurchLevel_5 = !string.IsNullOrEmpty(oCBLevelList[4].CustomName) ? oCBLevelList[4].CustomName : oCBLevelList[4].Name;
                                    ViewBag.strChurchLevel_5 = oCBModel.strChurchLevel_5;

                                    if (oCBModel.oCBLevelCount > 5)
                                    {
                                        oCBModel.strChurchLevel_6 = !string.IsNullOrEmpty(oCBLevelList[5].CustomName) ? oCBLevelList[5].CustomName : oCBLevelList[5].Name;
                                        ViewBag.strChurchLevel_6 = oCBModel.strChurchLevel_6;

                                        if (oCBModel.oCBLevelCount > 6)
                                        {
                                            oCBModel.strChurchLevel_7 = !string.IsNullOrEmpty(oCBLevelList[6].CustomName) ? oCBLevelList[6].CustomName : oCBLevelList[6].Name;
                                            ViewBag.strChurchLevel_7 = oCBModel.strChurchLevel_7;

                                            if (oCBModel.oCBLevelCount > 7)
                                            {
                                                oCBModel.strChurchLevel_8 = !string.IsNullOrEmpty(oCBLevelList[7].CustomName) ? oCBLevelList[7].CustomName : oCBLevelList[7].Name;
                                                ViewBag.strChurchLevel_8 = oCBModel.strChurchLevel_8;

                                                if (oCBModel.oCBLevelCount > 8)
                                                {
                                                    oCBModel.strChurchLevel_9 = !string.IsNullOrEmpty(oCBLevelList[8].CustomName) ? oCBLevelList[8].CustomName : oCBLevelList[8].Name;
                                                    ViewBag.strChurchLevel_9 = oCBModel.strChurchLevel_9;

                                                    if (oCBModel.oCBLevelCount > 9)
                                                    {
                                                        oCBModel.strChurchLevel_10 = !string.IsNullOrEmpty(oCBLevelList[9].CustomName) ? oCBLevelList[9].CustomName : oCBLevelList[9].Name;
                                                        ViewBag.strChurchLevel_10 = oCBModel.strChurchLevel_10;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }


                //oCBModel.oUserId_Logged = this._oLoggedUser.Id;
                //oCBModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                //oCBModel.oChurchBodyId_Logged = this._oLoggedCB.Id;

                /// load lookups
                // oCUModel = this.popLookups_CU(oCUModel, oCUModel.oChurchUnit);

                //var tm = DateTime.Now;
                //_ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "T",
                //                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                //    , this._clientDBConnString);

                //var _oCUModel = Newtonsoft.Json.JsonConvert.SerializeObject(oCUModel);
                //TempData["oVmCurrMod"] = _oCUModel; TempData.Keep();

                oCBModel.lkpChurchLevels = _context.ChurchLevel.Where(c => c.AppGlobalOwnerId == oCBModel.oAppGloOwnId)
                                          .OrderByDescending(c => c.LevelIndex)
                                          .Select(c => new SelectListItem()
                                          {
                                              Value = c.Id.ToString(),
                                              Text = !string.IsNullOrEmpty(c.CustomName) ? c.CustomName : c.Name,
                                              // Disabled = (numCLIndex == (int?)null || c.LevelIndex < numCLIndex || oCurrChurchBody.OrgType == "CH" || oCurrChurchBody.OrgType == "CN")
                                          })
                                          .ToList();

                return PartialView("_GetTargetCB", oCBModel);

            }

            catch (Exception ex)
            {
                //page not found error

                return View("_ErrorPage");
            }
        }

        public JsonResult GetChurchLevelIndexesByChurchLevel(int? oChurchLevelId, int? oAppGloOwnId, bool addEmpty = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId: this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            //var oCBList = new List<SelectListItem>(); 
            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(new { taskSuccess = false, numResLev = (int?)null, strResList = string.Empty });

            ///
            var oCL = _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oChurchLevelId).FirstOrDefault();
            var res = oCL != null;
            var _numResLev = oCL != null ? oCL.LevelIndex : (int?)null;
            /// 

            if (oCL != null)
            {
                var oCLs = _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.LevelIndex <= oCL.LevelIndex).OrderBy(c => c.LevelIndex).ToList();
                var _strRes = "";
                foreach (var oChuLev in oCLs)
                {
                    var strRes = oChuLev != null ? (!string.IsNullOrEmpty(oChuLev.CustomName) ? oChuLev.CustomName : oChuLev.Name) : "";
                    _strRes += strRes + ",";
                }

                _strRes = _strRes.Contains(",") ? _strRes.Remove(_strRes.LastIndexOf(",")) : _strRes;

                //  get the first CB
                var oCB_1 = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                                 .Where(c => c.AppGlobalOwnerId == oAppGloOwnId && // c.Status == "A" && 
                                       c.ChurchLevel.LevelIndex == 1 && c.OrgType == "CR") //c.ChurchLevelId == oCBLevelList[0].Id &&
                                 .FirstOrDefault();

                var _numChurchBodyId_1 = (int?)null; var _strChurchBody_1 = "";
                if (oCB_1 != null)
                { _numChurchBodyId_1 = oCB_1.Id; _strChurchBody_1 = oCB_1.Name + " [Church Root]"; }

                ///
                return Json(new { taskSuccess = res, numResLev = _numResLev, strResList = _strRes, numChurchBodyId_1 = _numChurchBodyId_1, strChurchBody_1 = _strChurchBody_1 });
            }


            return Json(new { taskSuccess = res, numResLev = _numResLev, strResList = "" });
        }

        public JsonResult GetInitChurchBodyListByAppGloOwn(int? oAppGloOwnId, bool addEmpty = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            var oCBList = new List<SelectListItem>();
            ///
            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(oCBList);

            oCBList = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel)
                       .Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchLevel.LevelIndex == 2 && // c.Status == "A" && 
                       (c.OrgType == "CH" || c.OrgType == "CN"))  // c.OrgType == "CR" || 
                   .OrderBy(c => c.Name)
                   .ToList()
                   .Select(c => new SelectListItem()
                   {
                       Value = c.Id.ToString(),
                       Text = c.Name
                   })
                   .OrderBy(c => c.Text)
                   .ToList();
            ///
            if (addEmpty) oCBList.Insert(0, new SelectListItem { Value = "", Text = "Select..." });
            return Json(oCBList);
        }

        public JsonResult GetChurchBodyListByParentBody(int? oParentCBId, int? oAppGloOwnId, string strOrgType = null, bool addEmpty = false)
        {

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAppGloOwnId != null ? oAppGloOwnId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }


            var oCBList = new List<SelectListItem>();
            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(oCBList);


            // list excludes the root -- CR -- Headquarters /Head office
            oCBList = _context.ChurchBody.AsNoTracking()  //.Include(t => t.ChurchLevel)
                .Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ParentChurchBodyId == oParentCBId && // c.Status == "A" && 
                        (c.OrgType == "CH" || c.OrgType == "CN"))
                // (c.OrgType == strOrgType || (strOrgType == null && (c.OrgType == "CH" || c.OrgType == "CN"))))
                .OrderBy(c => c.Name)
                .ToList()
            .Select(c => new SelectListItem()
            {
                Value = c.Id.ToString(),
                Text = c.Name
            })
            .OrderBy(c => c.Text)
            .ToList();

            if (addEmpty) oCBList.Insert(0, new SelectListItem { Value = "", Text = "Select..." });
            return Json(oCBList);
        }


        /// End -------- 
        ///





        /// <summary>
        ///  All 19 modules ...
        /// <returns>

        // 1
        private MemberBioModel GetMemberBiodata(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwBD = false, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;

                // same member data kept across CBs ... use Transfer data to track the current CB... Y = Yes. Transferred. C = Closed. Acknowledged
                // get global view of member
                // in this case -- both oCMid and MemberGlobalCode are unique globally --- across CBs
                ///


                //var oMCTList = _context.ChurchTransfer.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchMemberId == oCMid && 
                //                    c.AckStatus == "C" && c.Status == "Y" && (c.TransferType == "MT" || c.TransferType == "CT"))    // only Member transfer and Clergy transfer Move Member data
                //                .ToList();
                //if (oMCTList.Count > 1)
                //{
                //    oMCTList.OrderByDescending(c => c.TransferDate).ThenByDescending(c => c.LastMod); // keep the last updated...transferred
                //    oMCTList.RemoveRange(1, oMCTList.Count - 1); //var oMCTListCurr = new List<ChurchTransfer>(); oMCTListCurr.Add(oMCTList[0]);
                //}

                //List<ChurchMember> oMBD_List = new List<ChurchMember>();
                //if (oMCTList.Count > 0)
                //{  // transfer made for member... data sits at the last To.CB
                //    oMBD_List = (
                //                from t_mct in oMCTList
                //                from t_cm in _context.ChurchMember.AsNoTracking().Include(t => t.Nationality).Include(t => t.MotherTongue).Include(t => t.IdType).Include(t => t.HometownRegion)
                //                    .Where(c => c.AppGlobalOwnerId == t_mct.AppGlobalOwnerId && c.ChurchBodyId == t_mct.ToChurchBodyId && c.Id == t_mct.ChurchMemberId)
                //                    select t_cm
                //                )
                //                .ToList();
                //}
                //else
                //{ // no transfer ever made for member... data sits at the requesting CB... where it was created
                //    oMBD_List = _context.ChurchMember.AsNoTracking().Include(t => t.Nationality).Include(t => t.MotherTongue).Include(t => t.IdType).Include(t => t.HometownRegion)
                //                    .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.Id == oCMid).ToList();
                //}

                //var t_cmList = _context.ChurchMember.AsNoTracking().Include(t => t.Nationality).Include(t => t.MotherTongue).Include(t => t.IdType).Include(t => t.HometownRegion)
                //                        .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.Id == oCMid).ToList();

                //var t_mtList = _context.MemberType.AsNoTracking() .Where(x => x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.ChurchMemberId == oCMid && x.IsCurrent == true).ToList();
                //if (t_mtList.Count > 1) t_mtList = t_mtList.Take(1).ToList();
                //var t_mrList = _context.MemberRank.AsNoTracking() .Include(t => t.ChurchRank_NVP)
                //    .Where(x => x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.ChurchMemberId == oCMid && x.IsCurrentRank == true).ToList();
                //if (t_mrList.Count > 1) t_mrList = t_mrList.Take(1).ToList();
                //var t_msList = _context.MemberStatus.AsNoTracking().Include(t => t.ChurchMemStatus_NVP)
                //    .Where(x => x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.ChurchMemberId == oCMid && x.IsCurrent == true).ToList();
                //if (t_msList.Count > 1) t_msList = t_msList.Take(1).ToList();


                var oMBD_Model = (
                                   from t_cm in _context.ChurchMember.AsNoTracking().Include(t => t.Nationality).Include(t => t.MotherTongue).Include(t => t.IdType).Include(t => t.HometownRegion)
                                        .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.Id == oCMid)
                                   from t_ago in _context.AppGlobalOwner.AsNoTracking().Where(c => c.Id == t_cm.AppGlobalOwnerId)
                                   from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchLevel).Include(t => t.ContactInfo)
                                        .Where(c => c.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && c.Id == t_cm.ChurchBodyId)

                                   from t_ci in _context.ContactInfo.AsNoTracking().Where(x => x.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && x.ChurchBodyId == t_cm.ChurchBodyId &&
                                                    (x.Id == t_cm.PrimContactInfoId || (t_cm.PrimContactInfoId == null && x.ChurchMemberId == t_cm.Id && x.IsPrimaryContact == true)))
                                                  .Take(1).DefaultIfEmpty()   //.DefaultIfEmpty()

                                       //from t_ci in _context.ContactInfo.AsNoTracking().Where(x => x.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && x.ChurchBodyId == t_cm.ChurchBodyId &&
                                       //     (x.Id == t_cm.PrimContactInfoId || (t_cm.PrimContactInfoId == null && x.ChurchMemberId == t_cm.Id && x.IsPrimaryContact == true))).DefaultIfEmpty()

                                       //from t_mt in t_mtList.Where(c => c.ChurchMemberId == t_cm.Id).DefaultIfEmpty()   // check to ensure only one is active all times
                                       //from t_mr in t_mrList.Where(c => c.ChurchMemberId == t_cm.Id).DefaultIfEmpty()   // check to ensure only one is active all times
                                       //from t_cr in _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && c.NVPCode=="CR" && 
                                       //     c.Id == (t_mr != null ? t_mr.ChurchRankId : (int?)null)).DefaultIfEmpty()
                                       //from t_ms in t_msList.Where(c => c.ChurchMemberId == t_cm.Id).DefaultIfEmpty()
                                       //from t_cms in _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && c.NVPCode == "CMS" && 
                                       //     c.Id == (t_ms != null ? t_ms.ChurchMemStatusId : (int?)null)).DefaultIfEmpty()

                                       //from t_mt in _context.MemberType.AsNoTracking()  //.Include(t => t.ChurchMemType_NVP)
                                       //         .Where(x => x.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && x.Id == t_cm.ChurchBodyId && x.ChurchMemberId == t_cm.Id && x.IsCurrent == true).DefaultIfEmpty()   // check to ensure only one is active all times
                                       //from t_mr in _context.MemberRank.AsNoTracking().Include(t => t.ChurchRank_NVP).Where(x => x.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && x.Id == t_cm.ChurchBodyId && x.ChurchMemberId == t_cm.Id && x.IsCurrentRank == true).DefaultIfEmpty()   // check to ensure only one is active all times
                                       //from t_ms in _context.MemberStatus.AsNoTracking().Include(t => t.ChurchMemStatus_NVP).Where(x => x.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && x.Id == t_cm.ChurchBodyId && x.ChurchMemberId == t_cm.Id && x.IsCurrent == true).DefaultIfEmpty()   // check to ensure only one is active all times

                                   from t_mt in _context.MemberType.AsNoTracking().Where(x => x.ChurchBodyId == t_cm.ChurchBodyId && x.IsCurrent == true && t_cm.Id == x.ChurchMemberId)
                                                .Take(1).DefaultIfEmpty()//.OrderByDescending(y => y.ToDate).Take(1).ToList() : new List<MemberType>()
                                   from t_mr in _context.MemberRank.AsNoTracking().Include(t => t.ChurchRank_NVP).Where(x => x.ChurchBodyId == t_cm.ChurchBodyId && x.IsCurrentRank == true && t_cm.Id == x.ChurchMemberId)
                                                 .Take(1).DefaultIfEmpty() // .FirstOrDefault() }
                                                                           //.OrderBy(y => y.ChurchRank_NVP != null ? y.ChurchRank_NVP.GradeLevel : null).Take(1).ToList() : new List<MemberRank>()
                                   from t_ms in _context.MemberStatus.AsNoTracking().Include(t => t.ChurchMemStatus_NVP).Where(x => x.ChurchBodyId == t_cm.ChurchBodyId && x.IsCurrent == true && t_cm.Id == x.ChurchMemberId)
                                                 .Take(1).DefaultIfEmpty() //             .OrderBy(y => y.ChurchMemStatus_NVP != null ? y.ChurchMemStatus_NVP.GradeLevel : null).Take(1).ToList() : new List<MemberStatus>()

                                   from t_mcu in _context.MemberChurchUnit.AsNoTracking().Include(t => t.ChurchUnit).Where(x => x.ChurchBodyId == t_cm.ChurchBodyId && x.IsCurrUnit == true && t_cm.Id == x.ChurchMemberId)
                                                 .Take(1).DefaultIfEmpty() //.OrderBy(y => y.IsCoreArea).Take(1).ToList() : new List<MemberChurchUnit>()                                                                                                                                                                               // from t_cs in _context.ChurchUnit.Where(x=> x.ChurchBodyId == t_mcu.ChurchBodyId && x.Id==t_mcu.ChurchUnitId && x.Generational == true).DefaultIfEmpty()
                                   from t_mcr in _context.MemberChurchRole.AsNoTracking().Include(t => t.ChurchRole).Where(x => x.ChurchBodyId == t_cm.ChurchBodyId && x.IsLeadRole == true && t_cm.Id == x.ChurchMemberId)
                                                 .Take(1).DefaultIfEmpty()

                                   select new MemberBioModel()
                                   {
                                       oAppGloOwnId = t_ago.Id,
                                       oAppGlobalOwn = t_ago,
                                       oChurchBodyId = t_cb.Id,
                                       oChurchBody = t_cb,
                                       ///
                                       oChurchMemberId = t_cm.Id,
                                       oChurchMember = t_cm,
                                       oChurchMemberBio = t_cm,

                                       /// strChurchBody 
                                       strChurchBody = t_cb.Name,
                                       strChurchBodyDetail = oCurrCB != null ? GetConcatLinkedEntities(oCurrCB.Name, (oCurrCB.ParentChurchBody != null ? oCurrCB.ParentChurchBody.Name : "")) : "",
                                       strMemDisplayName = GetConcatMemberName(t_cm.Title, t_cm.FirstName, t_cm.MiddleName, t_cm.LastName, true, true, false, false, true), //  Dr. Sam Darteh
                                       strCongLocation = t_cb.ContactInfo != null ? GetConcatLinkedEntities(t_cb.ContactInfo.Location.Trim(), t_cb.ContactInfo.City.Trim()) : "",
                                       oMemContactInfo = t_ci,

                                       //strDesignation = t_mcr != null ? GetConcatLinkedEntities((t_mcr.ChurchRole != null ? t_mcr.ChurchRole.RoleName : ""), (t_mcr.IsChurchUnit == true ? (t_mcr.ChurchUnit != null ? t_mcr.ChurchUnit.Name : "") : (t_mcr.AssociatedChurchBody != null ? t_mcr.AssociatedChurchBody.Name : ""))) : "",
                                       //strMemberType = t_mt != null ? (t_mt.ChurchMemType != null ? t_mt.ChurchMemType.Name : "") : "",
                                       //strMemberStatus = t_ms != null ? (t_ms.ChurchMemStatus != null ? t_ms.ChurchMemStatus.Name : "") : "",
                                       //strDateJoined = t_cl != null ? (t_cl.DateJoined != null ? DateTime.Parse(t_cl.DateJoined.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "") : "",
                                       //strDateDeparted = t_cl != null ? () : ""

                                       strMemFullName = GetConcatMemberName(t_cm.Title, t_cm.FirstName, t_cm.MiddleName, t_cm.LastName, false, false, false, false, false),  // Sam Darteh
                                       strLocation = t_ci != null ? GetConcatLinkedEntities(t_ci.Location.Trim(), t_ci.City.Trim()) : "",
                                       strPhone = t_ci != null ? GetConcatLinkedEntities(t_ci.MobilePhone1.Trim(), t_ci.MobilePhone2.Trim()) : "",
                                       strNationality = t_cm.Nationality != null ? t_cm.Nationality.EngName : t_cm.NationalityId,  //CtryAlpha3Code
                                       strMotherTongue = t_cm.MotherTongue != null ? t_cm.MotherTongue.NVPValue : "",
                                       strHometown = t_cm.HometownRegion != null ? GetConcatLinkedEntities(t_cm.Hometown, t_cm.HometownRegion.RegCode) : t_cm.Hometown,  // Aburi, Eastern Region [ER]
                                       strHometownRegion = t_cm.HometownRegion != null ? t_cm.HometownRegion.Name : "",
                                       strIdType = t_cm.IdType != null ? t_cm.IdType.NVPValue : "",
                                       ///
                                       strMemberAge = t_cm.DateOfBirth != null ? (string)AppUtilties.CalcDateDiff(t_cm.DateOfBirth.Value, DateTime.Now.Date, true, true, true, false, false, false, false, false, false) : "",
                                       //isMemberBirthdayToday = t_cm.DateOfBirth != null ? (DateTime.Now.Month == t_cm.DateOfBirth.Value.Month && DateTime.Now.Day == t_cm.DateOfBirth.Value.Day) : false,
                                       //numDaysToNextBirthday = (int)AppUtilties.CalcDateDiff_PeriodLeft(t_cm.DateOfBirth.Value, DateTime.Now.Date, false, true, false, false, true, false, false, false, false),
                                       //strDaysToNextBirthday = (string)AppUtilties.CalcDateDiff_PeriodLeft(t_cm.DateOfBirth.Value, DateTime.Now.Date, true, true, true, true, true, false, false, false, false),
                                       ///
                                       strMaritalStatus = GetMaritalStatDesc(t_cm.MaritalStatus),
                                       strMarriageType = GetMarriageTypeDesc(t_cm.MarriageType),
                                       strGender = GetGenderDesc(t_cm.Gender),
                                       strDateOfBirth = t_cm.DateOfBirth != null ? String.Format("{0:ddd, MMMM d, yyyy}", t_cm.DateOfBirth.Value) : "",   // "Sunday, March 9, 2008" // t_cm.DateOfBirth.Value.ToString("d MMM yyyy") : "",  // DateTime.Parse(t_cm.DateOfBirth.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "",
                                       strBirthday = t_cm.DateOfBirth != null ? String.Format("{0:ddd, MMMM d}", t_cm.DateOfBirth.Value) : "",   // "Sunday, March 9, 2008" // t_cm.DateOfBirth.Value.ToString("d MMM yyyy") : "",  // DateTime.Parse(t_cm.DateOfBirth.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "",

                                       //strMemStatus = t_ms != null ? t_ms.ChurchMemStatus.Name : "Dummy",               
                                       //strMemType = t_mt != null ? t_mt.ChurchMemType.Name : "Unassigned",
                                       //strStatus = GetStatusDesc(t_cm.Status),
                                        
                                       strMemberScope = GetMemClassDesc(t_cm.MemberScope),
                                       // strMemType = t_mtList.Count > 0 ? GetMemTypeDesc(t_mtList[0].MemberTypeCode) : "", //GetMemTypeDesc(t_mt.MemberTypeCode), //t_mt != null ? (t_mt.ChurchMemType_NVP != null ? t_mt.ChurchMemType_NVP.NVPValue : "Unassigned") : "Unassigned",

                                       strMemType = t_mt != null ? GetMemTypeDesc(t_mt.MemberTypeCode) : "Unassigned", // GetMemTypeDesc(t_mt.MemberTypeCode), // t_mt != null ? (t_mt.ChurchMemType_NVP != null ? t_mt.ChurchMemType_NVP.NVPValue : "") : "Unassigned",
                                       strMemRank = t_mr != null ? (t_mr.ChurchRank_NVP != null ? t_mr.ChurchRank_NVP.NVPValue : "") : "Unassigned",
                                       strMemStatus = t_ms != null ? (t_ms.ChurchMemStatus_NVP != null ? t_ms.ChurchMemStatus_NVP.NVPValue : "") : "Unassigned",

                                       strMemGeneralStatus = string.Compare((t_mt != null ? t_mt.MemberTypeCode : null), "C", true) != 0 ?
                                                             (t_mt != null ? GetMemTypeDesc(t_mt.MemberTypeCode) : "Unassigned") : 
                                                             (!string.IsNullOrEmpty(t_mr != null ? (t_mr.ChurchRank_NVP != null ? t_mr.ChurchRank_NVP.NVPValue : null) : null) ?
                                                             (t_mr != null ? (t_mr.ChurchRank_NVP != null ? t_mr.ChurchRank_NVP.NVPValue : "Unassigned") : "Unassigned") :
                                                             (t_mt != null ? GetMemTypeDesc(t_mt.MemberTypeCode) : "Unassigned")),
                                        
                                       strMemTypeCode = t_mt != null ? t_mt.MemberTypeCode : null, // GetMemTypeDesc(t_mt.MemberTypeCode), // t_mt != null ? (t_mt.ChurchMemType_NVP != null ? t_mt.ChurchMemType_NVP.NVPValue : "") : "Unassigned",
                                       numMemRankId = t_mr != null ? t_mr.ChurchRank_NVP.Id : (int?)null,
                                       numMemStatusId = t_ms != null ? t_ms.ChurchMemStatus_NVP.Id : (int?)null,

                                       strMemUnit = t_mcr != null ? (t_mcr.IsChurchUnit == true ? (t_mcu != null ? (t_mcu.ChurchUnit != null ? t_mcu.ChurchUnit.Name : "") : "") : (t_cb != null ? t_cb.Name : "")) : "",
                                       strMemRole = t_mcr != null ? (t_mcr.ChurchRole != null ? t_mcr.ChurchRole.Name : "") : "None",
                                       strMemUnitRole = t_mcr != null ? (t_mcr.ChurchRole != null && t_mcr.IsChurchUnit && t_mcr.ChurchUnit != null ? t_mcr.ChurchRole.Name + ", " + t_mcu.ChurchUnit.Name :
                                                t_mcr.ChurchRole != null && !t_mcr.IsChurchUnit && t_cb != null ? t_mcr.ChurchRole.Name + ", " + t_cb.Name :
                                            ((t_mcr.ChurchRole != null ? t_mcr.ChurchRole.Name : "") + (t_mcr.IsChurchUnit == true ? (t_mcu != null ? (t_mcu.ChurchUnit != null ? t_mcu.ChurchUnit.Name : "None") : "None") : (t_cb != null ? t_cb.Name : "None")))) : "None",

                                       bl_MemberStatusAvail = t_ms != null ? (t_ms.ChurchMemStatus_NVP.IsAvailable == true) : false,


                                       //strMemTypeCode = t_mt != null ? t_mt.MemberTypeCode : "", // t_mtList.Count > 0 ? t_mtList[0].MemberTypeCode : "", //t_mt.MemberTypeCode, // t_mt != null ? (t_mt.ChurchMemType_NVP != null ? t_mt.ChurchMemType_NVP.Id : (int?)null) : (int?)null,
                                       //strMemRank = t_mr != null ? (t_mr.ChurchRank_NVP != null ? t_mr.ChurchRank_NVP.NVPValue : "") : "", // t_mrList.Count > 0 ? (t_mrList[0].ChurchRank_NVP != null ? t_mrList[0].ChurchRank_NVP.NVPValue : "Unassigned") : "Unassigned", //t_mr != null ? (t_mr.ChurchRank_NVP != null ? t_mr.ChurchRank_NVP.NVPValue : "Unassigned") : "Unassigned",
                                       //numMemRankId = t_mr != null ? (t_mr.ChurchRank_NVP != null ? t_mr.ChurchRank_NVP.Id : (int?)null) : (int?)null, // t_mrList.Count > 0 ? (t_mrList[0].ChurchRank_NVP != null ? t_mrList[0].ChurchRank_NVP.Id : (int?)null) : (int?)null,
                                       //strMemStatus = t_ms != null ? (t_ms.ChurchMemStatus_NVP != null ? t_ms.ChurchMemStatus_NVP.NVPValue : "") : "", // t_msList.Count > 0 ? (t_msList[0].ChurchMemStatus_NVP != null ? t_msList[0].ChurchMemStatus_NVP.NVPValue : "N/A") : "N/A",
                                       //numMemStatusId = t_ms != null ? (t_ms.ChurchMemStatus_NVP != null ? t_ms.ChurchMemStatus_NVP.Id : (int?)null) : (int?)null, // t_msList.Count > 0 ? (t_msList[0].ChurchMemStatus_NVP != null ? t_msList[0].ChurchMemStatus_NVP.Id : (int?)null) : (int?)null,

                                       //bl_MemberStatusAvail = t_msList[0] != null ? (t_msList[0].ChurchMemStatus_NVP.IsAvailable == true) : false,


                                       strAccountStatus = !string.IsNullOrEmpty(t_cm.Status) ? GetStatusDesc(t_cm.Status) : "Indeterminate",
                                       ///
                                       isCBOwned = t_cm.OwnedByChurchBodyId == oCBid, // created it:- T / F -- allow update/add-on for [PersData] ::: deny only for [MemberChurchlife]
                                       isCBCurr = t_cm.ChurchBodyId == oCBid // CM data currently here @CB ::- T / F -- all other CB data.. past data 
                                   })
                                    .FirstOrDefault();

                 

                //// USE THE TRANSFER TO UPDATE THE CB... oCBid [changing] v OwnedByChurchBodyId [const]
                //var oMBD_Model = (
                //                   from t_mod in oMBD_ModelList
                //                   from t_mt in t_mtList.Where(c => c.ChurchMemberId == t_mod.oChurchMember.Id).DefaultIfEmpty()   // check to ensure only one is active all times
                //                   from t_mr in t_mrList.Where(c => c.ChurchMemberId == t_mod.oChurchMember.Id).DefaultIfEmpty()   // check to ensure only one is active all times
                //                   //from t_cr in _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_mod.oChurchMember.AppGlobalOwnerId && c.NVPCode == "CR" &&
                //                   //     c.Id == (t_mr != null ? t_mr.ChurchRankId : (int?)null)).DefaultIfEmpty()
                //                   from t_ms in t_msList.Where(c => c.ChurchMemberId == t_mod.oChurchMember.Id).DefaultIfEmpty()
                //                   //from t_cms in _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_mod.oAppGloOwnId && c.NVPCode == "CMS" &&
                //                   //     c.Id == (t_ms != null ? t_ms.ChurchMemStatusId : (int?)null)).DefaultIfEmpty()

                //                       //from t_mt in _context.MemberType.AsNoTracking()  //.Include(t => t.ChurchMemType_NVP)
                //                       //         .Where(x => x.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && x.Id == t_cm.ChurchBodyId && x.ChurchMemberId == t_cm.Id && x.IsCurrent == true).DefaultIfEmpty()   // check to ensure only one is active all times
                //                       //from t_mr in _context.MemberRank.AsNoTracking().Include(t => t.ChurchRank_NVP).Where(x => x.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && x.Id == t_cm.ChurchBodyId && x.ChurchMemberId == t_cm.Id && x.IsCurrentRank == true).DefaultIfEmpty()   // check to ensure only one is active all times
                //                       //from t_ms in _context.MemberStatus.AsNoTracking().Include(t => t.ChurchMemStatus_NVP).Where(x => x.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && x.Id == t_cm.ChurchBodyId && x.ChurchMemberId == t_cm.Id && x.IsCurrent == true).DefaultIfEmpty()   // check to ensure only one is active all times

                //                   select new MemberBioModel()
                //                   {
                //                       oAppGloOwnId = t_mod.oAppGloOwnId,
                //                       oAppGlobalOwn = t_mod.oAppGlobalOwn,
                //                       oChurchBodyId = t_mod.oChurchBodyId,
                //                       oChurchBody = t_mod.oChurchBody,
                //                       ///
                //                       oChurchMemberId = t_mod.oChurchMemberId,
                //                       oChurchMember = t_mod.oChurchMember,

                //                       /// strChurchBody 
                //                       strChurchBody = t_mod.strChurchBody,
                //                       strChurchBodyDetail = t_mod.strChurchBodyDetail,
                //                       strMemDisplayName = t_mod.strMemDisplayName, //  Dr. Sam Darteh
                //                       strCongLocation = t_mod.strCongLocation,
                //                       oMemContactInfo = t_mod.oMemContactInfo,

                //                       //strDesignation = t_mcr != null ? GetConcatLinkedEntities((t_mcr.ChurchRole != null ? t_mcr.ChurchRole.RoleName : ""), (t_mcr.IsChurchUnit == true ? (t_mcr.ChurchUnit != null ? t_mcr.ChurchUnit.Name : "") : (t_mcr.AssociatedChurchBody != null ? t_mcr.AssociatedChurchBody.Name : ""))) : "",
                //                       //strMemberType = t_mt != null ? (t_mt.ChurchMemType != null ? t_mt.ChurchMemType.Name : "") : "",
                //                       //strMemberStatus = t_ms != null ? (t_ms.ChurchMemStatus != null ? t_ms.ChurchMemStatus.Name : "") : "",
                //                       //strDateJoined = t_cl != null ? (t_cl.DateJoined != null ? DateTime.Parse(t_cl.DateJoined.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "") : "",
                //                       //strDateDeparted = t_cl != null ? () : ""

                //                       strMemFullName = t_mod.strMemFullName,  // Sam Darteh
                //                       strLocation = t_mod.strLocation,
                //                       strNationality = t_mod.strNationality,  //CtryAlpha3Code
                //                       strMotherTongue = t_mod.strMotherTongue,
                //                       strHometown = t_mod.strHometown,  // Aburi, Eastern Region [ER]
                //                       strHometownRegion = t_mod.strHometownRegion,
                //                       strIdType = t_mod.strIdType,
                //                       strMemberAge = t_mod.strMemberAge,
                //                       ///
                //                       strMaritalStatus = t_mod.strMaritalStatus,
                //                       strMarriageType = t_mod.strMarriageType,
                //                       strGender = t_mod.strGender,
                //                       strDateOfBirth = t_mod.strDateOfBirth,   // "Sunday, March 9, 2008" // t_cm.DateOfBirth.Value.ToString("d MMM yyyy") : "",  // DateTime.Parse(t_cm.DateOfBirth.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "",

                //                       //strMemStatus = t_ms != null ? t_ms.ChurchMemStatus.Name : "Dummy",               
                //                       //strMemType = t_mt != null ? t_mt.ChurchMemType.Name : "Unassigned",
                //                       //strStatus = GetStatusDesc(t_cm.Status),

                //                       strMemberScope = t_mod.strMemberScope,
                //                       strMemType = t_mod.strMemType,

                //                       strMemTypeCode = t_mt != null ? t_mt.MemberTypeCode : "", // t_mtList.Count > 0 ? t_mtList[0].MemberTypeCode : "", //t_mt.MemberTypeCode, // t_mt != null ? (t_mt.ChurchMemType_NVP != null ? t_mt.ChurchMemType_NVP.Id : (int?)null) : (int?)null,
                //                       strMemRank = t_mr != null ? (t_mr.ChurchRank_NVP != null ? t_mr.ChurchRank_NVP.NVPValue : "") : "", // t_mrList.Count > 0 ? (t_mrList[0].ChurchRank_NVP != null ? t_mrList[0].ChurchRank_NVP.NVPValue : "Unassigned") : "Unassigned", //t_mr != null ? (t_mr.ChurchRank_NVP != null ? t_mr.ChurchRank_NVP.NVPValue : "Unassigned") : "Unassigned",
                //                       numMemRankId = t_mr != null ? (t_mr.ChurchRank_NVP != null ? t_mr.ChurchRank_NVP.Id : (int?)null) : (int?)null, // t_mrList.Count > 0 ? (t_mrList[0].ChurchRank_NVP != null ? t_mrList[0].ChurchRank_NVP.Id : (int?)null) : (int?)null,
                //                       strMemStatus = t_ms != null ? (t_ms.ChurchMemStatus_NVP != null ? t_ms.ChurchMemStatus_NVP.NVPValue : "") : "", // t_msList.Count > 0 ? (t_msList[0].ChurchMemStatus_NVP != null ? t_msList[0].ChurchMemStatus_NVP.NVPValue : "N/A") : "N/A",
                //                       numMemStatusId = t_ms != null ? (t_ms.ChurchMemStatus_NVP != null ? t_ms.ChurchMemStatus_NVP.Id : (int?)null) : (int?)null, // t_msList.Count > 0 ? (t_msList[0].ChurchMemStatus_NVP != null ? t_msList[0].ChurchMemStatus_NVP.Id : (int?)null) : (int?)null,

                //                       bl_MemberStatusAvail = t_ms != null ? (t_ms.ChurchMemStatus_NVP != null ? t_ms.ChurchMemStatus_NVP.IsAvailable == true : false) : false,

                //                       strAccountStatus = t_mod.strAccountStatus,
                //                       ///
                //                       isCBOwned = t_mod.isCBOwned,  
                //                       isCBCurr = t_mod.isCBCurr
                //                   })
                //                    .FirstOrDefault();


                //var oMBD_Model = (from t_mod in oMBD_ModelList
                //                  from t_mt in t_mtList.Where(c => c.ChurchMemberId == t_mod.oChurchMember.Id).DefaultIfEmpty()  
                //                  from t_mr in t_mrList.Where(c => c.ChurchMemberId == t_mod.oChurchMember.Id).DefaultIfEmpty()  
                //                  from t_ms in t_msList.Where(c => c.ChurchMemberId == t_mod.oChurchMember.Id).DefaultIfEmpty()
                //                  select 
                //                  )

                if (!isVwBD && oMBD_Model != null && oCurrCB != null)  // editing... show some lookups
                {
                    // disable Custom_Code if auto
                    var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)  //.Include(t => t.AppGlobalOwner) //.Include(t => t.OwnedByChurchBody)
                                             .Where(c => c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId && c.NVPCode == "MCCF").ToList();

                    oNVP_List_1 = oNVP_List_1.Where(c =>
                                       (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == oCurrCB.Id ||
                                       (c.OwnedByChurchBodyId != oCBid && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCurrCB.ParentChurchBodyId) ||
                                       (c.OwnedByChurchBodyId != oCBid && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCurrCB)))).ToList();

                    var oNVP_MCCF = oNVP_List_1.Where(c => c.ChurchBodyId == oCBid && c.NVPSubCode == "AUT_GN" && c.ChurchBody.ChurchLevel.LevelIndex == oNVP_List_1.Min(y => y.ChurchBody.ChurchLevel.LevelIndex)).FirstOrDefault();
                    oMBD_Model.bl_AUT_GN = oNVP_MCCF != null ? oNVP_MCCF.NVPValue == "Y" : false;


                    /// load lookups 
                    oMBD_Model = this.populateLookupsCM_BD(oMBD_Model, oMBD_Model.oChurchMember);  //setIndex, 

                }


                return oMBD_Model;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        // 2
        private List<MemberContactInfoModel> GetMemberContactInfo(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
                                bool isVwLs = false, int? currId = null, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;
                ///
                if (oCurrCM==null) oCurrCM = _context.ChurchMember.AsNoTracking().Where(x => x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.Id == oCMid).FirstOrDefault();
                // List<MemberContactInfoModel> oMCI_ModelList = new List<MemberContactInfoModel>();  // if add/edit, list.count = 1

                var strDesc = "Contact Info";
                var _userTask = "Attempted accessing /modifying " + strDesc.ToLower();

                //if (isVwCI)
                //{
                //var oCREG_CurrList = _context.CountryRegion.AsNoTracking().Include(t => t.OwnedByChurchBody).Include(t => t.Country) 
                //         .Where(c => c.AppGlobalOwnerId == oAGOid && (c.OwnedByChurchBodyId == oCBid || c.SharingStatus != "N"))
                //         .ToList();

                //oCREG_CurrList = oCREG_CurrList.Where(c =>
                //                   (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB))))
                //                   .ToList(); 


                var oMCI_ModelList_1 = _context.ContactInfo.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody) //.Include(t => t.LanguageSpoken)
                                   .Where(x => (isVwLs == true || (!isVwLs && x.Id == currId)) && x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.ChurchMemberId == oCMid).ToList();

                if (oMCI_ModelList_1 .Count == 0) 
                    oMCI_ModelList_1 = _context.ContactInfo.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody)
                                   .Where(x => (isVwLs == true || (!isVwLs && x.Id == currId)) && x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.Id == (oCurrCM != null ? oCurrCM.PrimContactInfoId : (int?)null)).ToList();

                    //if (oMCI_ModelList_1.Count == 0)
                    //    oMCI_ModelList_1 = _context.ContactInfo.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody)
                    //                   .Where(x => x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.ChurchMemberId == oCMid).ToList();
                    

                    //oMCI_ModelList = (
                    //          from t_ci in _context.ContactInfo.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody)
                    //               .Where(x => x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid &&
                    //               (x.Id == (oCurrCM != null ? oCurrCM.PrimContactInfoId : (int?)null) || x.ChurchMemberId == oCMid)) //.Distinct()  

                    var oMCI_ModelList = (
                              from t_ci in oMCI_ModelList_1   //.Where(x => x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid &&
                                  // (x.Id == (oCurrCM != null ? oCurrCM.PrimContactInfoId : (int?)null) || x.ChurchMemberId == oCMid)) 
                              from t_crg in _context.CountryRegion.AsNoTracking().Include(t => t.OwnedByChurchBody).Include(t => t.Country) // oCREG_CurrList 
                                    .Where(x => x.Id == t_ci.RegionId).DefaultIfEmpty()

                                select new MemberContactInfoModel()
                              {
                                  oAppGloOwnId = oAGOid, //oAppGlobalOwn = t_ci.AppGlobalOwner,
                                  oChurchBodyId = t_ci.ChurchBodyId, //oChurchBody = t_ci.ChurchBody,                                  
                                  oChurchMemberId = t_ci.ChurchMemberId, //oChurchMember = oCurrCM,
                                  ///
                                  oMemContactInfo = t_ci,
                                  strContactInfo = t_ci.ContactInfoDesc,
                                  strHolderName =  t_ci.IsChurchFellow ? (oCurrCM != null ? GetConcatMemberName(oCurrCM.Title, oCurrCM.FirstName, oCurrCM.MiddleName, oCurrCM.LastName, false, false, false, false, false) : "") : t_ci.ExtHolderName,
                                 strRegion = t_crg != null ? t_crg.Name : "",
                                 strCountry = t_crg != null ?  (t_crg.Country != null ? t_crg.Country.EngName : "") : ""

                                })
                              .ToList();

                    

                if (isVwLs && oMCI_ModelList.Count > 0)
                    oMCI_ModelList.OrderBy(c => c.oMemContactInfo.IsPrimaryContact).ThenBy(c => c.strHolderName).ToList();

                //{
                //    if (oMCIid != null)  // editing...
                //        oMCI_ModelList = oMCI_ModelList.Where(c => c.oMemContactInfo.Id == oMCIid).ToList(); //.FirstOrDefault();

                //    else  // get the list  ... dont mess up with the parameters!
                //        oMCI_ModelList.OrderBy(c => c.oMemContactInfo.IsPrimaryContact).ThenBy(c => c.strHolderName).ToList();
                //}         


                //}
                //else  // add or mod
                //{
                //    var oMCIModelList = GetMemberContactInfo(oAGOid, oCBid, oCurrCB, oCurrCM, oCMid, false, oMCIid, _context);
                //    var oMCIModel = oMCIModelList.Count > 0 ? oMCIModelList[0] : new MemberContactInfoModel()
                //    {
                //        oMemContactInfo = new ContactInfo()
                //        {
                //            AppGlobalOwnerId = oAGOid,
                //            ChurchBodyId = oCBid,
                //            ChurchMemberId = oCMid, // unmapped ... cyclic redundancy! 1-1 for now... will be multi later
                //            CtryAlpha3Code = this.oCTRYDefault != null ? this.oCTRYDefault.CtryAlpha3Code : null,
                //            IsPrimaryContact = true,
                //            IsChurchFellow = true
                //        },
                //        ///
                //        oAppGloOwnId = oAGOid,
                //        oChurchBodyId = oCBid,
                //        oChurchMemberId = oCMid,
                //        strHolderName = GetConcatMemberName(oCurrCM.Title, oCurrCM.FirstName, oCurrCM.MiddleName, oCurrCM.LastName, false, false, false, false, false)
                //    };



                //    //var oMCIModel = new MemberContactInfoModel();
                //    //if (oMCIid == 0)
                //    //{   //create user and assign ROLE / GRoMB --- with Privileges

                //    //    oMCIModel.oMemContactInfo = new ContactInfo(); 
                //    //    oMCIModel.oMemContactInfo.AppGlobalOwnerId = oAGOid;
                //    //    oMCIModel.oMemContactInfo.ChurchBodyId = oCBid;
                //    //    oMCIModel.oMemContactInfo.ChurchMemberId = oCMid;  // unmapped ... cyclic redundancy! 1-1 for now... will be multi later
                //    //    oMCIModel.oMemContactInfo.CtryAlpha3Code = this.oCTRYDefault != null ? this.oCTRYDefault.CtryAlpha3Code : null; 
                //    //    oMCIModel.oMemContactInfo.IsPrimaryContact = true;
                //    //    ///
                //    //    oMCIModel.oMemContactInfo.IsChurchFellow = true;
                //    //    oMCIModel.strHolderName = GetConcatMemberName(oCurrCM.Title, oCurrCM.FirstName, oCurrCM.MiddleName, oCurrCM.LastName, false, false, false, false, false);

                //    //    _userTask = "Attempted creating new " + strDesc.ToLower(); 
                //    //}

                //    //else
                //    //{
                //    //    var oMCIModelList = GetMemberContactInfo(oAGOid, oCBid, null, null, oCMid, true, oMCIid, _context);
                //    //    oMCIModel = oMCIModelList.Count > 0 ? oMCIModelList[0] : new MemberContactInfoModel()
                //    //    {
                //    //        oMemContactInfo = new ContactInfo() 
                //    //        { 
                //    //            AppGlobalOwnerId = oAGOid,
                //    //            ChurchBodyId = oCBid,
                //    //            ChurchMemberId = oCMid, // unmapped ... cyclic redundancy! 1-1 for now... will be multi later
                //    //            CtryAlpha3Code = this.oCTRYDefault != null ? this.oCTRYDefault.CtryAlpha3Code : null, 
                //    //            IsPrimaryContact = true,
                //    //            IsChurchFellow =true
                //    //        },
                //    //        ///
                //    //        oAppGloOwnId = oAGOid,
                //    //        oChurchBodyId = oCBid,
                //    //        oChurchMemberId = oCMid,
                //    //        strHolderName = GetConcatMemberName(oCurrCM.Title, oCurrCM.FirstName, oCurrCM.MiddleName, oCurrCM.LastName, false, false, false, false, false)
                //    //    }; 
                //    //}



                //    oMCI_ModelList.Add(oMCIModel);
                //}


                return oMCI_ModelList;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        // 3
        private List<MemberLanguageSpokenModel> GetMemberLanguageSpoken(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
                                                bool isVwLs = false, int? currId = null, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;

                // if (oCurrCM == null) oCurrCM = _context.ChurchMember.AsNoTracking().Where(x => x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.Id == oCMid).FirstOrDefault();


                var oMLS_ModelList = (
                              from t_mls in _context.MemberLanguageSpoken.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.LanguageSpoken)
                                   .Where(x => (isVwLs == true || (!isVwLs && x.Id == currId)) && x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.ChurchMemberId == oCMid)
                              from t_lspk in _context.AppUtilityNVP.AsNoTracking().Include(t => t.Country_NVP).Where(c => c.AppGlobalOwnerId == oAGOid && // c.ChurchBodyId == oCBid && 
                                  c.NVPCode== "LSPK" && c.Id == t_mls.LanguageSpokenId)
                                   
                              select new MemberLanguageSpokenModel()
                              {
                                  oAppGloOwnId = t_mls.AppGlobalOwnerId, //oAppGlobalOwn = t_mls.AppGlobalOwner,
                                  oChurchBodyId = t_mls.ChurchBodyId, //oChurchBody = t_mls.ChurchBody, 
                                  oChurchMemberId = t_mls.ChurchMemberId, //oChurchMember = oCurrCM,
                                  ///
                                  oMemberLanguageSpoken = t_mls,
                                  strLanguageSpoken = t_lspk.NVPValue,
                                  strLanguageCountry = t_lspk.Country_NVP != null ? t_lspk.Country_NVP.EngName : "",
                                  strProficiencyLevel = GetLangProfDesc(t_mls.ProficiencyLevel)
                              })
                              .ToList();

                if (isVwLs && oMLS_ModelList.Count > 0)
                    oMLS_ModelList.OrderBy(c => c.oMemberLanguageSpoken.IsPrimaryLanguage).ThenBy(c => c.oMemberLanguageSpoken.LanguageSpoken?.NVPValue).ThenBy(c => c.strLanguageSpoken).ToList();

                return oMLS_ModelList;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        // 4
        private List<MemberFamilyRelationModel> GetMemberFamilyRelation(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;

                //if (oCurrCM == null) oCurrCM = _context.ChurchMember.AsNoTracking().Where(x => x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.Id == oCMid).FirstOrDefault();
                var oMFR_ModelList = (
                              from t_mfr in _context.MemberRelation.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t => t.RelationshipType).Include(t => t.RelationChurchMember)
                                   .Where(x => (isVwLs == true || (!isVwLs && x.Id == currId)) && x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.ChurchMemberId == oCMid)
                              from t_cm_r in _context.ChurchMember.AsNoTracking() //.Include(t=> t.ChurchBody).ThenInclude(t=> t.ParentChurchBody)
                                            .Where(c => c.AppGlobalOwnerId == oAGOid && (t_mfr.RelationScope == "L" || t_mfr.RelationScope == "C") &&
                                            c.ChurchBodyId == t_mfr.RelationChurchBodyId && c.Id == t_mfr.RelationChurchMemberId).DefaultIfEmpty()
                              from t_cb_r in _context.ChurchBody.AsNoTracking().Include(t => t.ParentChurchBody)
                                            .Where(c => c.AppGlobalOwnerId == oAGOid && c.Id == t_mfr.RelationChurchBodyId).DefaultIfEmpty()   //(t_cm_r != null ? t_cm_r.ChurchBodyId : (int?)null)

                                  // (t_mfr.RelationScope == "C" && c.ChurchBodyId == t_mfr.ChurchBodyId && c.Id == t_mfr.RelationChurchMemberId))).DefaultIfEmpty()
                                  // (t_mfr.ChurchFellowCode == "E" && t_mfr.RelationChurchMemberId==null && t_mfr.ExtChurchAssociateMemberId == null)))

                              from t_rt in _context.RelationshipType.AsNoTracking().Where(c => c.RelationCode == t_mfr.RelationshipCode).DefaultIfEmpty()

                              select new MemberFamilyRelationModel()
                              {
                                  oAppGloOwnId = t_mfr.AppGlobalOwnerId, //oAppGlobalOwn = t_mfr.AppGlobalOwner,
                                  oChurchBodyId = t_mfr.ChurchBodyId, //oChurchBody = t_mfr.ChurchBody,
                                  oChurchMemberId = t_mfr.ChurchMemberId, //oChurchMember = oCurrCM, 
                                  ///
                                  oMemberRelation = t_mfr, 
                                  strRelationship = t_rt != null ? t_rt.Name : "N/A",
                                  //  strRelationCB = t_cm_r != null ? (t_cm_r.ChurchBody != null ? t_cm_r.ChurchBody.Name : "") : "",

                                  numRelationCodePrev = t_mfr.RelationshipCode,
                                  strRelationCB_Scope =  t_mfr.RelationScope == "L" ? "Local Fellow" :
                                                      t_mfr.RelationScope == "E" ? ("External: " + (!string.IsNullOrEmpty(t_mfr.DenominationExtCon) && !string.IsNullOrEmpty(t_mfr.LocationExtCon) ?  t_mfr.DenominationExtCon + ", " + t_mfr.LocationExtCon : t_mfr.DenominationExtCon + t_mfr.LocationExtCon)) :
                                                      (!string.IsNullOrEmpty(t_cb_r != null ? t_cb_r.Name : "") && !string.IsNullOrEmpty(t_cb_r != null ? (t_cb_r.ParentChurchBody != null ? t_cb_r.ParentChurchBody.Name : "") : "") ? (t_cb_r != null ? t_cb_r.Name : "") + ", " + (t_cb_r != null ? (t_cb_r.ParentChurchBody != null ? t_cb_r.ParentChurchBody.Name : "") : "") : (t_cb_r != null ? t_cb_r.Name : "") + (t_cb_r != null ? (t_cb_r.ParentChurchBody != null ? t_cb_r.ParentChurchBody.Name : "") : "")),

                                  strRelationName = (t_mfr.RelationScope == "L" || t_mfr.RelationScope == "C") ? 
                                                    (t_cm_r != null ? GetConcatMemberName(t_cm_r.Title, t_cm_r.FirstName, t_cm_r.MiddleName, t_cm_r.LastName, false, false, false, false, false) : "") : 
                                                    t_mfr.RelationNameExtCon,

                                  strFaithAffiliate = t_mfr.RelationScope == "E" ? GetFaithAffilateDesc(t_mfr.FaithAffiliationExtCon) : "Christian",
                                  strFaithDenom = t_mfr.RelationScope == "E" ? t_mfr.DenominationExtCon : "Christian",
                                  strPhotoUrl_MFR = t_mfr.RelationScope == "E" ? t_mfr.PhotoUrlExtCon : (t_cm_r != null ? t_cm_r.PhotoUrl : null),
                                  strChurchBody = t_mfr.ChurchBody != null ? t_mfr.ChurchBody.Name : "",
                                  strRelationChurchBody = t_cb_r != null ? t_cb_r.Name : "",
                                  strRelationStatus = GetRelationStatusDesc(t_mfr.Status),
                                  strRelationCategory = GetRelationCategoryDesc(t_mfr.RelationCategory)
                              })
                              .ToList();

                if (oMFR_ModelList.Count > 0)
                    oMFR_ModelList.OrderBy(c => c.oMemberRelation.IsNextOfKin).ThenBy(c => c.oMemberRelation.RelationshipType?.LevelIndex).ThenBy(c => c.strRelationName).ToList();

                return oMFR_ModelList;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

        // 5   ...Member Contact Persons
        private List<MemberContactPersonModel> GetMemberContact(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;

                // if (oCurrCM == null) oCurrCM = _context.ChurchMember.AsNoTracking().Where(x => x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.Id == oCMid).FirstOrDefault();
                var oMCP_ModelList = (
                              from t_mc in _context.MemberContact.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody)
                                   .Where(x => (isVwLs == true || (!isVwLs && x.Id == currId)) && x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.ChurchMemberId == oCMid)
                              from t_cm_c in _context.ChurchMember.AsNoTracking().Include(t => t.ChurchBody).Where(c => c.AppGlobalOwnerId == oAGOid && (t_mc.RelationScope == "L" || t_mc.RelationScope == "C") &&
                                        c.ChurchBodyId == t_mc.ContactChurchBodyId && c.Id == t_mc.ContactChurchMemberId).DefaultIfEmpty()

                              from t_cb_c in _context.ChurchBody.AsNoTracking().Include(t => t.ParentChurchBody)
                                              .Where(c => c.AppGlobalOwnerId == oAGOid && c.Id == t_mc.ContactChurchBodyId ).DefaultIfEmpty()// (t_cm_c != null ? t_cm_c.ChurchBodyId : (int?)null)


                                  // from t_cm_c in _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid &&
                                  //((t_mc.RelationScope == "L" && c.ChurchBodyId == oCBid && c.Id == t_mc.InternalContactChurchMemberId && t_mc.ExtConChurchAssociateMemberId == null) ||
                                  // (t_mc.RelationScope == "C" && c.ChurchBodyId == t_mc.ExtConChurchAssociateChurchBodyId && c.Id == t_mc.ExtConChurchAssociateMemberId && t_mc.InternalContactChurchMemberId == null))).DefaultIfEmpty()
                                  //     // (t_mfr.ChurchFellowCode == "E" && t_mfr.RelationChurchMemberId==null && t_mfr.ExtChurchAssociateMemberId == null)))                              

                              from t_ci in _context.ContactInfo.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody)
                                   .Where(x => x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == t_mc.ContactChurchBodyId &&
                                   (x.Id == (t_cm_c != null ? t_cm_c.PrimContactInfoId : (int?)null) || x.ChurchMemberId == t_mc.ContactChurchMemberId)).Distinct().DefaultIfEmpty()
                              from t_rt in _context.RelationshipType.AsNoTracking().Where(c => c.RelationCode == t_mc.RelationshipCode).DefaultIfEmpty()

                              select new MemberContactPersonModel()
                              {
                                  oAppGloOwnId = t_mc.AppGlobalOwnerId, //oAppGlobalOwn = t_mc.AppGlobalOwner,
                                  oChurchBodyId = t_mc.ChurchBodyId, //oChurchBody = t_mc.ChurchBody,
                                  oChurchMemberId = t_mc.ChurchMemberId, //oChurchMember = oCurrCM,
                                  ///

                                  oMemberContact = t_mc,
                                  oMemContactInfo = t_ci, // strContactInfo = t_ci.ContactInfoDesc,
                                  strRelationship = t_rt != null ? t_rt.Name : "N/A",
                                  //  strRelationCB = t_cm_r != null ? (t_cm_r.ChurchBody != null ? t_cm_r.ChurchBody.Name : "") : "",
                                  //strRelationCB_Scope = t_mc.RelationScope == "L" ? "Local Contact" :
                                  //                    ((t_mc.RelationScope == "E") ? "External: " + (!string.IsNullOrEmpty(t_mc.DenominationExtCon) && !string.IsNullOrEmpty(t_mc.LocationExtCon) ? t_mc.DenominationExtCon + ", " + t_mc.LocationExtCon : t_mc.DenominationExtCon + t_mc.LocationExtCon) :
                                  //                    (!string.IsNullOrEmpty(t_cb_c != null ? t_cb_c.Name : "") && !string.IsNullOrEmpty(t_cb_c != null ? (t_cb_c.ParentChurchBody != null ? t_cb_c.ParentChurchBody.Name : "") : "") ? (t_cb_c != null ? t_cb_c.Name : "") + ", " + (t_cb_c != null ? (t_cb_c.ParentChurchBody != null ? t_cb_c.ParentChurchBody.Name : "") : "") : (t_cb_c != null ? t_cb_c.Name : "") + t_cb_c != null ? (t_cb_c.ParentChurchBody != null ? t_cb_c.ParentChurchBody.Name : "") : "")),

                                  strRelationCB_Scope = t_mc.RelationScope == "L" ? "Local Fellow" :
                                                      t_mc.RelationScope == "E" ? ("External: " + (!string.IsNullOrEmpty(t_mc.DenominationExtCon) && !string.IsNullOrEmpty(t_mc.LocationExtCon) ? t_mc.DenominationExtCon + ", " + t_mc.LocationExtCon : t_mc.DenominationExtCon + t_mc.LocationExtCon)) :
                                                      (!string.IsNullOrEmpty(t_cb_c != null ? t_cb_c.Name : "") && !string.IsNullOrEmpty(t_cb_c != null ? (t_cb_c.ParentChurchBody != null ? t_cb_c.ParentChurchBody.Name : "") : "") ? (t_cb_c != null ? t_cb_c.Name : "") + ", " + (t_cb_c != null ? (t_cb_c.ParentChurchBody != null ? t_cb_c.ParentChurchBody.Name : "") : "") : (t_cb_c != null ? t_cb_c.Name : "") + (t_cb_c != null ? (t_cb_c.ParentChurchBody != null ? t_cb_c.ParentChurchBody.Name : "") : "")),

                                  strContactName = (t_mc.RelationScope == "L" || t_mc.RelationScope == "C") ?
                                                    (t_cm_c != null ? GetConcatMemberName(t_cm_c.Title, t_cm_c.FirstName, t_cm_c.MiddleName, t_cm_c.LastName, false, false, false, false, false) : "") :
                                                    t_mc.ContactNameExtCon,

                                  strFaithAffiliate = t_mc.RelationScope == "E" ? GetFaithAffilateDesc(t_mc.FaithAffiliationExtCon) : "Christian",
                                  strFaithDenom = t_mc.RelationScope == "E" ? t_mc.DenominationExtCon : "",
                                  strPhotoUrl_MCP = t_mc.RelationScope == "E" ? t_mc.PhotoUrlExtCon : (t_cm_c != null ? t_cm_c.PhotoUrl : ""),  

                                  strChurchBody = t_mc.ChurchBody != null ? t_mc.ChurchBody.Name : "",
                                  strContactChurchBody = t_cb_c != null ? t_cb_c.Name : "",
                                  strStatus = GetRelationStatusDesc(t_cb_c.Status),
                                  strRelationCategory = GetRelationCategoryDesc(t_mc.RelationCategory)

                                  //strContactName = t_mc.ChurchFellowCode == "L" && t_mc.ChurchFellowCode == "C" ?
                                  //   (t_cm_c != null ? GetConcatMemberName(t_cm_c.Title, t_cm_c.FirstName, t_cm_c.MiddleName, t_cm_c.LastName, false, false, false, false, false) : "") : t_mc.ExtConContactName


                              })
                              .ToList();

                if (oMCP_ModelList.Count > 0) 
                    oMCP_ModelList.OrderBy(c=> c.oMemberContact.IsCurrentContact).ThenBy(c=> c.strContactName).ToList();

                return oMCP_ModelList;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        // 6
        private List<MemberEducationModel> GetMemberEducation(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;

                // if (oCurrCM == null) oCurrCM = _context.ChurchMember.AsNoTracking().Where(x => x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.Id == oCMid).FirstOrDefault();
                var oMED_ModelList = (
                              from t_med in _context.MemberEducation.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody).Include(t=> t.Country)
                                    .Include(t=> t.InstitutionType_NVP).Include(t=> t.CertificateType_NVP)
                                   .Where(x => (isVwLs == true || (!isVwLs && x.Id == currId)) && x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.ChurchMemberId == oCMid)
                              from t_inst in _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && // c.ChurchBodyId == oCBid && 
                                   c.NVPCode == "INST" && c.Id == t_med.InstitutionTypeId).DefaultIfEmpty()
                              from t_ctt in _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && // c.ChurchBodyId == oCBid && 
                                   c.NVPCode == "CTT" && c.Id == t_med.CertificateId).DefaultIfEmpty()

                              select new MemberEducationModel()
                              {
                                  oAppGloOwnId = t_med.AppGlobalOwnerId, //oAppGlobalOwn = t_med.AppGlobalOwner,
                                  oChurchBodyId = t_med.ChurchBodyId, //oChurchBody = t_med.ChurchBody,
                                  oChurchMemberId = t_med.ChurchMemberId, //oChurchMember = oCurrCM,
                                  ///
                                  oMemberEducation = t_med,
                                  oInstitutionType = t_inst,
                                  numEducLevelIndex = t_inst != null ? (double)t_inst.GradeLevel : 999, // jux arbutrary number to go back in sort
                                  oCertificateType = t_ctt,
                                  strInstitutionType = t_inst != null ? t_inst.NVPValue : "",
                                  strCertificateType = t_ctt != null ? t_ctt.NVPValue : "",
                                  strFromDate = t_med.FromDate != null ? String.Format("{0:d MMM yyyy}", t_med.FromDate) : "", // DateTime.Parse(t_med.FromDate.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "",
                                  strToDate = t_med.ToDate != null ? String.Format("{0:d MMM yyyy}", t_med.ToDate) : "", // DateTime.Parse(t_med.ToDate.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "",
                                  strCountry = t_med.Country != null ? t_med.Country.CtryAlpha3Code : "",
                                  strStatus = t_med.IsCompleted==true ? "Completed" : "On-going",  // incomplete, stopped

                                  strEducation = (!string.IsNullOrEmpty(t_med.Discipline)) && (!string.IsNullOrEmpty( t_med.InstitutionName)) ? (t_med.Discipline + " (" + t_med.InstitutionName + ")") : (t_med.Discipline + t_med.InstitutionName),

                                  strDateDesc = (t_med.FromDate != null) && (t_med.ToDate != null) ? ((t_med.FromDate != null ? String.Format("{0:d MMM yyyy}", t_med.FromDate) : "") + " - " + (t_med.FromDate != null ? String.Format("{0:d MMM yyyy}", t_med.ToDate) : "")) : 
                                  (t_med.FromDate != null ? "Since " + String.Format("{0:d MMM yyyy}", t_med.FromDate) : "") + ("Until " + t_med.FromDate != null ? String.Format("{0:d MMM yyyy}", t_med.ToDate) : "")
                              
                              })
                              .ToList();

                // get the maxEduLevel from the main model... rather than the list... will repeat
                if (oMED_ModelList.Count > 0)
                    oMED_ModelList.OrderByDescending(c => c.oMemberEducation.FromDate).ThenByDescending(c => c.oMemberEducation.ToDate).ThenBy(c => c.numEducLevelIndex)
                        .ThenBy(c => c.strInstitutionType).ToList();

                return oMED_ModelList;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

         // 7
        private List<MemberProfessionBrandModel> GetMemberProfessionBrand(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;

                //if (oCurrCM == null) oCurrCM = _context.ChurchMember.AsNoTracking().Where(x => x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.Id == oCMid).FirstOrDefault();
                var oMPB_ModelList = (
                              from t_mpb in _context.MemberProfessionBrand.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody)
                                   .Where(x => (isVwLs == true || (!isVwLs && x.Id == currId)) && x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.ChurchMemberId == oCMid)
                              //from t_inst in _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && // c.ChurchBodyId == oCBid && 
                              //     c.NVPCode == "INST" && c.Id == t_mpb.InstitutionTypeId).DefaultIfEmpty()
                              //from t_ctt in _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && // c.ChurchBodyId == oCBid && 
                              //     c.NVPCode == "CTT" && c.Id == t_mpb.CertificateId).DefaultIfEmpty()

                              select new MemberProfessionBrandModel()
                              {
                                  oAppGloOwnId = t_mpb.AppGlobalOwnerId, //oAppGlobalOwn = t_mpb.AppGlobalOwner,
                                  oChurchBodyId = t_mpb.ChurchBodyId, //oChurchBody = t_mpb.ChurchBody,
                                  oChurchMemberId = t_mpb.ChurchMemberId, //oChurchMember = oCurrCM,
                                  ///
                                  oMemberProfessionBrand = t_mpb, 
                                  strFromDate = t_mpb.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mpb.FromDate) : "", // DateTime.Parse(t_mpb.FromDate.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "",
                                  strToDate = t_mpb.ToDate != null ? String.Format("{0:d MMM yyyy}", t_mpb.ToDate) : "", // DateTime.Parse(t_mpb.ToDate.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "",
                                  strProfessionBrand = t_mpb.Profession ,
                                  strStatus = t_mpb.IsActivePractice == true ? "Active" : "",
                                  strDateDesc = (t_mpb.FromDate != null) && (t_mpb.ToDate != null) ? ((t_mpb.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mpb.FromDate) : "") + " - " + (t_mpb.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mpb.ToDate) : "")) :
                                  (t_mpb.FromDate != null ? "Since " + String.Format("{0:d MMM yyyy}", t_mpb.FromDate) : "") + ("Until " + t_mpb.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mpb.ToDate) : "")

                              })
                              .ToList();

                // get the maxEduLevel from the main model... rather than the list... will repeat
                if (oMPB_ModelList.Count > 0)
                    oMPB_ModelList.OrderByDescending(c => c.oMemberProfessionBrand.FromDate).ThenByDescending(c => c.oMemberProfessionBrand.ToDate).ThenBy(c => c.oMemberProfessionBrand.Profession)
                        .ToList();

                return oMPB_ModelList;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

         // 8
        private List<MemberWorkExperienceModel> GetMemberWorkExperience(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;

                //  if (oCurrCM == null) oCurrCM = _context.ChurchMember.AsNoTracking().Where(x => x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.Id == oCMid).FirstOrDefault();
                var oMWE_ModelList = (
                              from t_mwe in _context.MemberWorkExperience.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody)
                                   .Where(x => (isVwLs == true || (!isVwLs && x.Id == currId)) && x.AppGlobalOwnerId == oAGOid && x.ChurchBodyId == oCBid && x.ChurchMemberId == oCMid)
                                  //from t_inst in _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && // c.ChurchBodyId == oCBid && 
                                  //     c.NVPCode == "INST" && c.Id == t_mwe.InstitutionTypeId).DefaultIfEmpty()
                                  //from t_ctt in _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && // c.ChurchBodyId == oCBid && 
                                  //     c.NVPCode == "CTT" && c.Id == t_mwe.CertificateId).DefaultIfEmpty()

                              select new MemberWorkExperienceModel()
                              {
                                  oAppGloOwnId = t_mwe.AppGlobalOwnerId, //oAppGlobalOwn = t_mwe.AppGlobalOwner,
                                  oChurchBodyId = t_mwe.ChurchBodyId, //oChurchBody = t_mwe.ChurchBody,
                                  oChurchMemberId = t_mwe.ChurchMemberId, //oChurchMember = oCurrCM,
                                  ///
                                  oMemberWorkExperience = t_mwe,
                                  strFromDate = t_mwe.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mwe.FromDate) : "", // DateTime.Parse(t_mwe.FromDate.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "",
                                  strToDate = t_mwe.ToDate != null ? String.Format("{0:d MMM yyyy}", t_mwe.ToDate) : "", // DateTime.Parse(t_mwe.ToDate.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "",
                                  strWorkExperience = (!string.IsNullOrEmpty(t_mwe.WorkRole)) && (!string.IsNullOrEmpty(t_mwe.WorkPlace)) ? (t_mwe.WorkRole + ", "+ t_mwe.WorkPlace) : (t_mwe.WorkRole + t_mwe.WorkPlace),
                                  strLocationCountry = (!string.IsNullOrEmpty(t_mwe.Location)) && (t_mwe.Country != null) ? (t_mwe.Location + ", " + (t_mwe.Country != null ? t_mwe.Country.EngName : "")) : (t_mwe.Location + (t_mwe.Country != null ? t_mwe.Country.EngName : "")),
                                  strDateDesc = (t_mwe.FromDate != null) && (t_mwe.ToDate != null) ? ((t_mwe.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mwe.FromDate) : "") + " - " + (t_mwe.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mwe.ToDate) : "")) :
                                  (t_mwe.FromDate != null ? "Since " + String.Format("{0:d MMM yyyy}", t_mwe.FromDate) : "") + ("Until " + t_mwe.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mwe.ToDate) : ""),
                                   
                                  strStatus = t_mwe.IsCurrentWork ? "Current" : ""
                              })
                              .ToList();

                // get the maxEduLevel from the main model... rather than the list... will repeat
                if (oMWE_ModelList.Count > 0)
                    oMWE_ModelList.OrderByDescending(c => c.oMemberWorkExperience.FromDate).ThenByDescending(c => c.oMemberWorkExperience.ToDate).ThenBy(c => c.oMemberWorkExperience.WorkPlace)
                        .ToList();



                return oMWE_ModelList;
            }
            catch (Exception ex)
            {
                return null;
            }
        }



        /// Churchlife modules... 11 ... 19
        // 11... Churchlife ..one time stuff [11.1], Churchlife Events .. reoccur [11.2], ChurchlifeEventTasks [11.3] ... req tasks for particular events
        private MemberChurchlifeModel GetMemberChurchlife(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, bool inclExtCBData = true, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;
               // MemberChurchlifeModel oMCL_Model = new MemberChurchlifeModel();
                
                /// get the MCLA--MCL data of this member... current ones + history across CBs in denomination 
                ///
                var oMCL_List_All = _context.MemberChurchlife.AsNoTracking().Include(t => t.ChurchBody)
                                        .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid &&
                                        ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                        (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                        .ToList();

                // filter ...
                if (inclExtCBData == true)
                {
                    oMCL_List_All = oMCL_List_All.Where(c =>
                          (c.ChurchBodyId == oCurrCB.Id ||
                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                      (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                      (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                      (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                          ))
                        .ToList();
                }


                var oMCL_Model = (
                               from t_mcl in oMCL_List_All  //_context.MemberChurchlife.AsNoTracking() //.Include(t => t.Nationality).Include(t => t.MotherTongue).Include(t => t.IdType).Include(t => t.HometownRegion)
                                    //.Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid)
                               from t_cbs in _context.ChurchBodyService.AsNoTracking() .Where(x => x.AppGlobalOwnerId == t_mcl.AppGlobalOwnerId && x.ChurchBodyId == t_mcl.ChurchBodyId && x.Id == t_mcl.ChurchBodyServiceId).DefaultIfEmpty()
                               from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_mcl.AppGlobalOwnerId && c.Id == t_mcl.ChurchBodyId)  //

                               select new MemberChurchlifeModel()
                               {
                                   oAppGloOwnId = t_mcl.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                   oChurchBodyId = t_mcl.ChurchBodyId, /// oChurchBody = t_cb,
                                   oChurchMemberId = t_mcl.ChurchMemberId, /// oChurchMember = t_cm, 
                                                                            /// 
                                   oMemberChurchlife = t_mcl,
                                   strChurchBodyService = t_cbs != null ? t_cbs.ServiceName : "",
                                   strJoinedDate = t_mcl.DateJoined != null ? String.Format("{0:d MMM yyyy}", t_mcl.DateJoined) : "", 
                                   strDepartedDate = t_mcl.DateDeparted != null ? String.Format("{0:d MMM yyyy}", t_mcl.DateDeparted) : "",
                                   strDateDesc = (t_mcl.DateJoined != null) && (t_mcl.DateDeparted != null) ? ((t_mcl.DateJoined != null ? String.Format("{0:d MMM yyyy}", t_mcl.DateJoined) : "") + " - " + (t_mcl.DateJoined != null ? String.Format("{0:d MMM yyyy}", t_mcl.DateDeparted) : "")) :
                                  (t_mcl.DateJoined != null ? "Since " + String.Format("{0:d MMM yyyy}", t_mcl.DateJoined) : "") + ("Until " + t_mcl.DateJoined != null ? String.Format("{0:d MMM yyyy}", t_mcl.DateDeparted) : ""),

                                   strAvailStatus = t_mcl.IsCurrentMember ? "Current Member" : "Past Member",
                                   strOwnStatus = t_mcl.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                   ///
                                   strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                   strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",
                                   ///
                                   strMemLongevity_Yrs = (t_mcl.DateJoined != null && t_mcl.DateDeparted != null) ? ((string)AppUtilties.CalcDateDiff(t_mcl.DateJoined.Value, t_mcl.DateDeparted.Value, true, true, true, true, true, false, false, false, false)) :
                                                         (t_mcl.DateJoined != null && t_mcl.DateDeparted == null) ? ((string)AppUtilties.CalcDateDiff(t_mcl.DateJoined.Value, DateTime.Now.Date, true, true, true, true, true, false, false, false, false)) : "",

                                   strEnrollMode = GetEnrollStatusDesc(t_mcl.EnrollMode),
                                   strDepartMode = GetDepartStatusDesc(t_mcl.DepartMode),
                                   strHealthCondition = GetHealthStatusDesc(t_mcl.HealthConditionStatus)
                               }) 
                               .FirstOrDefault();

                 

                return oMCL_Model;

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        private List<MemberChurchlifeActivityModel> GetMemberChurchlifeActivity(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, bool inclExtCBData = true, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;
                
                    // GET list of CLA ... use the CB sent over... cos ChurchExplorer allows other CBs to navigate other sub members than looged in CB

                    /// get the MCLA--MCLAc data of this member... current ones + history across CBs in denomination 
                    ///
                    var oMCLAc_List_All = _context.MemberChurchlifeActivity.AsNoTracking().Include(t => t.ChurchBody)
                                            .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid &&
                                            ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                            (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                            .ToList();

                    // filter ...
                    if (inclExtCBData == true)
                    {
                        oMCLAc_List_All = oMCLAc_List_All.Where(c =>
                              (c.ChurchBodyId == oCurrCB.Id ||
                              (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                              (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                              ))
                            .ToList();
                    }


                    //var oCLA_List_All = _context.AppUtilityNVP.AsNoTracking()
                    //                     .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.NVPCode == "CLA")  // && c.NVPStatus == "A"
                    //                    .ToList();

                    //oCLA_List_All = oCLA_List_All.Where(c =>
                    //                       (c.OwnedByChurchBodyId == oCurrCB.Id ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCurrCB.ParentChurchBodyId) ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCurrCB)))) ///this._oLoggedCB
                    //                .ToList();



                    /// -- for performance, reduce query mappings ... only look for the units paired up with selected t_mcla 
                    var oMCLAc_List = (
                                   from t_mcla in oMCLAc_List_All   //_context.MemberChurchlifeActivity.AsNoTracking() //.Include(t => t.Nationality).Include(t => t.MotherTongue).Include(t => t.IdType).Include(t => t.HometownRegion)
                                        //.Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid)
                                   from t_cla in _context.AppUtilityNVP.AsNoTracking().Where(x => x.AppGlobalOwnerId == t_mcla.AppGlobalOwnerId && x.Id == t_mcla.ChurchlifeActivityId) // x.ChurchBodyId == t_mcla.ChurchBodyId && 
                                   from t_cb in _context.ChurchBody.AsNoTracking().Include(t=>t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_mcla.AppGlobalOwnerId && c.Id == t_mcla.ChurchBodyId)  //(t_mcla.ChurchBody != null ? t_mcla.ChurchBody.ChurchLevelId : (int?)null))
                                   from t_ce in _context.ChurchCalendarEvent.AsNoTracking() .Where(c => c.AppGlobalOwnerId == t_mcla.AppGlobalOwnerId && t_mcla.IsChurchEvent == true && c.Id == t_mcla.ChurchEventId).DefaultIfEmpty()  //(t_mcla.ChurchBody != null ? t_mcla.ChurchBody.ChurchLevelId : (int?)null))

                                   select new MemberChurchlifeActivityModel()
                                   {
                                       oAppGloOwnId = t_mcla.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                       oChurchBodyId = t_mcla.ChurchBodyId, /// oChurchBody = t_cb,
                                       oChurchMemberId = t_mcla.ChurchMemberId, /// oChurchMember = t_cm, 
                                                                                /// 
                                       oMemberChurchlifeActivity = t_mcla, 
                                       strChurchlifeActivity = t_cla != null ? t_cla.NVPValue : "",  // activity name cud be only string
                                       strActivityDate = t_mcla.EventDate != null ? String.Format("{0:d MMM yyyy}", t_mcla.EventDate) : "",

                                       strEvent = t_ce != null ? t_ce.Subject + " [" + (t_ce.EventFrom != null ? String.Format("{0:dddd, MMMM d, yyyy}", t_ce.EventFrom.Value) : "") + "]" : "",
                                       strVenue = t_mcla.HostVenueScope == "L" ? (t_mcla.VenueChurchBody != null ? t_mcla.VenueChurchBody.Name : "Local") :
                                                      t_mcla.HostVenueScope == "E" ? "External: " + t_mcla.OfficiatingVenueExt :
                                                      (t_mcla.VenueChurchBody != null ? t_mcla.VenueChurchBody.Name : "Sister congregation"),

                                       strOwnStatus = t_mcla.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                       ///

                                       strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                       strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                                   })
                                    .ToList();

                    ///
                    if (oMCLAc_List.Count > 0)
                        oMCLAc_List
                            .OrderByDescending(c => c.oMemberChurchlifeActivity.EventDate).ThenBy(c => c.strChurchlifeActivity) //(c.oMemberChurchlifeActivity != null ? c.oMemberChurchlifeActivity.EventDate : (DateTime?)null))                    
                            .ToList();
 
                     

                return oMCLAc_List;

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        private List<MemberChurchlifeEventTaskModel> GetMemberChurchlifeEventTask(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, int? oParMCLAid = null, bool inclExtCBData = true, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;
                // MemberChurchlifeAllModel oMCL_Model = new MemberChurchlifeAllModel();

                /// behaves like the pers_info but keep history cos... date joined for CB1 may not be same sa date joined for CB2 
                // CLA tasks or requirement
               
                        var oMCET_List_All = _context.MemberChurchlifeEventTask.AsNoTracking().Include(t => t.ChurchBody)
                                                .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid && c.MemberChurchlifeActivityId == oParMCLAid &&
                                                ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                                (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                                .ToList();

                        // filter ...
                        if (inclExtCBData == true)
                        {
                            oMCET_List_All = oMCET_List_All.Where(c =>
                                  (c.ChurchBodyId == oCurrCB.Id ||
                                  (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                                  (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                                  ))
                                .ToList();
                        }

                        //var oCLA_List_All = _context.AppUtilityNVP.AsNoTracking().Include(t=> t.OwnedByChurchBody)
                        //                 .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.NVPCode == "CLA" && c.NVPStatus == "A")
                        //                .ToList();

                        //oCLA_List_All = oCLA_List_All.Where(c =>
                        //                       (c.OwnedByChurchBodyId == oCurrCB.Id ||
                        //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCurrCB.ParentChurchBodyId) ||
                        //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCurrCB)))) ///this._oLoggedCB
                        //            .ToList();


                        /// -- for performance, reduce query mappings ... only look for the units paired up with selected MCERTs 
                        var oMCET_List = (
                                       from t_mcet in oMCET_List_All //_context.MemberChurchlifeEventTask.AsNoTracking().Include(t => t.ActivityRequirementDef) //.Include(t => t.MemberChurchRole) //.ThenInclude(t => t.ChurchRole)
                                           // .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid && c.MemberChurchlifeActivityId == oParMCLAid)
                                       from t_mcla in _context.MemberChurchlifeActivity.AsNoTracking().Include(t => t.ChurchlifeActivity).Include(t => t.ChurchEvent)
                                            .Where(x => x.AppGlobalOwnerId == t_mcet.AppGlobalOwnerId && x.ChurchBodyId == t_mcet.ChurchBodyId && x.Id == t_mcet.MemberChurchlifeActivityId)  //.DefaultIfEmpty()  // CANNOT BE EMPTY
                                       from t_mcr in _context.MemberChurchRole.AsNoTracking().Include(t => t.ChurchRole).Include(t => t.ChurchMember)
                                            .Where(x => x.AppGlobalOwnerId == t_mcet.AppGlobalOwnerId && x.ChurchBodyId == t_mcet.ChurchBodyId && x.Id == t_mcet.MemberChurchRoleId).DefaultIfEmpty()
                                       from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_mcet.AppGlobalOwnerId && c.Id == t_mcet.ChurchBodyId)  //
                                       from t_clard in _context.AppUtilityNVP.AsNoTracking() //.Include(t => t.ChurchlifeActivity).Include(t => t.ChurchEvent)
                                            .Where(x => x.AppGlobalOwnerId == t_mcet.AppGlobalOwnerId && x.NVPCode == "CLARD" && x.NVPCategoryId== t_mcla.ChurchlifeActivityId && x.Id == t_mcet.RequirementDefId).DefaultIfEmpty()

                                       select new MemberChurchlifeEventTaskModel()
                                       {
                                           oAppGloOwnId = t_mcet.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                           oChurchBodyId = t_mcet.ChurchBodyId, /// oChurchBody = t_cb,
                                           oChurchMemberId = t_mcet.ChurchMemberId, /// oChurchMember = t_cm,  
                                                                                    ///
                                           oMemberChurchlifeEventTask = t_mcet,

                                           oChurchlifeActivityReqDef = t_mcet.ActivityRequirementDef,
                                           oMemberChurchRole = t_mcet.MemberChurchRole,
                                           oChurchlifeActivity = t_mcla != null ? t_mcla.ChurchlifeActivity : null,
                                           oChurchEvent = t_mcla != null ? t_mcla.ChurchEvent : null,
                                           ///
                                          /// strMemberChurchlifeActivity_Desc = t_mcla != null ? (t_mcla.ChurchlifeActivity != null ? t_mcla.ChurchlifeActivity.NVPValue : "") : "",  // activity name cud be only string
                                          // strRequirementDefTask = t_mcet != null ? (t_mcet.ActivityRequirementDef != null ? t_mcet.ActivityRequirementDef.NVPValue : "") : "",  // activity name cud be only string
                                           
                                           strRequirementDefTask = t_clard != null ? t_clard.NVPValue : "",  // activity name cud be only string
                                           
                                           strMCLARoleDesc = (t_mcr != null ? (t_mcr.ChurchMember != null ? GetConcatMemberName(t_mcr.ChurchMember.Title, t_mcr.ChurchMember.FirstName, t_mcr.ChurchMember.MiddleName, t_mcr.ChurchMember.LastName, true, true, false, false, true) : "") : "") +
                                                            (t_mcr != null ? (t_mcr.ChurchRole != null ? ", " + t_mcr.ChurchRole.Name : "") : ""),  // [Dr. Sam Darteh, Counselor] 
                                           strChurchlifeActivity = t_mcla != null ? (t_mcla.ChurchlifeActivity != null ? t_mcla.ChurchlifeActivity.NVPValue : "") : "",  // activity name cud be only string
                                           strDateCommenced = t_mcet.DateCommenced != null ? String.Format("{0:d MMM yyyy}", t_mcet.DateCommenced) : "",
                                           strDateCompleted = t_mcet.DateCompleted != null ? String.Format("{0:d MMM yyyy}", t_mcet.DateCompleted) : "",
                                           //strDateDesc = (t_mcet.DateCommenced != null) && (t_mcet.DateCompleted != null) ? ((t_mcet.DateCommenced != null ? String.Format("{0:MMM yyyy}", t_mcet.DateCommenced) : "") + " - " + (t_mcet.DateCommenced != null ? String.Format("{0:MMM yyyy}", t_mcet.DateCompleted) : "")) :
                                           //             (t_mcet.DateCommenced != null ? "Since " + String.Format("{0:d MMM yyyy}", t_mcet.DateCommenced) : "") + ("Until " + t_mcet.DateCommenced != null ? String.Format("{0:d MMM yyyy}", t_mcet.DateCompleted) : ""),
 
                                           strStatus = GetTaskStatusDesc(t_mcet.TaskStatus),     //  P-Pending, I-In Progress, D-Deactive, Complete
                                            
                                           strDateDesc = (t_mcet.DateCommenced != null) && (t_mcet.DateCompleted != null) ? ((t_mcet.DateCommenced != null ? String.Format("{0:d MMM yyyy}", t_mcet.DateCommenced) : "") + " - " + (t_mcet.DateCommenced != null ? String.Format("{0:d MMM yyyy}", t_mcet.DateCompleted) : "")) :
                                            (t_mcet.DateCommenced != null ? "Begun " + String.Format("{0:d MMM yyyy}", t_mcet.DateCommenced) : "") + ("Ended " + t_mcet.DateCommenced != null ? String.Format("{0:d MMM yyyy}", t_mcet.DateCompleted) : ""),


                                             // [Sam - Wedding - 22 Dec 2013]
                                           // strMemberChurchlifeActivity_Desc = (t_mcla != null ? (t_mcla.ChurchMember != null ? GetConcatMemberName(t_mcla.ChurchMember.Title, t_mcla.ChurchMember.FirstName, t_mcla.ChurchMember.MiddleName, t_mcla.ChurchMember.LastName, true, true, false, false, true) : "") : "") + " - " +
                                            
                                            strMemberChurchlifeActivity_Desc = (t_mcla != null ? (t_mcla.ChurchlifeActivity != null ? ", " + t_mcla.ChurchlifeActivity.NVPValue : "") : "") + " - " +
                                                                                (t_mcla.EventDate != null ? String.Format("{0:d MMM yyyy}", t_mcla.EventDate) : ""),  // [Dr. Sam Darteh, Counselor] 
                                            

                                           strOwnStatus = t_mcet.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                           ///

                                           strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                           strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                                       })
                                        .ToList();

                        // 
                        if (oMCET_List.Count > 0)
                            oMCET_List.OrderByDescending(c => c.oMemberChurchlifeEventTask.DateCompleted).ThenByDescending(c => c.oMemberChurchlifeEventTask.DateCommenced).ThenBy(c => c.strChurchlifeActivity) //(c.oMemberChurchlifeActivity != null ? c.oMemberChurchlifeActivity.EventDate : (DateTime?)null))                    
                                .ToList();
                      

                return oMCET_List;

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        private MemberChurchlifeAllModel GetMemberChurchlifeAll(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, int? oParMCLAid = null, int sb_ndx = 0, bool inclExtCBData = true, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;
                MemberChurchlifeAllModel oMCL_Model = new MemberChurchlifeAllModel();

                /// behaves like the pers_info but keep history cos... date joined for CB1 may not be same sa date joined for CB2
                if (sb_ndx == 0 || sb_ndx == 0 || sb_ndx == 1)
                {
                    /// get the MCLA--MCL data of this member... current ones + history across CBs in denomination 
                    ///
                    var oMCL_List_All = _context.MemberChurchlife.AsNoTracking().Include(t => t.ChurchBody)
                                            .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid &&
                                            ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                            (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                            .ToList();

                    // filter ...
                    if (inclExtCBData == true)
                    {
                        oMCL_List_All = oMCL_List_All.Where(c =>
                              (c.ChurchBodyId == oCurrCB.Id ||
                              (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                              (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                              ))
                            .ToList();
                    }


                    oMCL_Model.oMemberChurchlifeModel = (
                                   from t_mcl in oMCL_List_All  //_context.MemberChurchlife.AsNoTracking() //.Include(t => t.Nationality).Include(t => t.MotherTongue).Include(t => t.IdType).Include(t => t.HometownRegion)
                                                                //.Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid)
                                   from t_cbs in _context.ChurchBodyService.AsNoTracking().Where(x => x.AppGlobalOwnerId == t_mcl.AppGlobalOwnerId && x.ChurchBodyId == t_mcl.ChurchBodyId && x.Id == t_mcl.ChurchBodyServiceId).DefaultIfEmpty()
                                   from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_mcl.AppGlobalOwnerId && c.Id == t_mcl.ChurchBodyId)  //

                                   select new MemberChurchlifeModel()
                                   {
                                       oAppGloOwnId = t_mcl.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                       oChurchBodyId = t_mcl.ChurchBodyId, /// oChurchBody = t_cb,
                                       oChurchMemberId = t_mcl.ChurchMemberId, /// oChurchMember = t_cm, 
                                            ///
                                       oMemberChurchlife = t_mcl,
                                       strChurchBodyService = t_cbs != null ? t_cbs.ServiceName : "",
                                       strJoinedDate = t_mcl.DateJoined != null ? String.Format("{0:d MMM yyyy}", t_mcl.DateJoined) : "",
                                       strDepartedDate = t_mcl.DateDeparted != null ? String.Format("{0:d MMM yyyy}", t_mcl.DateDeparted) : "",
                                       strAvailStatus = t_mcl.IsCurrentMember ? "Current Member" : "Past Member",
                                       strOwnStatus = t_mcl.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                       ///
                                     
                                       strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                       strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                                   })
                                   .FirstOrDefault();
                }


                if (sb_ndx == 0 || sb_ndx == 0 || sb_ndx == 2)
                {
                    // GET list of CLA ... use the CB sent over... cos ChurchExplorer allows other CBs to navigate other sub members than looged in CB

                    /// get the MCLA--MCLAc data of this member... current ones + history across CBs in denomination 
                    ///
                    var oMCLAc_List_All = _context.MemberChurchlifeActivity.AsNoTracking().Include(t => t.ChurchBody)
                                            .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid &&
                                            ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                            (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                            .ToList();

                    // filter ...
                    if (inclExtCBData == true)
                    {
                        oMCLAc_List_All = oMCLAc_List_All.Where(c =>
                              (c.ChurchBodyId == oCurrCB.Id ||
                              (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                              (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                              ))
                            .ToList();
                    }


                    //var oCLA_List_All = _context.AppUtilityNVP.AsNoTracking()
                    //                     .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.NVPCode == "CLA")  // && c.NVPStatus == "A"
                    //                    .ToList();

                    //oCLA_List_All = oCLA_List_All.Where(c =>
                    //                       (c.OwnedByChurchBodyId == oCurrCB.Id ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCurrCB.ParentChurchBodyId) ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCurrCB)))) ///this._oLoggedCB
                    //                .ToList();


                    /// -- for performance, reduce query mappings ... only look for the units paired up with selected t_mcla 
                    oMCL_Model.oMemberChurchlifeActivityModel = new MemberChurchlifeActivityModel()
                    {
                        oAppGloOwnId = oAGOid,
                        oChurchBodyId = oCBid,
                        oChurchMemberId = oCMid,
                        ///
                        lsMemberChurchlifeActivityModels = (
                                   from t_mcla in oMCLAc_List_All //_context.MemberChurchlifeActivity.AsNoTracking() //.Include(t => t.Nationality).Include(t => t.MotherTongue).Include(t => t.IdType).Include(t => t.HometownRegion)
                                        .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid)
                                   from t_cla in _context.AppUtilityNVP.AsNoTracking().Where(x => x.AppGlobalOwnerId == t_mcla.AppGlobalOwnerId && x.ChurchBodyId == t_mcla.ChurchBodyId && x.Id == t_mcla.ChurchlifeActivityId)
                                   from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_mcla.AppGlobalOwnerId && c.Id == t_mcla.ChurchBodyId)
                                      
                                   select new MemberChurchlifeActivityModel()
                                   {
                                       oAppGloOwnId = t_mcla.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                       oChurchBodyId = t_mcla.ChurchBodyId, /// oChurchBody = t_cb,
                                       oChurchMemberId = t_mcla.ChurchMemberId, /// oChurchMember = t_cm, 
                                                                                ///
                                       oMemberChurchlifeActivity = t_mcla,
                                       strChurchlifeActivity = t_cla != null ? t_cla.NVPValue : "",  // activity name cud be only string
                                       strActivityDate = t_mcla.EventDate != null ? String.Format("{0:d MMM yyyy}", t_mcla.EventDate) : "",

                                       strOwnStatus = t_mcla.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                       ///
                                        strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                       strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                                   }).ToList()
                    };
                     

                    // 
                    if (oMCL_Model.oMemberChurchlifeActivityModel.lsMemberChurchlifeActivityModels.Count > 0)
                        oMCL_Model.oMemberChurchlifeActivityModel.lsMemberChurchlifeActivityModels
                            .OrderByDescending(c => c.oMemberChurchlifeActivity.EventDate).ThenBy(c => c.strChurchlifeActivity) //(c.oMemberChurchlifeActivity != null ? c.oMemberChurchlifeActivity.EventDate : (DateTime?)null))                    
                            .ToList();
                }

                // CLA tasks or requirement
                if (sb_ndx == 0 || sb_ndx == 0 || sb_ndx == 3)  // for specific CLA... oParMCLAid
                {
                    // GET list of CLA ... use the CB sent over... cos ChurchExplorer allows other CBs to navigate other sub members than looged in CB
                    //if (oMCL_Model.lsMemberChurchlifeActivityModels.Count > 0)
                    //{
                        /// get the MCLA--MCLAc data of this member... current ones + history across CBs in denomination 
                        ///
                        var oMCET_List_All = _context.MemberChurchlifeEventTask.AsNoTracking().Include(t => t.ChurchBody)
                                                .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid && c.MemberChurchlifeActivityId == oParMCLAid &&
                                                ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                                (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                                .ToList();

                        // filter ...
                        if (inclExtCBData == true)
                        {
                            oMCET_List_All = oMCET_List_All.Where(c =>
                                  (c.ChurchBodyId == oCurrCB.Id ||
                                  (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                                  (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                                  ))
                                .ToList();
                        }

                    //var oCLA_List_All = _context.AppUtilityNVP.AsNoTracking().Include(t=> t.OwnedByChurchBody)
                    //                 .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.NVPCode == "CLA" && c.NVPStatus == "A")
                    //                .ToList();

                    //oCLA_List_All = oCLA_List_All.Where(c =>
                    //                       (c.OwnedByChurchBodyId == oCurrCB.Id ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCurrCB.ParentChurchBodyId) ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCurrCB)))) ///this._oLoggedCB
                    //            .ToList();


                    /// -- for performance, reduce query mappings ... only look for the units paired up with selected MCERTs 
                    oMCL_Model.oMemberChurchlifeEventTaskModel = new MemberChurchlifeEventTaskModel()
                    {
                        oAppGloOwnId = oAGOid,
                        oChurchBodyId = oCBid,
                        oChurchMemberId = oCMid,
                        ///
                        lsMemberChurchlifeEventTaskModels = (
                                 from t_mcet in oMCET_List_All //_context.MemberChurchlifeEventTask.AsNoTracking().Include(t => t.ActivityRequirementDef) //.Include(t => t.MemberChurchRole) //.ThenInclude(t => t.ChurchRole)
                                                               // .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid && c.MemberChurchlifeActivityId == oParMCLAid)
                                 from t_mcla in _context.MemberChurchlifeActivity.AsNoTracking().Include(t => t.ChurchlifeActivity).Include(t => t.ChurchEvent).Include(t => t.ChurchMember)
                                      .Where(x => x.AppGlobalOwnerId == t_mcet.AppGlobalOwnerId && x.ChurchBodyId == t_mcet.ChurchBodyId && x.Id == t_mcet.MemberChurchlifeActivityId)  //.DefaultIfEmpty()  // CANNOT BE EMPTY
                                 from t_mcr in _context.MemberChurchRole.AsNoTracking().Include(t => t.ChurchRole).Include(t => t.ChurchMember)
                                      .Where(x => x.AppGlobalOwnerId == t_mcet.AppGlobalOwnerId && x.ChurchBodyId == t_mcet.ChurchBodyId && x.Id == t_mcet.MemberChurchRoleId).DefaultIfEmpty()
                                  from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_mcet.AppGlobalOwnerId && c.Id == t_mcet.ChurchBodyId)
                                       
                                 select new MemberChurchlifeEventTaskModel()
                                 {
                                     oAppGloOwnId = t_mcet.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                     oChurchBodyId = t_mcet.ChurchBodyId, /// oChurchBody = t_cb,
                                     oChurchMemberId = t_mcet.ChurchMemberId, /// oChurchMember = t_cm, 
                                                                              ///
                                     oMemberChurchlifeEventTask = t_mcet,

                                     oChurchlifeActivityReqDef = t_mcet.ActivityRequirementDef,
                                     oMemberChurchRole = t_mcet.MemberChurchRole,
                                     oChurchlifeActivity = t_mcla != null ? t_mcla.ChurchlifeActivity : null,
                                     oChurchEvent = t_mcla != null ? t_mcla.ChurchEvent : null,
                                     ///
                                     // [Sam - Wedding - 22 Dec 2013]
                                     strMemberChurchlifeActivity_Desc = (t_mcla != null ? (t_mcla.ChurchMember != null ? GetConcatMemberName(t_mcla.ChurchMember.Title, t_mcla.ChurchMember.FirstName, t_mcla.ChurchMember.MiddleName, t_mcla.ChurchMember.LastName, true, true, false, false, true) : "") : "") + " - " +
                                                (t_mcla != null ? (t_mcla.ChurchlifeActivity != null ? ", " + t_mcla.ChurchlifeActivity.NVPValue : "") : "") + " - " +
                                                (t_mcla.EventDate != null ? String.Format("{0:d MMM yyyy}", t_mcla.EventDate) : ""),  // [Dr. Sam Darteh, Counselor] 

                                     //strMCLADesc = t_mcla != null ? (t_mcla.ChurchlifeActivity != null ? t_mcla.ChurchlifeActivity.NVPValue : "") : "",  // activity name cud be only string
                                     strRequirementDefTask = t_mcet != null ? (t_mcet.ActivityRequirementDef != null ? t_mcet.ActivityRequirementDef.NVPValue : "") : "",  // activity name cud be only string
                                     strMCLARoleDesc = (t_mcr != null ? (t_mcr.ChurchMember != null ? GetConcatMemberName(t_mcr.ChurchMember.Title, t_mcr.ChurchMember.FirstName, t_mcr.ChurchMember.MiddleName, t_mcr.ChurchMember.LastName, true, true, false, false, true) : "") : "") +
                                                (t_mcr != null ? (t_mcr.ChurchRole != null ? ", " + t_mcr.ChurchRole.Name : "") : ""),  // [Dr. Sam Darteh, Counselor] 
                                     
                                     strChurchlifeActivity = t_mcla != null ? (t_mcla.ChurchlifeActivity != null ? t_mcla.ChurchlifeActivity.NVPValue : "") : "",  // activity name cud be only string
                                      

                                     strDateCommenced = t_mcet.DateCommenced != null ? String.Format("{0:d MMM yyyy}", t_mcet.DateCommenced) : "",
                                     strDateCompleted = t_mcet.DateCompleted != null ? String.Format("{0:d MMM yyyy}", t_mcet.DateCompleted) : "",
                                     strStatus = GetTaskStatusDesc(t_mcet.TaskStatus),     //  P-Pending, I-In Progress, D-Deactive, Complete
                                     strOwnStatus = t_mcet.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                     ///
                                     strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                     strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                                 }).ToList()
                    };

                    // 
                    if (oMCL_Model.oMemberChurchlifeEventTaskModel.lsMemberChurchlifeEventTaskModels.Count > 0)
                            oMCL_Model.oMemberChurchlifeEventTaskModel.lsMemberChurchlifeEventTaskModels
                                .OrderByDescending(c => c.oMemberChurchlifeEventTask.DateCompleted).ThenByDescending(c => c.oMemberChurchlifeEventTask.DateCommenced).ThenBy(c => c.strChurchlifeActivity)
                                .ToList();
                   /// }
                }
                 

                return oMCL_Model;

            }
            catch (Exception ex)
            {
                return null;
            }
        }


        // 12 ... Type [13.1], Rank [13.2], Status [13.3]
        private List<MemberTypeModel> GetMemberType(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, bool inclExtCBData = true, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null; 

                //// Type
                // GET list of CLA ... use the CB sent over... cos ChurchExplorer allows other CBs to navigate other sub members than looged in CB
 
                    /// get the MCM--MT data of this member... current ones + history across CBs in denomination 
                    ///
                    var oMT_List_All = _context.MemberType.AsNoTracking().Include(t => t.ChurchBody)
                                            .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid &&
                                            ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                            (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                            .ToList();

                    // filter ...
                    if (inclExtCBData == true)
                    {
                        oMT_List_All = oMT_List_All.Where(c =>
                              (c.ChurchBodyId == oCurrCB.Id ||
                              (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                              (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                              ))
                            .ToList();
                    }


                    //var oCMT_List_All = _context.AppUtilityNVP.AsNoTracking().Include (t=>t.OwnedByChurchBody)
                    //                     .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.NVPCode == "CMT")  // && c.NVPStatus == "A"
                    //                    .ToList();

                    //oCMT_List_All = oCMT_List_All.Where(c =>
                    //                       (c.OwnedByChurchBodyId == oCurrCB.Id ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCurrCB.ParentChurchBodyId) ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCurrCB)))) ///this._oLoggedCB
                    //                    .ToList();


                    /// -- for performance, reduce query mappings ... only look for the units paired up with selected MTs 
                    var oMT_List = (
                                   from t_mt in oMT_List_All  //_context.MemberType.AsNoTracking() .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid)
                                  // from t_cmt in _context.AppUtilityNVP.AsNoTracking().Where(x => x.AppGlobalOwnerId == t_mt.AppGlobalOwnerId && x.ChurchBodyId == t_mt.ChurchBodyId && x.Id == t_mt.ChurchMemTypeId)
                                   from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_mt.AppGlobalOwnerId && c.Id == t_mt.ChurchBodyId)
                                      
                                   select new MemberTypeModel()
                                   {
                                       oAppGloOwnId = t_mt.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                       oChurchBodyId = t_mt.ChurchBodyId, /// oChurchBody = t_cb,
                                       oChurchMemberId = t_mt.ChurchMemberId, /// oChurchMember = t_cm,
                                                                              /// 
                                       oMemberType = t_mt,
                                       strChurchMemType = GetMemTypeDesc (t_mt.MemberTypeCode)  ,  // t_cmt != null ? t_cmt.NVPValue : "",  // name cud be only string
                                       strFromDate = t_mt.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mt.FromDate) : "",
                                       strToDate = t_mt.ToDate != null ? String.Format("{0:d MMM yyyy}", t_mt.ToDate) : "",
                                       strDateDesc = (t_mt.FromDate != null) && (t_mt.ToDate != null) ? ((t_mt.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mt.FromDate) : "") + " - " + (t_mt.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mt.ToDate) : "")) :
                                            (t_mt.FromDate != null ? "Since " + String.Format("{0:d MMM yyyy}", t_mt.FromDate) : "") + ("Until " + t_mt.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mt.ToDate) : ""),
 
                                       strAvailStatus = t_mt.IsCurrent ? "Current" : "Past",
                                       strOwnStatus = t_mt.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                       ///
                                        strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                       strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                                   })
                                    .ToList();

                    // 
                    if (oMT_List.Count > 0)
                        oMT_List .OrderByDescending(c => c.oMemberType.FromDate)
                            .ThenByDescending(c => c.oMemberType.ToDate)
                            .ThenBy(c => c.strChurchMemType)
                            .ToList();
               
                 

                return oMT_List;

            }

            catch (Exception ex)
            {
                return null;
            }
        }

        private List<MemberRankModel> GetMemberRank(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, bool inclExtCBData = true, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;
                MemberChurchMovementModel oMCM_Model = new MemberChurchMovementModel();

                //// Type 
                //// rank
                // GET list of CLA ... use the CB sent over... cos ChurchExplorer allows other CBs to navigate other sub members than looged in CB

                
                    /// get the MCM--MR data of this member... current ones + history across CBs in denomination 
                    ///
                    var oMR_List_All = _context.MemberRank.AsNoTracking().Include(t => t.ChurchBody)
                                            .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid &&
                                            ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                            (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                            .ToList();

                    // filter ...
                    if (inclExtCBData == true)
                    {
                        oMR_List_All = oMR_List_All.Where(c =>
                              (c.ChurchBodyId == oCurrCB.Id ||
                              (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                              (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                              ))
                            .ToList();
                    }

                    //var oCR_List_All = _context.AppUtilityNVP.AsNoTracking()
                    //                     .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.NVPCode == "CR" && c.NVPStatus=="A")
                    //                    .ToList();

                    //oCR_List_All = oCR_List_All.Where(c =>
                    //                       (c.OwnedByChurchBodyId == oCurrCB.Id ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCurrCB.ParentChurchBodyId) ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCurrCB)))) ///this._oLoggedCB
                    //                    .ToList();

                    /// -- for performance, reduce query mappings ... only look for the units paired up with selected MCRs 
                    var oMR_List = (
                                   from t_mr in oMR_List_All // _context.MemberRank.AsNoTracking() .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid)
                                   from t_cr in _context.AppUtilityNVP.AsNoTracking().Where(x => x.AppGlobalOwnerId == t_mr.AppGlobalOwnerId && x.NVPCode == "CR" && x.Id == t_mr.ChurchRankId).DefaultIfEmpty()   // x.ChurchBodyId == t_mr.ChurchBodyId && 
                                   from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_mr.AppGlobalOwnerId && c.Id == t_mr.ChurchBodyId)
                                      
                                   select new MemberRankModel()
                                   {
                                       oAppGloOwnId = t_mr.AppGlobalOwnerId,    /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                       oChurchBodyId = t_mr.ChurchBodyId,       /// oChurchBody = t_cb,
                                       oChurchMemberId = t_mr.ChurchMemberId,   /// oChurchMember = t_cm,
                                                                                /// 
                                       oMemberRank = t_mr,
                                       strChurchRank = t_cr != null ? t_cr.NVPValue : "N/A",  // name cud be only string
                                       strFromDate = t_mr.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mr.FromDate) : "",
                                       strToDate = t_mr.ToDate != null ? String.Format("{0:d MMM yyyy}", t_mr.ToDate) : "",
                                       strDateDesc = (t_mr.FromDate != null) && (t_mr.ToDate != null) ? ((t_mr.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mr.FromDate) : "") + " - " + (t_mr.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mr.ToDate) : "")) :
                                                (t_mr.FromDate != null ? "Since " + String.Format("{0:d MMM yyyy}", t_mr.FromDate) : "") + ("Until " + t_mr.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mr.ToDate) : ""),
                                                 
                                       strAvailStatus = t_mr.IsCurrentRank ? "Current" : "Past",
                                       strOwnStatus = t_mr.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                       ///
                                        strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                       strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                                   })
                                    .ToList();

                    // 
                    if (oMR_List.Count > 0)
                        oMR_List.OrderByDescending(c => c.oMemberRank.FromDate) //(c.oMemberRank != null ? c.oMemberRank.Assigned : (DateTime?)null))
                            .ThenByDescending(c => c.oMemberRank.ToDate) // (c.oMemberRank != null ? c.oMemberRank.Until : (DateTime?)null))
                            .ThenBy(c => c.strChurchRank)
                            .ToList();
             
                 

                return oMR_List;

            }

            catch (Exception ex)
            {
                return null;
            }
        }

        private List<MemberStatusModel> GetMemberStatus(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, bool inclExtCBData = true, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;
               
                //// Type 
                //// Status
                // GET list of CLA ... use the CB sent over... cos ChurchExplorer allows other CBs to navigate other sub members than looged in CB

                /// get the MCM--MS data of this member... current ones + history across CBs in denomination 
                    ///
                    var oMS_List_All = _context.MemberStatus.AsNoTracking().Include(t => t.ChurchBody)
                                            .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid &&
                                            ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                            (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                            .ToList();

                    // filter ...
                    if (inclExtCBData == true)
                    {
                        oMS_List_All = oMS_List_All.Where(c =>
                              (c.ChurchBodyId == oCurrCB.Id ||
                              (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                              (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                              ))
                            .ToList();
                    }

                    //var oCMS_List_All = _context.AppUtilityNVP.AsNoTracking()
                    //                     .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.NVPCode == "CMS" && c.NVPStatus == "A")
                    //                    .ToList();

                    //oCMS_List_All = oCMS_List_All.Where(c =>
                    //                       (c.OwnedByChurchBodyId == oCurrCB.Id ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCurrCB.ParentChurchBodyId) ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCurrCB)))) ///this._oLoggedCB
                    //                    .ToList();


                    /// -- for performance, reduce query mappings ... only look for the units paired up with selected MCUs 
                    var oMS_List = (
                                   from t_ms in oMS_List_All // _context.MemberStatus.AsNoTracking() .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid)
                                   from t_cms in _context.AppUtilityNVP.AsNoTracking().Where(x => x.AppGlobalOwnerId == t_ms.AppGlobalOwnerId && x.NVPCode == "CMS" && x.Id == t_ms.ChurchMemStatusId)   ///x.ChurchBodyId == t_ms.ChurchBodyId && 
                                   from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_ms.AppGlobalOwnerId && c.Id == t_ms.ChurchBodyId)
                                       
                                   select new MemberStatusModel()
                                   {
                                       oAppGloOwnId = t_ms.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                       oChurchBodyId = t_ms.ChurchBodyId, /// oChurchBody = t_cb,
                                       oChurchMemberId = t_ms.ChurchMemberId, /// oChurchMember = t_cm,
                                                                              /// 
                                       oMemberStatus = t_ms,
                                       strChurchMemStatus = t_ms != null ? t_cms.NVPValue : "",  // name cud be only string
                                       strFromDate = t_ms.FromDate != null ? String.Format("{0:d MMM yyyy}", t_ms.FromDate) : "",
                                       strToDate = t_ms.ToDate != null ? String.Format("{0:d MMM yyyy}", t_ms.ToDate) : "",
                                       strDateDesc = (t_ms.FromDate != null) && (t_ms.ToDate != null) ? ((t_ms.FromDate != null ? String.Format("{0:d MMM yyyy}", t_ms.FromDate) : "") + " - " + (t_ms.FromDate != null ? String.Format("{0:d MMM yyyy}", t_ms.ToDate) : "")) :
                                                (t_ms.FromDate != null ? "Since " + String.Format("{0:d MMM yyyy}", t_ms.FromDate) : "") + ("Until " + t_ms.FromDate != null ? String.Format("{0:d MMM yyyy}", t_ms.ToDate) : ""),

                                       strAvailStatus = t_ms.IsCurrent ? "Current" : "Past",
                                       strOwnStatus = t_ms.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                       ///
                                       strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                       strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                                   })
                                    .ToList();

                    // 
                    if (oMS_List.Count > 0)
                    oMS_List .OrderByDescending(c => c.oMemberStatus.FromDate) //(c.oMemberStatus != null ? c.oMemberStatus.Since : (DateTime?)null))
                            .ThenByDescending(c => c.oMemberStatus.ToDate) //(c.oMemberStatus != null ? c.oMemberStatus.Until : (DateTime?)null))
                            .ThenBy(c => c.strChurchMemStatus)
                            .ToList();
                

                return oMS_List;

            }

            catch (Exception ex)
            {
                return null;
            }
        }

        private MemberChurchMovementModel GetMemberChurchMovement(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, int sb_ndx = 0, bool inclExtCBData = true, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;
                MemberChurchMovementModel oMCM_Model = new MemberChurchMovementModel();

                //// Type
                // GET list of CLA ... use the CB sent over... cos ChurchExplorer allows other CBs to navigate other sub members than looged in CB

                if (sb_ndx == 0 || sb_ndx == 1)  // 0-all, 1-MT, 2-MR, 3-MS
                {
                    /// get the MCM--MT data of this member... current ones + history across CBs in denomination 
                    ///
                    var oMT_List_All = _context.MemberType.AsNoTracking().Include(t => t.ChurchBody)
                                            .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid &&
                                            ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                            (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                            .ToList();

                    // filter ...
                    if (inclExtCBData == true)
                    {
                        oMT_List_All = oMT_List_All.Where(c =>
                              (c.ChurchBodyId == oCurrCB.Id ||
                              (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                              (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                              ))
                            .ToList();
                    }


                    //var oCMT_List_All = _context.AppUtilityNVP.AsNoTracking().Include (t=>t.OwnedByChurchBody)
                    //                     .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.NVPCode == "CMT")  // && c.NVPStatus == "A"
                    //                    .ToList();

                    //oCMT_List_All = oCMT_List_All.Where(c =>
                    //                       (c.OwnedByChurchBodyId == oCurrCB.Id ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCurrCB.ParentChurchBodyId) ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCurrCB)))) ///this._oLoggedCB
                    //                    .ToList();


                    /// -- for performance, reduce query mappings ... only look for the units paired up with selected MTs 
                    oMCM_Model.oMemberTypeModel = new MemberTypeModel()
                    {
                        oAppGloOwnId = oAGOid,
                        oChurchBodyId = oCBid,
                        oChurchMemberId = oCMid,
                        ///
                        lsMemberTypeModels = (
                                   from t_mt in oMT_List_All  //_context.MemberType.AsNoTracking() .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid)
                                  // from t_cmt in _context.AppUtilityNVP.AsNoTracking().Where(x => x.AppGlobalOwnerId == t_mt.AppGlobalOwnerId && x.ChurchBodyId == t_mt.ChurchBodyId && x.Id == t_mt.ChurchMemTypeId)
                                   from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_mt.AppGlobalOwnerId && c.Id == t_mt.ChurchBodyId)
                                     
                                   select new MemberTypeModel()
                                   {
                                       oAppGloOwnId = t_mt.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                       oChurchBodyId = t_mt.ChurchBodyId, /// oChurchBody = t_cb,
                                       oChurchMemberId = t_mt.ChurchMemberId, /// oChurchMember = t_cm,
                                          ///
                                       oMemberType = t_mt,
                                       strChurchMemType = GetMemTypeDesc(t_mt.MemberTypeCode),  // t_cmt != null ? t_cmt.NVPValue : "",  // name cud be only string
                                       strFromDate = t_mt.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mt.FromDate) : "",
                                       strToDate = t_mt.ToDate != null ? String.Format("{0:d MMM yyyy}", t_mt.ToDate) : "",

                                       strAvailStatus = t_mt.IsCurrent ? "Current" : "Past",
                                       strOwnStatus = t_mt.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                       ///
                                       strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                       strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                                   }).ToList()
                    }; 

                    // 
                    if (oMCM_Model.oMemberTypeModel.lsMemberTypeModels.Count > 0)
                        oMCM_Model.oMemberTypeModel.lsMemberTypeModels
                            .OrderByDescending(c => (c.oMemberType != null ? c.oMemberType.FromDate : (DateTime?)null))
                            .ThenByDescending(c => (c.oMemberType != null ? c.oMemberType.ToDate : (DateTime?)null))
                            .ThenBy(c => c.strChurchMemType)
                            .ToList();
                }


                //// rank
                // GET list of CLA ... use the CB sent over... cos ChurchExplorer allows other CBs to navigate other sub members than looged in CB

                if (sb_ndx == 0 || sb_ndx == 2) // 0-all, 1-MT, 2-MR, 3-MS
                {
                    /// get the MCM--MR data of this member... current ones + history across CBs in denomination 
                    ///
                    var oMR_List_All = _context.MemberRank.AsNoTracking().Include(t => t.ChurchBody)
                                            .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid &&
                                            ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                            (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                            .ToList();

                    // filter ...
                    if (inclExtCBData == true)
                    {
                        oMR_List_All = oMR_List_All.Where(c =>
                              (c.ChurchBodyId == oCurrCB.Id ||
                              (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                              (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                              ))
                            .ToList();
                    }

                    //var oCR_List_All = _context.AppUtilityNVP.AsNoTracking()
                    //                     .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.NVPCode == "CR" && c.NVPStatus=="A")
                    //                    .ToList();

                    //oCR_List_All = oCR_List_All.Where(c =>
                    //                       (c.OwnedByChurchBodyId == oCurrCB.Id ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCurrCB.ParentChurchBodyId) ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCurrCB)))) ///this._oLoggedCB
                    //                    .ToList();

                    /// -- for performance, reduce query mappings ... only look for the units paired up with selected MCRs 
                    oMCM_Model.oMemberRankModel = new MemberRankModel()
                    {
                        oAppGloOwnId = oAGOid,
                        oChurchBodyId = oCBid,
                        oChurchMemberId = oCMid,
                        ///

                        lsMemberRankModels = (
                                   from t_mr in oMR_List_All // _context.MemberRank.AsNoTracking() .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid)
                                   from t_cr in _context.AppUtilityNVP.AsNoTracking().Where(x => x.AppGlobalOwnerId == t_mr.AppGlobalOwnerId && x.ChurchBodyId == t_mr.ChurchBodyId && x.Id == t_mr.ChurchRankId)
                                    from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_mr.AppGlobalOwnerId && c.Id == t_mr.ChurchBodyId)
                                      
                                   select new MemberRankModel()
                                   {
                                       oAppGloOwnId = t_mr.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                       oChurchBodyId = t_mr.ChurchBodyId, /// oChurchBody = t_cb,
                                       oChurchMemberId = t_mr.ChurchMemberId, /// oChurchMember = t_cm,
                                                                              /// 
                                       oMemberRank = t_mr,
                                       strChurchRank = t_cr != null ? t_cr.NVPValue : "",  // name cud be only string
                                       strFromDate = t_mr.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mr.FromDate) : "",
                                       strToDate = t_mr.ToDate != null ? String.Format("{0:d MMM yyyy}", t_mr.ToDate) : "",

                                       strAvailStatus = t_mr.IsCurrentRank ? "Current" : "Past",
                                       strOwnStatus = t_mr.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                       ///
                                        strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                       strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                                   })
                                    .ToList()
                    };
                     

                // 
                if (oMCM_Model.oMemberRankModel.lsMemberRankModels.Count > 0)
                    oMCM_Model.oMemberRankModel.lsMemberRankModels
                        .OrderByDescending(c => c.oMemberRank.FromDate) //(c.oMemberRank != null ? c.oMemberRank.Assigned : (DateTime?)null))
                        .ThenByDescending(c => c.oMemberRank.ToDate) // (c.oMemberRank != null ? c.oMemberRank.Until : (DateTime?)null))
                        .ThenBy(c => c.strChurchRank) 
                        .ToList();
                }


                //// Status
                // GET list of CLA ... use the CB sent over... cos ChurchExplorer allows other CBs to navigate other sub members than looged in CB

                if (sb_ndx == 0 || sb_ndx == 3)
                {
                    /// get the MCM--MS data of this member... current ones + history across CBs in denomination 
                    ///
                    var oMS_List_All = _context.MemberStatus.AsNoTracking().Include(t => t.ChurchBody)
                                            .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid &&
                                            ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                            (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                            .ToList();

                    // filter ...
                    if (inclExtCBData == true)
                    {
                        oMS_List_All = oMS_List_All.Where(c =>
                              (c.ChurchBodyId == oCurrCB.Id ||
                              (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                              (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                              ))
                            .ToList();
                    }

                    //var oCMS_List_All = _context.AppUtilityNVP.AsNoTracking()
                    //                     .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.NVPCode == "CMS" && c.NVPStatus == "A")
                    //                    .ToList();

                    //oCMS_List_All = oCMS_List_All.Where(c =>
                    //                       (c.OwnedByChurchBodyId == oCurrCB.Id ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCurrCB.ParentChurchBodyId) ||
                    //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCurrCB)))) ///this._oLoggedCB
                    //                    .ToList();


                    /// -- for performance, reduce query mappings ... only look for the units paired up with selected MCUs 
                    oMCM_Model.oMemberStatusModel = new MemberStatusModel()
                    {
                        oAppGloOwnId = oAGOid,
                        oChurchBodyId = oCBid,
                        oChurchMemberId = oCMid,
                        ///
                        lsMemberStatusModels = (
                                   from t_ms in oMS_List_All // _context.MemberStatus.AsNoTracking() .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid)
                                   from t_cms in _context.AppUtilityNVP.AsNoTracking().Where(x => x.AppGlobalOwnerId == t_ms.AppGlobalOwnerId && x.ChurchBodyId == t_ms.ChurchBodyId && x.Id == t_ms.ChurchMemStatusId)
                                    from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_ms.AppGlobalOwnerId && c.Id == t_ms.ChurchBodyId)
                                       
                                   select new MemberStatusModel()
                                   {
                                       oAppGloOwnId = t_ms.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                       oChurchBodyId = t_ms.ChurchBodyId, /// oChurchBody = t_cb,
                                       oChurchMemberId = t_ms.ChurchMemberId, /// oChurchMember = t_cm,
                                                                              /// 
                                       oMemberStatus = t_ms,
                                       strChurchMemStatus = t_ms != null ? t_cms.NVPValue : "",  // name cud be only string
                                       strFromDate = t_ms.FromDate != null ? String.Format("{0:d MMM yyyy}", t_ms.FromDate) : "",
                                       strToDate = t_ms.ToDate != null ? String.Format("{0:d MMM yyyy}", t_ms.ToDate) : "",

                                       strAvailStatus = t_ms.IsCurrent ? "Current" : "Past",
                                       strOwnStatus = t_ms.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                       ///
                                       strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                       strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                                   }) .ToList()
                    };
                     
                    // 
                    if (oMCM_Model.oMemberStatusModel.lsMemberStatusModels.Count > 0)
                        oMCM_Model.oMemberStatusModel.lsMemberStatusModels
                            .OrderByDescending(c => c.oMemberStatus.FromDate) //(c.oMemberStatus != null ? c.oMemberStatus.Since : (DateTime?)null))
                            .ThenByDescending(c => c.oMemberStatus.ToDate) //(c.oMemberStatus != null ? c.oMemberStatus.Until : (DateTime?)null))
                            .ThenBy(c => c.strChurchMemStatus)
                            .ToList();
                }


                return oMCM_Model;

            }

            catch (Exception ex)
            {
                return null;
            }
        }

        // 13 ...  
        private List<MemberChurchGroupingModel> GetMemberChurchGrouping(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, bool inclExtCBData = true, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;

                if (oCurrCM == null) oCurrCM = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.Id == oCMid).FirstOrDefault();
                if (oCurrCM == null) return new List<MemberChurchGroupingModel>();

                /// get the units of this member... current ones + history across CBs in denomination 
                ///
                var oMCU_List_All = _context.MemberChurchUnit.AsNoTracking().Include(t => t.ChurchBody)
                                        .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && 
                                        c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid &&
                                        ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                        (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                        .ToList();

                // filter ...
                if (inclExtCBData == true)
                {
                    oMCU_List_All = oMCU_List_All.Where(c =>
                          (c.ChurchBodyId == oCurrCB.Id ||
                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                          ))
                        .ToList();
                }

                //var oCU_List_All = _context.ChurchUnit.AsNoTracking()
                //                        .Where(c => c.AppGlobalOwnerId == oAGOid && c.OwnedByChurchBodyId == oCBid && 
                //                        (c.OrgType == "CG" || c.OrgType == "SC"))  // && c.Status == "A"
                //                       .ToList();

                //oCU_List_All = oCU_List_All.Where(c =>
                //                       (c.OwnedByChurchBodyId == oCurrCB.Id ||
                //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCurrCB.ParentChurchBodyId) ||
                //                       (c.OwnedByChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCurrCB)))) ///this._oLoggedCB
                //                        .ToList();


                /// -- for performance, reduce query mappings ... only look for the units paired up with selected MCUs 
                var oMCG_ModelList = (
                               from t_mcu in oMCU_List_All  /// t_mcu in _context.MemberChurchUnit.AsNoTracking() .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid)
                               from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == t_mcu.AppGlobalOwnerId && c.Id == t_mcu.ChurchBodyId)
                               from t_cu in _context.ChurchUnit.AsNoTracking().Where(x => x.AppGlobalOwnerId == t_mcu.AppGlobalOwnerId && x.Id == t_mcu.ChurchUnitId)   // x.OwnedByChurchBodyId == t_mcu.ChurchBodyId && 
                                
                               select new MemberChurchGroupingModel()
                               {
                                   oAppGloOwnId = t_mcu.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                   oChurchBodyId = t_mcu.ChurchBodyId, /// oChurchBody = t_cb,
                                   oChurchMemberId = t_mcu.ChurchMemberId, /// oChurchMember = t_cm,
                                                              ///
                                   oMemberChurchUnit = t_mcu,
                                   strChurchUnit = t_cu != null ? t_cu.Name : "",  // name cud be only string
                                   strOrgType = GetChuOrgTypeDesc(t_cu.OrgType),
                                   strJoinedDate = t_mcu.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mcu.FromDate) : "",
                                   strDepartedDate = t_mcu.ToDate != null ? String.Format("{0:d MMM yyyy}", t_mcu.ToDate) : "",
                                   strDateDesc = (t_mcu.FromDate != null) && (t_mcu.ToDate != null) ? ((t_mcu.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mcu.FromDate) : "") + " - " + (t_mcu.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mcu.ToDate) : "")) :
                                                (t_mcu.FromDate != null ? "Since " + String.Format("{0:d MMM yyyy}", t_mcu.FromDate) : "") + ("Until " + t_mcu.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mcu.ToDate) : ""),

                                   strAvailStatus = t_mcu.IsCurrUnit ? "Current" : "Past",
                                   strOwnStatus = t_mcu.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                                                      
                                   strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                   strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                               })
                                .ToList();

                // 
                if (oMCG_ModelList.Count > 0)
                    oMCG_ModelList
                        .OrderByDescending(c => c.oMemberChurchUnit.FromDate) //(c.oMemberChurchUnit != null ? c.oMemberChurchUnit.DateJoined : (DateTime?)null))
                        .ThenByDescending(c => c.oMemberChurchUnit.ToDate) //(c.oMemberChurchUnit != null ? c.oMemberChurchUnit.DateDeparted : (DateTime?)null))
                        .ThenBy(c => c.strChurchUnit)
                        .ToList();


                return oMCG_ModelList;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        // 14 ...  
        private List<MemberRoleDesigModel> GetMemberRoleDesig(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, bool inclExtCBData = true, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;

                // Role could be in ...
                // church units --- GB-Modertor of GA, IB-Chairperon of Church Board, CO - Secretary at IMD, DP - Director or M&E, 
                // CG-President of Choir, SC-Member of Edu ctee, CE-Manager of Presby Press
                // mainstream CBs --- CR- ??, CH-District Min @dist, CN-Min in chg @cong, 
                ///

                /// church role can be both local or in higher /lower congregations ... actually: role cud be anywhere [history], plus current roles [curr CB or elsewhere within church]
                /// N- Do NOT share, C-share with Child CB only (below), D- Share with all sub congregations [down, descendants],  P- Share with Parent congregation (above), 
                /// H- Share with all parent congregations - oversee [up, ancestor, forefather, Head CB], R- Share with congregations on same ROUTE [line], A- Share with all congregations within denomination [<denom.name>] 
                ///

                if (oCurrCM == null) oCurrCM = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.Id == oCMid).FirstOrDefault();
                if (oCurrCM == null) return new List<MemberRoleDesigModel>();

                /// get the roles of this member... current ones + history across CBs in denomination
                ///
                var oMCR_List_All = _context.MemberChurchRole.AsNoTracking().Include(t => t.ChurchBody)
                                        .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid &&
                                        ((inclExtCBData == false && c.ChurchBodyId == oCBid) || 
                                        (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid ) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                        .ToList();

                // filter ...
                if (inclExtCBData == true)
                {
                    oMCR_List_All = oMCR_List_All.Where(c =>
                          (c.ChurchBodyId == oCurrCB.Id ||
                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                          ))
                        .ToList();
                }
                 

                ///// units roles functioned -- local ... up
                //var oCU_List_All = ( 
                //                        from t_cu in _context.ChurchUnit.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && (c.OrgType != "TM" && c.OrgType != "CP"))   //  && c.Status == "A"
                //                        from t_mcr in oMCR_List_All.Where(c=> c.ChurchBodyId == t_cu.OwnedByChurchBodyId && c.ChurchUnitId == t_cu.Id)
                //                        select t_cu 
                //                       )
                //                       .ToList();

                ///// actual positions held -- local ... up
                //var oCRL_List_All = (
                //                        from t_crl in _context.ChurchRole.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && (c.OrgType == "TM" || c.OrgType == "CP"))   //  && c.Status == "A"
                //                        from t_mcr in oMCR_List_All.Where(c => c.ChurchBodyId == t_crl.OwnedByChurchBodyId && c.ChurchRoleId == t_crl.Id)
                //                        select t_crl
                //                       )
                //                       .ToList();  



                /// -- for performance, reduce query mappings ... only look for the units paired up with selected MCRs
                var oMCR_ModelList = (
                               from t_mcr in oMCR_List_All  
                               from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(x => x.AppGlobalOwnerId == t_mcr.AppGlobalOwnerId && x.Id == t_mcr.ChurchBodyId)
                               from t_crl in _context.ChurchRole.AsNoTracking()  // role could be in other CBs
                                        .Where(x => x.AppGlobalOwnerId == t_mcr.AppGlobalOwnerId && (x.OrgType == "TM" || x.OrgType == "CP") &&
                                                                            x.Id == t_mcr.ChurchRoleId)  // CANNOT BE NULL
                               from t_cb_sec in _context.ChurchBody.AsNoTracking()  // mainstream workers ... ex. pastors   // cb_sec could be other CBs
                                        .Where(x => x.AppGlobalOwnerId == t_mcr.AppGlobalOwnerId && (x.OrgType == "CR" || x.OrgType == "CH" || x.OrgType == "CN") &&
                                                                            t_mcr.IsChurchUnit == false && x.Id == t_mcr.ChurchBodyId).DefaultIfEmpty()  // both must not be null
                               from t_cu_sec in _context.ChurchUnit.AsNoTracking()  // groups or unit workers ex. group leaders   // cu_sec could be in other CBs
                                        .Where(x => x.AppGlobalOwnerId == t_mcr.AppGlobalOwnerId && (x.OrgType != "TM" && x.OrgType != "CP") && 
                                                                            t_mcr.IsChurchUnit == true && x.Id == t_mcr.ChurchUnitId).DefaultIfEmpty()   // both must not be null 
                               
                               select new MemberRoleDesigModel()
                               {
                                   oAppGloOwnId = t_mcr.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                   oChurchBodyId = t_mcr.ChurchBodyId, /// oChurchBody = t_cb,
                                   oChurchMemberId = t_mcr.ChurchMemberId, /// oChurchMember = t_cm,
                                                                           ///
                                   oMemberChurchRole = t_mcr,
                                   strChurchUnit = t_mcr.IsChurchUnit == false ? (t_cb_sec != null ? t_cb_sec.Name : "N/A") : (t_cu_sec != null ? t_cu_sec.Name : "N/A"),  // role area cannot be empty
                                   strChurchRole = t_crl != null ? t_crl.Name : "N/A",   // role itself cannot be empty
                                   strFromDate = t_mcr.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mcr.FromDate) : "", 
                                   strToDate = t_mcr.ToDate != null ? String.Format("{0:d MMM yyyy}", t_mcr.ToDate) : "" ,

                                   strDateDesc = (t_mcr.FromDate != null) && (t_mcr.ToDate != null) ? ((t_mcr.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mcr.FromDate) : "") + " - " + (t_mcr.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mcr.ToDate) : "")) :
                                                (t_mcr.FromDate != null ? "Since " + String.Format("{0:d MMM yyyy}", t_mcr.FromDate) : "") + ("Until " + t_mcr.FromDate != null ? String.Format("{0:d MMM yyyy}", t_mcr.ToDate) : ""),

                                   strOrgType = t_mcr.IsChurchUnit == false ? (t_cu_sec != null ? GetChuOrgTypeDesc(t_cu_sec.OrgType) : "N/A") : (t_cb_sec != null ? GetChuOrgTypeDesc(t_cb_sec.OrgType) : "N/A"),
                                   strAvailStatus = t_mcr.IsCurrentRole ? "Current" : "Past",
                                   strOwnStatus = t_mcr.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                   ///
                                   
                                   strChurchBody = t_cb != null ? t_cb.Name : "",
                                   ///
                                   strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                   strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                               }) 
                               .ToList();

                // 
                if (oMCR_ModelList.Count() > 0)
                    oMCR_ModelList
                        .OrderByDescending(c => c.oMemberChurchRole.FromDate) //(c.oMemberChurchRole != null ? c.oMemberChurchRole.DateCommenced : (DateTime?)null))
                        .ThenByDescending(c => c.oMemberChurchRole.ToDate) //(c.oMemberChurchRole != null ? c.oMemberChurchRole.DateCommenced : (DateTime?)null))
                        .ThenBy(c => c.strChurchRole).ThenBy(c => c.strChurchUnit)
                        .ToList();


                return oMCR_ModelList;
            }

            catch (Exception ex)
            {
                return null;
            }
        }

        //// 15 ...  REGISTRATION AND RENEWALS
        private List<MemberRegistrationModel> GetMemberRegistration(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, bool inclExtCBData = true, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;

                // Role could be in ...
                // church units --- GB-Modertor of GA, IB-Chairperon of Church Board, CO - Secretary at IMD, DP - Director or M&E, 
                // CG-President of Choir, SC-Member of Edu ctee, CE-Manager of Presby Press
                // mainstream CBs --- CR- ??, CH-District Min @dist, CN-Min in chg @cong, 
                ///

                /// church role can be both local or in higher /lower congregations ... actually: role cud be anywhere [history], plus current roles [curr CB or elsewhere within church]
                /// N- Do NOT share, C-share with Child CB only (below), D- Share with all sub congregations [down, descendants],  P- Share with Parent congregation (above), 
                /// H- Share with all parent congregations - oversee [up, ancestor, forefather, Head CB], R- Share with congregations on same ROUTE [line], A- Share with all congregations within denomination [<denom.name>] 
                ///

                if (oCurrCM == null) oCurrCM = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.Id == oCMid).FirstOrDefault();
                if (oCurrCM == null) return new List<MemberRegistrationModel>();

                /////
                //var oCP_List_1 = _context.ChurchPeriod.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel) //
                //                .Where(c => c.AppGlobalOwnerId == oAGOid && c.Status == "A" &&
                //                ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                //                 (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != null && c.SharingStatus != "" && c.SharingStatus != "N"))))).ToList();  // && c.PeriodType == "AP"

                //oCP_List_1 = oCP_List_1.Where(c =>
                //                   (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();




                /// get the current year
                var oCP_List_1 =
                                _context.ChurchPeriod.AsNoTracking().Include(t => t.OwnedByChurchBody) //
                                .Where(c => c.AppGlobalOwnerId == oAGOid && c.Status == "A").ToList();  // && c.PeriodType == "AP"

                oCP_List_1 = oCP_List_1.Where(c =>
                                   (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                ChurchPeriod _oCPRDefault = oCP_List_1.FirstOrDefault();

                ///// may be more... pick the one up-most ... override lower cong!    
                //oCP_List_1 = oCP_List_1.OrderBy(c => c.OwnedByChurchBody?.ChurchLevel?.LevelIndex).ToList();
                //this.oCPRDefault = oCP_List_1.FirstOrDefault();// _context.ChurchPeriod.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oCurrChuBodyId && c.Status == "A").FirstOrDefault();  // c.PeriodType == "CP" && 


                ///
                DateTime? maxDate = null; // DateTime.Now;
                DateTime? minDate = null; //  maxDate.AddYears(-1);
                if (_oCPRDefault != null)
                {
                    if (_oCPRDefault.FromDate != null && _oCPRDefault.ToDate != null)
                    {
                        if (_oCPRDefault.FromDate != null) minDate = _oCPRDefault.FromDate.Value;
                        if (_oCPRDefault.ToDate != null) maxDate = _oCPRDefault.ToDate.Value;
                    }
                        
                }

                /// get the roles of this member... current ones + history across CBs in denomination
                ///
                var oMRR_List_All = _context.MemberRegistration.AsNoTracking().Include(t => t.ChurchBody)
                                        .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid &&
                                        ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                        (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                        .ToList();

                // filter ...
                if (inclExtCBData == true)
                {
                    oMRR_List_All = oMRR_List_All.Where(c =>
                          (c.ChurchBodyId == oCurrCB.Id ||
                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                          ))
                        .ToList();
                }


                ///// units roles functioned -- local ... up
                //var oCU_List_All = ( 
                //                        from t_cu in _context.ChurchUnit.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && (c.OrgType != "TM" && c.OrgType != "CP"))   //  && c.Status == "A"
                //                        from t_MRR in oMRR_List_All.Where(c=> c.ChurchBodyId == t_cu.OwnedByChurchBodyId && c.ChurchUnitId == t_cu.Id)
                //                        select t_cu 
                //                       )
                //                       .ToList();

                ///// actual positions held -- local ... up
                //var oCRL_List_All = (
                //                        from t_crl in _context.ChurchRole.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && (c.OrgType == "TM" || c.OrgType == "CP"))   //  && c.Status == "A"
                //                        from t_MRR in oMRR_List_All.Where(c => c.ChurchBodyId == t_crl.OwnedByChurchBodyId && c.ChurchRoleId == t_crl.Id)
                //                        select t_crl
                //                       )
                //                       .ToList();  



                /// -- for performance, reduce query mappings ... only look for the units paired up with selected MRRs
                var oMRR_ModelList = (
                               from t_mrr in oMRR_List_All
                               from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(x => x.AppGlobalOwnerId == t_mrr.AppGlobalOwnerId && x.Id == t_mrr.ChurchBodyId)
                               //from t_crl in _context.ChurchRole.AsNoTracking()  // role could be in other CBs
                               //         .Where(x => x.AppGlobalOwnerId == t_mrr.AppGlobalOwnerId && (x.OrgType == "TM" || x.OrgType == "CP") &&
                               //                                             x.Id == t_mrr.ChurchRoleId)  // CANNOT BE NULL
                               //from t_cb_sec in _context.ChurchBody.AsNoTracking()  // mainstream workers ... ex. pastors   // cb_sec could be other CBs
                               //         .Where(x => x.AppGlobalOwnerId == t_mrr.AppGlobalOwnerId && (x.OrgType == "CR" || x.OrgType == "CH" || x.OrgType == "CN") &&
                               //                                             t_mrr.IsChurchUnit == false && x.Id == t_mrr.ChurchBodyId).DefaultIfEmpty()  // both must not be null
                               //from t_cu_sec in _context.ChurchUnit.AsNoTracking()  // groups or unit workers ex. group leaders   // cu_sec could be in other CBs
                               //         .Where(x => x.AppGlobalOwnerId == t_mrr.AppGlobalOwnerId && (x.OrgType != "TM" && x.OrgType != "CP") &&
                               //                                             t_mrr.IsChurchUnit == true && x.Id == t_mrr.ChurchUnitId).DefaultIfEmpty()   // both must not be null
                                
                               select new MemberRegistrationModel()
                               {
                                   oAppGloOwnId = t_mrr.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                   oChurchBodyId = t_mrr.ChurchBodyId, /// oChurchBody = t_cb,
                                   oChurchMemberId = t_mrr.ChurchMemberId, /// oChurchMember = t_cm,
                                                                           ///
                                   oMemberRegistration = t_mrr, 
                                   strRegDate = t_mrr.RegistrationDate != null ? String.Format("{0:d MMM yyyy}", t_mrr.RegistrationDate) : "",
                                   strRegCode = t_mrr.RegCode,
                                   ///
                                  /// strRegStatus = t_mrr.RegistrationDate >= minDate && t_mrr.RegistrationDate <= maxDate ? "Registered" : "Not Registered",
                                   strOwnStatus = t_mrr.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",



                                   strRegYear = _oCPRDefault != null ? _oCPRDefault.FromDate.Value.Year.ToString() : "",
                                   strChurchYearFrom = _oCPRDefault != null ? String.Format("{0:dddd, MMMM d, yyyy}", _oCPRDefault.FromDate.Value) : "",
                                   strChurchYearTo = _oCPRDefault != null ? String.Format("{0:dddd, MMMM d, yyyy}", _oCPRDefault.ToDate.Value) : "",

                                   strRegStatus = (_oCPRDefault.Id == t_mrr.ChurchPeriodId || (t_mrr.RegistrationDate >= minDate && t_mrr.RegistrationDate <= maxDate)) ? "Active" : "Closed",
                                   strRegStatusToDate = (_oCPRDefault.Id == t_mrr.ChurchPeriodId || (t_mrr.RegistrationDate >= minDate && t_mrr.RegistrationDate <= maxDate)) ? "Registered" : "Not Registered",
                                    
                                   /// 
                                   strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                   strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                               })
                               .ToList();

                // 
                if (oMRR_ModelList.Count() > 0)
                    oMRR_ModelList
                        .OrderByDescending(c => c.oMemberRegistration.RegistrationDate) //(c.oMemberRegistration != null ? c.oMemberRegistration.DateCommenced : (DateTime?)null)) 
                        // .ThenBy(c => c.strChurchRole).ThenBy(c => c.strChurchUnit)
                        .ToList();


                return oMRR_ModelList;
            }

            catch (Exception ex)
            {
                return null;
            }
        }

        //// 16 ... ChurchAttendAttendee
        private List<MemberChurchAttendanceModel> GetMemberChurchAttendance(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0,
            bool isVwLs = false, int? currId = null, bool inclExtCBData = true, ChurchModelContext _context = null)
        {
            try
            {
                if (_context == null) return null;

                // Role could be in ...
                // church units --- GB-Modertor of GA, IB-Chairperon of Church Board, CO - Secretary at IMD, DP - Director or M&E, 
                // CG-President of Choir, SC-Member of Edu ctee, CE-Manager of Presby Press
                // mainstream CBs --- CR- ??, CH-District Min @dist, CN-Min in chg @cong, 
                ///

                /// church role can be both local or in higher /lower congregations ... actually: role cud be anywhere [history], plus current roles [curr CB or elsewhere within church]
                /// N- Do NOT share, C-share with Child CB only (below), D- Share with all sub congregations [down, descendants],  P- Share with Parent congregation (above), 
                /// H- Share with all parent congregations - oversee [up, ancestor, forefather, Head CB], R- Share with congregations on same ROUTE [line], A- Share with all congregations within denomination [<denom.name>] 
                ///

                if (oCurrCM == null) oCurrCM = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.Id == oCMid).FirstOrDefault();
                if (oCurrCM == null) return new List<MemberChurchAttendanceModel>();

                ///
                var oCP_List_1 = _context.ChurchPeriod.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel) //
                                .Where(c => c.AppGlobalOwnerId == oAGOid && c.Status == "A").ToList();  // && c.PeriodType == "AP"

                oCP_List_1 = oCP_List_1.Where(c =>
                                   (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                /// may be more... pick the one up-most ... override lower cong!    
                oCP_List_1 = oCP_List_1.OrderBy(c => c.OwnedByChurchBody?.ChurchLevel?.LevelIndex).ToList();
                this.oCPRDefault = oCP_List_1.FirstOrDefault();// _context.ChurchPeriod.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oCurrChuBodyId && c.Status == "A").FirstOrDefault();  // c.PeriodType == "CP" && 
                ///
                DateTime maxDate = DateTime.Now;
                DateTime minDate = maxDate.AddYears(-1);
                if (this.oCPRDefault != null)
                {
                    if (this.oCPRDefault.FromDate != null) minDate = this.oCPRDefault.FromDate.Value;
                    if (this.oCPRDefault.ToDate != null) maxDate = this.oCPRDefault.ToDate.Value;
                }

                /// get the roles of this member... current ones + history across CBs in denomination
                ///
                var oMCA_List_All = _context.ChurchAttendAttendee.AsNoTracking().Include(t => t.ChurchBody)
                                        .Where(c => (isVwLs == true || (!isVwLs && c.Id == currId)) && c.AppGlobalOwnerId == oAGOid && c.ChurchMember.GlobalMemberCode == oCurrCM.GlobalMemberCode && c.ChurchMemberId == oCMid &&
                                        ((inclExtCBData == false && c.ChurchBodyId == oCBid) ||
                                        (inclExtCBData == true && ((c.SharingStatus == "N" && c.ChurchBodyId == oCBid) || (c.SharingStatus != "N")))))  // && c.ChurchBodyId != oCBid
                                        .ToList();

                // filter ...
                if (inclExtCBData == true)
                {
                    oMCA_List_All = oMCA_List_All.Where(c =>
                          (c.ChurchBodyId == oCurrCB.Id ||
                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == oCurrCB.ParentChurchBodyId) || // share with child
                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "D" || c.SharingStatus == "R") && IsAncestor_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with descendant | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "P" && c.ChurchBody.ParentChurchBodyId == oCurrCB.Id) ||  /// share with parent
                                          (c.ChurchBodyId != oCurrCB.Id && (c.SharingStatus == "H" || c.SharingStatus == "R") && IsDescendant_ChurchBody(c.ChurchBody, oCurrCB)) ||  /// share with ancestor (up-High) | same route
                                          (c.ChurchBodyId != oCurrCB.Id && c.SharingStatus == "A" && c.AppGlobalOwnerId == oCurrCB.AppGlobalOwnerId)  // share with all
                          ))
                        .ToList();
                }


                ///// units roles functioned -- local ... up
                //var oCU_List_All = ( 
                //                        from t_cu in _context.ChurchUnit.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && (c.OrgType != "TM" && c.OrgType != "CP"))   //  && c.Status == "A"
                //                        from t_mca in oMCA_List_All.Where(c=> c.ChurchBodyId == t_cu.OwnedByChurchBodyId && c.ChurchUnitId == t_cu.Id)
                //                        select t_cu 
                //                       )
                //                       .ToList();

                ///// actual positions held -- local ... up
                //var oCRL_List_All = (
                //                        from t_crl in _context.ChurchRole.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && (c.OrgType == "TM" || c.OrgType == "CP"))   //  && c.Status == "A"
                //                        from t_mca in oMCA_List_All.Where(c => c.ChurchBodyId == t_crl.OwnedByChurchBodyId && c.ChurchRoleId == t_crl.Id)
                //                        select t_crl
                //                       )
                //                       .ToList();  



                /// -- for performance, reduce query mappings ... only look for the units paired up with selected MCAs
                var oMCA_ModelList = (
                               from t_mca in oMCA_List_All
                               from t_cb in _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(x => x.AppGlobalOwnerId == t_mca.AppGlobalOwnerId && x.Id == t_mca.ChurchBodyId)
                                   //from t_crl in _context.ChurchRole.AsNoTracking()  // role could be in other CBs
                                   //         .Where(x => x.AppGlobalOwnerId == t_mca.AppGlobalOwnerId && (x.OrgType == "TM" || x.OrgType == "CP") &&
                                   //                                             x.Id == t_mca.ChurchRoleId)  // CANNOT BE NULL
                                   //from t_cb_sec in _context.ChurchBody.AsNoTracking()  // mainstream workers ... ex. pastors   // cb_sec could be other CBs
                                   //         .Where(x => x.AppGlobalOwnerId == t_mca.AppGlobalOwnerId && (x.OrgType == "CR" || x.OrgType == "CH" || x.OrgType == "CN") &&
                                   //                                             t_mca.IsChurchUnit == false && x.Id == t_mca.ChurchBodyId).DefaultIfEmpty()  // both must not be null
                                   //from t_cu_sec in _context.ChurchUnit.AsNoTracking()  // groups or unit workers ex. group leaders   // cu_sec could be in other CBs
                                   //         .Where(x => x.AppGlobalOwnerId == t_mca.AppGlobalOwnerId && (x.OrgType != "TM" && x.OrgType != "CP") &&
                                   //                                             t_mca.IsChurchUnit == true && x.Id == t_mca.ChurchUnitId).DefaultIfEmpty()   // both must not be null
                               //from t_cl in _context.ChurchLevel.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_mca.AppGlobalOwnerId && c.Id == (t_mca.ChurchBody != null ? t_mca.ChurchBody.ChurchLevelId : (int?)null))

                               select new MemberChurchAttendanceModel()
                               {
                                   oAppGloOwnId = t_mca.AppGlobalOwnerId, /// oAppGlobalOwn = t_mcl.AppGlobalOwner,
                                   oChurchBodyId = t_mca.ChurchBodyId, /// oChurchBody = t_cb,
                                   oChurchMemberId = t_mca.ChurchMemberId, /// oChurchMember = t_cm,
                                                                           ///
                                   oChurchAttendAttendee = t_mca,
                                   strRegAttended = t_mca.DateAttended != null ? String.Format("{0:d MMM yyyy}", t_mca.DateAttended) : "", 
                                   ///
                                   //strAvailStatus = t_mca.RegistrationDate >= minDate && t_mca.RegistrationDate <= maxDate ? "Registered" : "Not Registered",
                                   strOwnStatus = t_mca.ChurchBodyId == this._oLoggedCB.Id ? "Owned" : "Shared",
                                   /// 
                                   strOwnedByCB = t_cb != null ? t_cb.Name : "",
                                   strOwnedByCBLevel = t_cb != null ? (t_cb.ChurchLevel != null ? (!string.IsNullOrEmpty(t_cb.ChurchLevel.CustomName) ? t_cb.ChurchLevel.CustomName : t_cb.ChurchLevel.Name) : "") : "",

                               })
                               .ToList();

                // 
                if (oMCA_ModelList.Count() > 0)
                    oMCA_ModelList
                        .OrderByDescending(c => c.oChurchAttendAttendee.DateAttended) //(c.oChurchAttendAttendee != null ? c.oChurchAttendAttendee.DateCommenced : (DateTime?)null)) 
                                                                                        // .ThenBy(c => c.strChurchRole).ThenBy(c => c.strChurchUnit)
                        .ToList();


                return oMCA_ModelList;
            }

            catch (Exception ex)
            {
                return null;
            }
        }

        // // 17 ...  
        //private List<MemberChurchTransferModel> GetMemberChurchTransfer(int? oAGOid = null, int? oCBid = null, ChurchBody oCurrCB = null, ChurchMember oCurrCM = null, int oCMid = 0, ChurchModelContext _context = null)
        //{
        //    try
        //    {
        //        if (_context == null) return null;


        //        return oMCT_ModelList;
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}


        // 18 Member Payments -- tithes, donations etc.



        // Index  int? setIndex = 0, int? subSetIndex = 0,    C=congregant, A=Affiliate
        // index_cm -- list all members of the church/congregation: Name [Sam Darteh], Sex [M], Location [Taifa, Accra], Member Type [Church Leader], Status [Regular], Joined [22-Aug-2000], Departed [***]
        // by default:- load available members, Congregants only ::-- others by demand [member search]
        // Summary Sheet 




        public string GetBirthdayTag(DateTime? dob, MemberStatus oCM_MS)
        {
            if (oCM_MS.ChurchMemStatus_NVP?.IsDeceased == true) return "Deceased";   //Anniversaries can be done here too...
            if (dob == null) return "";

            int daysToDOB = 0;
            if (DateTime.Now.Month == ((DateTime)dob).Month)
                daysToDOB = ((DateTime)dob).Day - DateTime.Now.Day; // (int)AppUtilties.CalcDateDiff_PeriodLeft(dob.Value, DateTime.Now.Date, false, true, false, false, true, false, false, false, false); //((DateTime)dob).Day - DateTime.Now.Day;
            else 
                return "";
             
            if (daysToDOB <= 14)
            {
                if (daysToDOB == 14) return "2 weeks away";
                else if (daysToDOB <= 7)
                {
                    if (daysToDOB == 7) return "In a week";
                    else if (daysToDOB <= 1)
                    {
                        if (daysToDOB == 1) return "Tomorrow";
                        else if (daysToDOB < 0)
                        {
                            if (daysToDOB == -1) return "Yesterday";
                            if (daysToDOB == -2) return "2 days ago";
                            if (daysToDOB == -3) return "3 days ago";
                            else return "";
                        }
                        else
                            return "Today! Happy Birthday";
                    }
                    else
                        return daysToDOB + " days more";
                }
                else
                    return "1 week, " + (daysToDOB - 7) + " days more";
            }
            else
            {
                if (daysToDOB >= 28) return "In a month's time";
                else if (daysToDOB < 28 && daysToDOB > 21) return "In less than a month";
                else if (daysToDOB == 21) return "3 weeks away";
                else if (daysToDOB < 21) return "In less than 3 weeks";   // && daysToDOB > 14
            }
                return daysToDOB.ToString();

             

            // if (DateTime.Compare((DateTime)dob, DateTime.Now.AddDays(14)) >= 0)  //exactly 2 weeks away

            //  TimeSpan daysToDOB = DateTime.Now - (DateTime)dob;

            //var dt = DateTime.Now.AddDays(-1);
            //daysToDOB = DateTime.Compare((DateTime)dob.Value.Date, dt.Date); //yesterday
            //if (daysToDOB >= 0)
            //{
            //    if (daysToDOB == 0) return "(Yesterday)";
            //    else  
            //    {
            //        daysToDOB = DateTime.Compare((DateTime)dob, DateTime.Now.AddDays(0)); //today or later
            //        if (daysToDOB >= 0)
            //        {
            //            if (daysToDOB == 0) return "(Today! Happy Birthday)";
            //            else
            //            {
            //                daysToDOB = DateTime.Compare((DateTime)dob, DateTime.Now.AddDays(1)); //tomorrow or later
            //                if (daysToDOB >= 0)
            //                {
            //                    if (daysToDOB == 0) return "(Tomorrow)";
            //                    else
            //                    {
            //                        daysToDOB = DateTime.Compare((DateTime)dob, DateTime.Now.AddDays(7));
            //                        if (daysToDOB >= 0)
            //                        {
            //                            if (daysToDOB == 0) return "(Next week)";
            //                            else
            //                            {
            //                                daysToDOB = DateTime.Compare((DateTime)dob, DateTime.Now.AddDays(14));
            //                                if (daysToDOB >= 0)
            //                                {
            //                                    if (daysToDOB == 0) return "(2 weeks away)";
            //                                    else
            //                                    {
            //                                        return "";
            //                                    }
            //                                }
            //                                return "(1 week, " + (((DateTime)dob).Day - (DateTime.Now.Day + 7)) + " days more)";
            //                            }
            //                        }
            //                        else return "(" + (((DateTime)dob).Day - DateTime.Now.Day) + " days more)";
            //                    }
            //                }
            //               // else return "(" + (((DateTime)dob).Day - DateTime.Now.Day) + " days more)";
            //            }
            //        }
            //        //else return "(1 week, " + (((DateTime)dob).Day - (DateTime.Now.Day + 7)) + " days more)";
            //    }
            //}
            ////else return "";

            //// ELSE
            //return "";


            //daysToDOB = DateTime.Compare((DateTime)dob, DateTime.Now.AddDays(14));
            //if (daysToDOB >= 0)
            //{
            //    if (daysToDOB == 0) return "(2 weeks away)";
            //    else //if (daysToDOB <= 7)
            //    {
            //        daysToDOB = DateTime.Compare((DateTime)dob, DateTime.Now.AddDays(7));
            //        if (daysToDOB >= 0)
            //        {
            //            if (daysToDOB == 0) return "(In a week)";
            //            else
            //            {
            //                daysToDOB = DateTime.Compare((DateTime)dob, DateTime.Now.AddDays(1));
            //                if (daysToDOB >= 0)
            //                {
            //                    if (daysToDOB == 0) return "(Tomorrow)";
            //                    else
            //                    {
            //                        daysToDOB = DateTime.Compare((DateTime)dob, DateTime.Now.AddDays(0));
            //                        if (daysToDOB >= 0)
            //                        {
            //                            if (daysToDOB == 0) return "(Today! Happy Birthday.)";
            //                            else
            //                            {
            //                                daysToDOB = DateTime.Compare((DateTime)dob, DateTime.Now.AddDays(-1));
            //                                if (daysToDOB >= 0)
            //                                {
            //                                    if (daysToDOB == 0) return "(Yesterday.)";
            //                                    else
            //                                    {
            //                                        return "";
            //                                    }
            //                                }
            //                            }
            //                        }
            //                        else return "";
            //                    }
            //                }
            //                else return "(" + (((DateTime)dob).Day - DateTime.Now.Day) + " days more)";
            //            }
            //        }
            //        else return "(1 week, " + (((DateTime)dob).Day - (DateTime.Now.Day + 7)) + " days more)";
            //    }
            //}
            //else return "";

            ////
            //return "";


        }

        public string GetBirthdayTag(DateTime? dob, bool isMemDeceased)
        {
            if (isMemDeceased == true) return "Deceased";   //Anniversaries can be done here too...
            if (dob == null) return "";

            int daysToDOB = 0;
            if (DateTime.Now.Month == ((DateTime)dob).Month)
                daysToDOB = ((DateTime)dob).Day - DateTime.Now.Day;
            else return "";
             

            if (daysToDOB <= 14)
            {
                if (daysToDOB == 14) return "2 weeks away";
                else if (daysToDOB <= 7)
                {
                    if (daysToDOB == 7) return "In a week";
                    else if (daysToDOB <= 1)
                    {
                        if (daysToDOB == 1) return "Tomorrow";
                        else if (daysToDOB < 0)
                        {
                            if (daysToDOB == -1) return "Yesterday";
                            else return "";
                        }
                        else
                            return "Today! Happy Birthday";
                    }
                    else
                        return "" + daysToDOB + " days more";
                }
                else
                    return "1 week, " + (daysToDOB - 7) + " days more";
            }
            else
                return "";
        }
        public string GetMemberAvailability(DateTime? dtJoined, DateTime? dtDepart, MemberStatus oCM_MS)
        {
            if (oCM_MS.ChurchMemStatus_NVP?.IsDeceased == true)
                return ("Joined " + (dtJoined != null ? String.Format("{0:d-MMM-yyyy}", (DateTime)dtJoined) : "N/A") + ". Died " + (dtDepart != null ? String.Format("{0:d-MMM-yyyy}", (DateTime)dtDepart) : "N/A") + ". Longevity: " + ((dtJoined != null && dtDepart != null) ? (string)AppUtilties.CalcDateDiff(dtJoined.Value, dtDepart.Value, true, true, true, false, false, false, false, false, false) : "N/A"));
            else if (oCM_MS.ChurchMemStatus_NVP?.IsDeceased == false && oCM_MS.ChurchMemStatus_NVP?.IsAvailable == false)
                return ("Joined " + (dtJoined != null ? String.Format("{0:d-MMM-yyyy}", (DateTime)dtJoined) : "N/A") + ". Left " + (dtDepart != null ? String.Format("{0:d-MMM-yyyy}", (DateTime)dtDepart) : "N/A") + ". Longevity: " + ((dtJoined != null && dtDepart != null) ? (string)AppUtilties.CalcDateDiff(dtJoined.Value, dtDepart.Value, true, true, true, false, false, false, false, false, false) : "N/A"));
            else  //oChuMemStat.Available == false
                return ("Joined " + (dtJoined != null ? String.Format("{0:d-MMM-yyyy}", (DateTime)dtJoined) : "N/A") + ". Longevity: " + ((dtJoined != null && dtDepart != null) ? (string)AppUtilties.CalcDateDiff(dtJoined.Value, dtDepart.Value, true, true, true, false, false, false, false, false, false) : "N/A"));
        }
        public string GetMemberAvailability(DateTime? dtJoined, DateTime? dtDepart, bool isMemAvailable, bool isMemDeceased)
        {
            if (isMemDeceased == true)
                return ("Joined " + (dtJoined != null ? String.Format("{0:d-MMM-yyyy}", (DateTime)dtJoined) : "N/A") + ". Died " + (dtDepart != null ? String.Format("{0:d-MMM-yyyy}", (DateTime)dtDepart) : "N/A") + ". Longevity: " + ((dtJoined != null && dtDepart != null) ? (string)AppUtilties.CalcDateDiff(dtJoined.Value, dtDepart.Value, true, true, true, false, false, false, false, false, false) : "N/A"));
            else if (isMemDeceased == false && isMemAvailable == false)
                return ("Joined " + (dtJoined != null ? String.Format("{0:d-MMM-yyyy}", (DateTime)dtJoined) : "N/A") + ". Left " + (dtDepart != null ? String.Format("{0:d-MMM-yyyy}", (DateTime)dtDepart) : "N/A") + ". Longevity: " + ((dtJoined != null && dtDepart != null) ? (string)AppUtilties.CalcDateDiff(dtJoined.Value, dtDepart.Value, true, true, true, false, false, false, false, false, false) : "N/A"));
            else  //oChuMemStat.Available == false
                return ("Joined " + (dtJoined != null ? String.Format("{0:d-MMM-yyyy}", (DateTime)dtJoined) : "N/A") + ". Longevity: " + 
                    ((dtJoined != null && dtDepart != null) ? (string)AppUtilties.CalcDateDiff(dtJoined.Value, dtDepart.Value, true, true, true, false, false, false, false, false, false) : "N/A"));
                  //  ((dtJoined != null && dtDepart != null) ? CalcAge((DateTime)dtJoined, (DateTime)dtDepart).ToString() : "N/A"));
        }
        public string GetMemberLongevity(DateTime? dtJoined, DateTime? dtDepart, MemberStatus oCM_MS)
        {
            if (oCM_MS.ChurchMemStatus_NVP?.IsDeceased==true || oCM_MS.ChurchMemStatus_NVP?.IsAvailable == false)
                return (dtJoined != null && dtDepart != null ? (string)AppUtilties.CalcDateDiff(dtJoined.Value, dtDepart.Value, true, true, true, false, false, false, false, false, false) : "N/A");  // CalcAge((DateTime)dtJoined.Value, (DateTime)dtDepart.Value).ToString() : "N/A");
            else  //oChuMemStat.Available == false  ... current
                return (dtJoined != null && dtDepart != null ? (string)AppUtilties.CalcDateDiff(dtJoined.Value, DateTime.Now.Date, true, true, true, false, false, false, false, false, false) : "N/A");   //CalcAge((DateTime)dtJoined.Value, DateTime.Now).ToString() : "N/A");
        }
        public string GetMemberLongevity(DateTime? dtJoined, DateTime? dtDepart, bool isMemAvailable, bool isMemDeceased)
        {
            if (isMemDeceased || !isMemAvailable)
                return (dtJoined != null && dtDepart != null ? (string)AppUtilties.CalcDateDiff(dtJoined.Value, dtDepart.Value, true, true, true, false, false, false, false, false, false) : "N/A");
                //return (dtJoined != null && dtDepart != null ? CalcAge((DateTime)dtJoined.Value, (DateTime)dtDepart.Value).ToString() : "N/A");
            else  //oChuMemStat.Available == false  ... current
                return (dtJoined != null && dtDepart != null ? (string)AppUtilties.CalcDateDiff(dtJoined.Value, DateTime.Now.Date, true, true, true, false, false, false, false, false, false) : "N/A");
               // return (dtJoined != null && dtDepart != null ? CalcAge((DateTime)dtJoined.Value, DateTime.Now).ToString() : "N/A");
        }



        //public int CalcAge(DateTime DOB, DateTime cutOffDate) 
        //{
        //    //DateTime birth = new DateTime(1974, 8, 29);
        //    //DateTime today = DateTime.Now;
        //    //TimeSpan span = today - birth;
        //    //DateTime age = DateTime.MinValue + span;

        //    //// Make adjustment due to MinValue equalling 1/1/1
        //    //int years = age.Year - 1;
        //    //int months = age.Month - 1;
        //    //int days = age.Day - 1;

        //    //// Print out not only how many years old they are but give months and days as well
        //    //Console.Write("{0} years, {1} months, {2} days", years, months, days);


        //    int years = 0;
        //    int months = 0;
        //    int days = 0;

        //    DateTime tmpMyDOB = new DateTime(DOB.Year, DOB.Month, 1); // DOB.Day);

        //    DateTime tmpFutureDate = new DateTime(cutOffDate.Year, cutOffDate.Month, 1); //cutOffDate.Day);

        //    while (tmpMyDOB.AddYears(years).AddMonths(months) < tmpFutureDate)
        //    {
        //        months++;

        //        if (months > 12)
        //        {
        //            years++;
        //            months = months - 12;
        //        }
        //    }

        //    if (cutOffDate.Day >= DOB.Day)
        //    {
        //        days = days + cutOffDate.Day - DOB.Day;
        //    }
        //    else
        //    {
        //        months--;

        //        if (months < 0)
        //        {
        //            years--;
        //            months = months + 12;
        //        }
        //    }

        //    //var desc = ("{0} years, {1} months, {2} days", years, months, days);
        //    return years;
        //}
        //public string GetAgeString(DateTime DOB, DateTime cutOffDate)
        //{
        //    //DateTime birth = new DateTime(1974, 8, 29);
        //    //DateTime today = DateTime.Now;
        //    //TimeSpan span = today - birth;
        //    //DateTime age = DateTime.MinValue + span;

        //    //// Make adjustment due to MinValue equalling 1/1/1
        //    //int years = age.Year - 1;
        //    //int months = age.Month - 1;
        //    //int days = age.Day - 1;

        //    //// Print out not only how many years old they are but give months and days as well
        //    //Console.Write("{0} years, {1} months, {2} days", years, months, days);


        //    int years = 0;
        //    int months = 0;
        //    int days = 0;

        //    DateTime tmpMyDOB = new DateTime(DOB.Year, DOB.Month, 1);

        //    DateTime tmpFutureDate = new DateTime(cutOffDate.Year, cutOffDate.Month, 1);

        //    while (tmpMyDOB.AddYears(years).AddMonths(months) < tmpFutureDate)
        //    {
        //        months++;

        //        if (months > 12)
        //        {
        //            years++;
        //            months = months - 12;
        //        }
        //    }

        //    if (cutOffDate.Day >= DOB.Day)
        //    {
        //        days = days + cutOffDate.Day - DOB.Day;
        //    }
        //    else
        //    {
        //        months--;

        //        if (months < 0)
        //        {
        //            years--;
        //            months = months + 12;
        //        }
        //    }

        //    var desc = ("{0} years, {1} months, {2} days", years, months, days);
        //    return desc.ToString();
        //}
         

        public ActionResult IndexCM_SUM(int? oCBid, bool? isNewCM = false, bool? isStAv = true, string memClass = "I", int extFltCode = 0, string extFltBioStr = "", bool loadLim = false)  //, int filterIndex = 1, int taskIndex = 1, int? numCodeCriteria_1 = (int?)null, string strCodeCriteria_2 = null)  // , int? subSetIndex = 0  int? oAppGloOwnId = null, int? oCurrChuBodyId = null, int setIndex = 0, int subSetIndex = 0) //, int? oParentId = null, int? id = null, int taskIndex = 1)             
        {   // vw = 0 -- list, vw = 1 -- grid....int vw = 0, 
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return View("_ErrorPage");
                    }
                }

                if (this._oLoggedAGO_MSTR == null || this._oLoggedCB_MSTR == null || this._oLoggedAGO == null || this._oLoggedCB == null) 
                { RedirectToAction("LoginUserAcc", "UserLogin");  }


                var oCMModel = new ChurchMemberSummaryModel();
                oCMModel.strMdlHdr = "Church Member Roll";
                if (!loadLim)
                {
                    _ = this.LoadClientDashboardValues(); /// this._clientDBConnString);

                    oCMModel.lkpPrebuitFilterOptions = new List<SelectListItem>();
                    foreach (var dl in dlPrebuitFilter) { oCMModel.lkpPrebuitFilterOptions.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }
                }
                 
                //if (!InitializeUserLogging())
                //    return RedirectToAction("LoginUserAcc", "UserLogin");

                // Client
                // var oAppGloOwnId = this._oLoggedAGO.Id;

                if (oCBid == null) oCBid = this._oLoggedCB.Id; 

                ChurchBody oCB = this._oLoggedCB;
                if (oCBid != this._oLoggedCB.Id)
                    oCB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == oCBid).FirstOrDefault();


                // MSTR
                //var oUserId = this._oLoggedUser.Id;
                //var oAGO_MSTR = this._oLoggedAGO_MSTR; var oCB_MSTR = this._oLoggedCB_MSTR;
                //var oAGO = this._oLoggedAGO; var oCB = this._oLoggedCB;

                // if (oAGO_MSTR == null || this._oLoggedCB_MSTR == null || oAGO == null || oCB == null) { return View("_ErrorPage"); }

                // var proScope = "C";
                //get all member from congregation
                //  var oCMList = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.ChurchBodyId == this._oLoggedCB.Id).ToList();

                if (extFltCode == 1) memClass = "E"; else memClass = "I";
                ///
                 

                var oCMList = (
                    from t_cm in _context.ChurchMember.AsNoTracking().Where(x => x.AppGlobalOwnerId == this._oLoggedAGO.Id && x.ChurchBodyId == oCBid && (x.MemberScope == memClass || x.MemberScope == null))
                    from t_cb in _context.ChurchBody.AsNoTracking().Where(x => x.OrgType=="CN" && x.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && x.Id == t_cm.ChurchBodyId)

                    from t_ci in _context.ContactInfo.AsNoTracking().Where(x => x.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && x.ChurchBodyId == t_cm.ChurchBodyId &&
                          (x.Id == t_cm.PrimContactInfoId || (t_cm.PrimContactInfoId == null && x.ChurchMemberId == t_cm.Id && x.IsPrimaryContact == true)))
                        .Take(1).DefaultIfEmpty().DefaultIfEmpty()

                    from t_mcl in _context.MemberChurchlife.AsNoTracking().Where(x => x.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && x.ChurchBodyId == t_cm.ChurchBodyId && x.ChurchMemberId == t_cm.Id).DefaultIfEmpty()

                        //from t_mt in _context.MemberType.AsNoTracking() //.Include(t => t.ChurchMemType_NVP)
                        //    .Where(x => x.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && x.ChurchBodyId == t_cm.ChurchBodyId && x.ChurchMemberId==t_cm.Id && x.IsCurrent == true).DefaultIfEmpty() 

                        //from t_ms in _context.MemberStatus.AsNoTracking().Include(t => t.ChurchMemStatus_NVP)
                        //    .Where(x => x.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && x.ChurchBodyId == t_cm.ChurchBodyId && x.ChurchMemberId==t_cm.Id && x.IsCurrent == true && x.ChurchMemStatus_NVP.IsAvailable== isStAv).DefaultIfEmpty() 

                        //from t_mcr in _context.MemberChurchRole.AsNoTracking().Include(t => t.ChurchRole).Include(t => t.ChurchUnit).Include(t => t.AssociatedChurchBody)
                        //    .Where(x => x.AppGlobalOwnerId == t_cm.AppGlobalOwnerId && x.Id == t_cm.ChurchBodyId && x.ChurchMemberId==t_cm.Id && x.IsLeadRole == true ).DefaultIfEmpty() 

                    from t_mt in _context.MemberType.AsNoTracking().Where(x => x.ChurchBodyId == t_cm.ChurchBodyId && x.IsCurrent == true && t_cm.Id == x.ChurchMemberId)  
                                  .Take(1).DefaultIfEmpty()//.OrderByDescending(y => y.ToDate).Take(1).ToList() : new List<MemberType>()
                    from t_mr in _context.MemberRank.AsNoTracking().Include(t => t.ChurchRank_NVP).Where(x => x.ChurchBodyId == t_cm.ChurchBodyId && x.IsCurrentRank == true && t_cm.Id == x.ChurchMemberId)
                                  .Take(1).DefaultIfEmpty() // .FirstOrDefault() }
                                 //.OrderBy(y => y.ChurchRank_NVP != null ? y.ChurchRank_NVP.GradeLevel : null).Take(1).ToList() : new List<MemberRank>()
                    from t_ms in  _context.MemberStatus.AsNoTracking().Include(t => t.ChurchMemStatus_NVP).Where(x => x.ChurchBodyId == t_cm.ChurchBodyId && x.IsCurrent == true && t_cm.Id == x.ChurchMemberId)
                                  .Take(1).DefaultIfEmpty() //             .OrderBy(y => y.ChurchMemStatus_NVP != null ? y.ChurchMemStatus_NVP.GradeLevel : null).Take(1).ToList() : new List<MemberStatus>()
                    from t_mcu in _context.MemberChurchUnit.AsNoTracking().Include(t => t.ChurchUnit).Where(x => x.ChurchBodyId == t_cm.ChurchBodyId && x.IsCurrUnit == true && t_cm.Id == x.ChurchMemberId)
                                  .Take(1).DefaultIfEmpty() //.OrderBy(y => y.IsCoreArea).Take(1).ToList() : new List<MemberChurchUnit>()                                                                                                                                                                               // from t_cs in _context.ChurchUnit.Where(x=> x.ChurchBodyId == t_mcu.ChurchBodyId && x.Id==t_mcu.ChurchUnitId && x.Generational == true).DefaultIfEmpty()
                    from t_mcr in  _context.MemberChurchRole.AsNoTracking().Include(t => t.ChurchRole).Where(x => x.ChurchBodyId == t_cm.ChurchBodyId && x.IsLeadRole == true && t_cm.Id == x.ChurchMemberId)
                                  .Take(1).DefaultIfEmpty()    //  //              .OrderBy(y => y.ChurchRole != null ? y.ChurchRole.RankIndex : null).Take(1).ToList() : new List<MemberChurchRole>() 

                    select new ChurchMemberSummaryModel()
                    {
                        oChurchBody = t_cb,
                        oChurchMember = t_cm,

                        strChurchBody = t_cb.Name,
                        strMemberFullName = GetConcatMemberName(t_cm.Title, t_cm.FirstName, t_cm.MiddleName, t_cm.LastName, false, false, true, true, false), // (((t_cm.FirstName + ' ' + t_cm.MiddleName).Trim() + " " + t_cm.LastName).Trim() + " " + (!string.IsNullOrEmpty(t_cm.Title) ? "(" + t_cm.Title + ")" : "")).Trim(),
                        strLocation = t_ci != null ? GetConcatLinkedEntities(t_ci.Location.Trim(), t_ci.City.Trim()) : "",
                        strPhone = t_ci != null ? GetConcatLinkedEntities(t_ci.MobilePhone1.Trim(), t_ci.MobilePhone2.Trim()) : "",
                        strMemDisplayName = GetConcatMemberName(t_cm.Title, t_cm.FirstName, t_cm.MiddleName, t_cm.LastName, true, true, false, false, true),
                        strMemGender = GetGenderDesc(t_cm.Gender),

                        oMemContactInfo = t_ci,
                        oMemberChurchlife = t_mcl,

                        //  strDesignation = t_mcr != null ? GetConcatLinkedEntities((t_mcr.ChurchRole != null ? t_mcr.ChurchRole.RoleName : ""), (t_mcr.IsChurchUnit == true ? (t_mcr.ChurchUnit != null ? t_mcr.ChurchUnit.Name : "") : (t_mcr.AssociatedChurchBody != null ? t_mcr.AssociatedChurchBody.Name : ""))) : "",
                        // strMemberType = t_mt != null ? (t_mt.ChurchMemType != null ? t_mt.ChurchMemType.Name : "") : "None",
                        // strMemberStatus = t_ms != null ? (t_ms.ChurchMemStatus != null ? t_ms.ChurchMemStatus.Name : "") : "Dummy",
                        // bl_MemberStatusAvail = t_ms != null ? (t_ms.ChurchMemStatus.IsAvailable == true) : false,
                        // strStatus = GetStatusDesc(t_cm.Status)

                        strMemTypeCode = t_mt.MemberTypeCode,
                        strMemType = t_mt != null ? GetMemTypeDesc(t_mt.MemberTypeCode) : "Unassigned", // GetMemTypeDesc(t_mt.MemberTypeCode), // t_mt != null ? (t_mt.ChurchMemType_NVP != null ? t_mt.ChurchMemType_NVP.NVPValue : "") : "Unassigned",
                        strMemRank = t_mr != null ? (t_mr.ChurchRank_NVP != null ? t_mr.ChurchRank_NVP.NVPValue : "") : "Unassigned",
                        strMemStatus = t_ms != null ? (t_ms.ChurchMemStatus_NVP != null ? t_ms.ChurchMemStatus_NVP.NVPValue : "") : "Unassigned",
                        strMemUnit = t_mcu != null ? (t_mcu.ChurchUnit != null ? t_mcu.ChurchUnit.Name : "None") : "None", //: (t_cb != null ? t_cb.Name : "None"),

                        //strMemRoleStatus = t_mcr != null ? (t_mcr.IsChurchUnit == false && t_mcr.IsCurrentRole == true ? "CU" : "") : "",
                        oMemberChurchRole = t_mcr,
                        strMemRole = t_mcr != null ? (t_mcr.ChurchRole != null ? t_mcr.ChurchRole.Name : "") : "None",
                        strMemUnitRole = t_mcr != null ? (t_mcr.ChurchRole != null && t_mcr.IsChurchUnit && t_mcr.ChurchUnit != null ? t_mcr.ChurchRole.Name + ", " + t_mcu.ChurchUnit.Name :
                                                t_mcr.ChurchRole != null && !t_mcr.IsChurchUnit && t_cb != null ? t_mcr.ChurchRole.Name + ", " + t_cb.Name :
                                            ((t_mcr.ChurchRole != null ? t_mcr.ChurchRole.Name : "") + (t_mcr.IsChurchUnit == true ? (t_mcu != null ? (t_mcu.ChurchUnit != null ? t_mcu.ChurchUnit.Name : "None") : "None") : (t_cb != null ? t_cb.Name : "None")))) : "None", 
                        bl_MemberStatusAvail = t_ms != null ? (t_ms.ChurchMemStatus_NVP.IsAvailable == true) : false,
                        strAccountStatus = GetStatusDesc(t_cm.Status),

                        strDateJoined = t_mcl != null ? (t_mcl.DateJoined != null ? DateTime.Parse(t_mcl.DateJoined.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "") : "",
                        strDateDeparted = t_mcl != null ? (t_mcl.DateDeparted != null ? DateTime.Parse(t_mcl.DateDeparted.ToString()).ToString("d MMM yyyy", CultureInfo.InvariantCulture) : "") : "",
                        strMemLongevity_Yrs = (t_mcl.DateJoined != null && t_mcl.DateDeparted != null) ? ((string)AppUtilties.CalcDateDiff(t_mcl.DateJoined.Value, t_mcl.DateDeparted.Value, true, true, true, true, true, false, false, false, false)) :
                                                         (t_mcl.DateJoined != null && t_mcl.DateDeparted == null) ? ((string)AppUtilties.CalcDateDiff(t_mcl.DateJoined.Value, DateTime.Now.Date, true, true, true, true, true, false, false, false, false)) : "",

                    })
                 // .OrderBy(c => c.strChurchBody).ThenBy(c => c.strMemberFullName) 
                  .ToList();


                //Filter list -----
                //var extFltCodeNum = int.Parse(extFltCode);
                ///
                switch (extFltCode)
                {
                    case 0: /// all members  ... oCMList = oCMList.Where(c => c.strMemTypeCode == "C").ToList();
                        break;

                    case 1: /// new converts
                        oCMModel.strMdlHdr = "New Converts";
                        oCMList = oCMList.Where(c => c.strMemTypeCode == "N").ToList();
                        break;
                    //case 2: /// mainstream leaders
                    //    oCMList = oCMList.Where(c => c.strMemTypeCode == "-").ToList();
                    //    break;
                    //case 3: /// all leaders
                    //    oCMList = oCMList.Where(c => c.strMemTypeCode == "N").ToList();
                    //    break;
                    case 4: /// males
                        //oCMModel.strMdlHdr += "Male";
                        oCMList = oCMList.Where(c => c.oChurchMember.Gender == "M").ToList();
                        break;
                    case 5: /// females
                        //oCMModel.strMdlHdr += "Female";
                        oCMList = oCMList.Where(c => c.oChurchMember.Gender == "F").ToList();
                        break;

                    case 7: /// active profiles
                        oCMList = oCMList.Where(c => c.oChurchMember.Status == "A").ToList();
                        break;
                    case 9: /// deactive
                        oCMList = oCMList.Where(c => c.oChurchMember.Status == "D").ToList();
                        break;

                    //case 10: /// children
                    //    oCMList = oCMList.Where(c => c.oChurchMember.Status == "A").ToList();
                    //    break;
                    //case 11: /// youth
                    //    oCMList = oCMList.Where(c => c.oChurchMember.Status == "D").ToList();
                    //    break; 
                    //case 12: /// young adult
                    //    oCMList = oCMList.Where(c => c.oChurchMember.MaritalStatus == "M").ToList();
                    //    break;
                    //case 13: /// adult
                    //    oCMList = oCMList.Where(c => c.oChurchMember.MaritalStatus != "M").ToList();
                    //    break;
                    //case 14: /// aged
                    //    oCMList = oCMList.Where(c => c.oChurchMember.MaritalStatus == "W").ToList();
                    //    break;


                    case 17: /// married
                        oCMList = oCMList.Where(c => c.oChurchMember.MaritalStatus == "M").ToList();
                        break;
                    case 18: /// not-married
                        oCMList = oCMList.Where(c => c.oChurchMember.MaritalStatus != "M").ToList();
                        break;
                    case 19: /// widowed
                        oCMList = oCMList.Where(c => c.oChurchMember.MaritalStatus == "W").ToList();
                        break;

                    //case 21: /// sick
                    //    oCMList = oCMList.Where(c => c.oChurchMember.MaritalStatus != "M").ToList();
                    //    break;
                    //case 22: /// bereaved (current year)
                    //    oCMList = oCMList.Where(c => c.oChurchMember.MaritalStatus == "W").ToList();
                    //    break;
                    //case 23: /// deceased
                    //    oCMList = oCMList.Where(c => c.oChurchMember.MaritalStatus != "M").ToList();
                    //    break;
                    //case 24: /// past
                    //    oCMList = oCMList.Where(c => c.oChurchMember.MaritalStatus == "W").ToList();
                    //    break;


                }
                    

                // added filter...
                if (!string.IsNullOrEmpty(extFltBioStr))
                { 
                    oCMList = oCMList.Where(c => 
                                        c.strMemberFullName.ToLower().Contains(extFltBioStr) ||  
                                        (c.oMemContactInfo != null ? (!string.IsNullOrEmpty(c.oMemContactInfo.Location) ? c.oMemContactInfo.Location.ToLower() : "") : "").Contains(extFltBioStr) ||
                                        (c.oMemContactInfo != null ? (!string.IsNullOrEmpty(c.oMemContactInfo.DigitalAddress) ? c.oMemContactInfo.DigitalAddress.ToLower() : "") : "").Contains(extFltBioStr) ||
                                        (c.oMemContactInfo != null ? (!string.IsNullOrEmpty(c.oMemContactInfo.Telephone) ? c.oMemContactInfo.Telephone : "") : "").Contains(extFltBioStr) ||
                                        (c.oMemContactInfo != null ? (!string.IsNullOrEmpty(c.oMemContactInfo.MobilePhone1) ? c.oMemContactInfo.MobilePhone1 : "") : "").Contains(extFltBioStr) ||
                                        (c.oMemContactInfo != null ? (!string.IsNullOrEmpty(c.oMemContactInfo.MobilePhone2) ? c.oMemContactInfo.MobilePhone2 : "") : "").Contains(extFltBioStr) ||
                                        (c.oMemContactInfo != null ? (!string.IsNullOrEmpty(c.oMemContactInfo.Email) ? c.oMemContactInfo.Email.ToLower() : "") : "").Contains(extFltBioStr)
                                         
                    ).ToList();
                }

                // sort --- filtered
                if (oCMList.Count > 0) oCMList = oCMList.OrderBy(c => c.strChurchBody).ThenBy(c => c.strMemberFullName).ToList();

               

                // get summary data -- total, males, females...
                oCMModel.numTotalRoll = oCMList.Count;
                oCMModel.numTotalRoll_M = oCMList.Count(c => c.oChurchMember.Gender == "M");
                oCMModel.numTotalRoll_F = oCMList.Count(c => c.oChurchMember.Gender == "F"); 
                oCMModel.numTotalRoll_O = oCMList.Count - (oCMModel.numTotalRoll_M + oCMModel.numTotalRoll_F);

                oCMModel.oAppGloOwnId = this._oLoggedAGO.Id; oCMModel.oAppGlobalOwn = this._oLoggedAGO;
                oCMModel.oChurchBodyId = oCBid; oCMModel.oChurchBody = oCB;
                oCMModel.strChurchBody = oCB.Name;
                ///
                oCMModel.oAppGloOwnId_Logged_MSTR = this._oLoggedAGO.MSTR_AppGlobalOwnerId;
                oCMModel.oChurchBodyId_Logged_MSTR = this._oLoggedCB.MSTR_ChurchBodyId;
                oCMModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                oCMModel.oChurchBodyId_Logged = this._oLoggedCB.Id;                
                
                
                oCMModel.oUserId_Logged = _oLoggedUser.Id;
                

                //oCMModel.taskIndex = 1;
                //oCMModel.filterIndex = filterIndex;
               // oCMModel.setIndex = (int)setIndex;
                // oCMModel.subSetIndex = (int)subSetIndex;

                /// 
                oCMModel.lsChurchMemberSummaryModels = oCMList;
                ViewData["oCMModel_List"] = oCMModel.lsChurchMemberSummaryModels;

                var strDesc = "Church Member";
                var _userTask = "Viewed " + strDesc.ToLower() + " list";
                oCMModel.strCurrTask = strDesc;


                var tm = DateTime.Now;
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "N",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id));

                ///
                var _oUPModel = Newtonsoft.Json.JsonConvert.SerializeObject(oCMModel);
                TempData["oVmCSPModel"] = _oUPModel; TempData.Keep();

                if (loadLim)
                    return PartialView("_vwIndexCM_SUM", oCMModel);
                else
                    return View("IndexCM_SUM", oCMModel);
            }

            catch (Exception ex)
            {
                if (loadLim)
                    return PartialView("_vwErrorPage");
                else
                    return View("_ErrorPage"); 
            }
        }

         
        [HttpGet]
        //     public IActionResult AddOrEdit_UP(int? oAppGloOwnId = null, int? oChurchBodyId = null, int? id = 0, int setIndex = 0, int subSetIndex = 0, int? oAGOId_Logged = null, int? oCBId_Logged = null, int? oUserId = null) //, int taskIndex = 1)
        public IActionResult AddModCM_BD(int id = 0, int? oCBid = null, string strMT = "C", int vw = 0)  //M-member, N-New Convert, int viewIndex = 0) int? oUserId = null, 
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            //if (!InitializeUserLogging())
            //    return RedirectToAction("LoginUserAcc", "UserLogin");

            // Client
            var oAppGloOwnId = this._oLoggedAGO.Id;
            if (oCBid == null) oCBid = this._oLoggedCB.Id;

            // MSTR
            var oUserId = this._oLoggedUser.Id;
            var oAGO_MSTR = this._oLoggedAGO_MSTR; var oCB_MSTR = this._oLoggedCB_MSTR; // _masterContext.MSTRAppGlobalOwner.Find(this._oLoggedAGO.MSTR_AppGlobalOwnerId); 
            var oAGO = this._oLoggedAGO;
            var oCB = _context.ChurchBody.AsNoTracking().Include(t => t.ParentChurchBody).Where(c => c.AppGlobalOwnerId==oAppGloOwnId && c.Id==oCBid).FirstOrDefault();
            if (oCB == null) oCB = this._oLoggedCB;

            if (oAGO_MSTR == null || oCB_MSTR == null || oAGO == null || oCB == null)   // || oCU_Parent == null church units may be networked...
            { return View("_ErrorPage"); }

            var strDesc = "Church Member";
            var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();

            var tm = DateTime.Now;
            var oMBModel = new MemberBioModel();
            if (id == 0)
            {   //create user and assign ROLE / GRoMB --- with Privileges

                var oChurchMember = new ChurchMember();
                oChurchMember.AppGlobalOwnerId = oAppGloOwnId;
                oChurchMember.ChurchBodyId = oCBid;
                oChurchMember.DateOfBirth = tm;
                ///
                var oCTRYDef = _context.CountryCustom.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oCBid && c.IsDefaultCountry==true).FirstOrDefault();
                oChurchMember.NationalityId = oCTRYDef != null ? oCTRYDef.CtryAlpha3Code : null;

                  
                // oChurchMember.MemberScope = "I"; // congregant    
                ///
                oMBModel.strMemberScope = GetMemClassDesc(oChurchMember.MemberScope);
                oMBModel.oMemContactInfo = new ContactInfo();
                oMBModel.oMemContactInfo.AppGlobalOwnerId = oAppGloOwnId;
                oMBModel.oMemContactInfo.ChurchBodyId = oCBid;
                oMBModel.oMemContactInfo.CtryAlpha3Code = oCTRYDef != null ? oCTRYDef.CtryAlpha3Code : null;
                ///
                oMBModel.strChurchBody  = oCB.Name;
                oMBModel.strChurchBodyDetail = GetConcatLinkedEntities(oCB.Name, (oCB.ParentChurchBody != null ? oCB.ParentChurchBody.Name : "")) ;
                oMBModel.oChurchMember = oChurchMember;

                oChurchMember.Status = "A";   // A-ctive...On Hold, D-eactive [moved to trash---delete!]
                oMBModel.strAccountStatus = "Active";
                ///
                oMBModel.strMemStatus = "Unassigned"; // "Dummy";   --- let user pick                
                oMBModel.bl_MemberStatusAvail = false;
                oMBModel.dtEnrollDate = tm;

                oMBModel.strMemTypeCode = strMT;
                oMBModel._strMemTypeCodeBck = strMT;

                if (strMT == "N")  /// New Convert
                {
                    //oMBModel.strMemTypeCode = "N";
                    oMBModel.strMemType = "New Convert"; 
                }
                else if (strMT == "C")
                {
                    //oMBModel.strMemTypeCode = "C"; // null
                    oMBModel.strMemType = "Unassigned";
                }
                 

                _userTask = "Attempted creating new " + strDesc.ToLower();
                                
            }

            else
            {
                //// var proScope = "C";
                ////get all member from congregation
                //var oCMList = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oCBid).ToList();

                //// get all users from client-congregation  //.Include(t => t.ContactInfo)
                //var oMB_List = (from t_up in _context.ChurchMember.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGO_MSTR.Id && c.ChurchBodyId == oCB_MSTR.Id && c.ProfileScope == "C")
                //                select t_up).ToList();


                oMBModel = GetMemberBiodata(oAppGloOwnId, oCBid, oCB, null, id, false, _context );

                if (oMBModel == null)
                { 
                    return View("_ErrorPage");
                }
            }

            // disable Custom_Code if auto
            var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)  //.Include(t => t.AppGlobalOwner) //.Include(t => t.OwnedByChurchBody)
                                     .Where(c => c.AppGlobalOwnerId == oCB.AppGlobalOwnerId && c.NVPCode == "MCCF").ToList();

            oNVP_List_1 = oNVP_List_1.Where(c =>
                               (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == oCB.Id ||
                               (c.OwnedByChurchBodyId != oCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != oCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCB)))).ToList();

            var oNVP_MCCF = oNVP_List_1.Where(c => c.ChurchBodyId == oCB.Id && c.NVPSubCode == "AUT_GN" && c.ChurchBody.ChurchLevel.LevelIndex == oNVP_List_1.Min(y => y.ChurchBody.ChurchLevel.LevelIndex)).FirstOrDefault();
            oMBModel.bl_AUT_GN = oNVP_MCCF != null ? oNVP_MCCF.NVPValue == "Y" : false;
             
            //              
            oMBModel.oChurchBodyId = oAppGloOwnId;
            oMBModel.oChurchBodyId = oCBid;
            ///
            oMBModel.oChurchBodyId_Logged_MSTR = this._oLoggedCB.MSTR_ChurchBodyId;
            oMBModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
            oMBModel.oAppGloOwnId_Logged_MSTR = this._oLoggedAGO.MSTR_AppGlobalOwnerId;
            oMBModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
            oMBModel.oUserId_Logged = _oLoggedUser.Id;


            /// load lookups 
            oMBModel = this.populateLookupsCM_BD(oMBModel, oMBModel.oChurchMember);  //setIndex, 

            //var tm = DateTime.Now;
            _userTask = "Opened " + strDesc.ToLower() + " member biodata";
                if (oMBModel.oChurchMember.Id > 0) _userTask += "[" + oMBModel.strMemFullName + " | Member code: " + oMBModel.oChurchMember.GlobalMemberCode + "]";


            //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

            //// refreshValues...
            //var _connstr_CL = this.GetCL_DBConnString();
            //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



            // register @MSTR
            _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                );

            //register @CLNT
            _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                );

            var _oMBModel = Newtonsoft.Json.JsonConvert.SerializeObject(oMBModel);
            TempData["oVmCurrMod"] = _oMBModel; TempData.Keep();

            if (vw == 0)
                return PartialView("_AddModCM_BD", oMBModel);

            else
                return PartialView("_vwAddModCM_BD", oMBModel);  // modal...

        }
         

        //  public IActionResult AddOrEdit_UP(int? oAppGloOwnId = null, int? oChurchBodyId = null, int? id = 0, int setIndex = 0, int subSetIndex = 0, int? oAGOId_Logged = null, int? oCBId_Logged = null, int? oUserId = null) //, int taskIndex = 1)

        public MemberProfileComponentModel GetMPCModel(int? oAppGloOwnId, int? oCBid = null, int? oCMid = null, int? currId = null, int? oParid = null, int s_ndx = 0, int sb_ndx = 0, int vw = 0, string strCurrTask = "", bool inclExtCB_dt = true)
        {
            try
            {
                 

                var oMPCModel = new MemberProfileComponentModel();
                oMPCModel.oAppGloOwnId = oAppGloOwnId; // oCurrCM.AppGlobalOwnerId;
                oMPCModel.oChurchBodyId = oCBid; // oCurrCM.ChurchBodyId;
                oMPCModel.oChurchMemberId = oCMid; // oCurrCM.ChurchBodyId;
                ///
                oMPCModel.oChurchBodyId_Logged_MSTR = this._oLoggedCB.MSTR_ChurchBodyId;
                oMPCModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                oMPCModel.oAppGloOwnId_Logged_MSTR = this._oLoggedAGO.MSTR_AppGlobalOwnerId;
                oMPCModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                oMPCModel.oUserId_Logged = _oLoggedUser.Id;

                oMPCModel.setIndex = s_ndx;
                oMPCModel.subSetIndex = sb_ndx;  // apply to certain areas like CLARD and MCM
                oMPCModel.taskIndex = vw; // vw, -1: read only, 0 - list, 1 - add, 2- edit , 3-delete

                oMPCModel.strCurrTask = strCurrTask;

                var oCB = _context.ChurchBody.AsNoTracking().Include(t => t.ParentChurchBody).Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oCBid).FirstOrDefault();
                if (oCB == null) oCB = this._oLoggedCB; if (oCB == null) return null;

                var _tm = DateTime.Now;

                ChurchMember oCurrCM = null; // _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oCBid && c.Id == oCMid).FirstOrDefault(); 
                if (s_ndx != 1)  //&& vw == 0)
                {
                    oCurrCM = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oCBid && c.Id == oCMid).FirstOrDefault();
                    if (oCurrCM == null) return null; // member bio cannot be null

                    oMPCModel.oChurchMember = oCurrCM;
                    oMPCModel.strMemDisplayName = GetConcatMemberName(oCurrCM.Title, oCurrCM.FirstName, oCurrCM.MiddleName, oCurrCM.LastName, true, true, false, false, true);
                    oMPCModel.strMemFullName = GetConcatMemberName(oCurrCM.Title, oCurrCM.FirstName, oCurrCM.MiddleName, oCurrCM.LastName, false, false, false, false, false);
                }

                // CLA inherits...
                //ChurchBody oCB = null;
                //if (s_ndx == 1 || s_ndx == 9)
                //{
                //var oCB = _context.ChurchBody.AsNoTracking().Include(t => t.ParentChurchBody).Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oCBid).FirstOrDefault();
                //if (oCB == null) oCB = this._oLoggedCB; if (oCB == null) return null;
                //}


                // this attr is used by most of the models... save in memory [class var]
                oCTRYDefault = _context.CountryCustom.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oCBid && c.IsDefaultCountry == true).FirstOrDefault();
               
                
                // oChurchMember.NationalityId = CountryCustom != null ? CountryCustom.CtryAlpha3Code : null;

                ///          
                // mem pers data    ...      BD-1, MCI-2, MLS-3, MFR-4, MCP-5, MED-6, MPB-7, MWE-8 ... 
                ///  
                if (s_ndx == 0 || s_ndx == 1)
                {
                    /// Copy of the //Biodata + ContactInfo// [core member] is created in each but 'different' congregation for same member [oCMid changes, but MemberGlobalCode remains Constant]
                    /// so if Kwesi was at [Grace]... left for [Hatso]... and came back... [//Biodata + ContactInfo// at Grace (deactive) will still be used - Activated] but new bio created at [Hatso] and now... deactive
                    /// flag the old biodata [status - Deactive] and assign [end] all associated processes/ tasks ...
                    /// But other member-related info are not again entered in subsequent congregations -- pick them up as view items... and add-on @ new congregation.
                    /// Typical for transfers and member movements... within the denomination
                    /// 
                    oMPCModel.oMemberBioModel = GetMemberBiodata(oAppGloOwnId, oCBid, oCB, null, (int)oCMid, true, _context);
                    if (oMPCModel.oMemberBioModel == null) return null;   // member bio cannot be null
                    ///
                    //oMPCModel.strMemDisplayName = oMPCModel.oMemberBioModel.strMemDisplayName;
                    //oMPCModel.strMemFullName = oMPCModel.oMemberBioModel.strMemFullName;
                    /////
                    //oMPCModel.oMemberBioModel.oChurchMember = oMPCModel.oChurchMember;
                    //oMPCModel.oMemberBioModel.strMemDisplayName = oMPCModel.strMemDisplayName;
                    //oMPCModel.oMemberBioModel.strMemFullName = oMPCModel.strMemFullName;
                    //oMPCModel.oMemberBioModel.oAppGloOwnId = oMPCModel.oAppGloOwnId;
                    //oMPCModel.oMemberBioModel.oChurchBodyId = oMPCModel.oChurchBodyId;
                    ///
                    oMPCModel.oMemberBioModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                    oMPCModel.oMemberBioModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                    oMPCModel.oMemberBioModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                    oMPCModel.oMemberBioModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                    oMPCModel.oMemberBioModel.oUserId_Logged = oMPCModel.oUserId_Logged;
                    ///
                    oMPCModel.oMemberBioModel.setIndex = oMPCModel.setIndex;   
                    oMPCModel.oMemberBioModel.taskIndex = oMPCModel.taskIndex;   // vw, edit
                     
                    ///
                    oMPCModel.strMemDisplayName = oMPCModel.oMemberBioModel.strMemDisplayName;
                    oMPCModel.strMemFullName = oMPCModel.oMemberBioModel.strMemFullName;


                    // use the modal... 
                    // oMPCModel.oMemberBioModel = populateLookupsCM_BD(oMPCModel.oMemberBioModel, oCurrCM);

                    ///
                    if (s_ndx != 0)
                    {
                        oMPCModel.strCurrTask += " - Biodata";
                        return oMPCModel;
                    }                        
                }

                if (s_ndx == 0 || s_ndx == 2)
                {
                    if (vw == 0)  // list
                    {
                        var oMCI_vwModelList = GetMemberContactInfo(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, _context);

                        //var listErrorOrEmpty = oMCI_ModelList == null;
                        //if (!listErrorOrEmpty) listErrorOrEmpty = oMCI_ModelList.Count == 0;

                        /// returns 0 ... change to edit/add
                        /// 
                        oMPCModel.oMemberContactInfoModel = oMCI_vwModelList.Count > 0 ? oMCI_vwModelList[0] : new MemberContactInfoModel()
                        {
                            oMemContactInfo = new ContactInfo()
                            {
                                AppGlobalOwnerId = oAppGloOwnId,
                                ChurchBodyId = oCBid,
                                ChurchMemberId = oCMid, // unmapped ... cyclic redundancy! 1-1 for now... will be multi later
                                CtryAlpha3Code = this.oCTRYDefault != null ? this.oCTRYDefault.CtryAlpha3Code : null,
                                IsPrimaryContact = true,
                                IsChurchFellow = true,
                                Created = _tm,
                                LastMod = _tm,
                                CreatedByUserId = this._oLoggedUser.Id,
                                LastModByUserId = this._oLoggedUser.Id
                            },
                            ///
                            oAppGloOwnId = oAppGloOwnId,
                            oChurchBodyId = oCBid,
                            oChurchMemberId = oCMid,
                            strHolderName = GetConcatMemberName(oCurrCM.Title, oCurrCM.FirstName, oCurrCM.MiddleName, oCurrCM.LastName, false, false, false, false, false) ,
                            ///  ,
                            setIndex = s_ndx,
                            subSetIndex = sb_ndx,
                            oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                            taskIndex = oMPCModel.taskIndex,
                            strCurrTask = oMPCModel.strCurrTask

                        };

                        if (oMCI_vwModelList.Count == 0) oMPCModel.taskIndex = 1;  //vw.. change the view...
                    }
                    else
                    {
                        if (currId == 0)
                        {
                            oMPCModel.oMemberContactInfoModel = new MemberContactInfoModel()
                            {
                                oMemContactInfo = new ContactInfo()
                                {
                                    AppGlobalOwnerId = oAppGloOwnId,
                                    ChurchBodyId = oCBid,
                                    ChurchMemberId = oCMid, // unmapped ... cyclic redundancy! 1-1 for now... will be multi later
                                    CtryAlpha3Code = this.oCTRYDefault != null ? this.oCTRYDefault.CtryAlpha3Code : null,
                                    IsPrimaryContact = true,
                                    IsChurchFellow = true,
                                    Created = _tm,
                                    LastMod = _tm,
                                    CreatedByUserId = this._oLoggedUser.Id,
                                    LastModByUserId = this._oLoggedUser.Id
                                },
                                ///
                                oAppGloOwnId = oAppGloOwnId,
                                oChurchBodyId = oCBid,
                                oChurchMemberId = oCMid,
                                strHolderName = GetConcatMemberName(oCurrCM.Title, oCurrCM.FirstName, oCurrCM.MiddleName, oCurrCM.LastName, false, false, false, false, false),
                                ///  ,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask
                            };
                        }
                        else  /// exist
                        {
                            var oMCI_moModelList = GetMemberContactInfo(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, _context);
                            oMPCModel.oMemberContactInfoModel = oMCI_moModelList.Count > 0 ? oMCI_moModelList[0] : null; 
                        }
                    }

                    ///
                    if (vw > 0 && oMPCModel.oMemberContactInfoModel != null)
                        oMPCModel.oMemberContactInfoModel = populateLookupsCM_MCI(oMPCModel.oMemberContactInfoModel, oCB);

                     
                    if (oMPCModel.oMemberContactInfoModel != null)
                    {
                        //oMPCModel.oMemberContactInfoModel.oChurchMember = oMPCModel.oChurchMember;
                        //oMPCModel.oMemberContactInfoModel.strMemDisplayName = oMPCModel.strMemDisplayName;
                        //oMPCModel.oMemberContactInfoModel.strMemFullName = oMPCModel.strMemFullName;

                        //oMPCModel.oMemberContactInfoModel.oAppGloOwnId = oMPCModel.oAppGloOwnId;
                        //oMPCModel.oMemberContactInfoModel.oChurchBodyId = oMPCModel.oChurchBodyId;
                        //oMPCModel.oMemberContactInfoModel.oChurchMemberId = oMPCModel.oChurchMemberId;
                        ///
                        oMPCModel.oMemberContactInfoModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                        oMPCModel.oMemberContactInfoModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                        oMPCModel.oMemberContactInfoModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                        oMPCModel.oMemberContactInfoModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                        oMPCModel.oMemberContactInfoModel.oUserId_Logged = oMPCModel.oUserId_Logged;

                        oMPCModel.oMemberContactInfoModel.setIndex = oMPCModel.setIndex;
                        oMPCModel.oMemberContactInfoModel.taskIndex = oMPCModel.taskIndex;   // vw, edit
                         
                    }
                    

                    ///
                    if (s_ndx != 0)
                    {
                        oMPCModel.strCurrTask += " - Contact Details"; 
                        return oMPCModel;
                    }
                }

                if (s_ndx == 0 || s_ndx == 3)
                {
                    if (vw == 0)  // list
                    {
                        var oMLS_vwModelList = GetMemberLanguageSpoken(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, _context);
                        oMPCModel.oMemberLanguageSpokenModel = new MemberLanguageSpokenModel()
                        {
                            lsMemberLanguageSpokenModels = oMLS_vwModelList,
                            // oMemberLanguageSpoken = oMLS_ModelList.Count > 0 ? oMLS_ModelList[0].oMemberLanguageSpoken : null,
                            bl_IsPrimaryLangSet = oMLS_vwModelList.Count > 0 ? (oMLS_vwModelList.Count(c => c.oMemberLanguageSpoken.IsPrimaryLanguage == true) > 0) : false,
                            ///
                            oAppGloOwnId = oAppGloOwnId,
                            oChurchBodyId = oCBid,
                            oChurchMemberId = oCMid,
                            ///,
                            setIndex = s_ndx,
                            subSetIndex = sb_ndx,
                            oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                            taskIndex = oMPCModel.taskIndex,
                            strCurrTask = oMPCModel.strCurrTask, 
                        };
                    }
                    else
                    {
                        if (currId == 0)
                        {
                            oMPCModel.oMemberLanguageSpokenModel = new MemberLanguageSpokenModel()
                            {
                                //lsMemberLanguageSpokenModels = oMLS_ModelList,
                                oMemberLanguageSpoken = new MemberLanguageSpoken()
                                {
                                    AppGlobalOwnerId = oAppGloOwnId,
                                    ChurchBodyId = oCBid,
                                    ChurchMemberId = oCMid,
                                    //IsPrimaryLanguage = true
                                    Created = _tm,
                                    LastMod = _tm,
                                    CreatedByUserId = this._oLoggedUser.Id,
                                    LastModByUserId = this._oLoggedUser.Id
                                },

                                // bl_IsPrimaryLangSet = oMLS_ModelList.Count > 0 ? (oMLS_ModelList.Count(c => c.oMemberLanguageSpoken.IsPrimaryLanguage == true) > 0) : false,

                                ///
                                oAppGloOwnId = oAppGloOwnId,
                                oChurchBodyId = oCBid,
                                oChurchMemberId = oCMid,
                                ///,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask 
                            };
                        }
                        else
                        {
                            var oMLS_moModelList = GetMemberLanguageSpoken(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, _context);
                            if (oMLS_moModelList.Count == 0) return null;
                            ///
                            oMPCModel.oMemberLanguageSpokenModel = new MemberLanguageSpokenModel()
                            {
                                // lsMemberLanguageSpokenModels = oMLS_moModelList,
                                oMemberLanguageSpoken = oMLS_moModelList[0].oMemberLanguageSpoken ,
                                // bl_IsPrimaryLangSet = oMLS_moModelList.Count > 0 ? (oMLS_moModelList.Count(c => c.oMemberLanguageSpoken.IsPrimaryLanguage == true) > 0) : false,
                                ///
                                oAppGloOwnId = oAppGloOwnId,
                                oChurchBodyId = oCBid,
                                oChurchMemberId = oCMid,
                                 ///  
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask
                            };
                        }

                        if (oMPCModel.oMemberLanguageSpokenModel != null)
                            oMPCModel.oMemberLanguageSpokenModel = populateLookupsCM_MLS(oMPCModel.oMemberLanguageSpokenModel, oCB);
                    }
                     

                    if (oMPCModel.oMemberLanguageSpokenModel != null)
                    {
                        //oMPCModel.oMemberLanguageSpokenModel.oAppGloOwnId = oMPCModel.oAppGloOwnId;
                        //oMPCModel.oMemberLanguageSpokenModel.oChurchBodyId = oMPCModel.oChurchBodyId;
                        //oMPCModel.oMemberLanguageSpokenModel.oChurchMemberId = oMPCModel.oChurchMemberId;
                        /// 
                        oMPCModel.oMemberLanguageSpokenModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                        oMPCModel.oMemberLanguageSpokenModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                        oMPCModel.oMemberLanguageSpokenModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                        oMPCModel.oMemberLanguageSpokenModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                        oMPCModel.oMemberLanguageSpokenModel.oUserId_Logged = oMPCModel.oUserId_Logged;

                        oMPCModel.oMemberLanguageSpokenModel.setIndex = oMPCModel.setIndex;
                        oMPCModel.oMemberLanguageSpokenModel.taskIndex = oMPCModel.taskIndex;   // vw, edit                         
                    }
                     
                    /// 
                    if (s_ndx != 0)
                    {
                        oMPCModel.strCurrTask += " - Languages Spoken";
                        return oMPCModel;
                    }
                }
                
                if (s_ndx == 0 || s_ndx == 4)
                {
                    if (vw == 0)  // list
                    {
                        var oMFR_vwModelList = GetMemberFamilyRelation(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, _context);
                        oMPCModel.oMemberRelationModel = new MemberFamilyRelationModel()
                        {
                            lsMemberFamilyRelationModels = oMFR_vwModelList, 
                            oAppGloOwnId = oAppGloOwnId,
                            oChurchBodyId = oCBid,
                            oChurchMemberId = oCMid,
                            strChurchBody = oCB != null ? oCB.Name : "",
                            ///,
                            setIndex = s_ndx,
                            subSetIndex = sb_ndx,
                            oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                            taskIndex = oMPCModel.taskIndex,
                            strCurrTask = oMPCModel.strCurrTask, 
                        };
                    }
                    else
                    {
                        if (currId == 0)
                        {
                            oMPCModel.oMemberRelationModel =  new MemberFamilyRelationModel()
                                                                {
                                                                    //lsMemberLanguageSpokenModels = oMLS_ModelList,
                                                                    oMemberRelation = new MemberRelation()
                                                                    {
                                                                        AppGlobalOwnerId = oAppGloOwnId,
                                                                        ChurchBodyId = oCBid,
                                                                        ChurchMemberId = oCMid,
                                                                        RelationScope = "L",
                                                                        RelationChurchBodyId = oCBid,
                                                                        Status = "A",
                                                                        // IsNextOfKin = true
                                                                        Created = _tm,
                                                                        LastMod = _tm,
                                                                        CreatedByUserId = this._oLoggedUser.Id,
                                                                        LastModByUserId = this._oLoggedUser.Id
                                                                    },

                                                                    ///
                                                                    oAppGloOwnId = oAppGloOwnId,
                                                                    oChurchBodyId = oCBid,
                                                                    oChurchMemberId = oCMid,
                                                                    strChurchBody = oCB != null ? oCB.Name : "",
                                                                    strRelationChurchBody = oCB != null ? oCB.Name : "",
                                ///,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask, 
                            };
                        }
                        else
                        {
                            var oMFR_moModelList = GetMemberFamilyRelation(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, _context);
                            if (oMFR_moModelList.Count == 0) return null;
                            oMPCModel.oMemberRelationModel = oMFR_moModelList[0];  // new MemberFamilyRelationModel()
                                                                                   //{
                                                                                   //    oMemberRelation = oMFR_moModelList[0].oMemberRelation,
                                                                                   //    oAppGloOwnId = oAppGloOwnId,
                                                                                   //    oChurchBodyId = oCBid,
                                                                                   //    oChurchMemberId = oCMid,
                                                                                   //    strChurchBody = oMFR_moModelList[0].strChurchBody,  // oCB != null ? oCB.Name : ""
                                                                                   //    strRelationCategory 
                                                                                   //};
                            oMPCModel.oMemberRelationModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                            oMPCModel.oMemberRelationModel.setIndex = s_ndx;
                            oMPCModel.oMemberRelationModel.subSetIndex = sb_ndx;
                            oMPCModel.oMemberRelationModel.taskIndex = oMPCModel.taskIndex;
                            oMPCModel.oMemberRelationModel.strCurrTask = oMPCModel.strCurrTask;
                        }

                        if (oMPCModel.oMemberRelationModel != null)
                            oMPCModel.oMemberRelationModel = populateLookupsCM_MFR(oMPCModel.oMemberRelationModel, oCB);
                    }
                     
                    if (oMPCModel.oMemberRelationModel != null)
                    {
                        //oMPCModel.oMemberRelationModel.oAppGloOwnId = oMPCModel.oAppGloOwnId;
                        //oMPCModel.oMemberRelationModel.oChurchBodyId = oMPCModel.oChurchBodyId;
                        //oMPCModel.oMemberRelationModel.oChurchMemberId = oMPCModel.oChurchMemberId;
                        ///
                        oMPCModel.oMemberRelationModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                        oMPCModel.oMemberRelationModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                        oMPCModel.oMemberRelationModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                        oMPCModel.oMemberRelationModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                        oMPCModel.oMemberRelationModel.oUserId_Logged = oMPCModel.oUserId_Logged;

                        oMPCModel.oMemberRelationModel.setIndex = oMPCModel.setIndex;
                        oMPCModel.oMemberRelationModel.taskIndex = oMPCModel.taskIndex;   // vw, edit
                         
                    }
                     

                    /// 
                    if (s_ndx != 0)
                    {
                        oMPCModel.strCurrTask += " - Family Relations";
                        return oMPCModel;
                    }
                }                 

                if (s_ndx == 0 || s_ndx == 5)
                {
                    if (vw == 0)  // list
                    {
                        var oMCP_vwModelList = GetMemberContact(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, _context);
                        oMPCModel.oMemberContactModel = new MemberContactPersonModel()
                        {
                            lsMemberContactModels = oMCP_vwModelList, 
                            oAppGloOwnId = oAppGloOwnId,
                            oChurchBodyId = oCBid,
                            oChurchMemberId = oCMid,
                            strChurchBody = oCB != null ? oCB.Name : "",
                            ///,
                            setIndex = s_ndx,
                            subSetIndex = sb_ndx,
                            oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                            taskIndex = oMPCModel.taskIndex,
                            strCurrTask = oMPCModel.strCurrTask, 
                        };
                    }
                    else
                    {
                        if (currId == 0)
                        {
                            oMPCModel.oMemberContactModel = new MemberContactPersonModel()
                                                       {
                                                            //lsMemberLanguageSpokenModels = oMLS_ModelList,
                                                            oMemberContact = new MemberContact()
                                                           {
                                                               AppGlobalOwnerId = oAppGloOwnId,
                                                               ChurchBodyId = oCBid,
                                                               ChurchMemberId = oCMid,
                                                               RelationScope = "L",
                                                               ContactChurchBodyId = oCBid,
                                                               Status = "A",
                                                               IsCurrentContact = true,
                                                               Created = _tm,
                                                                LastMod = _tm,
                                                                CreatedByUserId = this._oLoggedUser.Id,
                                                                LastModByUserId = this._oLoggedUser.Id
                                                            },

                                                            ///
                                                            oAppGloOwnId = oAppGloOwnId,
                                                            oChurchBodyId = oCBid,
                                                            oChurchMemberId = oCMid,
                                                            strChurchBody = oCB != null ? oCB.Name : "",
                                                            strContactChurchBody = oCB != null ? oCB.Name : "",
                                ///,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask, 
                            };
                        }
                        else
                        {
                            var oMCP_moModelList = GetMemberContact(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, _context);
                            if (oMCP_moModelList.Count == 0) return null;
                            oMPCModel.oMemberContactModel = oMCP_moModelList[0];  //new MemberContactPersonModel()
                                                                                  //{ 
                                                                                  //     oMemberContact = oMCP_moModelList[0].oMemberContact,
                                                                                  //     oAppGloOwnId = oAppGloOwnId,
                                                                                  //    oChurchBodyId = oCBid,
                                                                                  //    oChurchMemberId = oCMid
                                                                                  //};
                            oMPCModel.oMemberContactModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                            oMPCModel.oMemberContactModel.setIndex = s_ndx;
                            oMPCModel.oMemberContactModel.subSetIndex = sb_ndx;
                            oMPCModel.oMemberContactModel.taskIndex = oMPCModel.taskIndex;
                            oMPCModel.oMemberContactModel.strCurrTask = oMPCModel.strCurrTask;
                        }

                        if (oMPCModel.oMemberContactModel != null)
                            oMPCModel.oMemberContactModel = populateLookupsCM_MCP(oMPCModel.oMemberContactModel, oCB);
                    }

                     


                    if (oMPCModel.oMemberContactModel != null)
                    {
                        //oMPCModel.oMemberContactModel.oAppGloOwnId = oMPCModel.oAppGloOwnId;
                        //oMPCModel.oMemberContactModel.oChurchBodyId = oMPCModel.oChurchBodyId;
                        //oMPCModel.oMemberContactModel.oChurchMemberId = oMPCModel.oChurchMemberId;
                        ///
                        oMPCModel.oMemberContactModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                        oMPCModel.oMemberContactModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                        oMPCModel.oMemberContactModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                        oMPCModel.oMemberContactModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                        oMPCModel.oMemberContactModel.oUserId_Logged = oMPCModel.oUserId_Logged;

                        oMPCModel.oMemberContactModel.setIndex = oMPCModel.setIndex;  
                        oMPCModel.oMemberContactModel.taskIndex = oMPCModel.taskIndex;   // vw, edit                         
                    }
                    

                    /// 
                    if (s_ndx != 0)
                    {
                        oMPCModel.strCurrTask += " - Contact Persons";
                        return oMPCModel;
                    }
                }                                  

                if (s_ndx == 0 || s_ndx == 6)
                {
                    if (vw == 0)  // list
                    {
                        var oMED_vwModelList = GetMemberEducation(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, _context);
                        oMPCModel.oMemberEducationModel = new MemberEducationModel()
                        {
                            lsMemberEducationModels = oMED_vwModelList, 
                            oAppGloOwnId = oAppGloOwnId,
                            oChurchBodyId = oCBid,
                            oChurchMemberId = oCMid,
                            ///,
                            setIndex = s_ndx,
                            subSetIndex = sb_ndx,
                            oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                            taskIndex = oMPCModel.taskIndex,
                            strCurrTask = oMPCModel.strCurrTask, 
                        };
                    }
                    else
                    {
                        if (currId == 0)
                        {
                            oMPCModel.oMemberEducationModel = new MemberEducationModel()
                                              { 
                                                  oMemberEducation = new MemberEducation()
                                                  {
                                                      AppGlobalOwnerId = oAppGloOwnId,
                                                      ChurchBodyId = oCBid,
                                                      ChurchMemberId = oCMid, CtryAlpha3Code = this.oCTRYDefault != null ? this.oCTRYDefault.CtryAlpha3Code : null,
                                                       FromDate = DateTime.Now,
                                                      //  ToDate = DateTime.Now
                                                      Created = _tm,
                                                      LastMod = _tm,
                                                      CreatedByUserId = this._oLoggedUser.Id,
                                                      LastModByUserId = this._oLoggedUser.Id
                                                  },

                                                  ///
                                                  oAppGloOwnId = oAppGloOwnId,
                                                  oChurchBodyId = oCBid,
                                                  oChurchMemberId = oCMid,
                                ///,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask, 
                            };
                        }
                        else
                        {
                            var oMED_moModelList = GetMemberEducation(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, _context);
                            if (oMED_moModelList.Count == 0) return null;
                            oMPCModel.oMemberEducationModel = oMED_moModelList[0]; // new MemberEducationModel()
                                                                                   //{ 
                                                                                   //    oMemberEducation = oMED_moModelList[0].oMemberEducation,
                                                                                   //    oAppGloOwnId = oAppGloOwnId,
                                                                                   //    oChurchBodyId = oCBid,
                                                                                   //    oChurchMemberId = oCMid
                                                                                   //};
                            oMPCModel.oMemberEducationModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                            oMPCModel.oMemberEducationModel.setIndex = s_ndx;
                            oMPCModel.oMemberEducationModel.subSetIndex = sb_ndx;
                            oMPCModel.oMemberEducationModel.taskIndex = oMPCModel.taskIndex;
                            oMPCModel.oMemberEducationModel.strCurrTask = oMPCModel.strCurrTask;
                        }

                       if (oMPCModel.oMemberEducationModel != null)
                            oMPCModel.oMemberEducationModel = populateLookupsCM_MED(oMPCModel.oMemberEducationModel, oCB);
                      

                    }
                             

                    if (oMPCModel.oMemberEducationModel != null)
                    {
                        //oMPCModel.oMemberEducationModel.oAppGloOwnId = oMPCModel.oAppGloOwnId;
                        //oMPCModel.oMemberEducationModel.oChurchBodyId = oMPCModel.oChurchBodyId;
                        //oMPCModel.oMemberEducationModel.oChurchMemberId = oMPCModel.oChurchMemberId;
                        ///
                        oMPCModel.oMemberEducationModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                        oMPCModel.oMemberEducationModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                        oMPCModel.oMemberEducationModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                        oMPCModel.oMemberEducationModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                        oMPCModel.oMemberEducationModel.oUserId_Logged = oMPCModel.oUserId_Logged;

                        oMPCModel.oMemberEducationModel.setIndex = oMPCModel.setIndex;
                        oMPCModel.oMemberEducationModel.taskIndex = oMPCModel.taskIndex;   // vw, edit
                         
                    }

                    /// 
                    if (s_ndx != 0)
                    {
                        oMPCModel.strCurrTask += " - Education";
                        return oMPCModel;
                    }
                }                 

                if (s_ndx == 0 || s_ndx == 7)
                {
                    if (vw == 0)  // list
                    {
                        var oMPB_vwModelList = GetMemberProfessionBrand(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, _context);
                        oMPCModel.oMemberProfessionBrandModel = new MemberProfessionBrandModel()
                        {
                            lsMemberProfessionBrandModels = oMPB_vwModelList, 
                            oAppGloOwnId = oAppGloOwnId,
                            oChurchBodyId = oCBid,
                            oChurchMemberId = oCMid,
                            ///,
                            setIndex = s_ndx,
                            subSetIndex = sb_ndx,
                            oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                            taskIndex = oMPCModel.taskIndex,
                            strCurrTask = oMPCModel.strCurrTask, 
                        };
                    }
                    else
                    {
                        if (currId == 0)
                        {
                            oMPCModel.oMemberProfessionBrandModel = new MemberProfessionBrandModel()
                                                       {  
                                                            oMemberProfessionBrand = new MemberProfessionBrand()
                                                           {
                                                               AppGlobalOwnerId = oAppGloOwnId,
                                                               ChurchBodyId = oCBid,
                                                               ChurchMemberId = oCMid,
                                                                // CtryAlpha3Code = this.oCTRYDefault != null ? this.oCTRYDefault.CtryAlpha3Code : null,
                                                                FromDate = DateTime.Now,
                                                                //  ToDate = DateTime.Now
                                                                Created = _tm,
                                                                LastMod = _tm,
                                                                CreatedByUserId = this._oLoggedUser.Id,
                                                                LastModByUserId = this._oLoggedUser.Id
                                                            },

                                                            ///
                                                            oAppGloOwnId = oAppGloOwnId,
                                                           oChurchBodyId = oCBid,
                                                           oChurchMemberId = oCMid,
                                ///,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask, 
                            };
                        }
                        else
                        {
                            var oMPB_moModelList = GetMemberProfessionBrand(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, _context);
                            if (oMPB_moModelList.Count == 0) return null;
                            oMPCModel.oMemberProfessionBrandModel = oMPB_moModelList[0]; // new MemberProfessionBrandModel()
                                                                                         //{ 
                                                                                         //     oMemberProfessionBrand = oMPB_moModelList[0].oMemberProfessionBrand,
                                                                                         //     oAppGloOwnId = oAppGloOwnId,
                                                                                         //    oChurchBodyId = oCBid,
                                                                                         //    oChurchMemberId = oCMid
                                                                                         //};
                            oMPCModel.oMemberProfessionBrandModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                            oMPCModel.oMemberProfessionBrandModel.setIndex = s_ndx;
                            oMPCModel.oMemberProfessionBrandModel.subSetIndex = sb_ndx;
                            oMPCModel.oMemberProfessionBrandModel.taskIndex = oMPCModel.taskIndex;
                            oMPCModel.oMemberProfessionBrandModel.strCurrTask = oMPCModel.strCurrTask;
                        }


                        // lookups
                    }
                     

                    if (oMPCModel.oMemberProfessionBrandModel != null)
                    {
                        //oMPCModel.oMemberProfessionBrandModel.oAppGloOwnId = oMPCModel.oAppGloOwnId;
                        //oMPCModel.oMemberProfessionBrandModel.oChurchBodyId = oMPCModel.oChurchBodyId;
                        //oMPCModel.oMemberProfessionBrandModel.oChurchMemberId = oMPCModel.oChurchMemberId;
                        ///
                        oMPCModel.oMemberProfessionBrandModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                        oMPCModel.oMemberProfessionBrandModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                        oMPCModel.oMemberProfessionBrandModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                        oMPCModel.oMemberProfessionBrandModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                        oMPCModel.oMemberProfessionBrandModel.oUserId_Logged = oMPCModel.oUserId_Logged;

                        oMPCModel.oMemberProfessionBrandModel.setIndex = oMPCModel.setIndex;   // vw, edit
                        oMPCModel.oMemberProfessionBrandModel.taskIndex = oMPCModel.taskIndex;   // vw, edit

                    }


                    /// 
                    if (s_ndx != 0)
                    {
                        oMPCModel.strCurrTask += " - Profession /Brand";
                        return oMPCModel;
                    }
                }                 

                if (s_ndx == 0 || s_ndx == 8)
                {
                    if (vw == 0)  // list
                    {
                        var oMWE_vwModelList = GetMemberWorkExperience(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, _context);
                        oMPCModel.oMemberWorkExperienceModel = new MemberWorkExperienceModel()
                        {
                            lsMemberWorkExperienceModels = oMWE_vwModelList,
                            oAppGloOwnId = oAppGloOwnId,
                            oChurchBodyId = oCBid,
                            oChurchMemberId = oCMid,
                            ///,
                            setIndex = s_ndx,
                            subSetIndex = sb_ndx,
                            oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                            taskIndex = oMPCModel.taskIndex,
                            strCurrTask = oMPCModel.strCurrTask, 
                        };
                    }
                    else
                    {
                        if (currId == 0)
                        {
                            oMPCModel.oMemberWorkExperienceModel = new MemberWorkExperienceModel()
                                    { 
                                        oMemberWorkExperience = new MemberWorkExperience()
                                        {
                                            AppGlobalOwnerId = oAppGloOwnId,
                                            ChurchBodyId = oCBid,
                                            ChurchMemberId = oCMid,
                                            FromDate = DateTime.Now,
                                            //  ToDate = DateTime.Now
                                            Created = _tm,
                                            LastMod = _tm,
                                            CreatedByUserId = this._oLoggedUser.Id,
                                            LastModByUserId = this._oLoggedUser.Id
                                        },

                                        ///
                                        oAppGloOwnId = oAppGloOwnId,
                                        oChurchBodyId = oCBid,
                                        oChurchMemberId = oCMid,
                                ///,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask, 
                            };
                        }
                        else
                        {
                            var oMWE_moModelList = GetMemberWorkExperience(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, _context);
                            if (oMWE_moModelList.Count == 0) return null;
                            oMPCModel.oMemberWorkExperienceModel = oMWE_moModelList[0]; // new MemberWorkExperienceModel()
                                                                                        //{
                                                                                        //    oMemberWorkExperience = oMWE_moModelList[0].oMemberWorkExperience,
                                                                                        //    oAppGloOwnId = oAppGloOwnId,
                                                                                        //    oChurchBodyId = oCBid,
                                                                                        //    oChurchMemberId = oCMid
                                                                                        //};
                            oMPCModel.oMemberWorkExperienceModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                            oMPCModel.oMemberWorkExperienceModel.setIndex = s_ndx;
                            oMPCModel.oMemberWorkExperienceModel.subSetIndex = sb_ndx;
                            oMPCModel.oMemberWorkExperienceModel.taskIndex = oMPCModel.taskIndex;
                            oMPCModel.oMemberWorkExperienceModel.strCurrTask = oMPCModel.strCurrTask;
                        }


                        // lookups
                        if (oMPCModel.oMemberWorkExperienceModel != null)
                            oMPCModel.oMemberWorkExperienceModel = populateLookupsCM_MWE(oMPCModel.oMemberWorkExperienceModel, oCB);
                    }
                     

                    if (oMPCModel.oMemberWorkExperienceModel != null)
                    {
                        //oMPCModel.oMemberWorkExperienceModel.oAppGloOwnId = oMPCModel.oAppGloOwnId;
                        //oMPCModel.oMemberWorkExperienceModel.oChurchBodyId = oMPCModel.oChurchBodyId;
                        //oMPCModel.oMemberWorkExperienceModel.oChurchMemberId = oMPCModel.oChurchMemberId;
                        ///
                        oMPCModel.oMemberWorkExperienceModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                        oMPCModel.oMemberWorkExperienceModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                        oMPCModel.oMemberWorkExperienceModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                        oMPCModel.oMemberWorkExperienceModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                        oMPCModel.oMemberWorkExperienceModel.oUserId_Logged = oMPCModel.oUserId_Logged;

                        oMPCModel.oMemberWorkExperienceModel.setIndex = oMPCModel.setIndex;   // vw, edit
                        oMPCModel.oMemberWorkExperienceModel.taskIndex = oMPCModel.taskIndex;   // vw, edit
                         
                    }


                    /// 
                    if (s_ndx != 0)
                    {
                        oMPCModel.strCurrTask += " - Work Experience";
                        return oMPCModel;
                    }
                }
 

                /// church-related ... CB could be anywhere
                ///                
                if (s_ndx == 0 || s_ndx == 11)    // sb: 0-all 1-cl, 2-cla, 3-clard [oParid]
                {
                     
                    oMPCModel.oMemberChurchlifeAllModel = new MemberChurchlifeAllModel()
                    {
                        oAppGloOwnId = oAppGloOwnId,
                        oChurchBodyId = oCBid,
                        oChurchMemberId = oCMid,
                        setIndex = s_ndx,
                        subSetIndex = sb_ndx,
                        oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                    };
                     
                    if (s_ndx == 0 || sb_ndx == 0 || sb_ndx == 1)
                    {
                        if (vw == 0)  // list
                        {
                            var oMCL_vwModel = GetMemberChurchlife(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, inclExtCB_dt, _context);
                            oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel = oMCL_vwModel != null ? oMCL_vwModel : new MemberChurchlifeModel()
                            {
                                oMemberChurchlife = new MemberChurchlife()
                                {
                                    AppGlobalOwnerId = oAppGloOwnId,
                                    ChurchBodyId = oCBid,
                                    ChurchMemberId = (int)oCMid,
                                    IsCurrentMember = true,
                                    DateJoined = DateTime.Now,
                                    SharingStatus="A",
                                    Created = _tm,
                                    LastMod = _tm,
                                    CreatedByUserId = this._oLoggedUser.Id,
                                    LastModByUserId = this._oLoggedUser.Id
                                },

                                oAppGloOwnId = oAppGloOwnId,
                                oChurchBodyId = oCBid,
                                oChurchMemberId = oCMid,
                                ///
                                oChurchBody = oCB,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask, 
                            };

                            //if (oMCL_vwModel == null) oMPCModel.taskIndex = 1;  //vw.. change the view...
                        }
                        else
                        {
                            if (currId == 0)
                            { 
                                oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel = new MemberChurchlifeModel()
                                {
                                    oMemberChurchlife = new MemberChurchlife()
                                    {
                                        AppGlobalOwnerId = oAppGloOwnId,
                                        ChurchBodyId = oCBid,
                                        ChurchMemberId = (int)oCMid,
                                        IsCurrentMember = true,
                                        DateJoined = DateTime.Now,
                                        SharingStatus = "A"
                                    },

                                    oAppGloOwnId = oAppGloOwnId,
                                    oChurchBodyId = oCBid,
                                    oChurchMemberId = oCMid,
                                    ///
                                    oChurchBody = oCB, 
                                    setIndex = s_ndx,
                                    subSetIndex = sb_ndx,
                                    oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                    taskIndex = oMPCModel.taskIndex,
                                    strCurrTask = oMPCModel.strCurrTask,
                                    strOwnedByCB = oCB.Name,
                                    strOwnedByCBLevel = oCB != null ? (oCB.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB.ChurchLevel.CustomName) ? oCB.ChurchLevel.CustomName : oCB.ChurchLevel.Name) : "") : "",
                                    // strOwnStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym),
                                    strOwnStatus = GetAdhocStatusDesc(oCB.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                                    // strSharingStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym)
                                };
                            }
                            else
                            {
                                var oMCL_moModel = GetMemberChurchlife(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, inclExtCB_dt, _context);                                
                                oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel = oMCL_moModel != null ? oMCL_moModel : new MemberChurchlifeModel()
                                {
                                    oMemberChurchlife = new MemberChurchlife()
                                    {
                                        AppGlobalOwnerId = oAppGloOwnId,
                                        ChurchBodyId = oCBid,
                                        ChurchMemberId = (int)oCMid,
                                        IsCurrentMember = true,
                                        DateJoined = DateTime.Now,
                                        SharingStatus = "A",
                                        Created = _tm,
                                        LastMod = _tm,
                                        CreatedByUserId = this._oLoggedUser.Id,
                                        LastModByUserId = this._oLoggedUser.Id
                                    }, 

                                    oAppGloOwnId = oAppGloOwnId,
                                    oChurchBodyId = oCBid,
                                    oChurchMemberId = oCMid,
                                    ///
                                    setIndex = s_ndx,
                                    subSetIndex = sb_ndx,
                                    oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                    taskIndex = oMPCModel.taskIndex,
                                    strCurrTask = oMPCModel.strCurrTask,
                                    strOwnedByCB = oCB.Name,
                                    strOwnedByCBLevel = oCB != null ? (oCB.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB.ChurchLevel.CustomName) ? oCB.ChurchLevel.CustomName : oCB.ChurchLevel.Name) : "") : "",
                                    // strOwnStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym),
                                    strOwnStatus = GetAdhocStatusDesc(oCB.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                                    // strSharingStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym)
                                };
                            } 
                        }

                        if (oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel != null)
                            oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel = populateLookupsCM_MCL(oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel, oCB);

                        ///
                        ///
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.oUserId_Logged = oMPCModel.oUserId_Logged;

                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.taskIndex = oMPCModel.taskIndex;   // vw, edit
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.setIndex = oMPCModel.setIndex;   // 11
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.subSetIndex = oMPCModel.subSetIndex;   // sb: 0-all 1-cl, 2-cla, 3-clard [oParid]                     

                        /// 
                        if (s_ndx != 0)
                        {
                            oMPCModel.strCurrTask += " - Churchlife & Events";
                            return oMPCModel;
                        }
                    }

                    if (s_ndx == 0 || sb_ndx == 0 || sb_ndx == 2)
                    {
                        if (vw == 0)  // list
                        {
                            var oMCLAc_vwModelList = GetMemberChurchlifeActivity(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, inclExtCB_dt, _context); 
                            oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel = new MemberChurchlifeActivityModel()
                            {
                                lsMemberChurchlifeActivityModels = oMCLAc_vwModelList,
                                ///
                                oAppGloOwnId = oAppGloOwnId,
                                oChurchBodyId = oCBid,
                                oChurchMemberId = oCMid,
                                ///,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask, 
                            };
                        }
                        else
                        {
                            if (currId == 0)
                            {
                                oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel = new MemberChurchlifeActivityModel()
                                                    {
                                                        //lsMemberChurchlifeActivityModels = oMLS_ModelList,
                                                        oMemberChurchlifeActivity = new MemberChurchlifeActivity()
                                                        {
                                                            AppGlobalOwnerId = oAppGloOwnId,
                                                            ChurchBodyId = oCBid, 
                                                            VenueChurchBodyId = oCBid, HostVenueScope = "L", 
                                                            OfficiatedByChurchBodyId = oCBid, OfficiatedByScope = "L", 
                                                            ChurchMemberId = oCMid,
                                                            //IsChurchEvent = true,
                                                            SharingStatus = "A",
                                                            EventDate = DateTime.Now,
                                                            Created = _tm,
                                                            LastMod = _tm,
                                                            CreatedByUserId = this._oLoggedUser.Id,
                                                            LastModByUserId = this._oLoggedUser.Id
                                                        },

                                                        ///
                                                        oAppGloOwnId = oAppGloOwnId,
                                                        oChurchBodyId = oCBid,
                                                        oChurchMemberId = oCMid,
                                    ///
                                    oChurchBody = oCB,
                                    setIndex = s_ndx,
                                    subSetIndex = sb_ndx,
                                    oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                    taskIndex = oMPCModel.taskIndex,
                                    strCurrTask = oMPCModel.strCurrTask,
                                    strOwnedByCB = oCB.Name,
                                    strVenueChurchBody = oCB.Name,
                                    strOfficiatedByChurchBody = oCB.Name,

                                    strOwnedByCBLevel = oCB != null ? (oCB.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB.ChurchLevel.CustomName) ? oCB.ChurchLevel.CustomName : oCB.ChurchLevel.Name) : "") : "",
                                    // strOwnStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym),
                                    strOwnStatus = GetAdhocStatusDesc(oCB.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                                    // strSharingStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym)
                                };
                            }
                            else
                            {
                                var oMCLAc_moModelList = GetMemberChurchlifeActivity(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, inclExtCB_dt, _context);
                                if (oMCLAc_moModelList.Count == 0) return null;
                                oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel = oMCLAc_moModelList[0];//new MemberChurchlifeActivityModel()
                                                                                                                           //{ 
                                                                                                                           //    oMemberChurchlifeActivity = oMCLAc_moModelList[0].oMemberChurchlifeActivity,
                                                                                                                           //    ///
                                                                                                                           //    oAppGloOwnId = oAppGloOwnId,
                                                                                                                           //    oChurchBodyId = oCBid,
                                                                                                                           //    oChurchMemberId = oCMid
                                                                                                                           //};
                                oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                                oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel.setIndex = s_ndx;
                                oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel.subSetIndex = sb_ndx;
                                oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel.taskIndex = oMPCModel.taskIndex;
                                oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel.strCurrTask = oMPCModel.strCurrTask;
                            }

                            if (oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel != null)
                                oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel = populateLookupsCM_MCLAc(oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel, oCB);
                             
                        }
                         
                        ///
                        ///
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel.oUserId_Logged = oMPCModel.oUserId_Logged;
                                                             
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel.taskIndex = oMPCModel.taskIndex;   // vw, edit
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel.setIndex = oMPCModel.setIndex;   // 11
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel.subSetIndex = oMPCModel.subSetIndex;   // sb: 0-all 1-cl, 2-cla, 3-clard [oParid]                     

                        /// 
                        if (s_ndx != 0)
                        {
                            oMPCModel.strCurrTask += " - Church Activities";
                            return oMPCModel;
                        }
                    }

                    if (s_ndx == 0 || sb_ndx == 0 || sb_ndx == 3)
                    {
                        /// oParid must be the oMCLAid ---> 
                        var oMCLAc = _context.MemberChurchlifeActivity.AsNoTracking().Include(t => t.ChurchlifeActivity)
                            .Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oParid).FirstOrDefault();

                        if (oMCLAc != null) 
                        {
                            if (vw == 0)  // list
                            {
                                var oMCET_vwModelList = GetMemberChurchlifeEventTask(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, oMCLAc.Id, inclExtCB_dt, _context); 
                                oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel = new MemberChurchlifeEventTaskModel()
                                {
                                    lsMemberChurchlifeEventTaskModels = oMCET_vwModelList,
                                    oAppGloOwnId = oAppGloOwnId,
                                    oChurchBodyId = oCBid,
                                    oChurchMemberId = oCMid,
                                    ///
                                    setIndex = s_ndx,
                                    subSetIndex = sb_ndx,
                                    oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                    taskIndex = oMPCModel.taskIndex,
                                    strCurrTask = oMPCModel.strCurrTask, 
                                };
                            }
                            else
                            {
                                if (currId == 0)
                                {                                     
                                    oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel = new MemberChurchlifeEventTaskModel()
                                    {
                                        oMemberChurchlifeEventTask = new MemberChurchlifeEventTask()
                                        {
                                            AppGlobalOwnerId = oAppGloOwnId,
                                            ChurchBodyId = oCBid,
                                            ChurchMemberId = oCMid,
                                            MemberChurchlifeActivityId = oMCLAc.Id,
                                            TaskStatus = "P",   // Pending
                                            SharingStatus = "A",
                                            DateCommenced = DateTime.Now,
                                            // DateCompleted = DateTime.Now                                            
                                            Created = _tm,
                                            LastMod = _tm,
                                            CreatedByUserId = this._oLoggedUser.Id,
                                            LastModByUserId = this._oLoggedUser.Id
                                        },

                                        ///
                                        oAppGloOwnId = oAppGloOwnId,
                                        oChurchBodyId = oCBid,
                                        oChurchMemberId = oCMid,
                                        ///
                                        oChurchBody = oCB,
                                        setIndex = s_ndx,
                                        subSetIndex = sb_ndx,
                                        oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                        taskIndex = oMPCModel.taskIndex,
                                        strCurrTask = oMPCModel.strCurrTask,
                                        strOwnedByCB = oCB.Name,
                                        strOwnedByCBLevel = oCB != null ? (oCB.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB.ChurchLevel.CustomName) ? oCB.ChurchLevel.CustomName : oCB.ChurchLevel.Name) : "") : "",
                                        // strOwnStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym),
                                        strOwnStatus = GetAdhocStatusDesc(oCB.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                                        // strSharingStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym)
                                    };
                                }
                                else
                                {
                                    var oMCET_moModelList = GetMemberChurchlifeEventTask(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, oMCLAc.Id, inclExtCB_dt, _context);
                                    if (oMCET_moModelList.Count == 0) return null;
                                    oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel = oMCET_moModelList[0]; // new MemberChurchlifeEventTaskModel()
                                                                                                                                //{
                                                                                                                                //    oMemberChurchlifeEventTask = oMCET_moModelList[0].oMemberChurchlifeEventTask,
                                                                                                                                //    oAppGloOwnId = oAppGloOwnId,
                                                                                                                                //    oChurchBodyId = oCBid,
                                                                                                                                //    oChurchMemberId = oCMid
                                                                                                                                //};
                                    oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                                    oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel.setIndex = s_ndx;
                                    oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel.subSetIndex = sb_ndx;
                                    oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel.taskIndex = oMPCModel.taskIndex;
                                    oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel.strCurrTask = oMPCModel.strCurrTask;
                                }

                                if (oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel != null)
                                    oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel = populateLookupsCM_MCET(oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel, oCB, oCMid, oMCLAc.ChurchlifeActivityId);  /// oParid must be the oMCLAid ---> oCLAid
                            }
                        } 
                        else 
                        {
                            oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel = new MemberChurchlifeEventTaskModel()
                            {
                                lsMemberChurchlifeEventTaskModels = new List<MemberChurchlifeEventTaskModel>(),
                                oAppGloOwnId = oAppGloOwnId,
                                oChurchBodyId = oCBid,
                                oChurchMemberId = oCMid,
                                ///,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask, 
                            };
                        }

                        ///
                        ///
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel.oUserId_Logged = oMPCModel.oUserId_Logged;
                                                             
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel.taskIndex = oMPCModel.taskIndex;   // vw, edit
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel.setIndex = oMPCModel.setIndex;   // 11
                        oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel.subSetIndex = oMPCModel.subSetIndex;   // sb: 0-all 1-cl, 2-cla, 3-clard [oParid]                     

                        /// 
                        if (s_ndx != 0)
                        {
                            oMPCModel.strCurrTask += " - Church Activity Events";
                            return oMPCModel;
                        }

                    }
                     

                    /////
                    /////
                    //oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                    //oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                    //oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                    //oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                    //oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.oUserId_Logged = oMPCModel.oUserId_Logged;

                    //oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.taskIndex = oMPCModel.taskIndex;   // vw, edit
                    //oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.setIndex = oMPCModel.setIndex;   // 11
                    //oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel.subSetIndex = oMPCModel.subSetIndex;   // sb: 0-all 1-cl, 2-cla, 3-clard [oParid]                     

                    ///// 
                    //if (s_ndx != 0)
                    //{
                    //    oMPCModel.strCurrTask += " - Churchlife & Events";
                    //    return oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel;
                    //}
                }                 

                if (s_ndx == 0 || s_ndx == 12)
                {                     
                    oMPCModel.oMemberChurchMovementModel = new MemberChurchMovementModel()
                    {
                        oAppGloOwnId = oAppGloOwnId,
                        oChurchBodyId = oCBid,
                        oChurchMemberId = oCMid,
                        ///,
                        setIndex = s_ndx,
                        subSetIndex = sb_ndx,
                        oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                    };

                    if (s_ndx == 0 || sb_ndx == 0 || sb_ndx == 1)
                    {
                        if (vw == 0)  // list
                        {
                            var oMT_vwModelList = GetMemberType(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, inclExtCB_dt, _context); 
                            oMPCModel.oMemberChurchMovementModel.oMemberTypeModel = new MemberTypeModel()
                            {
                                lsMemberTypeModels = oMT_vwModelList, //[0].oMemberType,
                                ///
                                oAppGloOwnId = oAppGloOwnId,
                                oChurchBodyId = oCBid,
                                oChurchMemberId = oCMid,
                                ///,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask, 
                            };
                        }
                        else
                        {
                            if (currId == 0)
                            {
                                oMPCModel.oMemberChurchMovementModel.oMemberTypeModel = new MemberTypeModel()
                                            { 
                                                oMemberType = new MemberType()
                                                {
                                                    AppGlobalOwnerId = oAppGloOwnId,
                                                    ChurchBodyId = oCBid,
                                                    ChurchMemberId = oCMid,
                                                    IsCurrent = true,
                                                    SharingStatus = "A",
                                                    FromDate = DateTime.Now,
                                                    // ToDate = DateTime.Now
                                                    Created = _tm,
                                                    LastMod = _tm,
                                                    CreatedByUserId = this._oLoggedUser.Id,
                                                    LastModByUserId = this._oLoggedUser.Id
                                                },

                                                ///
                                                oAppGloOwnId = oAppGloOwnId,
                                                oChurchBodyId = oCBid,
                                                oChurchMemberId = oCMid, 
                                    ///
                                    oChurchBody = oCB,
                                    oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                    setIndex = s_ndx,
                                    subSetIndex = sb_ndx,
                                    taskIndex = oMPCModel.taskIndex, 
                                                strCurrTask = oMPCModel.strCurrTask,
                                                strOwnedByCB = oCB.Name,                                                
                                                strOwnedByCBLevel = oCB != null ? (oCB.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB.ChurchLevel.CustomName) ? oCB.ChurchLevel.CustomName : oCB.ChurchLevel.Name) : "") : "",
                                                // strOwnStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym),
                                                strOwnStatus = GetAdhocStatusDesc(oCB.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                                               // strSharingStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym)

                                };
                            }
                            else
                            {
                                var oMT_moModelList = GetMemberType(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, inclExtCB_dt, _context);
                                if (oMT_moModelList.Count == 0) return null;
                                oMPCModel.oMemberChurchMovementModel.oMemberTypeModel = oMT_moModelList[0];// new MemberTypeModel()
                                                                                                           //{ 
                                                                                                           //    oMemberType = oMT_moModelList[0].oMemberType,
                                                                                                           //    ///
                                                                                                           //    oAppGloOwnId = oAppGloOwnId,
                                                                                                           //    oChurchBodyId = oCBid,
                                                                                                           //    oChurchMemberId = oCMid
                                                                                                           //};

                                oMPCModel.oMemberChurchMovementModel.oMemberTypeModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged; 
                                oMPCModel.oMemberChurchMovementModel.oMemberTypeModel.setIndex = s_ndx; 
                                oMPCModel.oMemberChurchMovementModel.oMemberTypeModel.subSetIndex = sb_ndx; 
                                oMPCModel.oMemberChurchMovementModel.oMemberTypeModel.taskIndex = oMPCModel.taskIndex; 
                                oMPCModel.oMemberChurchMovementModel.oMemberTypeModel.strCurrTask = oMPCModel.strCurrTask; 

                            }

                            if (oMPCModel.oMemberChurchMovementModel.oMemberTypeModel != null)
                                oMPCModel.oMemberChurchMovementModel.oMemberTypeModel = populateLookupsCM_MT(oMPCModel.oMemberChurchMovementModel.oMemberTypeModel, oCB);
                        }

                        if (s_ndx != 0)
                        {
                            oMPCModel.strCurrTask += " - Movements and Transitions";
                            //oMPCModel.oMemberChurchMovementModel.oMemberTypeModel.taskIndex = oMPCModel.taskIndex;
                            //oMPCModel.oMemberChurchMovementModel.oMemberTypeModel.strCurrTask = oMPCModel.strCurrTask;
                            /////
                            return oMPCModel;
                        }
                    }

                    if (s_ndx == 0 || sb_ndx == 0 || sb_ndx == 2)
                    {

                        if (vw == 0)  // list
                        {
                            var oMR_vwModelList = GetMemberRank(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, inclExtCB_dt, _context); 
                            oMPCModel.oMemberChurchMovementModel.oMemberRankModel = new MemberRankModel()
                            {
                                lsMemberRankModels = oMR_vwModelList,
                                ///
                                oAppGloOwnId = oAppGloOwnId,
                                oChurchBodyId = oCBid,
                                oChurchMemberId = oCMid,
                                  ///
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                            };
                        }
                        else
                        {
                            if (currId == 0)
                            {
                                oMPCModel.oMemberChurchMovementModel.oMemberRankModel = new MemberRankModel()
                                                {
                                                    //lsMemberChurchlifeEventTaskModels = oMLS_ModelList,
                                                    oMemberRank = new MemberRank()
                                                    {
                                                        AppGlobalOwnerId = oAppGloOwnId,
                                                        ChurchBodyId = oCBid,
                                                        ChurchMemberId = oCMid,
                                                        IsCurrentRank = true,
                                                        SharingStatus = "A",
                                                        FromDate = DateTime.Now,
                                                        // ToDate = DateTime.Now
                                                        Created = _tm,
                                                        LastMod = _tm,
                                                        CreatedByUserId = this._oLoggedUser.Id,
                                                        LastModByUserId = this._oLoggedUser.Id
                                                    },

                                                    ///
                                                    oAppGloOwnId = oAppGloOwnId,
                                                    oChurchBodyId = oCBid,
                                                    oChurchMemberId = oCMid,
                                    ///
                                    oChurchBody = oCB, 
                                    setIndex = s_ndx,
                                    subSetIndex = sb_ndx,
                                    oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                    taskIndex = oMPCModel.taskIndex,
                                                    strCurrTask = oMPCModel.strCurrTask,
                                                    strOwnedByCB = oCB.Name,
                                                    strOwnedByCBLevel = oCB != null ? (oCB.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB.ChurchLevel.CustomName) ? oCB.ChurchLevel.CustomName : oCB.ChurchLevel.Name) : "") : "",
                                                    // strOwnStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym),
                                                    strOwnStatus = GetAdhocStatusDesc(oCB.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                                                   // strSharingStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym)
                                                };
                            }
                            else
                            {
                                var oMR_moModelList = GetMemberRank(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, inclExtCB_dt, _context);
                                if (oMR_moModelList.Count == 0) return null;
                                oMPCModel.oMemberChurchMovementModel.oMemberRankModel = oMR_moModelList[0]; // new MemberRankModel()
                                                                                                            //{ 
                                                                                                            //     oMemberRank = oMR_moModelList[0].oMemberRank,
                                                                                                            //     ///
                                                                                                            //     oAppGloOwnId = oAppGloOwnId,
                                                                                                            //     oChurchBodyId = oCBid,
                                                                                                            //     oChurchMemberId = oCMid
                                                                                                            //};
                                oMPCModel.oMemberChurchMovementModel.oMemberRankModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                                oMPCModel.oMemberChurchMovementModel.oMemberRankModel.setIndex = s_ndx;
                                oMPCModel.oMemberChurchMovementModel.oMemberRankModel.subSetIndex = sb_ndx;
                                oMPCModel.oMemberChurchMovementModel.oMemberRankModel.taskIndex = oMPCModel.taskIndex;
                                oMPCModel.oMemberChurchMovementModel.oMemberRankModel.strCurrTask = oMPCModel.strCurrTask;
                            }

                            if (oMPCModel.oMemberChurchMovementModel.oMemberRankModel != null)
                                oMPCModel.oMemberChurchMovementModel.oMemberRankModel = populateLookupsCM_MR(oMPCModel.oMemberChurchMovementModel.oMemberRankModel, oCB);
                        }

                        if (s_ndx != 0)
                        {
                            oMPCModel.strCurrTask += " - Movements and Transitions";
                            return oMPCModel;
                        }
                    }

                    if (s_ndx == 0 || sb_ndx == 0 || sb_ndx == 3)
                    {

                        if (vw == 0)  // list
                        {
                            var oMS_vwModelList = GetMemberStatus(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, inclExtCB_dt, _context); 
                            oMPCModel.oMemberChurchMovementModel.oMemberStatusModel = new MemberStatusModel()
                            {
                                lsMemberStatusModels = oMS_vwModelList,
                                ///
                                oAppGloOwnId = oAppGloOwnId,
                                oChurchBodyId = oCBid,
                                oChurchMemberId = oCMid,
                                ///,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask 
                            };
                        }
                        else
                        {
                            if (currId == 0)
                            {
                                oMPCModel.oMemberChurchMovementModel.oMemberStatusModel = new MemberStatusModel()
                                                { 
                                                    oMemberStatus = new MemberStatus()
                                                    {
                                                        AppGlobalOwnerId = oAppGloOwnId,
                                                        ChurchBodyId = oCBid,
                                                        ChurchMemberId = oCMid,
                                                        IsCurrent = true,
                                                        SharingStatus = "A",
                                                        FromDate = DateTime.Now,
                                                        // ToDate = DateTime.Now
                                                        Created = _tm,
                                                        LastMod = _tm,
                                                        CreatedByUserId = this._oLoggedUser.Id,
                                                        LastModByUserId = this._oLoggedUser.Id
                                                    },

                                                    ///
                                                    oAppGloOwnId = oAppGloOwnId,
                                                    oChurchBodyId = oCBid,
                                                    oChurchMemberId = oCMid,
                                    ///
                                    oChurchBody = oCB,
                                    setIndex = s_ndx,
                                    subSetIndex = sb_ndx,
                                    oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                    taskIndex = oMPCModel.taskIndex,
                                                    strCurrTask = oMPCModel.strCurrTask,
                                                    strOwnedByCB = oCB.Name,
                                                    strOwnedByCBLevel = oCB != null ? (oCB.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB.ChurchLevel.CustomName) ? oCB.ChurchLevel.CustomName : oCB.ChurchLevel.Name) : "") : "",
                                                    // strOwnStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym),
                                                    strOwnStatus = GetAdhocStatusDesc(oCB.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                                                    // strSharingStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym)
                                };
                            }
                            else
                            {
                                var oMS_moModelList = GetMemberStatus(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, inclExtCB_dt, _context);
                                if (oMS_moModelList.Count == 0) return null;
                                oMPCModel.oMemberChurchMovementModel.oMemberStatusModel = oMS_moModelList[0]; // new MemberStatusModel()
                                                                                                              //{
                                                                                                              //    oMemberStatus = oMS_moModelList[0].oMemberStatus,
                                                                                                              //    ///
                                                                                                              //    oAppGloOwnId = oAppGloOwnId,
                                                                                                              //    oChurchBodyId = oCBid,
                                                                                                              //    oChurchMemberId = oCMid
                                                                                                              //};
                                oMPCModel.oMemberChurchMovementModel.oMemberStatusModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                                oMPCModel.oMemberChurchMovementModel.oMemberStatusModel.setIndex = s_ndx;
                                oMPCModel.oMemberChurchMovementModel.oMemberStatusModel.subSetIndex = sb_ndx;
                                oMPCModel.oMemberChurchMovementModel.oMemberStatusModel.taskIndex = oMPCModel.taskIndex;
                                oMPCModel.oMemberChurchMovementModel.oMemberStatusModel.strCurrTask = oMPCModel.strCurrTask;
                            }

                            if (oMPCModel.oMemberChurchMovementModel.oMemberStatusModel != null)
                                oMPCModel.oMemberChurchMovementModel.oMemberStatusModel = populateLookupsCM_MS(oMPCModel.oMemberChurchMovementModel.oMemberStatusModel, oCB);
                        }

                        if (s_ndx != 0)
                        {
                            oMPCModel.strCurrTask += " - Movements and Transitions";
                            return oMPCModel;
                        }
                    }
                                           
                    ///
                    oMPCModel.oMemberChurchMovementModel .oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                    oMPCModel.oMemberChurchMovementModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                    oMPCModel.oMemberChurchMovementModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                    oMPCModel.oMemberChurchMovementModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                    oMPCModel.oMemberChurchMovementModel.oUserId_Logged = oMPCModel.oUserId_Logged;

                    oMPCModel.oMemberChurchMovementModel.taskIndex = oMPCModel.taskIndex;   // vw, edit
                    oMPCModel.oMemberChurchMovementModel.setIndex = oMPCModel.setIndex;   // 12
                    oMPCModel.oMemberChurchMovementModel.subSetIndex = oMPCModel.subSetIndex;   // sb: 0-all 1-cl, 2-cla, 3-clard [oParid]
                     
                    /// 
                    //if (s_ndx != 0)
                    //{
                    //    oMPCModel.strCurrTask += " - Movements and Transitions";
                    //    return oMPCModel;
                    //}
                }
                                 
                if (s_ndx == 0 || s_ndx == 13)
                {
                    if (vw == 0)  // list
                    {
                        var oMCG_vwModelList = GetMemberChurchGrouping(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, inclExtCB_dt, _context); 
                        oMPCModel.oMemberGroupingModel =  new MemberChurchGroupingModel()
                                           {
                                               lsMemberChurchGroupingModels = oMCG_vwModelList,
                                                   ///
                                               oAppGloOwnId = oAppGloOwnId,
                                               oChurchBodyId = oCBid,
                                               oChurchMemberId = oCMid,
                            ///,
                            setIndex = s_ndx,
                            subSetIndex = sb_ndx,
                            oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                            taskIndex = oMPCModel.taskIndex,
                                            strCurrTask = oMPCModel.strCurrTask 
                        };
                    }
                    else
                    {
                        if (currId == 0)
                        {
                            oMPCModel.oMemberGroupingModel =   new MemberChurchGroupingModel()
                                               { 
                                                    oMemberChurchUnit = new MemberChurchUnit()
                                                   {
                                                       AppGlobalOwnerId = oAppGloOwnId,
                                                       ChurchBodyId = oCBid,
                                                       ChurchMemberId = oCMid,
                                                      // IsCurrentMember = true,
                                                       IsCurrUnit = true, 
                                                       SharingStatus = "A",
                                                       FromDate = DateTime.Now,
                                                        // ToDate = DateTime.Now
                                                        Created = _tm,
                                                        LastMod = _tm,
                                                        CreatedByUserId = this._oLoggedUser.Id,
                                                        LastModByUserId = this._oLoggedUser.Id
                                                    },

                                                    ///
                                                    oAppGloOwnId = oAppGloOwnId,
                                                   oChurchBodyId = oCBid,
                                                   oChurchMemberId = oCMid,
                                ///
                                oChurchBody = oCB,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                                    strCurrTask = oMPCModel.strCurrTask,
                                                    strOwnedByCB = oCB.Name,
                                                    strOwnedByCBLevel = oCB != null ? (oCB.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB.ChurchLevel.CustomName) ? oCB.ChurchLevel.CustomName : oCB.ChurchLevel.Name) : "") : "",
                                                    // strOwnStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym),
                                                    strOwnStatus = GetAdhocStatusDesc(oCB.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                                                    // strSharingStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym)
                            };
                        }
                        else
                        {
                            var oMCG_moModelList = GetMemberChurchGrouping(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, inclExtCB_dt, _context);
                            if (oMCG_moModelList.Count == 0) return null;
                            oMPCModel.oMemberGroupingModel = oMCG_moModelList[0]; // new MemberChurchGroupingModel()
                                                                                  //{ 
                                                                                  //     oMemberChurchUnit = oMCG_moModelList[0].oMemberChurchUnit,
                                                                                  //     ///
                                                                                  //     oAppGloOwnId = oAppGloOwnId,
                                                                                  //    oChurchBodyId = oCBid,
                                                                                  //    oChurchMemberId = oCMid
                                                                                  //};
                            oMPCModel.oMemberGroupingModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                            oMPCModel.oMemberGroupingModel.setIndex = s_ndx;
                            oMPCModel.oMemberGroupingModel.subSetIndex = sb_ndx;
                            oMPCModel.oMemberGroupingModel.taskIndex = oMPCModel.taskIndex;
                            oMPCModel.oMemberGroupingModel.strCurrTask = oMPCModel.strCurrTask;
                        }


                        /// add lookups  
                        if (oMPCModel.oMemberGroupingModel != null)
                            oMPCModel.oMemberGroupingModel = populateLookupsCM_MCG(oMPCModel.oMemberGroupingModel, oCB);
                    }
                     

                    if (oMPCModel.oMemberGroupingModel != null)
                    {
                        ///
                        oMPCModel.oMemberGroupingModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                        oMPCModel.oMemberGroupingModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                        oMPCModel.oMemberGroupingModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                        oMPCModel.oMemberGroupingModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                        oMPCModel.oMemberGroupingModel.oUserId_Logged = oMPCModel.oUserId_Logged;

                        oMPCModel.oMemberGroupingModel.setIndex = oMPCModel.setIndex;   // 13
                        oMPCModel.oMemberGroupingModel.taskIndex = oMPCModel.taskIndex;   // vw, edit 
                    }
                     
                    /// 
                    if (s_ndx != 0)
                    {
                        oMPCModel.strCurrTask += " - Church Groupings & Associations";
                        return oMPCModel;
                    }
                }
                 
                if (s_ndx == 0 || s_ndx == 14)
                {
                    if (vw == 0)  // list
                    {
                        var oMCR_vwModelList = GetMemberRoleDesig(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true , null, inclExtCB_dt, _context); 
                        oMPCModel.oMemberRoleDesigModel = new MemberRoleDesigModel()
                        {
                            lsMemberRoleDesigModels = oMCR_vwModelList,
                            ///
                            oAppGloOwnId = oAppGloOwnId,
                            oChurchBodyId = oCBid,
                            oChurchMemberId = oCMid,
                            ///,
                            setIndex = s_ndx,
                            subSetIndex = sb_ndx,
                            oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                            taskIndex = oMPCModel.taskIndex,
                            strCurrTask = oMPCModel.strCurrTask, 
                        };
                    }
                    else
                    {
                        if (currId == 0)
                        {
                            oMPCModel.oMemberRoleDesigModel = new MemberRoleDesigModel()
                                               {
                                                   oMemberChurchRole = new MemberChurchRole()
                                                   {
                                                       AppGlobalOwnerId = oAppGloOwnId,
                                                       ChurchBodyId = oCBid,
                                                       ChurchMemberId = oCMid,
                                                       IsCurrentRole = true,
                                                        // IsChurchUnit = true,
                                                        SharingStatus = "A",
                                                       FromDate = DateTime.Now,
                                                       // ToDate = DateTime.Now
                                                       Created = _tm,
                                                       LastMod = _tm,
                                                       CreatedByUserId = this._oLoggedUser.Id,
                                                       LastModByUserId = this._oLoggedUser.Id
                                                   },

                                                    ///
                                                    oAppGloOwnId = oAppGloOwnId,
                                                   oChurchBodyId = oCBid,
                                                   oChurchMemberId = oCMid,
                                ///
                                oChurchBody = oCB,
                                strChurchBody = oCB.Name,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask,
                                strOwnedByCB = oCB.Name,
                                strOwnedByCBLevel = oCB != null ? (oCB.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB.ChurchLevel.CustomName) ? oCB.ChurchLevel.CustomName : oCB.ChurchLevel.Name) : "") : "",
                                // strOwnStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym),
                                strOwnStatus = GetAdhocStatusDesc(oCB.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                                // strSharingStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym)
                            };
                        }
                        else
                        {
                            var oMCR_moModelList = GetMemberRoleDesig(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, inclExtCB_dt, _context);
                            if (oMCR_moModelList.Count == 0) return null;
                            oMPCModel.oMemberRoleDesigModel = oMCR_moModelList[0] ; // new MemberRoleDesigModel()
                                                                                    //{
                                                                                    //    oMemberChurchRole = oMCR_moModelList[0].oMemberChurchRole,
                                                                                    //     ///
                                                                                    //     oAppGloOwnId = oAppGloOwnId,
                                                                                    //    oChurchBodyId = oCBid,
                                                                                    //    oChurchMemberId = oCMid
                                                                                    //};
                            oMPCModel.oMemberRoleDesigModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                            oMPCModel.oMemberRoleDesigModel.setIndex = s_ndx;
                            oMPCModel.oMemberRoleDesigModel.subSetIndex = sb_ndx;
                            oMPCModel.oMemberRoleDesigModel.taskIndex = oMPCModel.taskIndex;
                            oMPCModel.oMemberRoleDesigModel.strCurrTask = oMPCModel.strCurrTask;
                        }

                        if (oMPCModel.oMemberRoleDesigModel != null)
                            oMPCModel.oMemberRoleDesigModel = populateLookupsCM_MCR(oMPCModel.oMemberRoleDesigModel, oCB);
                    }
                     

                    if (oMPCModel.oMemberRoleDesigModel != null)
                    {
                        ///
                        oMPCModel.oMemberRoleDesigModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                        oMPCModel.oMemberRoleDesigModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                        oMPCModel.oMemberRoleDesigModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                        oMPCModel.oMemberRoleDesigModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                        oMPCModel.oMemberRoleDesigModel.oUserId_Logged = oMPCModel.oUserId_Logged;

                        oMPCModel.oMemberRoleDesigModel.setIndex = oMPCModel.setIndex;   // 13
                        oMPCModel.oMemberRoleDesigModel.taskIndex = oMPCModel.taskIndex;   // vw, edit 
                    }
                     

                    /// 
                    if (s_ndx != 0)
                    {
                        oMPCModel.strCurrTask += " - Roles & Designations";
                        return oMPCModel;
                    }
                }

                if (s_ndx == 0 || s_ndx == 15)
                {
                    if (vw == 0)  // list
                    {
                        var oMRR_vwModelList = GetMemberRegistration(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, inclExtCB_dt, _context); 
                        oMPCModel.oMemberRegistrationModel = new MemberRegistrationModel()
                        {
                            lsMemberRegistrationModels = oMRR_vwModelList,
                            ///
                            oAppGloOwnId = oAppGloOwnId,
                            oChurchBodyId = oCBid,
                            oChurchMemberId = oCMid,
                            ///,
                            setIndex = s_ndx,
                            subSetIndex = sb_ndx,
                            oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                            taskIndex = oMPCModel.taskIndex,
                            strCurrTask = oMPCModel.strCurrTask, 
                        };
                    }
                    else
                    {
                        if (currId == 0)
                        {

                            /// get the current year
                            var oCP_List_1 =
                                            _context.ChurchPeriod.AsNoTracking().Include(t => t.OwnedByChurchBody) //
                                            .Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Status == "A").ToList();  // && c.PeriodType == "AP"

                            oCP_List_1 = oCP_List_1.Where(c =>
                                               (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                            ChurchPeriod _oCPRDefault = oCP_List_1.FirstOrDefault();

                            /// get the gobal count for the year --- 
                            var oMRRCurrCnt = _context.MemberRegistration.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oCBid &&
                                                    c.ChurchPeriodId == (_oCPRDefault != null ? _oCPRDefault.Id : (int?)null));   /// c.ChurchYear == (_oCPRDefault != null ? _oCPRDefault.FromDate.Value.Year.ToString() : ""));

                            var oMRRCMRegYr = _context.MemberRegistration.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid &&
                                                    c.ChurchPeriodId == (_oCPRDefault != null ? _oCPRDefault.Id : (int?)null)).FirstOrDefault();
                            ///
                            oMPCModel.oMemberRegistrationModel = new MemberRegistrationModel()
                            {
                                oMemberRegistration = new MemberRegistration()
                                {
                                    AppGlobalOwnerId = oAppGloOwnId,
                                    ChurchBodyId = oCBid,
                                    ChurchMemberId = oCMid,
                                    ChurchPeriodId = _oCPRDefault != null ? _oCPRDefault.Id : (int?)null,
                                    SharingStatus = "A",
                                    RegistrationDate = _tm,
                                    ChurchYear = _tm.Year.ToString(),
                                    RegCode = (_oCPRDefault != null ? _oCPRDefault.Year.ToString() : _tm.Year.ToString()) + "/" + oCMid.ToString() + "/" + (oMRRCurrCnt + 1),
                                    Created = _tm,
                                    LastMod = _tm,
                                    CreatedByUserId = this._oLoggedUser.Id,
                                    LastModByUserId = this._oLoggedUser.Id
                                },

                                ///
                                oAppGloOwnId = oAppGloOwnId,
                                oChurchBodyId = oCBid,
                                oChurchMemberId = oCMid,
                                ///
                                oChurchBody = oCB,
                                strChurchBody = oCB.Name,

                                strRegYear = _oCPRDefault != null ? _oCPRDefault.FromDate.Value.Year.ToString() : "",
                                strChurchYearFrom = _oCPRDefault != null ? String.Format("{0:dddd, MMMM d, yyyy}", _oCPRDefault.FromDate.Value) : "",
                                strChurchYearTo = _oCPRDefault != null ? String.Format("{0:dddd, MMMM d, yyyy}", _oCPRDefault.ToDate.Value) : "",

                                strRegStatus = oMRRCMRegYr != null ? "Registered" : "Not Registered",

                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask,
                                strOwnedByCB = oCB.Name,
                                strOwnedByCBLevel = oCB != null ? (oCB.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB.ChurchLevel.CustomName) ? oCB.ChurchLevel.CustomName : oCB.ChurchLevel.Name) : "") : "",
                                // strOwnStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym),
                                strOwnStatus = GetAdhocStatusDesc(oCB.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                                // strSharingStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym)
                            };
                        }
                        else
                        {
                            var oMRR_moModelList = GetMemberRegistration(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, inclExtCB_dt, _context);
                            if (oMRR_moModelList.Count == 0) return null;
                            oMPCModel.oMemberRegistrationModel = oMRR_moModelList[0]; // new MemberRegistrationModel()
                                                                                      //{
                                                                                      //    oMemberRegistration = oMRR_moModelList[0].oMemberRegistration,
                                                                                      //    ///
                                                                                      //    oAppGloOwnId = oAppGloOwnId,
                                                                                      //    oChurchBodyId = oCBid,
                                                                                      //    oChurchMemberId = oCMid
                                                                                      //};

                            var oCP_List_1 =
                                            _context.ChurchPeriod.AsNoTracking().Include(t => t.OwnedByChurchBody) //
                                            .Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Status == "A").ToList();  // && c.PeriodType == "AP"

                            oCP_List_1 = oCP_List_1.Where(c =>
                                               (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                            ChurchPeriod _oCPRDefault = oCP_List_1.FirstOrDefault();


                            var oMRRCMRegYr = _context.MemberRegistration.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oCBid && c.ChurchMemberId == oCMid &&
                                                c.ChurchYear == (_oCPRDefault != null ? _oCPRDefault.FromDate.Value.Year.ToString() : "")).FirstOrDefault();

                            oMPCModel.oMemberRegistrationModel.strRegYear = _oCPRDefault != null ? _oCPRDefault.FromDate.Value.Year.ToString() : "";
                            oMPCModel.oMemberRegistrationModel.strChurchYearFrom = _oCPRDefault != null ? String.Format("{0:dddd, MMMM d, yyyy}", _oCPRDefault.FromDate.Value) : "";
                            oMPCModel.oMemberRegistrationModel.strChurchYearTo = _oCPRDefault != null ? String.Format("{0:dddd, MMMM d, yyyy}", _oCPRDefault.ToDate.Value) : "";
                            oMPCModel.oMemberRegistrationModel.strRegStatus = oMRRCMRegYr != null ? "Registered" : "Not Registered";

                            oMPCModel.oMemberRegistrationModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                            oMPCModel.oMemberRegistrationModel.setIndex = s_ndx;
                            oMPCModel.oMemberRegistrationModel.subSetIndex = sb_ndx;
                            oMPCModel.oMemberRegistrationModel.taskIndex = oMPCModel.taskIndex;
                            oMPCModel.oMemberRegistrationModel.strCurrTask = oMPCModel.strCurrTask;
                        }

                        if (oMPCModel.oMemberRegistrationModel != null)
                            oMPCModel.oMemberRegistrationModel = populateLookupsCM_MRR(oMPCModel.oMemberRegistrationModel, oCB);
                    }

                     

                    if (oMPCModel.oMemberRegistrationModel != null)
                    {
                        ///
                        oMPCModel.oMemberRegistrationModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                        oMPCModel.oMemberRegistrationModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                        oMPCModel.oMemberRegistrationModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                        oMPCModel.oMemberRegistrationModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                        oMPCModel.oMemberRegistrationModel.oUserId_Logged = oMPCModel.oUserId_Logged;

                        oMPCModel.oMemberRegistrationModel.setIndex = oMPCModel.setIndex;   // 13
                        oMPCModel.oMemberRegistrationModel.taskIndex = oMPCModel.taskIndex;   // vw, edit 
                    }


                    /// 
                    if (s_ndx != 0)
                    {
                        oMPCModel.strCurrTask += " - Registration & Renewals";
                        return oMPCModel;
                    }
                }



                if (s_ndx == 0 || s_ndx == 16)
                {
                    if (vw == 0)  // list
                    {
                        var oMCA_vwModelList = GetMemberChurchAttendance(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, true, null, inclExtCB_dt, _context); 
                        oMPCModel.oMemberChurchAttendanceModel = new MemberChurchAttendanceModel()
                        {
                            lsMemberChurchAttendanceModels = oMCA_vwModelList,
                            ///
                            oAppGloOwnId = oAppGloOwnId,
                            oChurchBodyId = oCBid,
                            oChurchMemberId = oCMid,
                            ///,
                            setIndex = s_ndx,
                            subSetIndex = sb_ndx,
                            oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                            taskIndex = oMPCModel.taskIndex,
                            strCurrTask = oMPCModel.strCurrTask, 
                        };
                    }
                    else
                    {
                        if (currId == 0)
                        {
                            oMPCModel.oMemberChurchAttendanceModel =   new MemberChurchAttendanceModel()
                                                {
                                                    oChurchAttendAttendee = new ChurchAttendAttendee()
                                                    {
                                                        AppGlobalOwnerId = oAppGloOwnId,
                                                        ChurchBodyId = oCBid,
                                                        ChurchMemberId = oCMid,
                                                        NationalityId = this.oCTRYDefault != null ? this.oCTRYDefault.CtryAlpha3Code : null,
                                                        SharingStatus = "A",
                                                        DateAttended = DateTime.Now,
                                                        Created = _tm,
                                                        LastMod = _tm,
                                                        CreatedByUserId = this._oLoggedUser.Id,
                                                        LastModByUserId = this._oLoggedUser.Id
                                                    },

                                                    ///
                                                    oAppGloOwnId = oAppGloOwnId,
                                                    oChurchBodyId = oCBid,
                                                    oChurchMemberId = oCMid,
                                ///
                                oChurchBody = oCB,
                                setIndex = s_ndx,
                                subSetIndex = sb_ndx,
                                oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged,
                                taskIndex = oMPCModel.taskIndex,
                                strCurrTask = oMPCModel.strCurrTask,
                                strOwnedByCB = oCB.Name,
                                strOwnedByCBLevel = oCB != null ? (oCB.ChurchLevel != null ? (!string.IsNullOrEmpty(oCB.ChurchLevel.CustomName) ? oCB.ChurchLevel.CustomName : oCB.ChurchLevel.Name) : "") : "",
                                // strOwnStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym),
                                strOwnStatus = GetAdhocStatusDesc(oCB.OwnedByChurchBodyId == this._oLoggedCB.Id ? "O" : "I"),
                                // strSharingStatus = GetMemInfoSharingStatusDesc("A", this._oLoggedAGO.Acronym)
                            };
                        }
                        else
                        {
                            var oMCA_moModelList = GetMemberChurchAttendance(oAppGloOwnId, oCBid, oCB, oCurrCM, (int)oCMid, false, currId, inclExtCB_dt, _context);
                            if (oMCA_moModelList.Count == 0) return null;
                            oMPCModel.oMemberChurchAttendanceModel = oMCA_moModelList[0]; // new MemberChurchAttendanceModel()
                                                                                          //{
                                                                                          //    oChurchAttendAttendee =.oChurchAttendAttendee,
                                                                                          //    ///
                                                                                          //    oAppGloOwnId = oAppGloOwnId,
                                                                                          //    oChurchBodyId = oCBid,
                                                                                          //    oChurchMemberId = oCMid
                                                                                          //};
                            oMPCModel.oMemberChurchAttendanceModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                            oMPCModel.oMemberChurchAttendanceModel.setIndex = s_ndx;
                            oMPCModel.oMemberChurchAttendanceModel.subSetIndex = sb_ndx;
                            oMPCModel.oMemberChurchAttendanceModel.taskIndex = oMPCModel.taskIndex;
                            oMPCModel.oMemberChurchAttendanceModel.strCurrTask = oMPCModel.strCurrTask;
                        }

                        /// add lookups  ... church events list reduced by the date on the calendar
                        if (oMPCModel.oMemberChurchAttendanceModel != null)
                            oMPCModel.oMemberChurchAttendanceModel = populateLookupsCM_MCA(oMPCModel.oMemberChurchAttendanceModel, oCB);
                    }

                     

                    if (oMPCModel.oMemberChurchAttendanceModel != null)
                    {
                        ///
                        oMPCModel.oMemberChurchAttendanceModel.oChurchBodyId_Logged_MSTR = oMPCModel.oChurchBodyId_Logged_MSTR;
                        oMPCModel.oMemberChurchAttendanceModel.oChurchBodyId_Logged = oMPCModel.oChurchBodyId_Logged;
                        oMPCModel.oMemberChurchAttendanceModel.oAppGloOwnId_Logged_MSTR = oMPCModel.oAppGloOwnId_Logged_MSTR;
                        oMPCModel.oMemberChurchAttendanceModel.oAppGloOwnId_Logged = oMPCModel.oAppGloOwnId_Logged;
                        oMPCModel.oMemberChurchAttendanceModel.oUserId_Logged = oMPCModel.oUserId_Logged;

                        oMPCModel.oMemberChurchAttendanceModel.setIndex = oMPCModel.setIndex;   // 13
                        oMPCModel.oMemberChurchAttendanceModel.taskIndex = oMPCModel.taskIndex;   // vw, edit 
                    }


                    /// 
                    if (s_ndx != 0)
                    {
                        oMPCModel.strCurrTask += " - Church Attendance History";
                        return oMPCModel;
                    }
                }


                //if (s_ndx == 0 || s_ndx == 17) {  // transfers

                //    ///
                //    }

                //if (s_ndx == 0 || s_ndx == 18)
                //{  // payments

                //    
                //}


                // mem profile card details....
                if (s_ndx == 0)
                {
                    //get mem stat
                    //oMPCModel.oMemberStatusList = _context.MemberStatus.Include(t => t.ChurchMember).Include(t => t.ChurchMemStatus) .Where(c => (c.ChurchBodyId == oCBId) && c.ChurchMemberId == id)
                    //                                     .OrderByDescending(c => c.Since).ThenByDescending(c => c.Until).ToList();

                    var oCM_MSList = oMPCModel.oMemberChurchMovementModel.oMemberStatusModel.lsMemberStatusModels;
                    var oCM_MS = oCM_MSList.Where(c => c.oMemberStatus?.IsCurrent == true).FirstOrDefault();
                    //var memberStat = oMPCModel.oMemberStatusList.Where(c => c.IsCurrent).FirstOrDefault();
                    // oMPCModel.oMemberStatus = oCM_MS; //memberStat ?? new MemberStatus(); 

                    //mem biodata
                   if (oMPCModel.oMemberBioModel != null )
                   {
                       var oCM_MBD = oMPCModel.oMemberBioModel.oChurchMember;
                       oMPCModel.strBirthdayTag = "N/A";
                       if (oCM_MBD.DateOfBirth != null && oCM_MS != null)
                           oMPCModel.strBirthdayTag = GetBirthdayTag(oCM_MBD.DateOfBirth, oCM_MS.oMemberStatus);

                        oMPCModel.oMemberBioModel.isMemberBirthdayToday = oCM_MBD.DateOfBirth != null ? (DateTime.Now.Month == oCM_MBD.DateOfBirth.Value.Month && DateTime.Now.Day == oCM_MBD.DateOfBirth.Value.Day) : false;

                       // mem age
                        oMPCModel.strMemberAge = "N/A";
                        if (oCM_MBD.DateOfBirth != null)
                            oMPCModel.strMemberAge = oCM_MBD.DateOfBirth != null ? (string)AppUtilties.CalcDateDiff(oCM_MBD.DateOfBirth.Value, DateTime.Now, true, true, true, false, false, false, false, false, false) : "";
                        //CalcAge((DateTime)oCM_MBD.DateOfBirth, DateTime.Now) + " years" : "";

                        // marital... get spouse from fam rel
                        oMPCModel.strMaritalStat = GetMaritalStatDesc(oCM_MBD.MaritalStatus);
                   }


                    //mem lang
                    oMPCModel.strLangProfiency = "None";
                    var oCM_MLSList = oMPCModel.oMemberLanguageSpokenModel.lsMemberLanguageSpokenModels;
                    if (oCM_MLSList.Count > 0)
                    {// Descending
                        oCM_MLSList = oCM_MLSList.OrderByDescending(c => c.oMemberLanguageSpoken.IsPrimaryLanguage).ThenBy(c => c.oMemberLanguageSpoken.ProficiencyLevel).ToList();
                        var oCM_MLS = oCM_MLSList[0].oMemberLanguageSpoken;
                        oMPCModel.strLangProfiency = oCM_MLS.LanguageSpoken.NVPValue + " (" + GetLangProfDesc(oCM_MLS.ProficiencyLevel) + ")";

                        if (oCM_MLSList.Count > 1)
                        {
                            oCM_MLS = oCM_MLSList[1].oMemberLanguageSpoken;
                            oMPCModel.strLangProfiency += ", " + oCM_MLS.LanguageSpoken.NVPValue + " (" + GetLangProfDesc(oCM_MLS.ProficiencyLevel) + ")";

                            if (oCM_MLSList.Count > 2)
                            {
                                if (oCM_MLSList.Count > 3) 
                                    oMPCModel.strLangProfiency += " and " + (oCM_MLSList.Count - 2) + " other(s)";
                                else
                                    oMPCModel.strLangProfiency += " and " + (oCM_MLSList.Count - 1) + " other(s)";
                            }
                        }
                        else oMPCModel.strLangProfiency += " and 1 other";
                         ///
                        oMPCModel.strLangProfiency = "Speaks " + oMPCModel.strLangProfiency;
                    }

                    //mem fam rel
                    var oCM_MFRList = oMPCModel.oMemberRelationModel.lsMemberFamilyRelationModels;
                    oMPCModel.strFamRelaDesc = "None";  oMPCModel.strMemSpouse = "None";  oMPCModel.strMemChildren = "None";  oMPCModel.strMemNextOfKin = "None"; 
                    if (oCM_MFRList.Count > 0)
                    {
                        var oCurrFamRelaList = oCM_MFRList.Where(c => c.oMemberRelation.RelationCategory == "N" || c.oMemberRelation.IsNextOfKin == true).ToList();
                        if (oCurrFamRelaList.Count > 0)
                        {
                            var totalRel = oCurrFamRelaList.Count + 1;
                            oMPCModel.strFamRelaDesc = "In a family of " + totalRel.ToString();
                        }
                        else
                            oMPCModel.strFamRelaDesc = "None";

                        var oDataList = oCurrFamRelaList.Where(c => c.oMemberRelation.RelationshipType.IsSpouse).ToList();
                        var _strMemSpouse = ""; oMPCModel.strMemSpouse = oDataList.Count > 0 ? "" : "None"; 
                        foreach (var obj in oDataList)
                        { 
                              _strMemSpouse = (obj.oMemberRelation.RelationScope == "L" || obj.oMemberRelation.RelationScope == "C") ?
                                                  (obj.oMemberRelation.RelationChurchMember != null ? GetConcatMemberName(obj.oMemberRelation.RelationChurchMember.Title, obj.oMemberRelation.RelationChurchMember.FirstName, obj.oMemberRelation.RelationChurchMember.MiddleName, obj.oMemberRelation.RelationChurchMember.LastName, false, false, false, false, false) : "") :
                                                  obj.oMemberRelation.RelationNameExtCon;

                            if (!string.IsNullOrEmpty(_strMemSpouse)) oMPCModel.strMemSpouse += _strMemSpouse + ", ";
                            //oMPCModel.strMemSpouse = obj.oMemberRelation.RelationChurchMember.FirstName + " " + obj.oMemberRelation.RelationChurchMember.LastName;

                            //IList<string> strings = new List<string> { "1", "2", "testing" };
                            //string joined = string.Join(",", strings);
                        }
                        if (oMPCModel.strMemSpouse.Contains(",")) oMPCModel.strMemSpouse = oMPCModel.strMemSpouse.Remove(oMPCModel.strMemSpouse.LastIndexOf(","));

                        oDataList = oCurrFamRelaList.Where(c => c.oMemberRelation.RelationshipType.IsChild).ToList();
                        var _strMemChild = ""; oMPCModel.strMemChildren = oDataList.Count > 0 ? "" : "None";
                        foreach (var obj in oDataList)
                        { 
                            _strMemChild = (obj.oMemberRelation.RelationScope == "L" || obj.oMemberRelation.RelationScope == "C") ?
                                                  (obj.oMemberRelation.RelationChurchMember != null ? GetConcatMemberName(obj.oMemberRelation.RelationChurchMember.Title, obj.oMemberRelation.RelationChurchMember.FirstName, obj.oMemberRelation.RelationChurchMember.MiddleName, obj.oMemberRelation.RelationChurchMember.LastName, false, false, false, false, false) : "") :
                                                  obj.oMemberRelation.RelationNameExtCon;

                            if (!string.IsNullOrEmpty(_strMemChild)) oMPCModel.strMemChildren += _strMemChild + ", " ;
                           // oMPCModel.strMemChildren = obj.RelationChurchMember.FirstName + " " + obj.RelationChurchMember.LastName;
                        }
                        if (oMPCModel.strMemChildren.Contains(",")) oMPCModel.strMemChildren = oMPCModel.strMemChildren.Remove(oMPCModel.strMemChildren.LastIndexOf(","));

                        oDataList = oCurrFamRelaList.Where(c => c.oMemberRelation.IsNextOfKin).ToList();
                        var _strMemNextOfKin = ""; oMPCModel.strMemNextOfKin = oDataList.Count > 0 ? "" :  "None";
                        foreach (var obj in oDataList)
                        { 
                            _strMemNextOfKin = (obj.oMemberRelation.RelationScope == "L" || obj.oMemberRelation.RelationScope == "C") ?
                                                (obj.oMemberRelation.RelationChurchMember != null ? GetConcatMemberName(obj.oMemberRelation.RelationChurchMember.Title, obj.oMemberRelation.RelationChurchMember.FirstName, obj.oMemberRelation.RelationChurchMember.MiddleName, obj.oMemberRelation.RelationChurchMember.LastName, false, false, false, false, false) : "") :
                                                obj.oMemberRelation.RelationNameExtCon;

                            if (!string.IsNullOrEmpty(_strMemNextOfKin)) oMPCModel.strMemNextOfKin += _strMemNextOfKin + ", ";
                            // oMPCModel.strMemNextOfKin = obj.RelationChurchMember.FirstName + " " + obj.RelationChurchMember.LastName;
                        }
                        if (oMPCModel.strMemNextOfKin.Contains(",")) oMPCModel.strMemNextOfKin = oMPCModel.strMemNextOfKin.Remove(oMPCModel.strMemNextOfKin.LastIndexOf(","));
                    }

                    //mem edu
                    var oCM_MEDList = oMPCModel.oMemberEducationModel.lsMemberEducationModels;
                    oMPCModel.strEducLevelDesc = "None";
                    if (oCM_MEDList.Count > 0)
                    {

                        // get highest education level... 1 is the highest
                        var oEduLevel = oCM_MEDList.Where(c => c.oMemberEducation.InstitutionType_NVP.GradeLevel == oCM_MEDList.Min(c => c.oMemberEducation.InstitutionType_NVP.GradeLevel)).FirstOrDefault();

                        oCM_MEDList = oCM_MEDList.OrderBy(c => c.oMemberEducation.InstitutionType_NVP.GradeLevel).ToList();
                        var oCM_MED = oCM_MEDList[0].oMemberEducation;
                        oMPCModel.strEducLevelDesc = oCM_MED.InstitutionType_NVP.NVPValue + ". " + "Studied " + oCM_MED.Discipline + "(" + oCM_MED.CertificateType_NVP.NVPValue + ") at " + oCM_MED.InstitutionName;

                        if (oCM_MEDList.Count > 2)
                            oMPCModel.strEducLevelDesc += " and " + (oCM_MEDList.Count - 1) + " others";
                        else if (oCM_MEDList.Count > 1)
                            oMPCModel.strEducLevelDesc += " and " + "1 other";
                        //else
                        //    oMPCModel.strEducLevelDesc = oMPCModel.oEducationLevel?.Name + ". " + oMPCModel.strEducLevelDesc;
                    }

                    //mem brand /prof
                    var oCM_MPBList = oMPCModel.oMemberProfessionBrandModel.lsMemberProfessionBrandModels;
                    oMPCModel.strProBrandDesc = "None";
                    if (oCM_MPBList.Count > 0)
                    {
                        var oCurrBrand = oCM_MPBList.Where(c => c.oMemberProfessionBrand.IsActivePractice).FirstOrDefault();
                        oMPCModel.strProBrandDesc = oCurrBrand != null ? oCurrBrand.oMemberProfessionBrand.Profession : "";

                        if (oCM_MPBList.Count > 2)
                            oMPCModel.strProBrandDesc += (!string.IsNullOrEmpty(oMPCModel.strProBrandDesc) ? " and " : "") + (!string.IsNullOrEmpty(oMPCModel.strProBrandDesc) ? (oCM_MPBList.Count - 1) + " others" : oCM_MPBList.Count + " [retired]"); //" others";   // " and " + 
                        else if (oCM_MPBList.Count > 1)
                            oMPCModel.strProBrandDesc += (!string.IsNullOrEmpty(oMPCModel.strProBrandDesc) ? " and " : "") + (!string.IsNullOrEmpty(oMPCModel.strProBrandDesc) ? "1 other" : oCM_MPBList.Count + " [retired]");
                    }


                    //mem work
                    var oCM_MWEList = oMPCModel.oMemberWorkExperienceModel.lsMemberWorkExperienceModels;
                    oMPCModel.strJobStatusDesc = "None";
                    if (oCM_MWEList.Count > 0)
                    {
                        var oCurrWork = oCM_MWEList.Where(c => c.oMemberWorkExperience.IsCurrentWork).FirstOrDefault(); 
                        oMPCModel.strJobStatusDesc = oCurrWork !=null ? oCurrWork.oMemberWorkExperience.WorkRole + ", " + oCurrWork.oMemberWorkExperience.WorkPlace : "";
                        if (oCM_MWEList.Count > 2)
                            oMPCModel.strJobStatusDesc += (!string.IsNullOrEmpty(oMPCModel.strJobStatusDesc) ? " and " : "") + (!string.IsNullOrEmpty(oMPCModel.strJobStatusDesc) ? (oCM_MWEList.Count - 2) + " others" : oCM_MWEList.Count + " [retired]");
                        else if (oCM_MWEList.Count > 1)
                            oMPCModel.strJobStatusDesc += (!string.IsNullOrEmpty(oMPCModel.strJobStatusDesc) ? " and " : "") + (!string.IsNullOrEmpty(oMPCModel.strJobStatusDesc) ? "1 other" : oCM_MWEList.Count + " [retired]");
                    }
                }


                ////mem profile card details...
                //if (s_ndx == 0)
                //{
                //    //mem biodata
                //    // oMPCModel.strBirthdayTag = GetBirthdayTag(oMPCModel.oPersonalData.DateOfBirth, oMPCModel.oMemberStatus.ChurchMemStatus);


                //    //mem type
                //    oMPCModel.strMemberType = "None";   // oMPCModel.strMemTypeAssigned = "None";oMPCModel.strMemTypeLongevity = "N/A";oMPCModel.strMemTypeLongevityDesc = "N/A";
                //    if (oMPCModel.oMemberTypeList.Count > 0)
                //    {
                //        var oCurrTypeList = oMPCModel.oMemberTypeList.Where(c => c.IsCurrent).ToList();
                //        if (oCurrTypeList.Count > 0)
                //        {
                //            oMPCModel.strMemberType = oCurrTypeList[0].ChurchMemType.Description; // + ", " + oCurrUnitList[0].ChurchUnit.Name;

                //            if (oCurrTypeList.Count > 2)
                //                oMPCModel.strMemberType += " and " + (oCurrTypeList.Count - 1) + " others";
                //            else if (oCurrTypeList.Count > 1)
                //                oMPCModel.strMemberType += " and " + (oCurrTypeList.Count - 1) + " other";
                //        }
                //    }

                //    //mem stat
                //oMPCModel.strMemberStat = "N/A";
                //if (oMPCModel.oMemberStatusList.Count > 0)
                //{
                //    var oCurrStatList = oMPCModel.oMemberStatusList.Where(c => c.IsCurrent).ToList();
                //    if (oCurrStatList.Count > 0)
                //    {
                //        oMPCModel.strMemberStat = oCurrStatList[0].ChurchMemStatus.Name; // + ", " + oCurrUnitList[0].ChurchUnit.Name;

                //        if (oCurrStatList.Count > 2)
                //            oMPCModel.strMemberStat += " and " + (oCurrStatList.Count - 1) + " others";
                //        else if (oCurrStatList.Count > 1)
                //            oMPCModel.strMemberStat += " and " + (oCurrStatList.Count - 1) + " other";
                //    }
                //}


                //    //mem rank
                var oCM_MCM_MTList = oMPCModel.oMemberChurchMovementModel?.oMemberTypeModel?.lsMemberTypeModels;
                oMPCModel.strMemTypeAssigned = "None";
                if (oCM_MCM_MTList.Count > 0)
                {
                    var oCurrMCM_MT = oCM_MCM_MTList.OrderByDescending(c => c.oMemberType.IsCurrent).FirstOrDefault(); //.Where(c => c.oMemberType.IsCurrent == true).FirstOrDefault();
                   // var _currMTFound = oCurrMCM_MT.oMemberType.IsCurrent == true;  //!string.IsNullOrEmpty(oCurrMCM_MT.strChurchMemType);
                    oMPCModel.strMemTypeAssigned = oCurrMCM_MT.strChurchMemType + (!string.IsNullOrEmpty(oCurrMCM_MT.strDateDesc) ? ". " + oCurrMCM_MT.strDateDesc : ""); // _currMTFound ? oCurrMCM_MT.strChurchMemType + (!string.IsNullOrEmpty(oCurrMCM_MT.strFromDate) ? oCurrMCM_MT.strFromDate : "") : "";
                    /////
                    //if (oCM_MCM_MTList.Count > 2)
                    //    oMPCModel.strMemTypeAssigned += (_currMTFound ? " and " : "") + (oCM_MCM_MTList.Count - 2) + (_currMTFound ? " others" : " [past]");
                    //else if (oCM_MCM_MTList.Count > 1)
                    //    oMPCModel.strMemTypeAssigned += (_currMTFound ? " and " : "") + (oCM_MCM_MTList.Count - 1) + (_currMTFound ? " other" : " [past]");
                }

                //    //mem rank
                var oCM_MCM_MRList = oMPCModel.oMemberChurchMovementModel?.oMemberRankModel?.lsMemberRankModels;
                oMPCModel.strMemRankAssigned = "None";
                if (oCM_MCM_MRList.Count > 0)
                {
                    var oCurrMCM_MR = oCM_MCM_MRList.OrderByDescending(c => c.oMemberRank.IsCurrentRank).FirstOrDefault(); //.Where(c => c.oMemberRank.IsCurrentRank == true).FirstOrDefault();
                    //var _currMRFound = oCurrMCM_MR.oMemberRank.IsCurrentRank == true;  // !string.IsNullOrEmpty(oCurrMCM_MR.strChurchRank);
                    oMPCModel.strMemRankAssigned = oCurrMCM_MR.strChurchRank + (!string.IsNullOrEmpty(oCurrMCM_MR.strDateDesc) ? ". " + oCurrMCM_MR.strDateDesc : ""); // _currMRFound ? oCurrMCM_MR.strChurchRank + (!string.IsNullOrEmpty(oCurrMCM_MR.strFromDate) ? oCurrMCM_MR.strFromDate : "") : "";
                    ///
                    //if (oCM_MCM_MRList.Count > 2)
                    //    oMPCModel.strMemRankAssigned += (_currMRFound ? " and " : "") + (oCM_MCM_MRList.Count - 2) + (_currMRFound ? " others" : " [past]");
                    //else if (oCM_MCM_MRList.Count > 1)
                    //    oMPCModel.strMemRankAssigned += (_currMRFound ? " and " : "") + (oCM_MCM_MRList.Count - 1) + (_currMRFound ? " other" : " [past]");
                }

                // mem stat
                var oCM_MCM_MSList = oMPCModel.oMemberChurchMovementModel?.oMemberStatusModel?.lsMemberStatusModels;
                oMPCModel.strMemStatAssigned = "None";
                if (oCM_MCM_MSList.Count > 0)
                {
                    var oCurrMCM_MS = oCM_MCM_MSList.OrderByDescending(c => c.oMemberStatus.IsCurrent).FirstOrDefault();  //.Where(c => c.oMemberStatus.IsCurrent==true).FirstOrDefault();
                    //var _currMSFound = !string.IsNullOrEmpty(oCurrMCM_MS.strChurchMemStatus);
                    oMPCModel.strMemStatAssigned = oCurrMCM_MS.strChurchMemStatus + (!string.IsNullOrEmpty(oCurrMCM_MS.strDateDesc) ? ". " + oCurrMCM_MS.strDateDesc : "");  // _currMSFound ? oCurrMCM_MS.strChurchMemStatus + (!string.IsNullOrEmpty(oCurrMCM_MS.strFromDate) ? oCurrMCM_MS.strFromDate : "") : "";
                   ///
                    //if (oCM_MCM_MSList.Count > 2)
                    //    oMPCModel.strMemStatAssigned += (_currMSFound ? " and " : "") + (oCM_MCM_MSList.Count - 2) + (_currMSFound ? " others" : " [past]");
                    //else if (oCM_MCM_MSList.Count > 1)
                    //    oMPCModel.strMemStatAssigned += (_currMSFound ? " and " : "") + (oCM_MCM_MSList.Count - 1) + (_currMSFound ? " other" : " [past]");
                }


                // mem chu life ... baptised ? confirmed ? communicant ?
                var oCM_MCLModel = oMPCModel.oMemberChurchlifeAllModel?.oMemberChurchlifeModel;
                oMPCModel.strJoined = "N/A"; oMPCModel.strLongevity = "N/A"; oMPCModel.strLongevityDesc = "N/A";
                if (oCM_MCLModel != null)
                {
                    oMPCModel.strBaptised = oCM_MCLModel.oMemberChurchlife.IsMemBaptized == true ? "Baptised" : "Not baptised";  // get date baptised from the ch life actv
                    oMPCModel.strConfirmed = oCM_MCLModel.oMemberChurchlife.IsMemConfirmed == true ? "Confirmed" : "Not confirmed";
                    oMPCModel.strCommunicant = oCM_MCLModel.oMemberChurchlife.IsMemCommunicant == true ? "Communicant" : "Non-communicant";
                    oMPCModel.strCurrPastDeceased = oCM_MCLModel.oMemberChurchlife.IsCurrentMember == true ? "Current Member" : (oCM_MCLModel.oMemberChurchlife.IsDeceased == true ? "Member Deceased" : "Past Member");
                    oMPCModel.strJoined = oCM_MCLModel.strJoinedDate; 
                    oMPCModel.strDeparted = oCM_MCLModel.strDepartedDate; 
                    oMPCModel.strLongevity = oCM_MCLModel.strMemLongevity_Yrs;  

                    //
                    //oMPCModel.strJoined = oMPCModel.oMemberChurchlife.Joined != null ? String.Format("{0:d-MMM-yyyy}", (DateTime)oMPCModel.oMemberChurchlife.Joined) : "N/A";
                    //oMPCModel.strLongevity = (new ChurchMembersController(_context, null)).GetMemberLongevity(oMPCModel.oMemberChurchlife.Joined, oMPCModel.oMemberChurchlife.Departed, oMPCModel.oMemberStatus.ChurchMemStatus);
                    //oMPCModel.strLongevityDesc = GetMemberAvailability(oMPCModel.oMemberChurchlife.Joined, oMPCModel.oMemberChurchlife.Departed, oMPCModel.oMemberStatus.ChurchMemStatus);
                }


                //    // mem ch actv ... involved in 35 activities this year
                //    oMPCModel.strMemChActvDesc = "None";
                //    if (oMPCModel.oMemberChurchUnitList.Count > 0)
                //    {
                //        var oCurrChActvList = oMPCModel.oMemberChurchlifeActvList.ToList();
                //        if (oCurrChActvList.Count > 0)
                //        {
                //            oMPCModel.strMemChActvDesc = oCurrChActvList[0].ChurchLifeActivity.Description; // + ", " + oCurrUnitList[0].ChurchUnit.Name;

                //            if (oCurrChActvList.Count > 2)
                //                oMPCModel.strMemChActvDesc += " and " + (oCurrChActvList.Count - 1) + " others";
                //            else if (oCurrChActvList.Count > 1)
                //                oMPCModel.strMemChActvDesc += " and " + (oCurrChActvList.Count - 1) + " other";
                //        }
                //    }


                // mem grps /assocs  ... belongs to 2 groups 
                var oCM_MCUList = oMPCModel.oMemberGroupingModel.lsMemberChurchGroupingModels;
                oMPCModel.strMemGroupsDesc = "None";
                if (oCM_MCUList.Count > 0)
                {
                    var oCurrMCU = oCM_MCUList.OrderByDescending(c => c.oMemberChurchUnit.IsCurrUnit).FirstOrDefault();  // .Where(c => c.oMemberChurchUnit.IsCurrUnit==true).FirstOrDefault();
                    oMPCModel.strMemGroupsDesc = !string.IsNullOrEmpty(oCurrMCU.strChurchUnit) ? oCurrMCU.strChurchUnit + (!string.IsNullOrEmpty(oCurrMCU.strOrgType) ? " (" + oCurrMCU.strOrgType + ")" : "") : "";
                    var _currMCUFound = !string.IsNullOrEmpty(oMPCModel.strMemGroupsDesc);
                    if (oCM_MCUList.Count > 2)
                        oMPCModel.strMemGroupsDesc += (_currMCUFound ? " and " : "") + (_currMCUFound ? (oCM_MCUList.Count - 1) + " others" : oCM_MCUList.Count + " [past]");
                    else if (oCM_MCUList.Count > 1)
                        oMPCModel.strMemGroupsDesc += (_currMCUFound ? " and " : "") + (_currMCUFound ? "1 other" : oCM_MCUList.Count + " [past]");
                }


                //    // mem desig /roles  ... assigned 3 roles 
                var oCM_MCRList = oMPCModel.oMemberRoleDesigModel.lsMemberRoleDesigModels;
                oMPCModel.strMemRolesDesc = "None";
                if (oCM_MCRList.Count > 0)
                {
                    var oCurrMCR = oCM_MCRList.OrderByDescending(c => c.oMemberChurchRole.IsCurrentRole).FirstOrDefault();  ///.Where(c => c.oMemberChurchRole.IsCurrentRole == true).FirstOrDefault();                    
                    oMPCModel.strMemRolesDesc = !string.IsNullOrEmpty(oCurrMCR.strChurchRole) ? oCurrMCR.strChurchRole + (!string.IsNullOrEmpty(oCurrMCR.strChurchUnit) ? ", " + oCurrMCR.strChurchUnit : "") : "";
                    var _currMCRFound = !string.IsNullOrEmpty(oMPCModel.strMemRolesDesc);
                    if (oCM_MCRList.Count > 2)
                        oMPCModel.strMemRolesDesc += (_currMCRFound ? " and " : "") + (_currMCRFound ?  (oCM_MCRList.Count - 1) + " others" : oCM_MCRList.Count + " [past]");
                    else if (oCM_MCRList.Count > 1)
                        oMPCModel.strMemRolesDesc += (_currMCRFound ? " and " : "") + (_currMCRFound ? "1 other" : oCM_MCRList.Count + " [past]");
                }


                //   // mem reg  ... registered this year, not registered, never registered

                // }


                return oMPCModel;

            }
            catch (Exception ex)
            {
                return null;
            }
        }

         
        [HttpGet]        
        public IActionResult AddModCM_vwMPC(int? oCBid = null, int? oCMid = null, int? oParid = null, int s_ndx = 0, int sb_ndx = 0, int vw = 0)  // loop thru set_index or goto... 
        {   /// BD-1, MCI-2, MLS-3, MFR-4, MCP-5, MED-6, MPB-7, MWE-8 ... 

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }

            if (vw == 0)
                _ = this.LoadClientDashboardValues(); // this._clientDBConnString);
             

            // Client
            var oAppGloOwnId = this._oLoggedAGO.Id;
            if (oCBid == null) oCBid = this._oLoggedCB.Id;

            // MSTR
            var oUserId = this._oLoggedUser.Id;
            var oAGO_MSTR = this._oLoggedAGO_MSTR; var oCB_MSTR = this._oLoggedCB_MSTR; // _masterContext.MSTRAppGlobalOwner.Find(this._oLoggedAGO.MSTR_AppGlobalOwnerId); 
            var oAGO = this._oLoggedAGO; 
            if (oAGO_MSTR == null || oCB_MSTR == null || oAGO == null ) return View("_ErrorPage"); 
            var strDesc = "Church Member";
            var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();

            ///
            var oMPCModel = GetMPCModel(oAppGloOwnId, oCBid, oCMid, (int?)null, oParid, s_ndx, sb_ndx, vw, _userTask);
            if (oMPCModel == null) return View("_ErrorPage");  // member profile not found!

            _userTask = oMPCModel.strCurrTask;

            /// load lookups 
            // oMBModel = this.populateLookupsCM_BD(oMBModel, oMBModel.oChurchMember);  //setIndex, 

            var tm = DateTime.Now;
            _userTask = "Opened " + strDesc.ToLower() + " member biodata";
            if (oMPCModel.oChurchMemberId > 0) _userTask += "[" + oMPCModel.strMemFullName + " | Member code: " + oMPCModel.strGlobalMemberCode + "]";

            //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

            //// refreshValues...
            //var _connstr_CL = this.GetCL_DBConnString();
            //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



            // register @MSTR
            _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                );

            //register @CLNT
            _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                );

            var _oMPCModel = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel);
            TempData["oVmCurrMod"] = _oMPCModel; TempData.Keep();


            /// load for all modules or for module[i] ... 
            if (s_ndx == 0) // (vw == 0)
                return View("AddModCM_vwMPC", oMPCModel);

            else  //return PartialView("_vwAddModCM_BD", oMPCModel); /// return specific model ... not entire 16 models
            {
                switch (s_ndx)
                {
                    // member personal info...    BD-1, MCI-2, MLS-3, MFR-4, MCP-5, MED-6, MPB-7, MWE-8 ... 
                    case 1: return PartialView("_vwMPCvd_MBD", oMPCModel.oMemberBioModel);
                    case 2: return PartialView("_vwMPCvd_MCI", oMPCModel.oMemberContactInfoModel);
                    case 3: return PartialView("_vwMPCvd_MLS", oMPCModel.oMemberLanguageSpokenModel);
                    case 4: return PartialView("_vwMPCvd_MFR", oMPCModel.oMemberRelationModel);
                    case 5: return PartialView("_vwMPCvd_MCP", oMPCModel.oMemberContactModel);
                    case 6: return PartialView("_vwMPCvd_MED", oMPCModel.oMemberEducationModel);
                    case 7: return PartialView("_vwMPCvd_MPB", oMPCModel.oMemberProfessionBrandModel);
                    case 8: return PartialView("_vwMPCvd_MWE", oMPCModel.oMemberWorkExperienceModel);

                    // member churchlife info..   MCL/MCA-11... MCM-12, MCG-13, MCR-14, MRR-15, MCA-16, MCT-17, MTP-18 
                    case 11: // return PartialView("_vwMPCvd_MCL ", oMPCModel.oMemberChurchlifeAllModel);
                        switch (sb_ndx)
                        {
                            case 1: return PartialView("_vwMPCvd_MCL_CL", oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel);
                            case 2: return PartialView("_vwMPCvd_MCL_CLAc", oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel);
                            case 3: return PartialView("_vwMPCvd_MCL_CET", oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel);

                            default: return View("_vwErrorPage");  // request not found!  default: return PartialView("_vwMPCvd_MCM", oMPCModel.oMemberChurchMovementModel.oMemberStatusModel);
                        }  

                    case 12: /// return PartialView("_vwMPCvd_MCM", oMPCModel.oMemberChurchMovementModel);
                        switch (sb_ndx)
                        {
                            case 1: return PartialView("_vwMPCvd_MCM_MT", oMPCModel.oMemberChurchMovementModel.oMemberTypeModel); 
                            case 2: return PartialView("_vwMPCvd_MCM_MR", oMPCModel.oMemberChurchMovementModel.oMemberRankModel);  
                            case 3: return PartialView("_vwMPCvd_MCM_MS", oMPCModel.oMemberChurchMovementModel.oMemberStatusModel);

                            default: return View("_vwErrorPage");  // request not found!
                        }  

                    case 13: return PartialView("_vwMPCvd_MCG", oMPCModel.oMemberGroupingModel);
                    case 14: return PartialView("_vwMPCvd_MCR", oMPCModel.oMemberRoleDesigModel);
                    case 15: return PartialView("_vwMPCvd_MRR", oMPCModel.oMemberRegistrationModel);
                    case 16: return PartialView("_vwMPCvd_MCA", oMPCModel.oMemberChurchAttendanceModel);
                    case 17: return PartialView("_vwMPCvd_MCT", oMPCModel.oMemberChurchTransferModel);
                    case 18: return PartialView("_vwMPCvd_MTP", oMPCModel.oMemberChurchPaymentModel);   // tithe details of member... thus where individual tithing is done!

                    default:
                        return View("_vwErrorPage");  // request not found!
                }

                //return View("_vwErrorPage");  // request not found!
            }

            
        }

        [HttpGet]
        //     public IActionResult AddOrEdit_UP(int? oAppGloOwnId = null, int? oChurchBodyId = null, int? id = 0, int setIndex = 0, int subSetIndex = 0, int? oAGOId_Logged = null, int? oCBId_Logged = null, int? oUserId = null) //, int taskIndex = 1)
        public IActionResult AddModCM_moMPC(int? oCBid = null, int? oCMid = null, int? currId = null, int? oParid = null, int s_ndx = 0, int sb_ndx = 0, int vw = 1)  // loop thru set_index or goto... 
        {   /// BD-1, MCI-2, MLS-3, MFR-4, MCP-5, MED-6, MPB-7, MWE-8 ... 
            /// use modal to edit ... partial views [ edit Bio directly on the view though ... @AddModCM_vwMPC ]
            /// 
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            if (vw == 0)
                _ = this.LoadClientDashboardValues();   /// (this._clientDBConnString);

            // Client
            var oAppGloOwnId = this._oLoggedAGO.Id;
            if (oCBid == null) oCBid = this._oLoggedCB.Id;

            // MSTR
            var oUserId = this._oLoggedUser.Id;
            var oAGO_MSTR = this._oLoggedAGO_MSTR; var oCB_MSTR = this._oLoggedCB_MSTR; // _masterContext.MSTRAppGlobalOwner.Find(this._oLoggedAGO.MSTR_AppGlobalOwnerId); 
            var oAGO = this._oLoggedAGO;
            if (oAGO_MSTR == null || oCB_MSTR == null || oAGO == null) return View("_ErrorPage");
            var strDesc = "Church Member";
            var _userTask = "Attempted accessing/modifying " + strDesc.ToLower();
            //ChurchMember oCurrCM = null; // _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oCBid && c.Id == oCMid).FirstOrDefault(); 


            /// vw != 0 ... edit
            // if (vw == 0) vw = 1;  // 1..2
            var oMPCModel = GetMPCModel(oAppGloOwnId, oCBid, oCMid, currId, oParid, s_ndx, sb_ndx, vw, _userTask);
            if (oMPCModel == null) return View("_ErrorPage");  // member profile not found!

            _userTask = oMPCModel.strCurrTask;


            /// load lookups 
            // oMBModel = this.populateLookupsCM_BD(oMBModel, oMBModel.oChurchMember);  //setIndex, 

            var tm = DateTime.Now;
            _userTask = "Opened " + strDesc.ToLower() + " member biodata";
            if (oMPCModel.oChurchMemberId > 0) _userTask += "[" + oMPCModel.strMemFullName + " | Member code: " + oMPCModel.strGlobalMemberCode + "]";

            //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

            //// refreshValues...
            //var _connstr_CL = this.GetCL_DBConnString();
            //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



            // register @MSTR
            _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                );

            //register @CLNT
            _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                             "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                );


            /// 
            switch (s_ndx)
            {
                // member personal info...    BD-1, MCI-2, MLS-3, MFR-4, MCP-5, MED-6, MPB-7, MWE-8 ... 
                case 1:
                    var _oMPCModel1 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberBioModel);
                    TempData["oVmCurrMod"] = _oMPCModel1; TempData.Keep();
                    return PartialView("_vwMPCvd_MBD", oMPCModel.oMemberBioModel);

                case 2:
                    var _oMPCModel2 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberContactInfoModel);
                    TempData["oVmCurrMod"] = _oMPCModel2; TempData.Keep();
                    return PartialView("_vwMPCvd_MCI", oMPCModel.oMemberContactInfoModel);

                case 3:
                    var _oMPCModel3 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberLanguageSpokenModel );
                    TempData["oVmCurrMod"] = _oMPCModel3; TempData.Keep();
                    return PartialView("_vwMPCvd_MLS", oMPCModel.oMemberLanguageSpokenModel);
                     
                case 4:  
                    var _oMPCModel4 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberRelationModel);
                    TempData["oVmCurrMod"] = _oMPCModel4; TempData.Keep();
                    return PartialView("_vwMPCvd_MFR", oMPCModel.oMemberRelationModel);

                case 5:  
                    var _oMPCModel5 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberContactModel);
                    TempData["oVmCurrMod"] = _oMPCModel5; TempData.Keep();
                    return PartialView("_vwMPCvd_MCP", oMPCModel.oMemberContactModel);

                case 6:  
                    var _oMPCModel6 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberEducationModel);
                    TempData["oVmCurrMod"] = _oMPCModel6; TempData.Keep();
                    return PartialView("_vwMPCvd_MED", oMPCModel.oMemberEducationModel);

                case 7:  
                    var _oMPCModel7 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberProfessionBrandModel);
                    TempData["oVmCurrMod"] = _oMPCModel7; TempData.Keep();
                    return PartialView("_vwMPCvd_MPB", oMPCModel.oMemberProfessionBrandModel);

                case 8:  
                    var _oMPCModel8 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberWorkExperienceModel);
                    TempData["oVmCurrMod"] = _oMPCModel8; TempData.Keep();
                    return PartialView("_vwMPCvd_MWE", oMPCModel.oMemberWorkExperienceModel);


                // member churchlife info..   MCL/MCA-11... MCM-12, MCG-13, MCR-14, MRR-15, MCA-16, MCT-17, MTP-18 
                case 11:  
                    if (sb_ndx == 1)
                    {
                        var _oMPCModel111 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel);
                        TempData["oVmCurrMod"] = _oMPCModel111; TempData.Keep();
                        return PartialView("_vwMPCvd_MCL_CL", oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeModel);
                    }
                    else if (sb_ndx == 2)
                    {
                        var _oMPCModel112 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel);
                        TempData["oVmCurrMod"] = _oMPCModel112; TempData.Keep();
                        return PartialView("_vwMPCvd_MCL_CLAc", oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeActivityModel);
                    }
                    else if (sb_ndx == 3)
                    {
                        var _oMPCModel113 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel);
                        TempData["oVmCurrMod"] = _oMPCModel113; TempData.Keep();
                        return PartialView("_vwMPCvd_MCL_CET", oMPCModel.oMemberChurchlifeAllModel.oMemberChurchlifeEventTaskModel);
                    }

                    return PartialView("_vwErrorPage");

                case 12:  // return PartialView("_vwMPCvd_MCM", oMPCModel); 
                    if (sb_ndx == 1)
                    {
                        var _oMPCModel121 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberChurchMovementModel.oMemberTypeModel);
                        TempData["oVmCurrMod"] = _oMPCModel121; TempData.Keep();
                        return PartialView("_vwMPCvd_MCM_MT", oMPCModel.oMemberChurchMovementModel.oMemberTypeModel);
                    }
                    else if (sb_ndx == 2)
                    {
                        var _oMPCModel122 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberChurchMovementModel.oMemberRankModel);
                        TempData["oVmCurrMod"] = _oMPCModel122; TempData.Keep();
                        return PartialView("_vwMPCvd_MCM_MR", oMPCModel.oMemberChurchMovementModel.oMemberRankModel);
                    }
                    else if (sb_ndx == 3)
                    {
                        var _oMPCModel123 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberChurchMovementModel.oMemberStatusModel);
                        TempData["oVmCurrMod"] = _oMPCModel123; TempData.Keep();
                        return PartialView("_vwMPCvd_MCM_MS", oMPCModel.oMemberChurchMovementModel.oMemberStatusModel);
                    }

                    return PartialView("_vwErrorPage");
                   

                case 13: //return PartialView("_vwMPCvd_MCG", oMPCModel);
                    var _oMPCModel13 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberGroupingModel);
                    TempData["oVmCurrMod"] = _oMPCModel13; TempData.Keep();
                    return PartialView("_vwMPCvd_MCG", oMPCModel.oMemberGroupingModel);

                case 14: //return PartialView("_vwMPCvd_MCR", oMPCModel);
                    var _oMPCModel14 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberRoleDesigModel);
                    TempData["oVmCurrMod"] = _oMPCModel14; TempData.Keep();
                    return PartialView("_vwMPCvd_MCR", oMPCModel.oMemberRoleDesigModel);

                case 15: //return PartialView("_vwMPCvd_MRR", oMPCModel);
                    var _oMPCModel15 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberRegistrationModel);
                    TempData["oVmCurrMod"] = _oMPCModel15; TempData.Keep();
                    return PartialView("_vwMPCvd_MRR", oMPCModel.oMemberRegistrationModel);

                case 16: //return PartialView("_vwMPCvd_MCA", oMPCModel);
                    var _oMPCModel16 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberChurchAttendanceModel);
                    TempData["oVmCurrMod"] = _oMPCModel16; TempData.Keep();
                    return PartialView("_vwMPCvd_MCA", oMPCModel.oMemberChurchAttendanceModel);

                case 17: //return PartialView("_vwMPCvd_MCT", oMPCModel);
                    var _oMPCModel17 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberChurchTransferModel);
                    TempData["oVmCurrMod"] = _oMPCModel17; TempData.Keep();
                    return PartialView("_vwMPCvd_MCT", oMPCModel.oMemberChurchTransferModel);

                case 18: //return PartialView("_vwMPCvd_MTP", oMPCModel);   // tithe details of member... thus where individual tithing is done!
                    var _oMPCModel18 = Newtonsoft.Json.JsonConvert.SerializeObject(oMPCModel.oMemberChurchPaymentModel);
                    TempData["oVmCurrMod"] = _oMPCModel18; TempData.Keep();
                    return PartialView("_vwMPCvd_MTP", oMPCModel.oMemberChurchPaymentModel);

                default:
                    return PartialView("_vwErrorPage");
            }             
        }


        private MemberBioModel populateLookupsCM_BD(MemberBioModel vmLkp, ChurchMember oChurchMember)
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return vmLkp;    ///return View("_ErrorPage");
                    }
                }


                if (vmLkp == null || oChurchMember == null || this._oLoggedAGO == null) return vmLkp;
                if (oChurchMember.ChurchBodyId == null) return vmLkp;
                // 
                vmLkp.lkpStatuses = new List<SelectListItem>();
                foreach (var dl in dlGenStatuses)
                {
                    if (dl.Val == "A" || dl.Val == "T" || dl.Val == "H" || dl.Val == "D" || dl.Val == "X")
                        vmLkp.lkpStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc, Disabled = (dl.Val == "T" || dl.Val == "X") });
                }

                // if (vmLkp == null || oCurrChuBody == null) return vmLkp;
                // oCurrChuBody = _context.ChurchBody.Include(t => t.ChurchLevel).Where(c => c.Id == oCurrChuBody.Id).FirstOrDefault();

                vmLkp.lkpGenderTypes = new List<SelectListItem>();
                foreach (var dl in dlGenderType) { vmLkp.lkpGenderTypes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

                vmLkp.lkpMaritalStatuses = new List<SelectListItem>();
                foreach (var dl in dlMaritalStatus) { vmLkp.lkpMaritalStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }
                //vmLkp.lkpMaritalTypes.Insert(0, new SelectListItem { Value = "", Text = "Select" });

                vmLkp.lkpMarriageTypes = new List<SelectListItem>();
                foreach (var dl in dlMarriageType) { vmLkp.lkpMarriageTypes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }
                vmLkp.lkpMarriageTypes.Insert(0, new SelectListItem { Value = "", Text = "Select" });

                //vmLkp.lkpMemberScopees = new List<SelectListItem>();
                //foreach (var dl in dlMemClass) { vmLkp.lkpMemberScopees.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc, Disabled = true }); }

                vmLkp.lkpChurchMemTypes = new List<SelectListItem>();   /// (dl.Val == "C" || dl.Val == "L" || dl.Val == "P" || dl.Val == "M") 
                foreach (var dl in dlMemTypeCode)
                { vmLkp.lkpChurchMemTypes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc, Disabled = vmLkp.strMemTypeCode == "N" || (dl.Val == "G" || dl.Val == "A" || dl.Val == "N") }); }  /// 

                vmLkp.lkpEnrollModes = new List<SelectListItem>();
                foreach (var dl in dlEnrollStatuses) { vmLkp.lkpEnrollModes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

                //vmLkp.lkpLangProfLevels = new List<SelectListItem>();
                //foreach (var dl in dlLangProfLvl) { vmLkp.lkpLangProfLevels.Add(new SelectListItem { Value = dl.Val.ToString(), Text = dl.Desc }); }


                // lkpLanguages ... LSPK  ::- PRIMARY LANG, MOTHER TONGUE

                // vmLkp.lkpLangProfLevels.Insert(0, new SelectListItem { Value = "", Text = "Select" });


                vmLkp.lkpCountries = _context.Country.ToList()  //.Where(c => c.Display == true)
                                  .Select(c => new SelectListItem()
                                  {
                                      Value = c.CtryAlpha3Code, // .ToString(),
                                  Text = c.EngName
                                  })
                                  .OrderBy(c => c.Text)
                                  .ToList();

                // vmLkp.lkpCtryRegions ... select with country


                var strNVPCode = "TTL";    // c.Id != oCurrNVP.Id && 
                var oNVP_List = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //Include(t => t.AppGlobalOwner).
                                                   .Where(c => c.AppGlobalOwnerId == oChurchMember.AppGlobalOwnerId && c.NVPCode == strNVPCode && c.NVPStatus == "A").ToList();
                oNVP_List = oNVP_List.Where(c =>
                                   (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                vmLkp.lkpPersTitles = oNVP_List //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                            .OrderBy(c => c.OrderIndex)
                                            .ThenBy(c => c.NVPValue)
                                            .Select(c => new SelectListItem()
                                            {
                                                Value = c.NVPValue,
                                                Text = c.NVPValue
                                            })
                                            .ToList();

                // vmLkp.lkpPersTitles.Insert(0, new SelectListItem { Value = "", Text = "Select" });

                // load lookups only when adding new member... else do it thru the respective moudules---
                if (vmLkp.oChurchMember.Id == 0)
                {
                    //var strNVPCode1 = "CMT";    // c.Id != oCurrNVP.Id && 
                    //var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                    //                                   .Where(c => c.AppGlobalOwnerId == oChurchMember.AppGlobalOwnerId && c.NVPCode == strNVPCode1).ToList();
                    //oNVP_List_1 = oNVP_List_1.Where(c =>
                    //                    (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                    //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    //vmLkp.lkpChurchMemTypes = oNVP_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                    //                            .OrderBy(c => c.OrderIndex)
                    //                            .ThenBy(c => c.NVPValue)
                    //                            .Select(c => new SelectListItem()
                    //                            {
                    //                                Value = c.Id.ToString(),
                    //                                Text = c.NVPValue
                    //                            })
                    //                            .ToList();


                    var strNVPCode2 = "CMS";    // Driven by CLA
                    var oNVP_List_2 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                                       .Where(c => c.AppGlobalOwnerId == oChurchMember.AppGlobalOwnerId && c.NVPCode == strNVPCode2 && c.NVPStatus == "A").ToList();
                    oNVP_List_2 = oNVP_List_2.Where(c =>
                                        (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    vmLkp.lkpChurchMemStatuses = oNVP_List_2 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                                .OrderBy(c => c.OrderIndex)
                                                .ThenBy(c => c.NVPValue)
                                                .Select(c => new SelectListItem()
                                                {
                                                    Value = c.Id.ToString(),
                                                    Text = c.NVPValue
                                                })
                                                .ToList();


                    var strNVPCode3 = "CR";    // Driven by CLA
                    var oNVP_List_3 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                                       .Where(c => c.AppGlobalOwnerId == oChurchMember.AppGlobalOwnerId && c.NVPCode == strNVPCode3 && c.NVPStatus == "A").ToList();
                    oNVP_List_3 = oNVP_List_3.Where(c =>
                                        (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                    vmLkp.lkpChurchRanks = oNVP_List_3 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                                .OrderBy(c => c.OrderIndex)
                                                .ThenBy(c => c.NVPValue)
                                                .Select(c => new SelectListItem()
                                                {
                                                    Value = c.Id.ToString(),
                                                    Text = c.NVPValue
                                                })
                                                .ToList();
                }



                // lkpLanguages ... LSPK  ::- PRIMARY LANG, MOTHER TONGUE
                var strNVPCode4 = "LSPK";    // c.Id != oCurrNVP.Id && 
                var oNVP_List_4 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                                   .Where(c => c.AppGlobalOwnerId == oChurchMember.AppGlobalOwnerId && c.NVPCode == strNVPCode4 && c.NVPStatus == "A").ToList();
                oNVP_List_4 = oNVP_List_4.Where(c =>
                                    (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                vmLkp.lkpLanguages = oNVP_List_4 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                            .OrderBy(c => c.OrderIndex)
                                            .ThenBy(c => c.NVPValue)
                                            .Select(c => new SelectListItem()
                                            {
                                                Value = c.Id.ToString(),
                                                Text = c.NVPValue
                                            })
                                            .ToList();
                // vmLkp.lkpLanguages.Insert(0, new SelectListItem { Value = "", Text = "Select" });


                // lkpEduLevels ... INST
                var strNVPCode5 = "INST";    // c.Id != oCurrNVP.Id && 
                var oNVP_List_5 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody)//.Include(t => t.AppGlobalOwner)
                                                   .Where(c => c.AppGlobalOwnerId == oChurchMember.AppGlobalOwnerId && c.NVPCode == strNVPCode5 && c.NVPStatus == "A").ToList();
                oNVP_List_5 = oNVP_List_5.Where(c =>
                                    (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                vmLkp.lkpEduLevels = oNVP_List_5 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                            .OrderBy(c => c.OrderIndex)
                                            .ThenBy(c => c.NVPValue)
                                            .Select(c => new SelectListItem()
                                            {
                                                Value = c.Id.ToString(),
                                                Text = c.NVPValue
                                            })
                                            .ToList();
                // vmLkp.lkpEduLevels.Insert(0, new SelectListItem { Value = "", Text = "Select" });


                // lkpPersonIdTypes ... NIDT
                var strNVPCode6 = "NIDT";    // c.Id != oCurrNVP.Id && 
                var oNVP_List_6 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                                   .Where(c => c.AppGlobalOwnerId == oChurchMember.AppGlobalOwnerId && c.NVPCode == strNVPCode6 && c.NVPStatus == "A").ToList();
                oNVP_List_6 = oNVP_List_6.Where(c =>
                                    (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                vmLkp.lkpPersonIdTypes = oNVP_List_6 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                            .OrderBy(c => c.OrderIndex)
                                            .ThenBy(c => c.NVPValue)
                                            .Select(c => new SelectListItem()
                                            {
                                                Value = c.Id.ToString(),
                                                Text = c.NVPValue
                                            })
                                            .ToList();
                // vmLkp.lkpPersonIdTypes.Insert(0, new SelectListItem { Value = "", Text = "Select" });


                //TempData.Keep();
                return vmLkp;

            }
            catch (Exception ex)
            {
                return vmLkp;
            } 
        }

        private MemberContactInfoModel populateLookupsCM_MCI(MemberContactInfoModel vmLkp, ChurchBody oCurrChuBody)
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;

            vmLkp.lkpCountries = _context.Country.ToList()  //.Where(c => c.Display == true)
                           .Select(c => new SelectListItem()
                           {
                               Value = c.CtryAlpha3Code, // .ToString(),
                               Text = c.EngName
                           })
                           .OrderBy(c => c.Text)
                           .ToList();

            // vmLkp.lkpCtryRegions ... select with country
             
            return vmLkp;
        }

        private MemberLanguageSpokenModel populateLookupsCM_MLS(MemberLanguageSpokenModel vmLkp, ChurchBody oCurrChuBody)
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;


            vmLkp.lkpProficiencyLevels = new List<SelectListItem>();
            foreach (var dl in dlLangProfLvl) { vmLkp.lkpProficiencyLevels.Add(new SelectListItem { Value = dl.Val.ToString(), Text = dl.Desc }); }


            var strNVPCode = "LSPK";    // c.Id != oCurrNVP.Id && 
            var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                               .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.NVPCode == strNVPCode).ToList();
            oNVP_List_1 = oNVP_List_1.Where(c =>
                                (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

            vmLkp.lkpLanguages = oNVP_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                        .OrderBy(c => c.OrderIndex)
                                        .ThenBy(c => c.NVPValue)
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = c.NVPValue + (!string.IsNullOrEmpty(c.CtryAlpha3Code) ? " (" + c.CtryAlpha3Code + ")" : "")
                                        })
                                        .ToList();
            // vmLkp.lkpLanguages.Insert(0, new SelectListItem { Value = "", Text = "Select" });

            //TempData.Keep();
            return vmLkp;
        }

        private MemberFamilyRelationModel populateLookupsCM_MFR(MemberFamilyRelationModel vmLkp, ChurchBody oCurrChuBody)
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;

            vmLkp.lkpRelationStatuses = new List<SelectListItem>();
            foreach (var dl in dlMemRelStatus) { vmLkp.lkpRelationStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vmLkp.lkpRelationScopes = new List<SelectListItem>();
            foreach (var dl in dlChurchFellowType) { vmLkp.lkpRelationScopes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

             vmLkp.lkpFaithCategories = new List<SelectListItem>();
            foreach (var dl in dlFaithAffiliateType) { vmLkp.lkpFaithCategories.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            //vmLkp.lkpRelationCategories = new List<SelectListItem>();
            //foreach (var dl in dlFamRelCateg)
            //{
            //    if (dl.Val == "N" || dl.Val == "E" || dl.Val == "O")   /// N-uclear, E-xtended, F-aith Related, V-aried relation 
            //        vmLkp.lkpRelationCategories.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc });
            //}
             
            vmLkp.lkpRelationshipTypes = _context.RelationshipType.AsNoTracking().Where(c=> c.RelationCode != 11) .OrderBy(c => c.LevelIndex).ToList()
                                           .Select(c => new SelectListItem()
                                           {
                                               Value = c.RelationCode.ToString(),
                                               Text = c.Name
                                           })
                                           // .OrderBy(c => c.Text)
                                           .ToList();

            vmLkp.lkpCountries = _context.Country.ToList()  //.Where(c => c.Display == true)
                       .Select(c => new SelectListItem()
                       {
                           Value = c.CtryAlpha3Code, // .ToString(),
                                Text = c.EngName
                       })
                       .OrderBy(c => c.Text)
                       .ToList();


            //TempData.Keep();
            return vmLkp;
        }

        private MemberContactPersonModel populateLookupsCM_MCP(MemberContactPersonModel vmLkp, ChurchBody oCurrChuBody)
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;

            vmLkp.lkpStatuses = new List<SelectListItem>();
            foreach (var dl in dlGenStatuses) { if (dl.Val != "D" && dl.Val != "E") vmLkp.lkpStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }


            vmLkp.lkpRelationScopes = new List<SelectListItem>();
            foreach (var dl in dlChurchFellowType) { vmLkp.lkpRelationScopes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }
              

            vmLkp.lkpRelationshipTypes = _context.RelationshipType.AsNoTracking().OrderBy(c => c.LevelIndex).ToList()
                                           .Select(c => new SelectListItem()
                                           {
                                               Value = c.RelationCode.ToString(),
                                               Text = c.Name
                                           })
                                           // .OrderBy(c => c.Text)
                                           .ToList();

            vmLkp.lkpCountries = _context.Country.ToList()  //.Where(c => c.Display == true)
                            .Select(c => new SelectListItem()
                            {
                                Value = c.CtryAlpha3Code, // .ToString(),
                                  Text = c.EngName
                            })
                            .OrderBy(c => c.Text)
                            .ToList();

            //TempData.Keep();
            return vmLkp;
        }

        private MemberEducationModel populateLookupsCM_MED(MemberEducationModel vmLkp, ChurchBody oCurrChuBody)
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;


            vmLkp.lkpCountries = _context.Country.ToList()  //.Where(c => c.Display == true)
                            .Select(c => new SelectListItem()
                            {
                                Value = c.CtryAlpha3Code, // .ToString(),
                               Text = c.EngName
                            })
                            .OrderBy(c => c.Text)
                            .ToList();


            var strNVPCode = "CTT";    // c.Id != oCurrNVP.Id && 
            var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                               .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.NVPCode == strNVPCode).ToList();
            oNVP_List_1 = oNVP_List_1.Where(c =>
                                (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

            vmLkp.lkpCertificateTypes = oNVP_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                        .OrderBy(c => c.OrderIndex)
                                        .ThenBy(c => c.NVPValue)
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = c.NVPValue //+ (!string.IsNullOrEmpty(c.CtryAlpha3Code) ? " (" + c.CtryAlpha3Code + ")" : "")
                                        })
                                        .ToList();


            var strNVPCode2 = "INST";    // c.Id != oCurrNVP.Id && 
            var oNVP_List_2 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                               .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.NVPCode == strNVPCode2).ToList();
            oNVP_List_2 = oNVP_List_2.Where(c =>
                                (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

            vmLkp.lkpInstitutionTypes = oNVP_List_2 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                        .OrderBy(c => c.OrderIndex)
                                        .ThenBy(c => c.NVPValue)
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = c.NVPValue // + (!string.IsNullOrEmpty(c.CtryAlpha3Code) ? " (" + c.CtryAlpha3Code + ")" : "")    // KNUST (GHA)
                                        })
                                        .ToList();


            //TempData.Keep();
            return vmLkp;
        }

        private MemberWorkExperienceModel populateLookupsCM_MWE(MemberWorkExperienceModel vmLkp, ChurchBody oCurrChuBody)
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;


            vmLkp.lkpCountries = _context.Country.ToList()  //.Where(c => c.Display == true)
                            .Select(c => new SelectListItem()
                            {
                                Value = c.CtryAlpha3Code, // .ToString(),
                                Text = c.EngName
                            })
                            .OrderBy(c => c.Text)
                            .ToList();
             

            //TempData.Keep();
            return vmLkp;
        }


        private MemberChurchlifeModel populateLookupsCM_MCL(MemberChurchlifeModel vmLkp, ChurchBody oCurrChuBody)
        {
            vmLkp.lkpSharingStatuses_Any = new List<SelectListItem>();
            foreach (var dl in dlShareStatus_Any) { vmLkp.lkpSharingStatuses_Any.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vmLkp.lkpEnrollModes = new List<SelectListItem>();
            foreach (var dl in dlEnrollStatuses) { vmLkp.lkpEnrollModes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc, Disabled = dl.Val == "T" }); }  // transfers done via process , not manual

            vmLkp.lkpDepartModes = new List<SelectListItem>();
            foreach (var dl in dlDepartStatuses) { vmLkp.lkpDepartModes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc , Disabled= dl.Val=="T"}); }

            vmLkp.lkpHealthConditionStatuses = new List<SelectListItem>();
            foreach (var dl in dlHealthStatuses) { vmLkp.lkpHealthConditionStatuses.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }


            /// CHURCH SERVICE PREFERRED.....              
            var oCBS_List_1 = _context.ChurchBodyService.AsNoTracking().Include(t => t.ChurchBody) //.Include(t => t.AppGlobalOwner) //
                                               .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.ChurchBodyId == oCurrChuBody.Id && 
                                               c.ServiceType == "S").ToList();   // // S-service, C-category

            vmLkp.lkpChurchBodyServices = oCBS_List_1 
                                        .OrderBy(c => c.OrderIndex)
                                        .ThenBy(c => c.ServiceCategoryId )
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = c.ServiceName
                                        })
                                        .ToList();
             

            //TempData.Keep();
            return vmLkp;
        }

        private MemberChurchlifeActivityModel populateLookupsCM_MCLAc(MemberChurchlifeActivityModel vmLkp, ChurchBody oCurrChuBody)
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;

            vmLkp.lkpPersonScopes = new List<SelectListItem>();
            foreach (var dl in dlChurchFellowType) { vmLkp.lkpPersonScopes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vmLkp.lkpSharingStatuses_Any = new List<SelectListItem>();
            foreach (var dl in dlShareStatus_Any) { vmLkp.lkpSharingStatuses_Any.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }
            
            
            var strNVPCode = "CLA";    // c.Id != oCurrNVP.Id && 
            var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                               .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.NVPCode == strNVPCode).ToList();
            oNVP_List_1 = oNVP_List_1.Where(c =>
                                (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

            vmLkp.lkpChurchlifeActivities = oNVP_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                        .OrderBy(c => c.OrderIndex)
                                        .ThenBy(c => c.NVPValue)
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = c.NVPValue
                                        })
                                        .ToList();

                         
            var oCCE_List_1 = _context.ChurchCalendarEvent.AsNoTracking().Include(t => t.ChurchBody) //.Include(t => t.AppGlobalOwner) //
                                               .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && 
                                               (c.ChurchBodyId == oCurrChuBody.Id || (c.ChurchBodyId != oCurrChuBody.Id && c.SharingStatus != "N"))).ToList();
            oCCE_List_1 = oCCE_List_1.Where(c =>
                                (c.ChurchBodyId == this._oLoggedCB.Id ||
                               (c.ChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.ChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.ChurchBody, this._oLoggedCB)))).ToList();

            vmLkp.lkpChurchEvents = oCCE_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                        .OrderBy(c => c.EventFrom)
                                        .ThenBy(c => c.EventTo)
                                        .ThenBy(c => c.Subject)
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = c.Subject + " [" + (c.EventFrom != null ? String.Format("{0:dddd, MMMM d, yyyy}", c.EventFrom.Value) : "") + "]"  // add the To_date
                                        })
                                        .ToList();


            return vmLkp;
        }

        private MemberChurchlifeEventTaskModel populateLookupsCM_MCET(MemberChurchlifeEventTaskModel vmLkp, ChurchBody oCurrChuBody, MemberChurchlifeActivity oMCLAc)
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;

            vmLkp.lkpSharingStatuses_Any = new List<SelectListItem>();
            foreach (var dl in dlShareStatus_Any) { vmLkp.lkpSharingStatuses_Any.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }
            
            if (oMCLAc != null)
            {
                /// the definition list to be picked from...  strNVPCode = "CLA";    // c.Id != oCurrNVP.Id && 
                var strNVPCode2 = "CLARD";    // Driven by CLA
                var oNVP_List_2 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                                   .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId &&
                                                   c.NVPCode == strNVPCode2 && c.NVPCategoryId == (oMCLAc != null ? oMCLAc.ChurchlifeActivityId : (int?)null)).ToList();
                oNVP_List_2 = oNVP_List_2.Where(c =>
                                    (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

                vmLkp.lkpRequirementDefList = oNVP_List_2
                                            .OrderBy(c => c.OrderIndex)
                                            .ThenBy(c => c.NVPValue)
                                            .Select(c => new SelectListItem()
                                            {
                                                Value = c.Id.ToString(),
                                                Text = c.NVPValue
                                            })
                                            .ToList();

                /// get the MCLAc list avail... to be picked from
                var oMCLAc_List_1 = _context.MemberChurchlifeActivity.AsNoTracking().Include(t => t.ChurchlifeActivity)   // Include(t => t.AppGlobalOwner) //
                                                   .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.ChurchBodyId == oCurrChuBody.Id &&
                                                   c.ChurchMemberId == (oMCLAc != null ? oMCLAc.ChurchMemberId : (int?)null)).ToList();

                vmLkp.lkpMemberChurchlifeActivities = oMCLAc_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                            .OrderByDescending(c => c.EventDate)
                                            .ThenBy(c => (c.ChurchlifeActivity != null ? c.ChurchlifeActivity.NVPValue : null))
                                            .Select(c => new SelectListItem()
                                            {
                                                Value = c.Id.ToString(),
                                                Text = (c.ChurchlifeActivity != null ? c.ChurchlifeActivity.NVPValue : "") + (c.ChurchlifeActivity != null ? "-" + c.EventDate.Value.ToString("{0:MMM YYYY}") : "")   // Naming-May 2021, Wedding-Dec 2013
                                        })
                                            .ToList();

                vmLkp.lkpMemberChurchlifeActivities.Insert(0, new SelectListItem { Value = "", Text = "Select" });
            }


            //TempData.Keep();
            return vmLkp;
        }

        private MemberChurchlifeEventTaskModel populateLookupsCM_MCET(MemberChurchlifeEventTaskModel vmLkp, ChurchBody oCurrChuBody, int? oCMid, int? oCLAid )
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;

            vmLkp.lkpSharingStatuses_Any = new List<SelectListItem>();
            foreach (var dl in dlShareStatus_Any) { vmLkp.lkpSharingStatuses_Any.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            ////  P-Pending, I-In Progress, D-Deactive, Complete
            vmLkp.lkpTaskStatuses = new List<SelectListItem>();
            foreach (var dl in dlTaskStatuses)
            {  
                //if (dl.Val == "P" || dl.Val == "I" || dl.Val == "D" || dl.Val == "C")   
                    vmLkp.lkpTaskStatuses.Add(new SelectListItem
                    {
                        Value = dl.Val,
                        Text = dl.Desc
                    });
            }


            /// the definition list to be picked from...  strNVPCode = "CLA";    // c.Id != oCurrNVP.Id && 
            var strNVPCode2 = "CLARD";    // Driven by CLA
            var oNVP_List_2 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                               .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId &&
                                               c.NVPCode == strNVPCode2 && c.NVPCategoryId == oCLAid).ToList();
            oNVP_List_2 = oNVP_List_2.Where(c =>
                                (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();
            
            vmLkp.lkpRequirementDefList = oNVP_List_2
                                        .OrderBy(c => c.OrderIndex)
                                        .ThenBy(c => c.NVPValue)
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = c.NVPValue
                                        })
                                        .ToList();
            
            /// get the MCLAc list avail... to be picked from
            var oMCLAc_List_1 = _context.MemberChurchlifeActivity.AsNoTracking().Include(t => t.ChurchlifeActivity)   // Include(t => t.AppGlobalOwner) //
                                               .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.ChurchBodyId == oCurrChuBody.Id &&
                                               c.ChurchMemberId == oCMid).ToList();
            
            vmLkp.lkpMemberChurchlifeActivities = oMCLAc_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                        .OrderByDescending(c => c.EventDate)
                                        .ThenBy(c => (c.ChurchlifeActivity != null ? c.ChurchlifeActivity.NVPValue : null))
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = (c.ChurchlifeActivity != null ? c.ChurchlifeActivity.NVPValue : "") + (c.ChurchlifeActivity != null ? " - " + String.Format("{0:d MMM yyyy}", c.EventDate.Value) : "")  //c.EventDate.Value.ToString("{0:MMM YYYY}") : "")   // Naming-May 2021, Wedding-Dec 2013
                                        })
                                        .ToList();

            //// [Sam - Wedding - 22 Dec 2013]
            //strMemberChurchlifeActivity_Desc = (t_mcla != null ? (t_mcla.ChurchMember != null ? GetConcatMemberName(t_mcla.ChurchMember.Title, t_mcla.ChurchMember.FirstName, t_mcla.ChurchMember.MiddleName, t_mcla.ChurchMember.LastName, true, true, false, false, true) : "") : "") + " - " +
            //           (t_mcla != null ? (t_mcla.ChurchlifeActivity != null ? ", " + t_mcla.ChurchlifeActivity.NVPValue : "") : "") + " - " +
            //           (t_mcla.EventDate != null ? String.Format("{0:d MMM yyyy}", t_mcla.EventDate) : ""),  // [Dr. Sam Darteh, Counselor] 


            //TempData.Keep();
            return vmLkp;
        }



        //private MemberChurchlifeAllModel populateLookupsCM_MCLA(MemberChurchlifeAllModel vmLkp, ChurchBody oCurrChuBody, int? oCMid, int? oCLAid)
        //{
        //    if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;

        //    vmLkp.lkpSharingStatuses_Any = new List<SelectListItem>();
        //    foreach (var dl in dlShareStatus_Any) { vmLkp.lkpSharingStatuses_Any.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

        //    /// CHURCH SERVICE PREFERRED.....              
        //    var oCBS_List_1 = _context.ChurchBodyService.AsNoTracking().Include(t => t.ChurchBody) //.Include(t => t.AppGlobalOwner) //
        //                                       .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.ChurchBodyId == oCurrChuBody.Id &&
        //                                       c.ServiceType == "S").ToList();   // // S-service, C-category

        //    vmLkp.lkpChurchBodyServices = oCBS_List_1
        //                                .OrderBy(c => c.OrderIndex)
        //                                .ThenBy(c => c.ServiceCategoryId)
        //                                .Select(c => new SelectListItem()
        //                                {
        //                                    Value = c.Id.ToString(),
        //                                    Text = c.ServiceName
        //                                })
        //                                .ToList();


        //    var strNVPCode = "CLA";    // c.Id != oCurrNVP.Id && 
        //    var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
        //                                       .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.NVPCode == strNVPCode).ToList();
        //    oNVP_List_1 = oNVP_List_1.Where(c =>
        //                        (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
        //                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
        //                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

        //    vmLkp.lkpChurchlifeActivities = oNVP_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
        //                                .OrderBy(c => c.OrderIndex)
        //                                .ThenBy(c => c.NVPValue)
        //                                .Select(c => new SelectListItem()
        //                                {
        //                                    Value = c.Id.ToString(),
        //                                    Text = c.NVPValue
        //                                })
        //                                .ToList();
 
        //        /// the definition list to be picked from...  strNVPCode = "CLA";    // c.Id != oCurrNVP.Id && 
        //        var strNVPCode2 = "CLARD";    // Driven by CLA
        //        var oNVP_List_2 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
        //                                           .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId &&
        //                                           c.NVPCode == strNVPCode2 && c.NVPCategoryId == oCLAid).ToList();
        //        oNVP_List_2 = oNVP_List_2.Where(c =>
        //                            (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
        //                           (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
        //                           (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

        //        vmLkp.lkpRequirementDefList = oNVP_List_2
        //                                    .OrderBy(c => c.OrderIndex)
        //                                    .ThenBy(c => c.NVPValue)
        //                                    .Select(c => new SelectListItem()
        //                                    {
        //                                        Value = c.Id.ToString(),
        //                                        Text = c.NVPValue
        //                                    })
        //                                    .ToList();

        //        /// get the MCLAc list avail... to be picked from
        //        var oMCLAc_List_1 = _context.MemberChurchlifeActivity.AsNoTracking().Include(t => t.ChurchlifeActivity)   // Include(t => t.AppGlobalOwner) //
        //                                           .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.ChurchBodyId == oCurrChuBody.Id &&
        //                                           c.ChurchMemberId == oCMid).ToList();

        //        vmLkp.lkpMemberChurchlifeActivities = oMCLAc_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
        //                                    .OrderByDescending(c => c.EventDate)
        //                                    .ThenBy(c => (c.ChurchlifeActivity != null ? c.ChurchlifeActivity.NVPValue : null))
        //                                    .Select(c => new SelectListItem()
        //                                    {
        //                                        Value = c.Id.ToString(),
        //                                        Text = (c.ChurchlifeActivity != null ? c.ChurchlifeActivity.NVPValue : "") + (c.ChurchlifeActivity != null ? "-" + c.EventDate.Value.ToString("{0:MMM YYYY}") : "")   // Naming-May 2021, Wedding-Dec 2013
        //                                    })
        //                                    .ToList();
             

        //    //TempData.Keep();
        //    return vmLkp;
        //}



        private MemberTypeModel populateLookupsCM_MT(MemberTypeModel vmLkp, ChurchBody oCurrChuBody )
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;

            vmLkp.lkpSharingStatuses_Any = new List<SelectListItem>();
            foreach (var dl in dlShareStatus_Any) { vmLkp.lkpSharingStatuses_Any.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

            vmLkp.lkpChurchMemTypes = new List<SelectListItem>();   /// (dl.Val == "C" || dl.Val == "L" || dl.Val == "P" || dl.Val == "M")
            foreach (var dl in dlMemTypeCode) { vmLkp.lkpChurchMemTypes.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc, Disabled = dl.Val != "C" }); } // = (dl.Val == "G" || dl.Val == "A" || dl.Val == "N" || dl.Val == "T" || dl.Val == "C") }); }  /// disable all  

            //var strNVPCode = "CMT";    // c.Id != oCurrNVP.Id && 
            //var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
            //                                   .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.NVPCode == strNVPCode).ToList();
            //oNVP_List_1 = oNVP_List_1.Where(c =>
            //                    (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
            //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
            //                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

            //vmLkp.lkpChurchMemTypes = oNVP_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
            //                            .OrderBy(c => c.OrderIndex)
            //                            .ThenBy(c => c.NVPValue)
            //                            .Select(c => new SelectListItem()
            //                            {
            //                                Value = c.Id.ToString(),
            //                                Text = c.NVPValue  
            //                            })
            //                            .ToList();
             

            //TempData.Keep();
            return vmLkp;
        }

        private MemberRankModel populateLookupsCM_MR(MemberRankModel vmLkp, ChurchBody oCurrChuBody)
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;

            vmLkp.lkpSharingStatuses_Any = new List<SelectListItem>();
            foreach (var dl in dlShareStatus_Any) { vmLkp.lkpSharingStatuses_Any.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

             

            var strNVPCode3 = "CR";    // Driven by CLA
            var oNVP_List_3 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                               .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.NVPCode == strNVPCode3).ToList();
            oNVP_List_3 = oNVP_List_3.Where(c =>
                                (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

            vmLkp.lkpChurchRanks = oNVP_List_3 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                        .OrderBy(c => c.OrderIndex)
                                        .ThenBy(c => c.NVPValue)
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = c.NVPValue
                                        })
                                        .ToList();




            //TempData.Keep();
            return vmLkp;
        }

        private MemberStatusModel populateLookupsCM_MS(MemberStatusModel vmLkp, ChurchBody oCurrChuBody)
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;

            vmLkp.lkpSharingStatuses_Any = new List<SelectListItem>();
            foreach (var dl in dlShareStatus_Any) { vmLkp.lkpSharingStatuses_Any.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }
              

            var strNVPCode2 = "CMS";    // Driven by CLA
            var oNVP_List_2 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                               .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.NVPCode == strNVPCode2).ToList();
            oNVP_List_2 = oNVP_List_2.Where(c =>
                                (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

            vmLkp.lkpChurchMemStatuses = oNVP_List_2 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                        .OrderBy(c => c.OrderIndex)
                                        .ThenBy(c => c.NVPValue)
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = c.NVPValue
                                        })
                                        .ToList(); 



            //TempData.Keep();
            return vmLkp;
        }

        private MemberChurchGroupingModel populateLookupsCM_MCG(MemberChurchGroupingModel vmLkp, ChurchBody oCurrChuBody)
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;

            vmLkp.lkpSharingStatuses_Any = new List<SelectListItem>();
            foreach (var dl in dlShareStatus_Any) { vmLkp.lkpSharingStatuses_Any.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }


            vmLkp.lkpChurchOrgTypes = new List<SelectListItem>();
            foreach (var dl in dlCBDivOrgTypes)
            { //  dl.Val=="CR" || dl.Val == "CH" || dl.Val == "CN"  -- controlled by vendor, partially modified by client
                if (dl.Val == "CG" || dl.Val == "SC")   
                    vmLkp.lkpChurchOrgTypes.Add(new SelectListItem
                    {
                        Value = dl.Val,
                        Text = dl.Desc
                    });
            }

            // member at the local level can only belong to [group] ... [committee, council, board] >>> roles
            var oCU_List_1 = _context.ChurchUnit.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && (c.OrgType=="CG") &&
                                ((c.SharingStatus == "N" && c.OwnedByChurchBodyId == oCurrChuBody.Id) || (c.SharingStatus != "N"))).ToList();  //  && c.Status == "A"  // || c.OrgType=="SC"

            oCU_List_1 = oCU_List_1.Where(c =>
                               (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

            vmLkp.lkpChurchUnits = oCU_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                        .OrderBy(c => c.OrderIndex)
                                        .ThenBy(c => c.Name)
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = c.Name
                                        })
                                        .ToList();

            //TempData.Keep();
            return vmLkp;
        }

        private MemberRoleDesigModel populateLookupsCM_MCR(MemberRoleDesigModel vmLkp, ChurchBody oCurrChuBody)
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;

            vmLkp.lkpSharingStatuses_Any = new List<SelectListItem>();
            foreach (var dl in dlShareStatus_Any) { vmLkp.lkpSharingStatuses_Any.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }


            // role of person could be position or team
            vmLkp.lkpChurchOrgTypes_CRL = new List<SelectListItem>();
            foreach (var dl in dlCBDivOrgTypes)
            { //  dl.Val=="CR" || dl.Val == "CH" || dl.Val == "CN"  -- controlled by vendor, partially modified by client
                if (dl.Val == "CP" || dl.Val == "TM")   //  // CP, TM
                    vmLkp.lkpChurchOrgTypes_CRL.Add(new SelectListItem
                    {
                        Value = dl.Val,
                        Text = dl.Desc
                    });
            }

             // role of person could be anywhere in the church
            vmLkp.lkpChurchOrgTypes = new List<SelectListItem>();
            foreach (var dl in dlCBDivOrgTypes)
            { //  dl.Val=="CR" || dl.Val == "CH" || dl.Val == "CN"  -- controlled by vendor, partially modified by client
                if (dl.Val == "GB" || dl.Val == "IB" || dl.Val == "CO" || dl.Val == "DP" || dl.Val == "CE" || dl.Val == "CG" || dl.Val == "SC")   //  // CP, TM
                    vmLkp.lkpChurchOrgTypes.Add(new SelectListItem
                    {
                        Value = dl.Val,
                        Text = dl.Desc
                    });
            }


       

            // role can be anywhere except [CRL] ... [committee, council, board] >>> roles <<< member of Session [IB, GB or TM]  ::- if CU is unspecified -->> Mainstream Applied
            var oCU_List_1 = _context.ChurchUnit.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId 
                                               ).ToList();  //  && c.Status == "A"  // (c.OrgType != "CP") // || c.OrgType=="SC"
            oCU_List_1 = oCU_List_1.Where(c =>
                               (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

            vmLkp.lkpChurchUnits = oCU_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                        .OrderBy(c => c.OrderIndex)
                                        .ThenBy(c => c.Name)
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = c.Name
                                        })
                                        .ToList();


            // OrgType may determines the role... ex. Choir can limit to Choirmaster
            // role can be anywhere except [CRL] ... [committee, council, board] >>> roles <<< member of Session [IB, GB or TM]  ::- if CU is unspecified -->> Mainstream Applied
            var oCRL_List_1 = _context.ChurchRole.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId  
                                              ).ToList();  // (c.OrgType != "TM")  && c.Status == "A"  // || c.OrgType=="SC"
            oCRL_List_1 = oCRL_List_1.Where(c =>
                               (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

            vmLkp.lkpChurchRoles = oCRL_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                        .OrderBy(c => c.RankIndex)
                                        .ThenBy(c => c.Name)
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = c.Name
                                        })
                                        .ToList();

            //TempData.Keep();
            return vmLkp;
        }

         private MemberRegistrationModel populateLookupsCM_MRR(MemberRegistrationModel vmLkp, ChurchBody oCurrChuBody)
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;

            vmLkp.lkpSharingStatuses_Any = new List<SelectListItem>();
            foreach (var dl in dlShareStatus_Any) { vmLkp.lkpSharingStatuses_Any.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }


            /// get the current year
            var oCP_List_1 =
                            _context.ChurchPeriod.AsNoTracking().Include(t => t.OwnedByChurchBody) //
                            .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.Status == "A").ToList();  // && c.PeriodType == "AP"

            oCP_List_1 = oCP_List_1.Where(c =>
                               (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

            //ChurchPeriod oCPRDefault = oCP_List_1.FirstOrDefault();


            //var oCPR_List_1 = _context.ChurchPeriod.AsNoTracking().Include(t => t.ChurchlifeActivity)   // Include(t => t.AppGlobalOwner) //
            //                                   .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId && c.ChurchBodyId == oCurrChuBody.Id &&
            //                                   c.ChurchMemberId == oCMid).ToList();

            vmLkp.lkpAccountPeriods = oCP_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                                        
                                        .OrderByDescending(c => c.Year).ThenBy(c => c.FromDate)
                                        .Select(c => new SelectListItem()
                                        {
                                            Value = c.Id.ToString(),
                                            Text = c.Year + ": "+ (c.FromDate != null ? String.Format("{0:d MMM yyyy}", c.FromDate.Value) : "") + (c.ToDate != null ? " - " + String.Format("{0:d MMM yyyy}", c.ToDate.Value) : "")  //c.EventDate.Value.ToString("{0:MMM YYYY}") : "")   // Naming-May 2021, Wedding-Dec 2013
                                        })
                                        .ToList();



            //TempData.Keep();
            return vmLkp;
        }

        private MemberChurchAttendanceModel populateLookupsCM_MCA(MemberChurchAttendanceModel vmLkp, ChurchBody oCurrChuBody)
        {
            if (vmLkp == null || oCurrChuBody == null || this._oLoggedAGO == null) return vmLkp;

            vmLkp.lkpSharingStatuses_Any = new List<SelectListItem>();
            foreach (var dl in dlShareStatus_Any) { vmLkp.lkpSharingStatuses_Any.Add(new SelectListItem { Value = dl.Val, Text = dl.Desc }); }

  
            // role can be anywhere except [CRL] ... [committee, council, board] >>> roles <<< member of Session [IB, GB or TM]  ::- if CU is unspecified -->> Mainstream Applied
            var oCCE_List_1 = _context.ChurchCalendarEvent.AsNoTracking().Include(t => t.ChurchBody).ThenInclude(t=> t.ChurchLevel) //.Include(t => t.AppGlobalOwner) //
                                .Where(c => c.AppGlobalOwnerId == oCurrChuBody.AppGlobalOwnerId
                                               ).ToList();  //  && c.Status == "A"  // (c.OrgType != "CP") // || c.OrgType=="SC"
            oCCE_List_1 = oCCE_List_1.Where(c =>
                               (c.ChurchBodyId == this._oLoggedCB.Id ||
                               (c.ChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.ChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.ChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.ChurchBody, this._oLoggedCB)))).ToList();

            vmLkp.lkpChurchEvents = oCCE_List_1                                 
                               .OrderByDescending(c => c.EventFrom)
                               .ThenByDescending(c => c.EventTo)
                               .ThenBy(c => c.ChurchBody?.ChurchLevel?.LevelIndex)
                               .ThenBy(c => c.Subject)
                               .Select(c => new SelectListItem()
                               {
                                   Value = c.Id.ToString(),
                                   Text = c.Subject
                               })
                               .ToList();
             

            //TempData.Keep();
            return vmLkp;
        }






        public JsonResult GetChurchUnitListByParentCB(int? oAGOId, int? oUnitCBId, string strOrgTypeCode, bool addEmpty = false)
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAGOId != null ? oAGOId : this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return null; //// View("_ErrorPage");
                    }
                }

                var oCUList = new List<SelectListItem>();

                var oCU_List_1 = _context.ChurchUnit.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel) //.Include(t => t.AppGlobalOwner) //
                       .Where(c => c.AppGlobalOwnerId == oAGOId && c.OrgType == strOrgTypeCode && c.Status == "A" &&
                       ((c.SharingStatus == "N" && c.OwnedByChurchBodyId == oUnitCBId) || (c.SharingStatus != "N"))).ToList();  //c.OwnedByChurchBodyId == oUnitCBId &&   && c.Status == "A"  // (c.OrgType != "CP") // || c.OrgType=="SC"

                oCUList = oCU_List_1.Where(c =>
                                   (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList()
                                  //.OrderByDescending(c => c.Name).ToList()

                                  .Select(c => new SelectListItem()
                                  {
                                      Value = c.Id.ToString(),
                                      Text = c.Name
                                  })
                .OrderBy(c => c.Text)
                .ToList();

                if (addEmpty) oCUList.Insert(0, new SelectListItem { Value = "", Text = "Select Unit" });
                return Json(oCUList);
            }
            catch (Exception)
            {
                return null;
            }            
        }


        public JsonResult GetChurchRoleListByParentCB(int? oAGOId, int? oRoleCBId, string strOrgTypeCode, bool addEmpty = false)
        {

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAGOId != null ? oAGOId : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }


            var oCRLList = new List<SelectListItem>();
            // if (_context == null)
            // if (!InitializeUserLogging()) return Json(oCRLList);
            /// 
            //oCRLList = _context.ChurchRole  //.Include(t => t.ChurchLev&&el)
            //    .Where(c => c.AppGlobalOwnerId == oAGOId && c.OwnedByChurchBodyId == oRoleCBId && c.OrgType == strOrgTypeCode && c.Status == "A")
            //    .OrderBy(c => c.Name)
            //    .ToList()

            var oCR_List_1 = _context.ChurchUnit.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel) //.Include(t => t.AppGlobalOwner) //
                       .Where(c => c.AppGlobalOwnerId == oAGOId && c.OwnedByChurchBodyId == oRoleCBId && c.OrgType == strOrgTypeCode && c.Status == "A").ToList();  //  && c.Status == "A"  // (c.OrgType != "CP") // || c.OrgType=="SC"

            oCRLList = oCR_List_1.Where(c =>
                               (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList()
        //.OrderByDescending(c => c.Name).ToList()

        .Select(c => new SelectListItem()
        {
            Value = c.Id.ToString(),
            Text = c.Name
        })
            .OrderBy(c => c.Text)
            .ToList();

            if (addEmpty) oCRLList.Insert(0, new SelectListItem { Value = "", Text = "Select Role" });
            return Json(oCRLList);
        }

        public string GetGlobalMemberCodeByChurchCode_string(int? oAGOid, int? oCBid, string strPFX_CC, bool bl_LDZR = false, int varCode = 0)
        {
            if (varCode == 0) return "";

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return "";
                }
            }


            //if (this._context == null)
            //    if (!InitializeUserLogging()) return string.Empty;

            //var oChurchBody = _context.ChurchBody.AsNoTracking().Include(t=>t.ParentChurchBody).Where(c => c.AppGlobalOwnerId == oAGOid && c.Id == oCBid).FirstOrDefault();
            //if (oChurchBody == null) return "";

            /// 
            var strPrefix = strPFX_CC + (!string.IsNullOrEmpty(strPFX_CC) ? "/" : "");  // PCG001/

            //var fsCount = _context.ChurchMember.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid);
            //var tempCnt = fsCount + 1; var tempCode = strPrefix.ToUpper() + (bl_LDZR ? string.Format("{0:D4}", tempCnt) : tempCnt.ToString());
            //fsCount = _context.ChurchMember.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAGOid && c.GlobalMemberCode == tempCode);


            // unique per denomination ... across congregations
            var tempCode = strPrefix.ToUpper() + (bl_LDZR ? string.Format("{0:D4}", varCode) : varCode.ToString());
            var fsCount = _context.ChurchMember.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAGOid && c.GlobalMemberCode == tempCode);
            if (fsCount == 0) return tempCode;  
            else
            {
                //tempCnt++; tempCode = bl_LDZR ? string.Format("{0:D4}", tempCnt) : tempCnt.ToString();
                //tempCode = strPrefix.ToUpper() + tempCode;
                //fsCount = _context.ChurchMember.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAGOid && c.GlobalMemberCode == tempCode);
                //var res = false;
                //while (fsCount > 0 && fsCount < 10)
                //{
                //    tempCnt++; tempCode = bl_LDZR ? string.Format("{0:D4}", tempCnt) : tempCnt.ToString();
                //    tempCode = strPrefix.ToUpper() + tempCode;
                //    fsCount = _context.ChurchMember.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAGOid && c.GlobalMemberCode == tempCode);
                //    //
                //    res = fsCount == 0;
                //}

                return "";  // tempCode;  
            }
        }


        public string GetCustomMemberCodeByPRFX_SFX_string(int? oAGOid, int? oCBid, string strPFX, string strSFX, bool bl_LDZR = false, int varCode = 0)
        {
            if (varCode == 0) return "";

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return "";
                }
            }


            //if (this._context == null)
            //    if (!InitializeUserLogging()) return string.Empty;

            //var oChurchBody = _context.ChurchBody.AsNoTracking().Include(t => t.ParentChurchBody).Where(c => c.AppGlobalOwnerId == oAGOid && c.Id == oCBid).FirstOrDefault();
            //if (oChurchBody == null) return "";

            ///  PRX -- ??? --- SFX
            //var fsCount = _context.ChurchMember.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid);
            //var tempCnt = fsCount + 1; var tempCode = strPFX.ToUpper() + (bl_LDZR ? string.Format("{0:D4}", tempCnt) : tempCnt.ToString()) + strSFX;


            // unique per congregation ... not the denomination
            var tempCode = strPFX.ToUpper() + (bl_LDZR ? string.Format("{0:D4}", varCode) : varCode.ToString()) + strSFX;
            var fsCount = _context.ChurchMember.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.GlobalMemberCode == tempCode);
            if (fsCount == 0) return tempCode;
            else
            {
                //tempCnt++; tempCode = bl_LDZR ? string.Format("{0:D4}", tempCnt) : tempCnt.ToString();
                //tempCode = strPFX.ToUpper() + tempCode + strSFX;
                //fsCount = _context.ChurchMember.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAGOid && c.GlobalMemberCode == tempCode);
                //var res = false;
                //while (fsCount > 0 && fsCount < 10)
                //{
                //    tempCnt++; tempCode = bl_LDZR ? string.Format("{0:D4}", tempCnt) : tempCnt.ToString();
                //    tempCode = strPFX.ToUpper() + tempCode + strSFX;
                //    fsCount = _context.ChurchMember.AsNoTracking().Count(c => c.AppGlobalOwnerId == oAGOid && c.GlobalMemberCode == tempCode);
                //    //
                //    res = fsCount == 0;
                //}

                return ""; // tempCode;
            }
        }


        public JsonResult GetCountryRegionsByCountry(string ctryId, int? defCtryRegid = null, bool addEmpty = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }


            //if (this._context == null)
            //    if (!InitializeUserLogging()) return Json(new List<SelectListItem>()); ;

            var countryList = _context.CountryRegion.AsNoTracking() //.Include(t => t.Country)
                .Where(c => c.CtryAlpha3Code == ctryId)
                .OrderBy(c => c.Name).ToList()

            //(c.OwnedByChurchBodyId == oCurrChuBody.Id ||
            // (c.OwnedByChurchBodyId != oCurrChuBody.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCurrChuBody.ParentChurchBodyId) ||
            // (c.OwnedByChurchBodyId != oCurrChuBody.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCurrChuBody))))

            .Select(c => new SelectListItem()
            {
                Value = c.Id.ToString(),
                Text = c.Name,
                Selected = (defCtryRegid != null && c.Id == defCtryRegid)
            })
            //.OrderBy(c => c.Text)
            .ToList();

            /// if (addEmpty) countryList.Insert(0, new CountryRegion { Id = "", Name = "Select" });             
            //return Json(new SelectList(countryList, "Id", "Name"));  

            if (addEmpty) countryList.Insert(0, new SelectListItem { Value = "", Text = "Select country region" });
            return Json(countryList);
        }


        public JsonResult SendCustomSMS(int oCBid, int oCMid)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null;
                }
            }


            var oMemBio = GetMemberBiodata(this._oLoggedAGO.Id, oCBid, null, null, oCMid, false, _context);
            var oChuMemNotifyList = new List<MemberBioModel>();
            if (oMemBio == null)
                return Json(new { taskSuccess = false, userMess = "Member details not found!" });

            oChuMemNotifyList.Add(oMemBio);
            ContactInfo oMemCI = null;
            var strRequestor = ""; var strSalutation = "";
            List<string> oNotifPhone_List = new List<string>();
            List<string> oNotifMessageList = new List<string>();
            var oNotifMsg = "";
            foreach (var oCM in oChuMemNotifyList)
            {
                var num = "";
                /*oMemCI = _context.ContactInfo.Find(_oChangesMT.ChurchMemberTransf.ContactInfoId);  */ //searches the local cache loaded
                                                                                                        //if (oCM.PrimContactInfoId != null)
                oMemCI = oCM.oMemContactInfo; //_context.ContactInfo.Find(oCM.PrimContactInfoId);

                if (oMemCI != null && oCM != null)
                {  //get Custom salution... else use greeeting of the day: morning, afternoon, evening
                   //strSalutation = "Asomdwei nka wo!";

                    // get the country-codes from the CI module...
                    if (oMemCI.MobilePhone1 != null)
                    { num = oMemCI.MobilePhone1; if (num.Length <= 10 && !num.StartsWith("233")) num = "233" + num.Substring(1, num.Length - 1); }
                    if (num.Length == 0)
                        if (oMemCI.MobilePhone2 != null)
                        { num = oMemCI.MobilePhone2; if (num.Length <= 10 && !num.StartsWith("233")) num = "233" + num.Substring(1, num.Length - 1); }
                    if (num.Length > 0)
                    {
                        strRequestor = oCM.strMemDisplayName; //  (((oCM.Title + ' ' + oCM.FirstName).Trim() + " " + oCM.MiddleName).Trim() + " " + oCM.LastName).Trim();
                        oNotifMsg = strRequestor + ", HAPPY BIRTHDAY TO YOU! May the LORD shower His blessings on your life in Jesus name. Amen. " + strSalutation + " [from " + oCM.strChurchBody + "]"; // + ". Please " + (_oChangesMT.ChurchMemberId == oCM.Id ? "your " : strRequestor + ".") + _oNotifMsg + ". Thank you.";
                        //
                        oNotifPhone_List.Add(num);
                        oNotifMessageList.Add(oNotifMsg);

                        //email recipients... applicant, church   ... specific e-mail content
                        //listToAddr.Add(new MailAddress(oMemCI.Email, strRequestor));

                        //var msgSubject = vm.strTransferType + ": " + vm.strTransfMemberDesc;
                        //var userMess = oNotifMsg + Environment.NewLine + "Open request: " + strUrl;
                        //var res = AppUtilties.SendEmailNotification(strSenderId, msgSubject, userMess, listToAddr, listCcAddr, listBccAddr, null, true);

                        //SendEmailNotification(strSenderId, vm.strTransferType + ": " + vm.strTransfMemberDesc, oNotifMsg + Environment.NewLine + "Open request: " +  strUrl, 
                        //    listToAddr, listCcAddr, listBccAddr, null);
                    }
                }
            }

            //send notifications... sms, email
            if (oNotifPhone_List.Count > 0 && oNotifPhone_List.Count == oNotifMessageList.Count)
                AppUtilties.SendSMSNotification(oNotifPhone_List, oNotifMessageList, true);

            return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg });
        }


        public bool SendCustomNotification(string _strMessSubject, List<ChurchBody> oCBList, List<ChurchMember> oCM_NotifyList, List<string> oCusMessList, bool isCBDiff, bool isMessDiff, bool isInclCMInfoInSalu)
        {
            try
            {
                // check list...
                if (oCBList.Count == 0 || oCM_NotifyList.Count == 0 || oCusMessList.Count == 0) return false;

                //ChurchBody oCB = !isCBDiff ? oCBList[0] : null;
                //string strCusMess = !isMessDiff ? oCusMessList[0] : ""; 

                var oCMCurr = new ChurchMember();
                var oCBCurr = new ChurchBody();

                // List<ChurchMember> oChuMemNotifyList = new List<ChurchMember>();
                var strSalutation = "";
                var strSenderId = ""; // "RHEMA-CMS [fr: " + oCBMess.Name + "]";

                var tm = DateTime.Now;
                var oAGOMess = this._oLoggedAGO;
                string strUrl = string.Concat(this.Request.Scheme, "://", this.Request.Host, this.Request.Path, this.Request.QueryString);

                // Asomdwei nka wo|enka wo nso 
                if (!string.IsNullOrEmpty(oAGOMess.Slogan))
                {
                    strSalutation = oAGOMess.Slogan;   //
                    if (strSalutation.Contains("*|*"))
                    {
                        var _arrSlogan = strSalutation.Split("*|*");
                        strSalutation = _arrSlogan.Length > 0 ? _arrSlogan[0] : strSalutation;
                    }
                }

                // in case --- 
                if (string.IsNullOrEmpty(strSalutation))
                {
                    var ts = tm.TimeOfDay;
                    if (ts.Hours >= 0 && ts.Hours < 12) strSalutation = "Good morning";
                    else if (ts.Hours <= 16) strSalutation = "Good afternoon";
                    else if (ts.Hours < 24) strSalutation = "Good evening";
                }

                ContactInfo oMemCI = null;
                /// var strRequestor = ""; 
                
                var strMemDisplayName = ""; 
                var oNotifMsg = ""; //var _oNotifMsg = ""; // oNotifMsg;

                //notify... applicant member
                if (oCM_NotifyList.Count > 0)
                {
                    MailAddressCollection listToAddr = new MailAddressCollection();
                    MailAddressCollection listCcAddr = new MailAddressCollection();
                    MailAddressCollection listBccAddr = new MailAddressCollection();
                    //
                    List<string> oNotifPhone_List = new List<string>();
                    List<string> oNotifMessageList = new List<string>();

                    ///_context.ContactInfo.Where(c => c.ChurchBodyId == _oChangesMT.RequestorChurchBodyId || c.ChurchBodyId == _oChangesMT.FromChurchBodyId || c.ChurchBodyId == _oChangesMT.ToChurchBodyId).Load();

                    // _context.ContactInfo.Find(_oChangesMT.ChurchMemberTransf.ContactInfoId);   //searches the local cache loaded


                    // for the member
                    for (var i = 0; i < oCM_NotifyList.Count; i++)   /// foreach (var oCM in oCM_NotifyList)
                    {
                        oCBCurr = !isCBDiff ? oCBList[0] : oCBList[i];
                        oCMCurr = oCM_NotifyList[i];
                        strSenderId = "RHEMA-CMS [fr: " + oCBCurr.Name + "]";
                        var num = "";
                        /*oMemCI = _context.ContactInfo.Find(_oChangesMT.ChurchMemberTransf.ContactInfoId);  */ //searches the local cache loaded
                        if (oCMCurr.PrimContactInfoId != null)
                            oMemCI = _context.ContactInfo.AsNoTracking().Where(x => x.AppGlobalOwnerId == oCMCurr.AppGlobalOwnerId && x.ChurchBodyId == oCBCurr.Id &&
                                        x.Id == oCMCurr.PrimContactInfoId).FirstOrDefault();

                        if (oMemCI == null)
                            oMemCI = _context.ContactInfo.AsNoTracking().Where(x => x.AppGlobalOwnerId == oCMCurr.AppGlobalOwnerId && x.ChurchBodyId == oCBCurr.Id &&
                                        x.ChurchMemberId == oCMCurr.Id).FirstOrDefault();

                        // check contact person of the member --- for some proxy CI -- 
                        if (oMemCI == null && oCMCurr.ChurchBodyId == oCBCurr.Id) // && oCMCurr.Id == _oChangesMT.ChurchMemberId)
                        {
                            var oMCP = _context.MemberContact.AsNoTracking().Include(t => t.ChurchMember).Where(x => x.AppGlobalOwnerId == oCMCurr.AppGlobalOwnerId && x.ChurchBodyId == oCMCurr.ChurchBodyId &&
                                        x.ChurchMemberId == oCMCurr.Id).FirstOrDefault();
                            if (oMCP != null)
                            {
                                if (oMCP.ChurchMember != null)
                                {
                                    if (oMCP.ChurchMember.PrimContactInfoId != null)
                                        oMemCI = _context.ContactInfo.AsNoTracking().Where(x => x.AppGlobalOwnerId == oMCP.ChurchMember.AppGlobalOwnerId && x.ChurchBodyId == oMCP.ChurchMember.ChurchBodyId &&
                                                    x.Id == oMCP.ChurchMember.PrimContactInfoId).FirstOrDefault();

                                    if (oMemCI == null)
                                        oMemCI = _context.ContactInfo.AsNoTracking().Where(x => x.AppGlobalOwnerId == oMCP.ChurchMember.AppGlobalOwnerId && x.ChurchBodyId == oMCP.ChurchMember.ChurchBodyId &&
                                                    x.ChurchMemberId == oMCP.ChurchMember.Id).FirstOrDefault();
                                }
                            }
                        }


                        if (oMemCI != null && oCMCurr != null)
                        {  //get Custom salution... else use greeeting of the day: morning, afternoon, evening
                           //strSalutation = "Asomdwei nka wo!";

                            // get the country-codes from the CI module...
                            if (oMemCI.MobilePhone1 != null)
                            { num = oMemCI.MobilePhone1; if (num.Length <= 10 && !num.StartsWith("233")) num = "233" + num.Substring(1, num.Length - 1); }
                            if (num.Length == 0)
                                if (oMemCI.MobilePhone2 != null)
                                { num = oMemCI.MobilePhone2; if (num.Length <= 10 && !num.StartsWith("233")) num = "233" + num.Substring(1, num.Length - 1); }
                            if (num.Length > 0)
                            {
                                // strRequestor = (((oCMCurr.Title + ' ' + oCMCurr.FirstName).Trim() + " " + oCMCurr.MiddleName).Trim() + " " + oCMCurr.LastName).Trim();
                                strMemDisplayName = GetConcatMemberName(oCMCurr.Title, oCMCurr.FirstName, oCMCurr.MiddleName, oCMCurr.LastName, true, true, false, false, true);
                                if (isInclCMInfoInSalu) oNotifMsg = strMemDisplayName + ", " + strSalutation + ". " + (!isMessDiff ? oCusMessList[0] : oCusMessList[i]) ;
                                else oNotifMsg = strSalutation + ". " + (!isMessDiff ? oCusMessList[0] : oCusMessList[i]);

                                //
                                oNotifPhone_List.Add(num);
                                oNotifMessageList.Add(oNotifMsg);

                                //email recipients... applicant, church   ... specific e-mail content
                                listToAddr.Add(new MailAddress(oMemCI.Email, strMemDisplayName));

                                var msgSubject = _strMessSubject;
                                var userMess = oNotifMsg ;
                                var res = AppUtilties.SendEmailNotification(strSenderId, msgSubject, userMess, listToAddr, listCcAddr, listBccAddr, null, true);

                                //SendEmailNotification(strSenderId, vm.strTransferType + ": " + vm.strTransfMemberDesc, oNotifMsg + Environment.NewLine + "Open request: " +  strUrl, 
                                //    listToAddr, listCcAddr, listBccAddr, null);
                            }
                        }
                    }

                    //send notifications... sms, email
                    if (oNotifPhone_List.Count > 0 && oNotifPhone_List.Count == oNotifMessageList.Count)
                        AppUtilties.SendSMSNotification(oNotifPhone_List, oNotifMessageList, true);

                }


                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }


        public JsonResult GetMemberListByCB(int? oAGOid, int? oCBid, bool addEmpty = false, int? currCMid = null, bool exclCurrCM = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, oAGOid != null ? oAGOid : this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return null; //// View("_ErrorPage");
                }
            }

            var oCMList_1 = (  /// members must [internal-current-active]
                            from t_cm in _context.ChurchMember.AsNoTracking()
                                 .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.MemberScope == "I" && (c.Status == "A" || c.Status == "T") && 
                                 (!exclCurrCM || (exclCurrCM && c.Id != currCMid))).ToList()
                            from t_mcl in _context.MemberChurchlife.AsNoTracking()
                                 .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchMemberId == t_cm.Id &&
                                            c.IsDeceased == false && c.IsCurrentMember == true).DefaultIfEmpty() 

                            select new ChurchMemberModel()
                            {
                                oChurchMember = t_cm,
                                oChurchMemberId = t_cm.Id,
                                strMemberFullName = GetConcatMemberName(t_cm.Title, t_cm.FirstName, t_cm.MiddleName, t_cm.LastName, false, false, false, false, false) + " [" + t_cm.GlobalMemberCode + "]",
                                strNameSortBy = t_cm.FirstName + t_cm.MiddleName + t_cm.LastName
                            }) 
                            .ToList();

            if (oCMList_1.Count > 0)
                oCMList_1 = oCMList_1.OrderBy(c=> c.strNameSortBy).ToList();

            //var oCMList_1 = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.Status == "A" && c.MemberScope == "I")  //Internal [C, L, P, M] only
            //    .OrderBy(c => (c.FirstName + c.MiddleName + c.LastName)).ToList();

            /// some level of security may be needed ... to allow access to CB membership from external ::: setting... Allow external access (with sister congregations) to relevant church info ...default: Yes

            //(c.OwnedByChurchBodyId == oCurrChuBody.Id ||
            // (c.OwnedByChurchBodyId != oCurrChuBody.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCurrChuBody.ParentChurchBodyId) ||
            // (c.OwnedByChurchBodyId != oCurrChuBody.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCurrChuBody))))

            var oCMList = oCMList_1
                .Select(c => new SelectListItem()
                {
                    Value = c.oChurchMemberId .ToString(),   //.Id.ToString(),
                    Text = c.strMemberFullName /// GetConcatMemberName(c.Title, c.FirstName, c.MiddleName, c.LastName, false, false, false, false, false) + " [" + c.GlobalMemberCode + "]" , /// Dr. Sam ...
                    //  GetConcatMemberName(t_cm.Title, t_cm.FirstName, t_cm.MiddleName, t_cm.LastName, true, true, false, false, true),  // Sam Darteh
                })
                //.OrderBy(c => c.Text)
                .ToList();

            /// if (addEmpty) countryList.Insert(0, new CountryRegion { Id = "", Name = "Select" });             
            //return Json(new SelectList(countryList, "Id", "Name"));  

            if (addEmpty) oCMList.Insert(0, new SelectListItem { Value = "", Text = "Select member" });
            return Json(oCMList);
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_BD(MemberBioModel vm)
        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            //if (!InitializeUserLogging())
            //    return RedirectToAction("LoginUserAcc", "UserLogin");

            // var strDesc = "Church Member - Biodata";
            
            if (string.IsNullOrEmpty(vm.strMemTypeCode)) vm.strMemTypeCode = vm._strMemTypeCodeBck;
            ///vm.strMemTypeCode = "C";

            var strDescDetail = vm.strMemTypeCode == "N" ? "New Convert - Biodata" : "Church Member - Biodata";
            var strDescHdr = vm.strMemTypeCode == "N" ? "New convert" : "Church member";

            // var _userTask = "Attempted accessing/modifying " + strDesc.ToLower(); 

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDescDetail + " data to update unavailable. Please refresh and try again."});
            if (vm.oChurchMember == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDescDetail + " data to update unavailable. Please refresh and try again." });

            ChurchMember _oChanges = vm.oChurchMember;
            ContactInfo _oChangesCI = vm.oMemContactInfo;
            var isNewCM_Data = _oChanges.Id == 0;

            ///
            /// check attached CB
            if (_oChanges.AppGlobalOwnerId == null) _oChanges.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChanges.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Target congregation of " + strDescHdr.ToLower() + " could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Target congregation of " + strDescHdr.ToLower() + " could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church code for target congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });
            ///
            ///

            // var arrData = "";
            // arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            // var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberBioModel>(arrData) : vm;

            // ChurchMember oCM_BD = new ChurchMember(); //oCM_BD = vmMod.oChurchMember; 
            ////var oCM_CI = vmMod.oMemContactInfo; 

            // if (oCM_BD == null)
            //     return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Member biodata not found. Please check for errors or refresh and try again.", signOutToLogIn = false });

            // // confirm client admin
            // if (oCM_BD.AppGlobalOwner == null || oCM_BD.ChurchBody == null)
            // {
            //     oCM_BD.AppGlobalOwner = this._oLoggedAGO;       // _context.AppGlobalOwner.Find(_oChanges.AppGlobalOwnerId);  // 
            //     oCM_BD.ChurchBody = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.ChurchBodyId).FirstOrDefault();  //this._oLoggedCB;       
            // }

            //if (oCM_CI != null)
            //{
            //    if (oCM_CI.AppGlobalOwnerId == null || oCM_CI.AppGlobalOwner == null)
            //    { oCM_CI.AppGlobalOwnerId = oCM_BD.AppGlobalOwnerId; oCM_CI.AppGlobalOwner = oCM_BD.AppGlobalOwner; }

            //    if (oCM_CI.ChurchBodyId == null || oCM_CI.ChurchBody == null)
            //    { oCM_CI.ChurchBodyId = oCM_BD.ChurchBodyId; oCM_CI.ChurchBody = oCM_BD.ChurchBody; }
            //} 

            // _oChanges.AppGlobalOwner = null; _oChanges.ChurchBody = null; 

            //if (_oChanges.AppGlobalOwnerId == null) _oChanges.AppGlobalOwnerId = this._oLoggedAGO.Id;
            //if (_oChanges.ChurchBodyId == null)  //  || oCM_BD.AppGlobalOwner == null || oCM_BD.ChurchBody == null
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            //var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.Id == _oChanges.ChurchBodyId).FirstOrDefault();
            //if (oCM_CB == null)  //  || oCM_BD.AppGlobalOwner == null || oCM_BD.ChurchBody == null
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            //if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
            //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });

            // more validations...

            if (string.IsNullOrEmpty(_oChanges.FirstName) || string.IsNullOrEmpty(_oChanges.FirstName))
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "First name and last name are required", signOutToLogIn = false });

            if (_oChanges.DateOfBirth == null)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Date of birth is required. Hint: Make some assumptions if necessary.", signOutToLogIn = false });

            if (_oChanges.DateOfBirth != null)
            { 
               if (_oChanges.DateOfBirth.Value > DateTime.Now)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Date of birth cannot be later than today", signOutToLogIn = false });
            }


            ////// member code... auto/sys
            //if (string.IsNullOrEmpty(_oChanges.GlobalMemberCode))  //if (_oChanges.MemberScope == "C")  ... thus only congregants to have global code
            //    _oChanges.GlobalMemberCode = GetGlobalMemberCodeByChurchCode_string(_oChanges.AppGlobalOwnerId, _oChanges.ChurchBodyId, oCM_BD.ChurchBody.GlobalChurchCode, false);

            //// custom member code... auto/man
            //if (string.IsNullOrEmpty(_oChanges.MemberCustomCode))
            //{
            //    var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t=>t.ChurchBody).ThenInclude(t => t.ChurchLevel)  //.Include(t => t.AppGlobalOwner) //.Include(t => t.OwnedByChurchBody)
            //                         .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.NVPCode == "MCCF").ToList();

            //    oNVP_List_1 = oNVP_List_1.Where(c =>
            //                       (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == _oChanges.ChurchBodyId ||
            //                       (c.OwnedByChurchBodyId != _oChanges.ChurchBodyId && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCM_BD.ChurchBody.ParentChurchBodyId) ||
            //                       (c.OwnedByChurchBodyId != _oChanges.ChurchBodyId && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCM_BD.ChurchBody)))).ToList();

            //    var oNVP_MCCF = oNVP_List_1
            //        .Where(c => c.ChurchBodyId== _oChanges.ChurchBodyId && c.NVPSubCode=="AUT_GN" && c.ChurchBody.ChurchLevel.LevelIndex == oNVP_List_1.Min(y => y.ChurchBody.ChurchLevel.LevelIndex)).FirstOrDefault();
            //    if (oNVP_MCCF != null)
            //    {
            //        var bl_AUT_GN = oNVP_MCCF.NVPValue == "Y";
            //        if (bl_AUT_GN)
            //        {
            //            var strPFX = ""; var strSFX = ""; var bl_LDZR = false;
            //            var oNVP_PFX = oNVP_List_1.Where(c => c.NVPSubCode == "PFX" && c.ChurchBody.ChurchLevel.LevelIndex == oNVP_List_1.Min(y => y.ChurchBody.ChurchLevel.LevelIndex)).FirstOrDefault();
            //            if (oNVP_PFX != null) strPFX = oNVP_PFX.NVPValue;
            //            var oNVP_SFX = oNVP_List_1.Where(c => c.NVPSubCode == "SFX" && c.ChurchBody.ChurchLevel.LevelIndex == oNVP_List_1.Min(y => y.ChurchBody.ChurchLevel.LevelIndex)).FirstOrDefault();
            //            if (oNVP_SFX != null) strSFX = oNVP_SFX.NVPValue;
            //            var oNVP_LDZR = oNVP_List_1.Where(c => c.NVPSubCode == "LDZR" && c.ChurchBody.ChurchLevel.LevelIndex == oNVP_List_1.Min(y => y.ChurchBody.ChurchLevel.LevelIndex)).FirstOrDefault();
            //            if (oNVP_LDZR != null) bl_LDZR = oNVP_LDZR.NVPValue == "Y";

            //            // generate...
            //            _oChanges.MemberCustomCode = GetCustomMemberCodeByPRFX_SFX_string(_oChanges.AppGlobalOwnerId, _oChanges.ChurchBodyId, strPFX, strSFX, bl_LDZR);
            //        }
            //    } 
            //}
            //else  
            //{   ////check that custom code is unique within congregation  ... new or upd
            //    var existMember = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.ChurchBodyId == _oChanges.ChurchBodyId && //... restrict within denomination as dbase is per denomination
            //                                               (_oChanges.Id == 0 || (_oChanges.Id > 0 && c.Id != _oChanges.Id)) && c.MemberCustomCode == _oChanges.MemberCustomCode).FirstOrDefault();
            //    if (existMember != null)
            //        return Json(new
            //        {
            //            taskSuccess = false,
            //            oCurrId = _oChanges.Id,
            //            userMess = "Custom member code '" + _oChanges.MemberCustomCode + "' must be unique within congregation. [Hint: Member with same code: " +
            //            GetConcatMemberName(existMember.Title, existMember.FirstName, existMember.MiddleName, existMember.LastName, false, false, false, false, false) + (existMember.ChurchBody != null ? " / " + existMember.ChurchBody.Name : "") + " ]",
            //            signOutToLogIn = false
            //        }); 
            //}

            /// more validations...
            if ( _oChanges.NationalityId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please specify nationality", taskIndex = vm.pageIndex });
 

            if (_oChanges.IdTypeId != null)
            {
                if (string.IsNullOrEmpty(_oChanges.National_IdNum))
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please specify Id number else change Id type", taskIndex = vm.pageIndex });                 
            }
            else
            {
                _oChanges.National_IdNum = null; 
            }

            if (_oChanges.MaritalStatus == "M")
            {
                if (string.IsNullOrEmpty(_oChanges.MarriageType))
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Please specify marriage type else change status", taskIndex = vm.pageIndex });
                
                //else if (_oChanges.MarriageType != "O")
                //    _oChanges.MarriageRegNo = null;
            }
            else
            {
                _oChanges.MarriageType = null;
                _oChanges.MarriageRegNo = null;
            }

           

            //_oChanges.Id == 0 member class, member type, member rank and member status --- all required!string.IsNullOrEmpty(_oChanges.MemberScope) || 
            if (isNewCM_Data && (string.IsNullOrEmpty(vm.strMemTypeCode) || vm.numMemRankId == null || vm.numMemStatusId == null))
            {
                string strStatErr = "";
                //if (string.IsNullOrEmpty(_oChanges.MemberScope)) strStatErr = "member class"; strMemTypeCode
                if (string.IsNullOrEmpty(vm.strMemTypeCode)) strStatErr = "member type, "; 
                if (vm.numMemRankId == null) strStatErr += "member rank, "; 
                if (vm.numMemStatusId == null) strStatErr += "member status, "; 
                if (strStatErr.Contains(",")) strStatErr = strStatErr.Remove(strStatErr.LastIndexOf(","));
                ///
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Statuses are flags that control the member state and behaviour. Please specify " + strStatErr, taskIndex = vm.pageIndex });
            }
             

            /// check MS if any [vm.numMemStatusId] ... past, dead must mave Member Account Status = Closed
            var oMS_Unavail = _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && // c.ChurchBodyId == _oChanges.ChurchBodyId && 
                                                        c.NVPCode == "CMS" && c.Id == vm.numMemStatusId).FirstOrDefault();
            if (oMS_Unavail == null) 
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Member status specified could not be verified. Please check with administrator and retry", taskIndex = vm.pageIndex });

            if (oMS_Unavail.IsAvailable == false)
            {
                if (vm.strMemTypeCode == "N")  // new convert
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Member status specified is unavailable. New Convert cannot have the status: '" + oMS_Unavail.NVPValue + "'" });

                else
                    _oChanges.Status = "X"; /// Closed... no more part of the church! though historic data may be avaialable
            }
             

            ///// check MS if any [vm.numMemStatusId] ... past, dead must mave Member Account Status = Closed
            //var oMS_Unavail = _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == oChanges_NC.AppGlobalOwnerId && c.ChurchBodyId == oChanges_NC.ChurchBodyId &&
            //                                            c.NVPCode == "CMS" && c.Id == vm.numMemStatusId).FirstOrDefault();
            //if (oMS_Unavail == null)
            //    return Json(new { taskSuccess = false, oCurrId = oChanges_NC.Id, userMess = "Member status specified could not be verified. Please check with administrator and retry" });

            ///// UPDATE @member profile...biodata
            //if (oMS_Unavail.IsAvailable == false) // oChanges_NC.Status = "X"; /// Closed
            //    return Json(new { taskSuccess = false, oCurrId = oChanges_NC.Id, userMess = "Member status specified is unavailable. New Convert cannot have the status: '" + oMS_Unavail.NVPValue + "'" });


            if (isNewCM_Data == true)
            {
                if (vm.strEnrollModeCode == null)
                    return Json(new { taskSuccess = false, oCurrId = -1, userMess = "Please how did person join the congregation? Indicate the enroll mode and try process again." });

                if (vm.dtEnrollDate == null)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Date of enrollment is not specified. Hint: Please make some assumptions if necessary.", signOutToLogIn = false });

                if (vm.dtEnrollDate != null)
                {
                    if (vm.dtEnrollDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Date of enrollment cannot be later than today", signOutToLogIn = false });

                    if (_oChanges.DateOfBirth != null)
                        if (vm.dtEnrollDate.Value < _oChanges.DateOfBirth)
                            return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Date of enrollment cannot be later than person birthday", signOutToLogIn = false });
                }
            }
           
             

            // contact info ...  direct config 
            if (isNewCM_Data == true &&  _oChangesCI != null )
            {
                if (_oChangesCI.AppGlobalOwnerId == null) _oChangesCI.AppGlobalOwnerId = _oChanges.AppGlobalOwnerId;
                if (_oChangesCI.ChurchBodyId == null) _oChangesCI.ChurchBodyId = _oChanges.ChurchBodyId;

                //Email... must be REQUIRED -- for password reset!
                if (!string.IsNullOrEmpty(_oChangesCI.Email))  
                {
                    //  ... check validity... REGEX 
                    if (!AppUtilties.IsValidEmail(_oChangesCI.Email)) 
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Member email invalid. Please check and try again.", signOutToLogIn = false });
                    
                    // use email to check for member duplication across denomination ... disallow impersonation within same CB... mem can be at diff levels or congregations but must NOT be Active [historic data]
                    var oCIEmailMem = _context.ChurchMember.AsNoTracking().Include(t => t.ChurchBody)
                        .Where(c => c.AppGlobalOwnerId== _oChangesCI.AppGlobalOwnerId && 
                                   (c.ChurchBodyId == _oChangesCI.ChurchBodyId || (c.ChurchBodyId != _oChangesCI.ChurchBodyId && c.Status == "A")) && // [ c.Status=="A" ] stat summary in sync with member_status [available - regular, invalid /not available - distant, virtual, past, passed]
                                   (_oChanges.Id == 0 || (_oChanges.Id > 0 && c.Id != _oChanges.Id)) && c.ContactInfo.Email == _oChangesCI.Email).FirstOrDefault();       
                    if (oCIEmailMem != null)  
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Email must be unique. Email already used by another: [ Member: " +
                            GetConcatMemberName(oCIEmailMem.Title, oCIEmailMem.FirstName, oCIEmailMem.MiddleName, oCIEmailMem.LastName, false, false, false, false, false) + (oCIEmailMem.ChurchBody != null ? " / " + oCIEmailMem.ChurchBody.Name : "") +  " ]", signOutToLogIn = false });
                     
                    var oCIEmailExist = _context.ContactInfo.AsNoTracking().Include(t => t.ChurchBody)   /// .Include(t => t.ChurchMemberId)
                                .Where(c => c.AppGlobalOwnerId == _oChangesCI.AppGlobalOwnerId && c.ChurchBodyId == _oChangesCI.ChurchBodyId &&
                                ((_oChanges.Id == 0 || _oChangesCI.Id == 0) || (_oChanges.Id > 0 && c.Id != _oChangesCI.Id)) && c.Email == _oChangesCI.Email).FirstOrDefault();

                    //if (oCIEmailExist != null)  
                    //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Email must be unique. Email already used by another: [Member: " +
                    //        oCIEmailExist.ContactInfoDesc + (oCIEmailExist.ChurchBody != null ? " / " + oCIEmailExist.ChurchBody.Name : " <elsewhere>") + " ]", signOutToLogIn = false });

                    if (oCIEmailExist != null)
                    {
                        var oCIEmailExist_Mem = _context.ChurchMember.AsNoTracking().Include(t => t.ChurchBody)
                        .Where(c => c.AppGlobalOwnerId == _oChangesCI.AppGlobalOwnerId && c.ChurchBodyId == oCIEmailExist.ChurchBodyId && c.Id == oCIEmailExist.ChurchMemberId).FirstOrDefault();
                        if (oCIEmailExist_Mem != null)
                            return Json(new
                            {
                                taskSuccess = false,
                                oCurrId = _oChanges.Id,
                                userMess = "Email must be unique. Email already used by another: [Member: " +
                                GetConcatMemberName(oCIEmailExist_Mem.Title, oCIEmailExist_Mem.FirstName, oCIEmailExist_Mem.MiddleName, oCIEmailExist_Mem.LastName, false, false, false, false, false) +
                                (oCIEmailExist.ChurchBody != null ? " / " + oCIEmailExist.ChurchBody.Name : " <elsewhere>") + " ]",
                                signOutToLogIn = false
                            });
                    }


                }

                if (!string.IsNullOrEmpty(_oChangesCI.Website))
                {
                    //  ... check validity... REGEX 
                    if (!AppUtilties.IsValidURL(_oChangesCI.Website))
                    {
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Url of member website (or blog) invalid. Please check and try again.", signOutToLogIn = false });
                    } 
                }

                if (_oChangesCI.ResAddrSameAsPostAddr) _oChangesCI.PostalAddress = _oChangesCI.ResidenceAddress;
            }
            else //if (_oChangesCI == null)  // check for other contact details available but not primary and link up... use the Member Id ref on Member CI table ... in all 3 instances
            {
                var oMemCI = _context.ContactInfo.AsNoTracking().Where(x => x.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && x.ChurchBodyId == _oChanges.ChurchBodyId &&
                                                                x.Id == _oChanges.PrimContactInfoId).FirstOrDefault();

                if (oMemCI == null)
                    oMemCI = _context.ContactInfo.AsNoTracking().Where(x => x.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && x.ChurchBodyId == _oChanges.ChurchBodyId &&
                                                                x.ChurchMemberId == _oChanges.Id && x.IsPrimaryContact == true).FirstOrDefault();

                if (oMemCI == null)
                    oMemCI = _context.ContactInfo.AsNoTracking().Where(x => x.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && x.ChurchBodyId == _oChanges.ChurchBodyId &&
                                                                x.ChurchMemberId == _oChanges.Id).FirstOrDefault();

                /// found? .. assign  ... pass thru the usual validations else via Member Profile Pane
                if (oMemCI != null) 
                    _oChangesCI = oMemCI;
            }


            /// VIP!!! CHECK member exist elsewhere in the system...
            /// -name [fn, mn, ln] + gender, idtype/num, dob  -::- any 1 || -[pho1 + pho2], email, dig addr, [loc + rgn + ctry] -::- any 2
            /// 

            ////check that custom code is unique within congregation  ... new or upd
            
            if (_oChanges.Id > 0)
            {
                var existMem = _context.ChurchMember.AsNoTracking().Where(c => c.Id != _oChanges.Id && c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && // c.ChurchBodyId == _oChanges.ChurchBodyId && //... restrict within denomination as dbase is per denomination
                                                c.GlobalMemberCode == _oChanges.GlobalMemberCode).FirstOrDefault();
                if (existMem != null)
                    return Json(new
                    {
                        taskSuccess = false, oCurrId = _oChanges.Id,
                        userMess = "Member code '" + _oChanges.MemberCustomCode + "' must be unique within the church (denomination). [Hint: Member with same code: " +
                        GetConcatMemberName(existMem.Title, existMem.FirstName, existMem.MiddleName, existMem.LastName, false, false, false, false, false) + (existMem.ChurchBody != null ? " / " + existMem.ChurchBody.Name : "") + " ]",
                        signOutToLogIn = false
                    });
            } 

            var strMemName = GetConcatMemberName(_oChanges.Title, _oChanges.FirstName, _oChanges.MiddleName, _oChanges.LastName, true, true, false, false, true);
            List<ChurchMember> oCMList_Dup = new List<ChurchMember>();


            if (_oChangesCI != null)
            {
                oCMList_Dup = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && // c.ChurchBodyId == _oChanges.ChurchBodyId &&
                           (_oChanges.Id == 0 || (_oChanges.Id > 0 && c.Id != _oChanges.Id)) &&
                           (c.FirstName + c.MiddleName + c.LastName).Contains(_oChanges.FirstName) && (c.FirstName + c.MiddleName + c.LastName).Contains(_oChanges.MiddleName) &&
                           (c.FirstName + c.MiddleName + c.LastName).Contains(_oChanges.LastName) && 
                           ((c.NationalityId == _oChanges.NationalityId && c.DateOfBirth == _oChanges.DateOfBirth && 
                            (
                                c.ContactInfo.MobilePhone1 == _oChangesCI.MobilePhone1 || c.ContactInfo.MobilePhone1 == _oChangesCI.MobilePhone2 ||
                                c.ContactInfo.MobilePhone2 == _oChangesCI.MobilePhone1 || c.ContactInfo.MobilePhone2 == _oChangesCI.MobilePhone2 ||
                                c.ContactInfo.ResidenceAddress == _oChangesCI.ResidenceAddress || c.ContactInfo.Location == _oChangesCI.Location)) ||
                                c.ContactInfo.Email == _oChangesCI.Email
                             )).ToList();
            }
            else
            {
                oCMList_Dup = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.ChurchBodyId == _oChanges.ChurchBodyId &&
                           (_oChanges.Id == 0 || (_oChanges.Id > 0 && c.Id != _oChanges.Id)) &&
                           (c.FirstName + c.MiddleName + c.LastName).Contains(_oChanges.FirstName) && (c.FirstName + c.MiddleName + c.LastName).Contains(_oChanges.MiddleName) &&
                           (c.FirstName + c.MiddleName + c.LastName).Contains(_oChanges.LastName) && c.NationalityId == _oChanges.NationalityId  && c.DateOfBirth == _oChanges.DateOfBirth 
                           ).ToList();
            }


            if (oCMList_Dup.Count > 0)
                return Json(new { taskSuccess = false, oCurrId = oCMList_Dup[0].Id, userMess = "Person, " + strMemName + 
                    " is already added in the member pool [as Guest/Affiliate, New Convert, In-Transit or Member]. Hint: Search for the member profile and do the necessary changes else contact admin." });



            /// 
            // use email to check for member duplication across denomination ... disallow impersonation within same CB... mem can be at diff levels or congregations but must NOT be Active [historic data]
            //var oCIEmailMem = _context.ChurchMember.AsNoTracking().Include(t => t.ChurchBody)
            //    .Where(c => c.AppGlobalOwnerId == _oChangesMFR.AppGlobalOwnerId &&
            //               (c.ChurchBodyId == _oChangesMFR.ChurchBodyId || (c.ChurchBodyId != _oChangesMFR.ChurchBodyId && c.Status == "A")) && // [ c.Status=="A" ] stat summary in sync with member_status [available - regular, invalid /not available - distant, virtual, past, passed]
            //               (_oChangesMFR.Id == 0 || (_oChangesMFR.Id > 0 && c.Id != _oChangesMFR.Id)) && c.ContactInfo.Email == _oChangesMFR.EmailExtCon).FirstOrDefault();

            //if (oCIEmailMem != null)
            //    return Json(new
            //    {
            //        taskSuccess = false,
            //        oCurrId = _oChangesMFR.Id,
            //        userMess = "Email must be unique. Email already used by another: [ Member: " +
            //        GetConcatMemberName(oCIEmailMem.Title, oCIEmailMem.FirstName, oCIEmailMem.MiddleName, oCIEmailMem.LastName, false, false, false, false, false) + (oCIEmailMem.ChurchBody != null ? " / " + oCIEmailMem.ChurchBody.Name : "") + " ]",
            //        signOutToLogIn = false
            //    });

            //var oCIEmailExist = _context.ContactInfo.AsNoTracking().Include(t => t.ChurchBody)
            //            .Where(c => c.AppGlobalOwnerId == _oChangesMFR.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMFR.ChurchBodyId &&
            //            ((_oChangesMFR.Id == 0 || _oChangesMFR.Id == 0) || (_oChangesMFR.Id > 0 && c.Id != _oChangesMFR.Id)) && c.Email == _oChangesMFR.EmailExtCon).FirstOrDefault();
            //if (oCIEmailExist != null)
            //    return Json(new
            //    {
            //        taskSuccess = false,
            //        oCurrId = _oChangesMFR.Id,
            //        userMess = "Email must be unique. Email already used by another: [Member: " +
            //        _oChangesMFR.ContactInfoDesc + (oCIEmailMem.ChurchBody != null ? " / " + oCIEmailExist.ChurchBody.Name : " <elsewhere>") + " ]",
            //        signOutToLogIn = false
            //    });


            try
            {
                ModelState.Remove("oChurchMember.AppGlobalOwnerId");
                ModelState.Remove("oChurchMember.ChurchBodyId");
                ModelState.Remove("oChurchMember.PrimContactInfoId");
                ModelState.Remove("oChurchMember.NationalityId");
                ModelState.Remove("oChurchMember.HometownRegionId");
                ModelState.Remove("oChurchMember.IDTypeId");
                ModelState.Remove("oChurchMember.MotherTongueId");

                ModelState.Remove("oChurchMember.MotherTongueId");
                ModelState.Remove("oChurchMember.MotherTongueId");

                ModelState.Remove("oChurchMember.CreatedByUserId");
                ModelState.Remove("oChurchMember.LastModByUserId");
                ///
                ///
                ModelState.Remove("oMemContactInfo.AppGlobalOwnerId");
                ModelState.Remove("oMemContactInfo.ChurchBodyId");
                ModelState.Remove("oMemContactInfo.ChurchMemberId");
                ModelState.Remove("oMemContactInfo.CtryAlpha3Code");
                ModelState.Remove("oMemContactInfo.RegionId");

                ModelState.Remove("oMemContactInfo.CreatedByUserIdCI");
                ModelState.Remove("oMemContactInfo.LastModByUserId");

                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });


                // let's save now...

                _oChanges.LastMod = DateTime.Now;
                _oChanges.LastModByUserId = this._oLoggedUser.Id;  /// vmMod.oUserId_Logged;
                                                                   ///
                string uniqueFileName = null;
                var oFormFile = vm.UserPhotoFile;
                if (oFormFile != null && oFormFile.Length > 0)
                {
                    string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");  //~/frontend/dist/img_db
                    uniqueFileName = Guid.NewGuid().ToString() + "_" + oFormFile.FileName;
                    string filePath = Path.Combine(uploadFolder, uniqueFileName);
                    oFormFile.CopyTo(new FileStream(filePath, FileMode.Create));
                }

                else
                { if (_oChanges.Id != 0) uniqueFileName = _oChanges.PhotoUrl; }

                _oChanges.PhotoUrl = uniqueFileName;


                // SAVING....
                var tm = DateTime.Now;
                _oChanges.LastMod = tm;
                _oChanges.LastModByUserId = this._oLoggedUser.Id;  ///vmMod.oUserId_Logged;


                _oChanges.MemberScope = (vm.strMemTypeCode == "C" || vm.strMemTypeCode == "L" || vm.strMemTypeCode == "P" || vm.strMemTypeCode == "M") ? "I" :
                                        (vm.strMemTypeCode == "G" || vm.strMemTypeCode == "A" || vm.strMemTypeCode == "N") ? "E" : null;   // || vm.strMemType == "T"

                //validate...
                var _strMemFullName = GetConcatMemberName(_oChanges.Title, _oChanges.FirstName, _oChanges.MiddleName, _oChanges.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving " + strDescHdr.ToLower() + ", " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";



                ///// check exist...duplicates
                ///// /// VIP!!! CHECK member exist elsewhere in the system...
                ///// -name [fn, mn, ln] + gender, idtype/num, dob  -::- any 1 || -[pho1 + pho2], email, dig addr, [loc + rgn + ctry] -::- any 2
                ///// 
                ///// CheckMemberGlobalUniqueIdentity   --- fxn to return true or false [ some measure of accuracy ]
                //var oMLSList_Dup = oMLSList.Where(c => c.LanguageSpokenId == _oChanges.LanguageSpokenId).ToList();

                //if (_oChanges.Id > 0)
                //    oMLSList_Dup = oMLSList_Dup.Where(c => c.Id != _oChanges.Id).ToList();
                /////
                //var oMBD = oMLSList_Dup.FirstOrDefault();


                //if (oMBD != null)
                //{
                //    var strCM_CB = oCM_CB.Name +  (oCM_CB.ParentChurchBody != null ? " (" + oCM_CB.ParentChurchBody.Name + ")" : "");
                //        ///
                //    return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Specified member" + (_strMemFullName + " of congregation: " + strCM_CB) + 
                //        "already exists [active or otherwise] in the church). Hint: Transfer may be required to move member to the respective congregation to avoid duplication of member data.", signOutToLogIn = false });
                //}



                // tracker .. error!

                if (_oChanges.AppGlobalOwner != null) _oChanges.AppGlobalOwner = null; if (_oChanges.AppGlobalOwner != null) _oChanges.ChurchBody = null; 
                var _reset = _oChanges.Id == 0;
                
                if (_oChanges.Id == 0)
                {
                    _oChanges.Created = tm;
                    _oChanges.CreatedByUserId = this._oLoggedUser.Id;  ///vmMod.oUserId_Logged;

                    _context.ChurchMember.Add(_oChanges);

                    _userTask = "Added new " + strDescHdr.ToLower() + ", " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " -biodata successfully.";
                    ViewBag.UserMsg = "Saved " + strDescHdr.ToLower() + ", " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                    
                    ViewBag.MemMsg = "Congratulations! You have been successfully added to the congregation " + (!string.IsNullOrEmpty(_strMemFullName) ? ", " + oCM_CB.Name : "") + " as " + strDescHdr + ". The LORD bless you"; // "[" + _strMemFullName + "]" : "") + " successfully.";

                    if (vm.strMemTypeCode == "N")
                        ViewBag.UserMsg += " Other Member Register modules have been configured alogside. Note: Final approval may be required after the attached activity process is complete.";

                }
                else
                {
                    //if (_oChanges.MemberScope == "C")  //Congregant... ChurcCodes required
                    //{
                    //    // if (string.IsNullOrEmpty(oCM.MemberCode)) return Json(new { taskSuccess = false, oCurrId = oCM.Id, userMess = "Unique Member code within church member is required." });
                    //    if (string.IsNullOrEmpty(_oChanges.GlobalMemberCode)) 
                    //        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Unique Global member code [within denomination] is required." });
                    //}

                    _context.ChurchMember.Update(_oChanges);

                    _userTask = "Updated " + strDescHdr.ToLower() + ", " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " -biodata successfully.";
                    ViewBag.UserMsg = strDescHdr + ", " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";


                }


                //save church member first...   SendCustomNotification
                _context.SaveChanges();



                // get the unique id from db and attach to the CB code for unique --- Global code for member
                //// member code... auto/sys
                var updChangesMade = false;
                if (isNewCM_Data || string.IsNullOrEmpty(_oChanges.GlobalMemberCode))  //if (_oChanges.MemberScope == "C")  ... thus only congregants to have global code
                {
                    _oChanges.GlobalMemberCode = GetGlobalMemberCodeByChurchCode_string(_oChanges.AppGlobalOwnerId, _oChanges.ChurchBodyId, oCM_CB.GlobalChurchCode, false, _oChanges.Id);  // oCM_BD.ChurchBody.GlobalChurchCode + "/" + _oChanges.Id; // 

                    if (string.IsNullOrEmpty(_oChanges.GlobalMemberCode))
                        return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Member code generation unsuccessful. Member code is required. Please refresh data and try aagain.", taskIndex = vm.pageIndex });

                    _context.ChurchMember.Update(_oChanges);
                    updChangesMade = true;
                }

                // custom member code... auto/man
                if (string.IsNullOrEmpty(_oChanges.MemberCustomCode))
                {
                    var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)  //.Include(t => t.AppGlobalOwner) //.Include(t => t.OwnedByChurchBody)
                                         .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.NVPCode == "MCCF").ToList();

                    oNVP_List_1 = oNVP_List_1.Where(c =>
                                       (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == _oChanges.ChurchBodyId ||
                                       (c.OwnedByChurchBodyId != _oChanges.ChurchBodyId && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCM_CB.ParentChurchBodyId) ||
                                       (c.OwnedByChurchBodyId != _oChanges.ChurchBodyId && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCM_CB)))).ToList();

                    var oNVP_MCCF = oNVP_List_1
                        .Where(c => c.ChurchBodyId == _oChanges.ChurchBodyId && c.NVPSubCode == "AUT_GN" && c.ChurchBody.ChurchLevel.LevelIndex == oNVP_List_1.Min(y => y.ChurchBody.ChurchLevel.LevelIndex)).FirstOrDefault();
                    if (oNVP_MCCF != null)
                    {
                        var bl_AUT_GN = oNVP_MCCF.NVPValue == "Y";
                        if (bl_AUT_GN)
                        {
                            var strPFX = ""; var strSFX = ""; var bl_LDZR = false;
                            var oNVP_PFX = oNVP_List_1.Where(c => c.NVPSubCode == "PFX" && c.ChurchBody.ChurchLevel.LevelIndex == oNVP_List_1.Min(y => y.ChurchBody.ChurchLevel.LevelIndex)).FirstOrDefault();
                            if (oNVP_PFX != null) strPFX = oNVP_PFX.NVPValue;
                            var oNVP_SFX = oNVP_List_1.Where(c => c.NVPSubCode == "SFX" && c.ChurchBody.ChurchLevel.LevelIndex == oNVP_List_1.Min(y => y.ChurchBody.ChurchLevel.LevelIndex)).FirstOrDefault();
                            if (oNVP_SFX != null) strSFX = oNVP_SFX.NVPValue;
                            var oNVP_LDZR = oNVP_List_1.Where(c => c.NVPSubCode == "LDZR" && c.ChurchBody.ChurchLevel.LevelIndex == oNVP_List_1.Min(y => y.ChurchBody.ChurchLevel.LevelIndex)).FirstOrDefault();
                            if (oNVP_LDZR != null) bl_LDZR = oNVP_LDZR.NVPValue == "Y";

                            // generate...
                            _oChanges.MemberCustomCode = GetCustomMemberCodeByPRFX_SFX_string(_oChanges.AppGlobalOwnerId, _oChanges.ChurchBodyId, strPFX, strSFX, bl_LDZR, _oChanges.Id);

                            _context.ChurchMember.Update(_oChanges);
                            updChangesMade = true;

                        }
                    }
                }
                else
                {   ////check that custom code is unique within congregation  ... new or upd
                    var existMember = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.ChurchBodyId == _oChanges.ChurchBodyId && //... restrict within denomination as dbase is per denomination
                                                               (_oChanges.Id == 0 || (_oChanges.Id > 0 && c.Id != _oChanges.Id)) && c.MemberCustomCode == _oChanges.MemberCustomCode).FirstOrDefault();
                    if (existMember != null)
                        return Json(new
                        {
                            taskSuccess = false,
                            oCurrId = _oChanges.Id,
                            userMess = "Custom member code '" + _oChanges.MemberCustomCode + "' must be unique within congregation. [Hint: Member with same code: " +
                            GetConcatMemberName(existMember.Title, existMember.FirstName, existMember.MiddleName, existMember.LastName, false, false, false, false, false) + (existMember.ChurchBody != null ? " / " + existMember.ChurchBody.Name : "") + " ]",
                            signOutToLogIn = false
                        });
                }




                // save... CI
                // tracker .. error!
                 
                    if (_oChangesCI != null)
                    {
                        
                        if (_oChangesCI.AppGlobalOwner != null) _oChangesCI.AppGlobalOwner = null; if (_oChangesCI.AppGlobalOwner != null) _oChangesCI.ChurchBody = null;

                        _oChangesCI.IsChurchFellow = true;
                        _oChangesCI.IsPrimaryContact = true;
                        _oChangesCI.ChurchMemberId = _oChanges.Id;
                        _oChangesCI.LastMod = tm;
                        _oChangesCI.LastModByUserId = this._oLoggedUser.Id;  ///vmMod.oUserId_Logged; 

                        if (_oChangesCI.Id == 0)
                        {
                            _oChangesCI.Created = tm;
                            _oChangesCI.CreatedByUserId = this._oLoggedUser.Id;  ///vmMod.oUserId_Logged;

                            _context.ContactInfo.Add(_oChangesCI);

                            _userTask += Environment.NewLine + " Updated " + strDescHdr.ToLower() + ", " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " -contact info successfully";
                            // ViewBag.UserMsg = "Updated church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                        }
                        else
                        {
                            _context.ContactInfo.Update(_oChangesCI);

                            _userTask += Environment.NewLine + " Updated " + strDescHdr.ToLower() + ", " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " -contact info successfully";
                            // ViewBag.UserMsg = "Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                        }

                        //save CI to get Id... 
                        _context.SaveChanges();
                        updChangesMade = false;

                        // ci id may change...
                        if (_oChanges.PrimContactInfoId != _oChangesCI.Id)
                        {
                            _oChanges.PrimContactInfoId = _oChangesCI.Id;
                            _context.ChurchMember.Update(_oChanges);
                            updChangesMade = true;
                        }
                    }


                if (isNewCM_Data)
                {
                    /// church life
                    var oMCL_BD = _context.MemberChurchlife.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.ChurchBodyId == _oChanges.ChurchBodyId && c.ChurchMemberId == _oChanges.Id).FirstOrDefault();
                    if (oMCL_BD == null)
                    {
                        oMCL_BD = new MemberChurchlife()
                        {
                            AppGlobalOwnerId = _oChanges.AppGlobalOwnerId,
                            ChurchBodyId = _oChanges.ChurchBodyId,
                            ChurchMemberId = (int)_oChanges.Id,
                            IsCurrentMember = true,
                            EnrollMode = vm.strEnrollModeCode,  /// walk-in  ... can confirm later                         
                            EnrollReason = vm.strEnrollReason,
                            DateJoined = vm.dtEnrollDate,
                            SharingStatus = "A"
                        };

                        _context.MemberChurchlife.Add(oMCL_BD);
                        updChangesMade = true;
                    }

                    ///
                    if (updChangesMade)
                    {
                        _context.SaveChanges();
                        updChangesMade = false;
                    }
                



                if (vm.strMemTypeCode == "N")
                {
                    /// MCET
                    //// church activity added!  ... auto create all the MCET for this activity and assign Pending status... [ P-I-W-C ] allow tasks to be waived anyways!
                    ///
                    List<MemberChurchlifeActivity> oMCLAcList = new List<MemberChurchlifeActivity>();
                    List<MemberChurchlifeEventTask> oMCETList = new List<MemberChurchlifeEventTask>();

                    var oCLAList = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                                        .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId &&
                                                        c.NVPCode == "CLA" && c.ApplyToMemberStatus == "N").ToList();       /// attached to New Convert module

                    oCLAList = oCLAList.Where(c =>
                                        (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))
                                       )
                                        .OrderBy(c => c.OrderIndex)
                                        .ToList();


                    foreach (var oCLAc in oCLAList)
                    {

                        var oNC_MCLAc = new MemberChurchlifeActivity()
                        {
                            AppGlobalOwnerId = _oChanges.AppGlobalOwnerId,
                            ChurchBodyId = _oChanges.ChurchBodyId,
                            ChurchMemberId = _oChanges.Id,
                            ChurchlifeActivityId = oCLAc.Id,
                            IsChurchEvent = false,
                            SharingStatus = "A",
                            EventDate = tm,
                            Created = tm,
                            LastMod = tm,
                            CreatedByUserId = this._oLoggedUser.Id,
                            LastModByUserId = this._oLoggedUser.Id
                        };


                        _context.MemberChurchlifeActivity.Add(oNC_MCLAc);

                        // save to get oCAA_CLAc Id ... for the CETs
                        _context.SaveChanges();

                        oMCLAcList.Add(oNC_MCLAc);  // keep list... for upd

                        /// the definition list to be picked from...  strNVPCode = "CLA";    // c.Id != oCurrNVP.Id  
                        var oCLARDList = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                                           .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId &&
                                                           c.NVPCode == "CLARD" && c.NVPCategoryId == oNC_MCLAc.ChurchlifeActivityId).ToList();   /// ex. New Convert Class

                        oCLARDList = oCLARDList.Where(c =>
                                            (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                           (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                           (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))
                                           )
                                            .OrderBy(c => c.OrderIndex)
                                            .ToList();


                        //create approval action... at least  one approval level
                        if (oCLARDList.Count > 0)
                        {
                            //create oMCET steps
                            var stepIndexLowest = oCLARDList[0].OrderIndex;
                            foreach (AppUtilityNVP oCLARD_NVP in oCLARDList)
                            {
                                var oMCETList_Dup = _context.MemberChurchlifeEventTask.AsNoTracking()
                                                        .Include(t => t.ActivityRequirementDef)
                                                        .Include(t => t.MemberChurchlifeActivity).ThenInclude(t => t.ChurchlifeActivity)
                                                        .Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                                                    .Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.ChurchBodyId == _oChanges.ChurchBodyId && c.ChurchMemberId == _oChanges.Id &&
                                                                c.RequirementDefId == oCLARD_NVP.Id && c.MemberChurchlifeActivityId == oNC_MCLAc.Id).ToList();

                                if (oMCETList_Dup.Count == 0)
                                {
                                    stepIndexLowest = oCLARD_NVP.OrderIndex < stepIndexLowest ? oCLARD_NVP.OrderIndex : stepIndexLowest;
                                    ///
                                    oMCETList.Add(

                                        new MemberChurchlifeEventTask()
                                        {
                                            AppGlobalOwnerId = _oChanges.AppGlobalOwnerId,
                                            ChurchBodyId = _oChanges.ChurchBodyId,
                                            ChurchMemberId = _oChanges.Id,
                                            MemberChurchlifeActivityId = oNC_MCLAc.Id,
                                            TaskStatus = "P",   // Pending
                                            SharingStatus = "A",
                                            DateCommenced = tm,
                                            // DateCompleted = DateTime.Now
                                            RequirementDefId = oCLARD_NVP.Id,
                                            OrderIndex = oCLARD_NVP.OrderIndex,
                                            Created = tm,
                                            LastMod = tm,
                                            CreatedByUserId = this._oLoggedUser.Id,
                                            LastModByUserId = this._oLoggedUser.Id
                                        });
                                }
                            }

                            var currList = oMCETList.Where(c => c.MemberChurchlifeActivityId == oNC_MCLAc.Id).ToList();
                            foreach (MemberChurchlifeEventTask oMCET in currList)
                            {
                                oMCET.IsCurrentTask = oMCET.OrderIndex <= stepIndexLowest;  //concurrent will be handled  
                                if (oMCET.MemberChurchlifeActivity != null) oMCET.MemberChurchlifeActivity = null;
                                ///
                                _context.Add(oMCET);
                            }
                        }
                    }

                    // save the batch of MCET
                    if (oMCLAcList.Count > 0 || oMCETList.Count > 0)
                    {
                        _context.SaveChanges();
                        updChangesMade = false;
                    }
                }
            }


                if (isNewCM_Data)
                {
                    /// MCM..MT
                    /// 

                    var oMCM_MT_BD = _context.MemberType.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.ChurchBodyId == _oChanges.ChurchBodyId && c.ChurchMemberId == _oChanges.Id).FirstOrDefault();
                    if (oMCM_MT_BD == null && !string.IsNullOrEmpty(vm.strMemTypeCode))
                    {
                        //GET THE LOWEST TYPE...
                        oMCM_MT_BD = new MemberType()
                        {
                            AppGlobalOwnerId = _oChanges.AppGlobalOwnerId,
                            ChurchBodyId = _oChanges.ChurchBodyId,
                            ChurchMemberId = (int)_oChanges.Id,
                            MemberTypeCode = vm.strMemTypeCode,
                            IsCurrent = true,
                            SharingStatus = "A",
                            FromDate = tm, ///DateTime.Now,
                            // ToDate = DateTime.Now
                            Created = tm,
                            CreatedByUserId = this._oLoggedUser.Id,
                            LastMod = tm,
                            LastModByUserId = this._oLoggedUser.Id,
                        };

                        _context.MemberType.Add(oMCM_MT_BD);
                        updChangesMade = true;
                    }


                    /// MCM..MR
                    /// 
                    var oMCM_MR_BD = _context.MemberRank.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.ChurchBodyId == _oChanges.ChurchBodyId && c.ChurchMemberId == _oChanges.Id).FirstOrDefault();
                    if (oMCM_MR_BD == null && vm.numMemRankId != null)
                    {
                        //GET THE LOWEST RANK...
                        oMCM_MR_BD = new MemberRank()
                        {
                            AppGlobalOwnerId = _oChanges.AppGlobalOwnerId,
                            ChurchBodyId = _oChanges.ChurchBodyId,
                            ChurchMemberId = (int)_oChanges.Id,
                            ChurchRankId = vm.numMemRankId,
                            IsCurrentRank = true,
                            SharingStatus = "A",
                            FromDate = tm, ///DateTime.Now,
                            // ToDate = DateTime.Now
                            Created = tm,
                            CreatedByUserId = this._oLoggedUser.Id,
                            LastMod = tm,
                            LastModByUserId = this._oLoggedUser.Id,
                        };

                        _context.MemberRank.Add(oMCM_MR_BD);
                        updChangesMade = true;
                    }


                    /// MCM..MS
                    /// 
                    var oMCM_MS_BD = _context.MemberStatus.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && c.ChurchBodyId == _oChanges.ChurchBodyId && c.ChurchMemberId == _oChanges.Id).FirstOrDefault();
                    if (oMCM_MS_BD == null && vm.numMemStatusId != null)
                    {
                        oMCM_MS_BD = new MemberStatus()
                        {
                            //GET THE MOST APPLICABLE STATUS...
                            AppGlobalOwnerId = _oChanges.AppGlobalOwnerId,
                            ChurchBodyId = _oChanges.ChurchBodyId,
                            ChurchMemberId = (int)_oChanges.Id,
                            ChurchMemStatusId = vm.numMemStatusId,  /// if MS -- unavailable [deceased, past member---left, not moved to other CB]  ... Member Account Status => Closed
                            IsCurrent = true,
                            SharingStatus = "A",
                            FromDate = tm, ///DateTime.Now,
                            // ToDate = DateTime.Now
                            Created = tm,
                            CreatedByUserId = this._oLoggedUser.Id,
                            LastMod = tm,
                            LastModByUserId = this._oLoggedUser.Id,
                        };

                        _context.MemberStatus.Add(oMCM_MS_BD);
                        updChangesMade = true;
                    }

                }




                //save... all
                if (updChangesMade)
                    _context.SaveChanges(); 



                //audit...
                var _tm = DateTime.Now;


                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));


                //_userTask = "Opened " + strDesc.ToLower() + " member biodata";
                //if (oMBModel.oChurchMember.Id > 0) _userTask += "[" + _strMemFullName + " | Member code: " + oMBModel.oChurchMember.GlobalMemberCode + "]";

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDescHdr, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDescHdr, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );


                //var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);   
                //TempData["oVmCurr"] = _vmMod; TempData.Keep();

                // var strMemName = GetConcatMemberName(_oChanges.Title, _oChanges.FirstName, _oChanges.MiddleName, _oChanges.LastName, false, false, false, false, false);
                // var strMemName = GetConcatMemberName(_oChanges.Title, _oChanges.FirstName, _oChanges.MiddleName, _oChanges.LastName, true, true, false, false, true);


                /// update the member roll summary table... when new m added or triggered by user or at refresh 
                /// add new, upd [stat, dob, gen, group ... upd roll] and delete /transfer
                // if (_reset) {   ///" + strDescHdr.ToLower() + "

                var resRollUpd = UpdCBMemRoll(_oChanges.AppGlobalOwnerId, _oChanges.ChurchBodyId, this._oLoggedUser.Id);
                    if (resRollUpd < 0) ViewBag.UserMsg += ". Member roll summary update failed. Try update again later.";
                    else if (resRollUpd == 0) ViewBag.UserMsg += ". Member roll summary update incomplete. Try update again later.";

                // }

                /// send notification...
                /// ONLY... new members/NCs, moving NC to Member
                /// ...
                if (_reset)
                {

                    var lsCMs = new List<ChurchMember>(); lsCMs.Add(_oChanges);
                    var lsCBs = new List<ChurchBody>(); lsCBs.Add(oCM_CB);
                    var lsMess = new List<string>(); lsMess.Add(ViewBag.MemMsg);

                    SendCustomNotification("Church Membership", lsCBs, lsCMs, lsMess, false, false, true);
                }

                // return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = ViewBag.UserMsg, signOutToLogIn = false });
                return Json(new { taskSuccess = true, currId = _oChanges.Id, resetNew = _reset, memDispName = strMemName, currCBId = _oChanges.ChurchBodyId, currMT = vm.strMemTypeCode, userMess = ViewBag.UserMsg, signOutToLogIn = false });
            
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChanges.Id, userMess = "Failed saving " + strDescHdr.ToLower() + " details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddOrEdit_AttendeesNC(MemberBioModel vm)  //ChurchAttendanceModel int? oCBid, int? oAttendid)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var oAppGloOwnId = this._oLoggedAGO.Id;
            var oCBid = vm.oChurchBodyId;
            //var oChanges_NC = vm.oChurchAttendee;
            //var oAttendid = oChanges_NC != null ? oChanges_NC.Id : (int?)null;

            ChurchMember oChanges_NC = vm.oChurchMember;
            ContactInfo _oChangesCI = vm.oMemContactInfo;

            if (oCBid == null)
                return Json(new { taskSuccess = false, oCurrId = oCBid, userMess = "Specified congregation of new convert could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.Id == oCBid).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = oCBid, userMess = "Specified congregation of new convert could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = oCBid, userMess = "Church code for target congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            ///
            //ChurchAttendAttendee oChanges_NC = _context.ChurchAttendAttendee.AsNoTracking().Include(t => t.ChurchBody)
            //    .Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oCBid && c.Id == oAttendid).FirstOrDefault();

            if (oChanges_NC == null)
                return Json(new { taskSuccess = false, oCurrId = -1, userMess = "New Convert details not found. Please refresh and trya again." });

            if (string.IsNullOrEmpty(oChanges_NC.FirstName) || string.IsNullOrEmpty(oChanges_NC.FirstName))
                return Json(new { taskSuccess = false, oCurrId = oChanges_NC.Id, userMess = "First name and last name are required", signOutToLogIn = false });

            if (oChanges_NC.DateOfBirth == null)
                return Json(new { taskSuccess = false, oCurrId = oChanges_NC.Id, userMess = "New Convert's date of birth is not indicated. Please add date of birth [save] and try process again. Hint: Make some assumptions if necessary.", signOutToLogIn = false });

            if (oChanges_NC.DateOfBirth != null)
            {
                if (oChanges_NC.DateOfBirth != null)
                    if (oChanges_NC.DateOfBirth.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = oChanges_NC.Id, userMess = "Date of birth cannot be later than today", signOutToLogIn = false });
            }

            if (oChanges_NC.MaritalStatus == null)
                return Json(new { taskSuccess = false, oCurrId = -1, userMess = "New Convert's marital status is not indicated. Please add marital status [save] and try process again." });

            if (oChanges_NC.NationalityId == null)
                return Json(new { taskSuccess = false, oCurrId = -1, userMess = "New Convert's nationality is not indicated. Please add nationality [save] and try process again." });

            if (vm.strEnrollModeCode == null)
                return Json(new { taskSuccess = false, oCurrId = -1, userMess = "How did New Convert join the congregation? Please inidicate the enroll mode [save] and try process again." });

            // member class, member type, member rank and member status --- all required!string.IsNullOrEmpty(_oChanges.MemberScope) || 
            if (vm.numMemRankId == null || vm.numMemStatusId == null)
            {
                string strStatErr = "";
                if (vm.numMemRankId == null) strStatErr += "member rank, ";
                if (vm.numMemStatusId == null) strStatErr += "member status, ";
                if (strStatErr.Contains(",")) strStatErr = strStatErr.Remove(strStatErr.LastIndexOf(","));
                ///
                return Json(new { taskSuccess = false, oCurrId = oChanges_NC.Id, userMess = "Statuses are flags that control the member state and behaviour. Please specify " + strStatErr });
            }


            /// check MS if any [vm.numMemStatusId] ... past, dead must mave Member Account Status = Closed
            var oMS_Unavail = _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == oChanges_NC.AppGlobalOwnerId && c.ChurchBodyId == oChanges_NC.ChurchBodyId &&
                                                        c.NVPCode == "CMS" && c.Id == vm.numMemStatusId).FirstOrDefault();
            if (oMS_Unavail == null)
                return Json(new { taskSuccess = false, oCurrId = oChanges_NC.Id, userMess = "Member status specified could not be verified. Please check with administrator and retry" });

            /// UPDATE @member profile...biodata
            if (oMS_Unavail.IsAvailable == false) // oChanges_NC.Status = "X"; /// Closed
                return Json(new { taskSuccess = false, oCurrId = oChanges_NC.Id, userMess = "Member status specified is unavailable. New Convert cannot have the status: '" + oMS_Unavail.NVPValue + "'" });


            var strMemName = GetConcatMemberName(oChanges_NC.Title, oChanges_NC.FirstName, oChanges_NC.MiddleName, oChanges_NC.LastName, true, true, false, false, true);

            var oNC_CMList_Dup = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == oChanges_NC.AppGlobalOwnerId && c.ChurchBodyId == oChanges_NC.ChurchBodyId &&
                                       // c.ChurchEventId == oChanges_NC.ChurchEventId && c.DateAttended == oChanges_NC.DateAttended &&
                                       (c.FirstName + c.MiddleName + c.LastName).Contains(oChanges_NC.FirstName) && (c.FirstName + c.MiddleName + c.LastName).Contains(oChanges_NC.MiddleName) &&
                                       (c.FirstName + c.MiddleName + c.LastName).Contains(oChanges_NC.LastName) &&
                                       ((c.NationalityId == oChanges_NC.NationalityId && c.DateOfBirth == oChanges_NC.DateOfBirth &&
                                        (
                                         c.ContactInfo.MobilePhone1 == _oChangesCI.MobilePhone1 || c.ContactInfo.MobilePhone1 == _oChangesCI.MobilePhone2 ||
                                         c.ContactInfo.MobilePhone2 == _oChangesCI.MobilePhone1 || c.ContactInfo.MobilePhone2 == _oChangesCI.MobilePhone2 ||
                                         c.ContactInfo.ResidenceAddress == _oChangesCI.ResidenceAddress || c.ContactInfo.Location == _oChangesCI.Location)) ||
                                         c.ContactInfo.Email == _oChangesCI.Email)
                                       ).ToList();

            if (oNC_CMList_Dup.Count > 0)
                return Json(new { taskSuccess = false, oCurrId = oNC_CMList_Dup[0].Id, userMess = "Person, " + strMemName + " is already added in the member pool [as Guest/Affiliate, New Convert, In-Transit or Member]. Hint: Search for the member profile and do the necessary changes else contact admin." });


            try
            {
                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = oChanges_NC.Id, userMess = "Failed to load the data to save. Please refresh and try again." });

                var oCTRYDef = _context.CountryCustom.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oCBid && c.IsDefaultCountry == true).FirstOrDefault();
                //oChurchMember.NationalityId = oCTRYDef != null ? oCTRYDef.CtryAlpha3Code : null;



                /// var _userTask = "";
                var tm = DateTime.Now;

                /// create the member bio -- assign member type - New Convert
                /// 
                var oNC_CM = new ChurchMember()
                {

                    AppGlobalOwnerId = oAppGloOwnId,
                    ChurchBodyId = oCBid,
                    FirstName = oChanges_NC.FirstName,
                    MiddleName = oChanges_NC.MiddleName,
                    LastName = oChanges_NC.LastName,
                    NationalityId = oChanges_NC.NationalityId,
                    /// GlobalMemberCode =  ???
                    Title = oChanges_NC.Title,
                    DateOfBirth = oChanges_NC.DateOfBirth,
                    MaritalStatus = oChanges_NC.MaritalStatus,
                    MemberScope = "E", // external ... not yet in
                    Gender = oChanges_NC.Gender,
                    Notes = oChanges_NC.Notes,
                    Status = "A",  // Active 

                    ///
                    Created = tm,
                    LastMod = tm,
                    CreatedByUserId = this._oLoggedUser.Id,
                    LastModByUserId = this._oLoggedUser.Id
                };

                _context.ChurchMember.Add(oNC_CM);
                /// _userTask = "Added new church member, " + (!string.IsNullOrEmpty(strMemName) ? "[" + strMemName + "]" : "") + " -biodata successfully";

                //save church member first... 
                _context.SaveChanges();




                // get the unique id from db and attach to the CB code for unique --- Global code for member
                //// member code... auto/sys
                var updChangesMade = false;
                if (string.IsNullOrEmpty(oNC_CM.GlobalMemberCode))  //if (_oChanges.MemberScope == "C")  ... thus only congregants to have global code
                {
                    oNC_CM.GlobalMemberCode = GetGlobalMemberCodeByChurchCode_string(oNC_CM.AppGlobalOwnerId, oNC_CM.ChurchBodyId, oCM_CB.GlobalChurchCode, false, oNC_CM.Id);  // oCM_BD.ChurchBody.GlobalChurchCode + "/" + _oChanges.Id; // 

                    _context.ChurchMember.Update(oNC_CM);
                    updChangesMade = true;
                }

                // custom member code... auto/man
                if (string.IsNullOrEmpty(oNC_CM.MemberCustomCode))
                {
                    var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)  //.Include(t => t.AppGlobalOwner) //.Include(t => t.OwnedByChurchBody)
                                         .Where(c => c.AppGlobalOwnerId == oNC_CM.AppGlobalOwnerId && c.NVPCode == "MCCF").ToList();

                    oNVP_List_1 = oNVP_List_1.Where(c =>
                                       (c.OwnedByChurchBodyId == null || c.OwnedByChurchBodyId == oNC_CM.ChurchBodyId ||
                                       (c.OwnedByChurchBodyId != oNC_CM.ChurchBodyId && c.SharingStatus == "C" && c.OwnedByChurchBodyId == oCM_CB.ParentChurchBodyId) ||
                                       (c.OwnedByChurchBodyId != oNC_CM.ChurchBodyId && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCM_CB)))).ToList();

                    var oNVP_MCCF = oNVP_List_1
                        .Where(c => c.ChurchBodyId == oNC_CM.ChurchBodyId && c.NVPSubCode == "AUT_GN" && c.ChurchBody.ChurchLevel.LevelIndex == oNVP_List_1.Min(y => y.ChurchBody.ChurchLevel.LevelIndex)).FirstOrDefault();
                    if (oNVP_MCCF != null)
                    {
                        var bl_AUT_GN = oNVP_MCCF.NVPValue == "Y";
                        if (bl_AUT_GN)
                        {
                            var strPFX = ""; var strSFX = ""; var bl_LDZR = false;
                            var oNVP_PFX = oNVP_List_1.Where(c => c.NVPSubCode == "PFX" && c.ChurchBody.ChurchLevel.LevelIndex == oNVP_List_1.Min(y => y.ChurchBody.ChurchLevel.LevelIndex)).FirstOrDefault();
                            if (oNVP_PFX != null) strPFX = oNVP_PFX.NVPValue;
                            var oNVP_SFX = oNVP_List_1.Where(c => c.NVPSubCode == "SFX" && c.ChurchBody.ChurchLevel.LevelIndex == oNVP_List_1.Min(y => y.ChurchBody.ChurchLevel.LevelIndex)).FirstOrDefault();
                            if (oNVP_SFX != null) strSFX = oNVP_SFX.NVPValue;
                            var oNVP_LDZR = oNVP_List_1.Where(c => c.NVPSubCode == "LDZR" && c.ChurchBody.ChurchLevel.LevelIndex == oNVP_List_1.Min(y => y.ChurchBody.ChurchLevel.LevelIndex)).FirstOrDefault();
                            if (oNVP_LDZR != null) bl_LDZR = oNVP_LDZR.NVPValue == "Y";

                            // generate...
                            oNC_CM.MemberCustomCode = GetCustomMemberCodeByPRFX_SFX_string(oNC_CM.AppGlobalOwnerId, oNC_CM.ChurchBodyId, strPFX, strSFX, bl_LDZR, oNC_CM.Id);

                            _context.ChurchMember.Update(oNC_CM);
                            updChangesMade = true;

                        }
                    }
                }
                else
                {   ////check that custom code is unique within congregation  ... new or upd
                    var existMember = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == oNC_CM.AppGlobalOwnerId && c.ChurchBodyId == oNC_CM.ChurchBodyId && //... restrict within denomination as dbase is per denomination
                                                               (oNC_CM.Id == 0 || (oNC_CM.Id > 0 && c.Id != oNC_CM.Id)) && c.MemberCustomCode == oNC_CM.MemberCustomCode).FirstOrDefault();
                    if (existMember != null)
                        return Json(new
                        {
                            taskSuccess = false,
                            oCurrId = oNC_CM.Id,
                            userMess = "Custom member code '" + oNC_CM.MemberCustomCode + "' must be unique within congregation. [Hint: Member with same code: " +
                            GetConcatMemberName(existMember.Title, existMember.FirstName, existMember.MiddleName, existMember.LastName, false, false, false, false, false) + (existMember.ChurchBody != null ? " / " + existMember.ChurchBody.Name : "") + " ]",
                            signOutToLogIn = false
                        });
                }



                /// add CI ...
                /// 
                if (!string.IsNullOrEmpty(_oChangesCI.Email))
                {
                    //  ... check validity... REGEX 
                    if (!AppUtilties.IsValidEmail(_oChangesCI.Email))
                        return Json(new { taskSuccess = false, oCurrId = oChanges_NC.Id, userMess = "Prospective New Convert email invalid. Please check and try again.", signOutToLogIn = false });

                    // use email to check for member duplication across denomination ... disallow impersonation within same CB... mem can be at diff levels or congregations but must NOT be Active [historic data]
                    var oCIEmailMem = _context.ChurchMember.AsNoTracking().Include(t => t.ChurchBody)
                        .Where(c => c.AppGlobalOwnerId == oAppGloOwnId &&
                                   (c.ChurchBodyId == oChanges_NC.ChurchBodyId || (c.ChurchBodyId != oChanges_NC.ChurchBodyId && c.Status == "A")) && // [ c.Status=="A" ] stat summary in sync with member_status [available - regular, invalid /not available - distant, virtual, past, passed]
                                    c.ContactInfo.Email == _oChangesCI.Email).FirstOrDefault();

                    if (oCIEmailMem != null)
                        return Json(new
                        {
                            taskSuccess = false,
                            oCurrId = oChanges_NC.Id,
                            userMess = "Email must be unique. Email already used by another: [ Member: " +
                            GetConcatMemberName(oCIEmailMem.Title, oCIEmailMem.FirstName, oCIEmailMem.MiddleName, oCIEmailMem.LastName, false, false, false, false, false) + (oCIEmailMem.ChurchBody != null ? " / " + oCIEmailMem.ChurchBody.Name : "") + " ]",
                            signOutToLogIn = false
                        });

                    var oCIEmailExist = _context.ContactInfo.AsNoTracking().Include(t => t.ChurchBody)
                                .Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oChanges_NC.ChurchBodyId && c.Email == _oChangesCI.Email).FirstOrDefault();

                    if (oCIEmailExist != null)
                        return Json(new
                        {
                            taskSuccess = false,
                            oCurrId = oChanges_NC.Id,
                            userMess = "Email must be unique. Email already used by another: [Member: " +
                            oCIEmailExist.ContactInfoDesc + (oCIEmailMem.ChurchBody != null ? " / " + oCIEmailExist.ChurchBody.Name : " <elsewhere>") + " ]",
                            signOutToLogIn = false
                        });
                }



                /// Add MCLAv ... pick New Convert activity from settings (NVP) ... add the event task [with status: Pending]
                /// 
                /// add MT, MR = ??,  MS = Avail
                ///  

                var oNC_CI = new ContactInfo()
                {
                    AppGlobalOwnerId = oAppGloOwnId,
                    ChurchBodyId = oCBid,
                    ChurchMemberId = oNC_CM.Id, // unmapped ... cyclic redundancy! 1-1 for now... will be multi later
                    CtryAlpha3Code = oNC_CM.NationalityId != null ? oNC_CM.NationalityId : (this.oCTRYDefault != null ? this.oCTRYDefault.CtryAlpha3Code : null),
                    MobilePhone1 = _oChangesCI.MobilePhone1,
                    MobilePhone2 = _oChangesCI.MobilePhone2,
                    Email = _oChangesCI.Email,
                    Location = _oChangesCI.Location,
                    ///
                    IsPrimaryContact = true,
                    IsChurchFellow = true,
                    Created = tm,
                    LastMod = tm,
                    CreatedByUserId = this._oLoggedUser.Id,
                    LastModByUserId = this._oLoggedUser.Id
                };


                _context.ContactInfo.Add(oNC_CI);


                //save CI to get Id... 
                _context.SaveChanges();
                updChangesMade = false;

                // ci id may change...
                if (oNC_CM.PrimContactInfoId != oNC_CI.Id)
                {
                    oNC_CM.PrimContactInfoId = oNC_CI.Id;
                    _context.ChurchMember.Update(oNC_CM);
                    updChangesMade = true;
                }


                /// church life
                /// 
                var oMCL_BD = _context.MemberChurchlife.AsNoTracking().Where(c => c.AppGlobalOwnerId == oNC_CM.AppGlobalOwnerId && c.ChurchBodyId == oNC_CM.ChurchBodyId && c.ChurchMemberId == oNC_CM.Id).FirstOrDefault();
                if (oMCL_BD == null)
                {
                    oMCL_BD = new MemberChurchlife()
                    {
                        AppGlobalOwnerId = oNC_CM.AppGlobalOwnerId,
                        ChurchBodyId = oNC_CM.ChurchBodyId,
                        ChurchMemberId = (int)oNC_CM.Id,
                        IsCurrentMember = true,
                        EnrollMode = vm.strEnrollModeCode,  /// walk-in  ... can confirm later
                        DateJoined = oNC_CM.Created,
                        //IsMemBaptized , IsMemConfirmed, IsMemCommunicant
                        SharingStatus = "A"
                    };

                    _context.MemberChurchlife.Add(oMCL_BD);
                    updChangesMade = true;
                }

                ///
                if (updChangesMade)
                {
                    _context.SaveChanges();
                    updChangesMade = false;
                }


                /// MCET
                //// church activity added!  ... auto create all the MCET for this activity and assign Pending status... [ P-I-W-C ] allow tasks to be waived anyways!
                ///
                List<MemberChurchlifeActivity> oMCLAcList = new List<MemberChurchlifeActivity>();
                List<MemberChurchlifeEventTask> oMCETList = new List<MemberChurchlifeEventTask>();

                var oCLAList = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                                    .Where(c => c.AppGlobalOwnerId == oNC_CM.AppGlobalOwnerId &&
                                                    c.NVPCode == "CLA" && c.ApplyToMemberStatus == "N").ToList();   /// attached to New Convert module

                oCLAList = oCLAList.Where(c =>
                                    (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))
                                   )
                                    .OrderBy(c => c.OrderIndex)
                                    .ToList();


                foreach (var oCLAc in oCLAList)
                {

                    var oNC_MCLAc = new MemberChurchlifeActivity()
                    {
                        AppGlobalOwnerId = oNC_CM.AppGlobalOwnerId,
                        ChurchBodyId = oNC_CM.ChurchBodyId,
                        ChurchMemberId = oNC_CM.Id,
                        ChurchlifeActivityId = oCLAc.Id,
                        IsChurchEvent = false,
                        SharingStatus = "A",
                        EventDate = DateTime.Now,
                        Created = tm,
                        LastMod = tm,
                        CreatedByUserId = this._oLoggedUser.Id,
                        LastModByUserId = this._oLoggedUser.Id
                    };

                    
                    _context.MemberChurchlifeActivity.Add(oNC_MCLAc);

                    // save to get oCAA_CLAc Id ... for the CETs
                    _context.SaveChanges();

                    oMCLAcList.Add(oNC_MCLAc);  // keep list... for upd

                    /// the definition list to be picked from...  strNVPCode = "CLA";    // c.Id != oCurrNVP.Id  
                    var oCLARDList = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                                       .Where(c => c.AppGlobalOwnerId == oNC_CM.AppGlobalOwnerId &&
                                                       c.NVPCode == "CLARD" && c.NVPCategoryId == oNC_MCLAc.ChurchlifeActivityId).ToList();   /// ex. New Convert Class

                    oCLARDList = oCLARDList.Where(c =>
                                        (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                       (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))
                                       )
                                        .OrderBy(c => c.OrderIndex)
                                        .ToList();


                    //create approval action... at least  one approval level
                    if (oCLARDList.Count > 0)
                    {
                       var oMCETListCurr = new List<MemberChurchlifeEventTask>();

                        //create oMCET steps
                        var stepIndexLowest = oCLARDList[0].OrderIndex;
                        foreach (AppUtilityNVP oCLARD_NVP in oCLARDList)
                        {
                            var oMCETList_Dup = _context.MemberChurchlifeEventTask.AsNoTracking()
                                                    .Include(t => t.ActivityRequirementDef)
                                                    .Include(t => t.MemberChurchlifeActivity).ThenInclude(t => t.ChurchlifeActivity)
                                                    .Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                                                .Where(c => c.AppGlobalOwnerId == oNC_CM.AppGlobalOwnerId && c.ChurchBodyId == oNC_CM.ChurchBodyId && c.ChurchMemberId == oNC_CM.Id &&
                                                            c.RequirementDefId == oCLARD_NVP.Id && c.MemberChurchlifeActivityId == oNC_MCLAc.Id).ToList();

                            if (oMCETList_Dup.Count == 0)
                            {
                                stepIndexLowest = oCLARD_NVP.OrderIndex < stepIndexLowest ? oCLARD_NVP.OrderIndex : stepIndexLowest;
                                ///
                                oMCETListCurr.Add(

                                    new MemberChurchlifeEventTask()
                                    {
                                        AppGlobalOwnerId = oNC_CM.AppGlobalOwnerId,
                                        ChurchBodyId = oNC_CM.ChurchBodyId,
                                        ChurchMemberId = oNC_CM.Id,
                                        MemberChurchlifeActivityId = oNC_MCLAc.Id,
                                        TaskStatus = "P",   // Pending
                                        SharingStatus = "A",
                                        DateCommenced = DateTime.Now,
                                        // DateCompleted = DateTime.Now
                                        OrderIndex = stepIndexLowest,
                                        Created = tm,
                                        LastMod = tm,
                                        CreatedByUserId = this._oLoggedUser.Id,
                                        LastModByUserId = this._oLoggedUser.Id
                                    });
                            }
                        }

                        //var oMCETListCurr = oMCETList.Where(c => c.MemberChurchlifeActivityId == oNC_MCLAc.Id).ToList();
                        foreach (MemberChurchlifeEventTask oMCET in oMCETListCurr)
                        {
                            oMCET.IsCurrentTask = oMCET.OrderIndex <= stepIndexLowest;  //concurrent will be handled  
                            _context.Add(oMCET);
                        }


                        /// chk upd....
                        oMCETList.AddRange(oMCETListCurr);
                    }
                }

                // save the batch of MCET
                if (oMCLAcList.Count > 0 || oMCETList.Count > 0)
                {
                    _context.SaveChanges();
                    updChangesMade = false;
                }



                /// MCM..MT
                /// 
                var oMCM_MT_BD = _context.MemberType.AsNoTracking().Where(c => c.AppGlobalOwnerId == oNC_CM.AppGlobalOwnerId && c.ChurchBodyId == oNC_CM.ChurchBodyId && c.ChurchMemberId == oNC_CM.Id).FirstOrDefault();
                if (oMCM_MT_BD == null)
                {
                    //GET THE LOWEST TYPE...
                    oMCM_MT_BD = new MemberType()
                    {
                        AppGlobalOwnerId = oNC_CM.AppGlobalOwnerId,
                        ChurchBodyId = oNC_CM.ChurchBodyId,
                        ChurchMemberId = (int)oNC_CM.Id,
                        MemberTypeCode = "N",  /// New Convert
                        IsCurrent = true,
                        SharingStatus = "A",
                        FromDate = DateTime.Now,
                        // ToDate = DateTime.Now
                        Created = tm,
                        CreatedByUserId = this._oLoggedUser.Id,
                        LastMod = tm,
                        LastModByUserId = this._oLoggedUser.Id,
                    };

                    _context.MemberType.Add(oMCM_MT_BD);
                    updChangesMade = true;
                }


                /// MCM..MR
                /// 
                var oMCM_MR_BD = _context.MemberRank.AsNoTracking().Where(c => c.AppGlobalOwnerId == oNC_CM.AppGlobalOwnerId && c.ChurchBodyId == oNC_CM.ChurchBodyId && c.ChurchMemberId == oNC_CM.Id).FirstOrDefault();
                if (oMCM_MR_BD == null)
                {
                    //GET THE LOWEST RANK...
                    oMCM_MR_BD = new MemberRank()
                    {
                        AppGlobalOwnerId = oNC_CM.AppGlobalOwnerId,
                        ChurchBodyId = oNC_CM.ChurchBodyId,
                        ChurchMemberId = (int)oNC_CM.Id,
                        ChurchRankId = (int)vm.numMemRankId,
                        IsCurrentRank = true,
                        SharingStatus = "A",
                        FromDate = DateTime.Now,
                        // ToDate = DateTime.Now
                        Created = tm,
                        CreatedByUserId = this._oLoggedUser.Id,
                        LastMod = tm,
                        LastModByUserId = this._oLoggedUser.Id,
                    };

                    _context.MemberRank.Add(oMCM_MR_BD);
                    updChangesMade = true;
                }


                /// MCM..MS
                /// 
                var oMCM_MS_BD = _context.MemberStatus.AsNoTracking().Where(c => c.AppGlobalOwnerId == oNC_CM.AppGlobalOwnerId && c.ChurchBodyId == oNC_CM.ChurchBodyId && c.ChurchMemberId == oNC_CM.Id).FirstOrDefault();
                if (oMCM_MS_BD == null)
                {
                    oMCM_MS_BD = new MemberStatus()
                    {
                        //GET THE MOST APPLICABLE STATUS...
                        AppGlobalOwnerId = oNC_CM.AppGlobalOwnerId,
                        ChurchBodyId = oNC_CM.ChurchBodyId,
                        ChurchMemberId = (int)oNC_CM.Id,
                        ChurchMemStatusId = vm.numMemStatusId,
                        IsCurrent = true,
                        SharingStatus = "A",
                        FromDate = DateTime.Now,
                        // ToDate = DateTime.Now
                        Created = tm,
                        CreatedByUserId = this._oLoggedUser.Id,
                        LastMod = tm,
                        LastModByUserId = this._oLoggedUser.Id,
                    };

                    _context.MemberStatus.Add(oMCM_MS_BD);
                    updChangesMade = true;
                }




                //save... all
                if (updChangesMade)
                    _context.SaveChanges();

                var strDesc = "New Converts";
                var _userTask = "Added New Convert, " + (!string.IsNullOrEmpty(strMemName) ? "[" + strMemName + "]" : "") + " successfully. Other church member modules have been configured alogside. Note: Final approval may be required after the attached activity process is complete.";

                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));


                //_userTask = "Opened " + strDesc.ToLower() + " member biodata";
                //if (oMBModel.oChurchMember.Id > 0) _userTask += "[" + _strMemFullName + " | Member code: " + oMBModel.oChurchMember.GlobalMemberCode + "]";

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );



                // DisplaySuccessInfo(res.userMess, res.currTask, res.oCurrId, currChuBodyId, _strAttendee, _strLongevity, res.evtId, res.evtDate, false);
                return Json(new { taskSuccess = true, oCurrId = oChanges_NC.Id, userMess = _userTask });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = oChanges_NC.Id, userMess = "Failed saving church attendance (attendee) details. Err: " + ex.Message });
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MCI(MemberContactInfoModel vm)
        
        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }
             

            var strDesc = "Church Member - Contact Info"; 

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemContactInfo == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            ContactInfo _oChangesCI = vm.oMemContactInfo;



            /// check attached CB
            if (_oChangesCI.AppGlobalOwnerId == null) _oChangesCI.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesCI.ChurchBodyId == null)   
                return Json(new { taskSuccess = false, oCurrId = _oChangesCI.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesCI.AppGlobalOwnerId && c.Id == _oChangesCI.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)   
                return Json(new { taskSuccess = false, oCurrId = _oChangesCI.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesCI.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            ChurchMember oMCI_Mem = null;
            oMCI_Mem = _context.ChurchMember.AsNoTracking() //.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody)
                .Where(c => c.AppGlobalOwnerId == _oChangesCI.AppGlobalOwnerId && c.ChurchBodyId == _oChangesCI.ChurchBodyId && c.Id == _oChangesCI.ChurchMemberId).FirstOrDefault();

            if (oMCI_Mem == null && _oChangesCI.Id > 0) 
            {
                oMCI_Mem = _context.ChurchMember.AsNoTracking().Where(x => x.AppGlobalOwnerId == _oChangesCI.AppGlobalOwnerId && x.ChurchBodyId == _oChangesCI.ChurchBodyId &&
                                                x.PrimContactInfoId == _oChangesCI.Id).FirstOrDefault();
            }
             
            if (oMCI_Mem == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesCI.Id, userMess = "Contact holder [member] could not be verfied. Please refresh and try again.", signOutToLogIn = false });


            //if (_oChangesCI.Id > 0)  // exists... check db data
            //{
            //    //var arrData = "";
            //    //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //    //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberContactInfoModel>(arrData) : vm;

            //    ContactInfo oCM_CI = vmMod.oMemContactInfo; // new ContactInfo(); 

            //    if (oCM_CI == null) oCM_CI = _context.ContactInfo.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody)
            //            .Where(c => c.AppGlobalOwnerId == _oChangesCI.AppGlobalOwnerId && c.ChurchBodyId == _oChangesCI.ChurchBodyId && c.Id == _oChangesCI.Id).FirstOrDefault();
            //    if (oCM_CI == null) return Json(new { taskSuccess = false, oCurrId = _oChangesCI.Id, userMess = "Member contact details not found. Please check for errors or refresh and try again.", signOutToLogIn = false });

            //    // confirm client admin
            //    if (oCM_CI.AppGlobalOwner == null || oCM_CI.ChurchBody == null)
            //    {
            //        oCM_CI.AppGlobalOwner = this._oLoggedAGO;       // _context.AppGlobalOwner.Find(_oChanges.AppGlobalOwnerId);  // 
            //        oCM_CI.ChurchBody = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesCI.AppGlobalOwnerId && c.Id == _oChangesCI.ChurchBodyId).FirstOrDefault();  //this._oLoggedCB;       
            //    }

            //    ///
            //    var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);
            //    TempData["oVmCurr"] = _vmMod; TempData.Keep();
            //}
            

            //ChurchMember oCI_Mem = null;
            //if (oCM_CI.ChurchMemberId == null && vm.oChurchMemberId )
            //{
            //    oCI_Mem = _context.ChurchMember.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody)
            //                .Where(c => c.AppGlobalOwnerId == _oChangesCI.AppGlobalOwnerId && c.ChurchBodyId == _oChangesCI.ChurchBodyId && c.PrimContactInfoId == oCM_CI.Id).FirstOrDefault();

            //    oCI_Mem = _context.ContactInfo.AsNoTracking().Where(x => x.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && x.ChurchBodyId == _oChanges.ChurchBodyId &&
            //                                    x.Id == _oChanges.PrimContactInfoId).FirstOrDefault();

            //    if (oMemCI == null)
            //        oMemCI = _context.ContactInfo.AsNoTracking().Where(x => x.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && x.ChurchBodyId == _oChanges.ChurchBodyId &&
            //                                                    x.ChurchMemberId == _oChanges.Id && x.IsPrimaryContact == true).FirstOrDefault();

            //    if (oMemCI == null)
            //        oMemCI = _context.ContactInfo.AsNoTracking().Where(x => x.AppGlobalOwnerId == _oChanges.AppGlobalOwnerId && x.ChurchBodyId == _oChanges.ChurchBodyId &&
            //                                                    x.ChurchMemberId == _oChanges.Id).FirstOrDefault();

            //    /// found? .. assign  ... pass thru the usual validations else via Member Profile Pane
            //    if (oMemCI != null) _oChangesCI = oMemCI;
            //}

            //if (oCM_CI.ChurchMemberId == null) oCM_CI.ChurchMemberId = vm.oChurchMemberId;
            //var oCI_Mem = _context.ChurchMember.AsNoTracking() //.Include(t => t.AppGlobalOwner).Include(t => t.ChurchBody)
            //    .Where(c => c.AppGlobalOwnerId == _oChangesCI.AppGlobalOwnerId && c.ChurchBodyId == _oChangesCI.ChurchBodyId && c.Id == oCM_CI.ChurchMemberId).FirstOrDefault();
             
            //if (oCI_Mem == null)
            //    return Json(new { taskSuccess = false, oCurrId = _oChangesCI.Id, userMess = "Contact holder [member] could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            // if (_oChangesCI.ChurchMemberId == null) _oChangesCI.ChurchMemberId = oCM_CI.ChurchMemberId;


            //// _oChanges.AppGlobalOwner = null; _oChanges.ChurchBody = null; 
            //if (_oChangesCI.AppGlobalOwnerId == null || _oChangesCI.ChurchBodyId == null)
            //    return Json(new { taskSuccess = false, oCurrId = _oChangesCI.Id, userMess = "Specified denomination and church unit could not be retrieved. Please refresh and try again.", signOutToLogIn = false });
             


            // more validations...

            if (string.IsNullOrEmpty(_oChangesCI.ResidenceAddress) && string.IsNullOrEmpty(_oChangesCI.Location) && string.IsNullOrEmpty(_oChangesCI.DigitalAddress) && 
                string.IsNullOrEmpty(_oChangesCI.City) && _oChangesCI.RegionId == null && _oChangesCI.CtryAlpha3Code == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesCI.Id, userMess = "Some form of location details required please", signOutToLogIn = false });

            if (string.IsNullOrEmpty(_oChangesCI.Telephone) && string.IsNullOrEmpty(_oChangesCI.MobilePhone1) && string.IsNullOrEmpty(_oChangesCI.MobilePhone2) &&
               string.IsNullOrEmpty(_oChangesCI.Email) && string.IsNullOrEmpty(_oChangesCI.Website))  
                return Json(new { taskSuccess = false, oCurrId = _oChangesCI.Id, userMess = "Some form of contact details would be helpful. Hint: can be reached through another person's contact", signOutToLogIn = false });


            //Email... must be REQUIRED -- for password reset!
            if (!string.IsNullOrEmpty(_oChangesCI.Email))
                {
                    //  ... check validity... REGEX 
                    if (!AppUtilties.IsValidEmail(_oChangesCI.Email))
                        return Json(new { taskSuccess = false, oCurrId = _oChangesCI.Id, userMess = "Member email invalid. Please check and try again.", signOutToLogIn = false });

                    // use email to check for member duplication across denomination ... disallow impersonation within same CB... mem can be at diff levels or congregations but must NOT be Active [historic data]
                    var oCIEmailMem = _context.ChurchMember.AsNoTracking().Include(t => t.ChurchBody)
                        .Where(c => c.AppGlobalOwnerId == _oChangesCI.AppGlobalOwnerId &&
                                   (c.ChurchBodyId == _oChangesCI.ChurchBodyId || (c.ChurchBodyId != _oChangesCI.ChurchBodyId && c.Status == "A")) && // [ c.Status=="A" ] stat summary in sync with member_status [available - regular, invalid /not available - distant, virtual, past, passed]
                                   (_oChangesCI.Id == 0 || (_oChangesCI.Id > 0 && c.Id != _oChangesCI.Id)) && c.ContactInfo.Email == _oChangesCI.Email).FirstOrDefault();
                   
                if (oCIEmailMem != null)
                        return Json(new
                        {
                            taskSuccess = false,
                            oCurrId = _oChangesCI.Id,
                            userMess = "Email must be unique. Email already used by another: [ Member: " +
                            GetConcatMemberName(oCIEmailMem.Title, oCIEmailMem.FirstName, oCIEmailMem.MiddleName, oCIEmailMem.LastName, false, false, false, false, false) + (oCIEmailMem.ChurchBody != null ? " / " + oCIEmailMem.ChurchBody.Name : "") + " ]",
                            signOutToLogIn = false
                        });

                    var oCIEmailExist = _context.ContactInfo.AsNoTracking().Include(t => t.ChurchBody)
                                .Where(c => c.AppGlobalOwnerId == _oChangesCI.AppGlobalOwnerId && c.ChurchBodyId == _oChangesCI.ChurchBodyId &&
                                ((_oChangesCI.Id == 0 || _oChangesCI.Id == 0) || (_oChangesCI.Id > 0 && c.Id != _oChangesCI.Id)) && c.Email == _oChangesCI.Email).FirstOrDefault();
                    if (oCIEmailExist != null)
                        return Json(new
                        {
                            taskSuccess = false,
                            oCurrId = _oChangesCI.Id,
                            userMess = "Email must be unique. Email already used by another: [Member: " +
                            _oChangesCI.ContactInfoDesc + (oCIEmailMem.ChurchBody != null ? " / " + oCIEmailExist.ChurchBody.Name : " <elsewhere>") + " ]",
                            signOutToLogIn = false
                        });

                }
            
            if (!string.IsNullOrEmpty(_oChangesCI.Website))
                {
                    //  ... check validity... REGEX 
                    if (!AppUtilties.IsValidURL(_oChangesCI.Website))
                    {
                        return Json(new { taskSuccess = false, oCurrId = _oChangesCI.Id, userMess = "Url of member website (or blog) invalid. Please check and try again.", signOutToLogIn = false });
                    }
                }
            
            if (_oChangesCI.ResAddrSameAsPostAddr) _oChangesCI.PostalAddress = _oChangesCI.ResidenceAddress;
            

            try
            {
                ModelState.Remove("oMemContactInfo.AppGlobalOwnerId");
                ModelState.Remove("oMemContactInfo.ChurchBodyId");
                ModelState.Remove("oMemContactInfo.ChurchMemberId");
                ModelState.Remove("oMemContactInfo.CtryAlpha3Code");
                ModelState.Remove("oMemContactInfo.RegionId");

                ModelState.Remove("oMemContactInfo.CreatedByUserId");
                ModelState.Remove("oMemContactInfo.LastModByUserId");
                 

                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesCI.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });


                // let's save now...

                _oChangesCI.LastMod = DateTime.Now;
                _oChangesCI.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged; 
                  
                var tm = DateTime.Now;
                _oChangesCI.LastMod = tm;
                _oChangesCI.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged;

                //validate...
                var _strMemFullName = GetConcatMemberName(oMCI_Mem.Title, oMCI_Mem.FirstName, oMCI_Mem.MiddleName, oMCI_Mem.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";

                               
                // save... CI
                // tracker .. error!
                var _reset = _oChangesCI.Id == 0;
                if (_oChangesCI.AppGlobalOwner != null) _oChangesCI.AppGlobalOwner = null; if (_oChangesCI.AppGlobalOwner != null) _oChangesCI.ChurchBody = null; 
                if (_oChangesCI != null)
                {
                    _oChangesCI.IsChurchFellow = true;
                    _oChangesCI.IsPrimaryContact = true;   // for now...
                    // _oChangesCI.ChurchMemberId = _oChanges.Id;
                    _oChangesCI.LastMod = tm;
                    _oChangesCI.LastModByUserId = this._oLoggedUser.Id;

                    if (_oChangesCI.Id == 0)
                    {
                        _oChangesCI.Created = tm;
                        _oChangesCI.CreatedByUserId = this._oLoggedUser.Id;

                        _context.ContactInfo.Add(_oChangesCI);

                        _userTask = Environment.NewLine + " Added contact details of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                        ViewBag.UserMsg = "Member contact details added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                    }
                    else
                    {
                        _context.ContactInfo.Update(_oChangesCI);

                        _userTask = Environment.NewLine + " Updated contact details of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                        ViewBag.UserMsg = "Member contact details updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                    }

                    //save CI to get Id... 
                    _context.SaveChanges();

                    // ci id may change...
                    if (oMCI_Mem.PrimContactInfoId != _oChangesCI.Id)
                    {
                        oMCI_Mem.PrimContactInfoId = _oChangesCI.Id;
                        _context.ChurchMember.Update(oMCI_Mem);
                    }

                    //save church member first... 
                    _context.SaveChanges();
                }


                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));


                //_userTask = "Opened " + strDesc.ToLower() + " member biodata";
                //if (oMBModel.oChurchMember.Id > 0) _userTask += "[" + _strMemFullName + " | Member code: " + oMBModel.oChurchMember.GlobalMemberCode + "]";

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );


                // var strMemName = GetConcatMemberName(_oChanges.Title, _oChanges.FirstName, _oChanges.MiddleName, _oChanges.LastName, false, false, false, false, false);
                // var strMemName = GetConcatMemberName(_oChanges.Title, _oChanges.FirstName, _oChanges.MiddleName, _oChanges.LastName, true, true, false, false, true);


                /// update the member roll summary table... when new m added or triggered by user or at refresh 
                /// add new, upd [stat, dob, gen, group ... upd roll] and delete /transfer
                // if (_reset) {
                //var resRollUpd = UpdCBMemRoll(_oChanges.AppGlobalOwnerId, _oChanges.ChurchBodyId, this._oLoggedUser.Id);
                //if (resRollUpd < 0) ViewBag.UserMsg += ". Member roll summary update failed. Try update again later.";
                //else if (resRollUpd == 0) ViewBag.UserMsg += ". Member roll summary update incomplete. Try update again later.";
                // }


                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesCI.ChurchBodyId, currCMId = _oChangesCI.ChurchMemberId, currId = _oChangesCI.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesCI.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MLS(MemberLanguageSpokenModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Language Spoken";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberLanguageSpoken == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberLanguageSpoken _oChangesMLS = vm.oMemberLanguageSpoken;


            /// check attached CB
            if (_oChangesMLS.AppGlobalOwnerId == null) _oChangesMLS.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMLS.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMLS.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMLS.AppGlobalOwnerId && c.Id == _oChangesMLS.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMLS.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMLS.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMLS.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMLS.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });
             
            var oCM_Curr = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMLS.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMLS.ChurchBodyId && c.Id == _oChangesMLS.ChurchMemberId).FirstOrDefault();
            if (oCM_Curr == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMLS.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberLanguageSpokenModel>(arrData) : vm;


            if (_oChangesMLS.LanguageSpokenId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMLS.Id, userMess = "Language spoken not specified.", signOutToLogIn = false });

            /////LanguageSpoken oCM_LS = vmMod.oMemberLanguageSpoken; // new MemberLanguageSpoken(); 
            //var oCM_LS = _context.AppUtilityNVP.AsNoTracking()  
            //    .Where(c => c.AppGlobalOwnerId == _oChangesMLS.AppGlobalOwnerId && c.NVPCode =="LSPK" && c.Id == _oChangesMLS.LanguageSpokenId).FirstOrDefault();

            //if (oCM_LS == null) return Json(new { taskSuccess = false, oCurrId = _oChangesMLS.Id, userMess = "Member language spoken not found. Please check for errors or refresh and try again.", signOutToLogIn = false });

            //// confirm client admin
            //if (oCM_MLS.AppGlobalOwner == null || oCM_MLS.ChurchBody == null)
            //{
            //    oCM_MLS.AppGlobalOwner = this._oLoggedAGO;       // _context.AppGlobalOwner.Find(_oChanges.AppGlobalOwnerId);  // 
            //    oCM_MLS.ChurchBody = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMLS.AppGlobalOwnerId && c.Id == _oChangesMLS.ChurchBodyId).FirstOrDefault();  //this._oLoggedCB;       
            //}
            

            //// _oChanges.AppGlobalOwner = null; _oChanges.ChurchBody = null; 
            //if (_oChangesMLS.AppGlobalOwnerId == null || _oChangesMLS.ChurchBodyId == null)
            //    return Json(new { taskSuccess = false, oCurrId = _oChangesMLS.Id, userMess = "Specified denomination or church unit could not be retrieved. Please refresh and try again.", signOutToLogIn = false });
                                    
                   
            try
            {
                ModelState.Remove("oMemberLanguageSpoken.AppGlobalOwnerId");
                ModelState.Remove("oMemberLanguageSpoken.ChurchBodyId");
                ModelState.Remove("oMemberLanguageSpoken.ChurchMemberId");
                ModelState.Remove("oMemberLanguageSpoken.LanguageSpokenId");

                ModelState.Remove("oMemberLanguageSpoken.CreatedByUserId");
                ModelState.Remove("oMemberLanguageSpoken.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMLS.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });


                // let's save now...

                //_oChangesMLS.LastMod = DateTime.Now;
                _oChangesMLS.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                var tm = DateTime.Now;
                _oChangesMLS.LastMod = tm;
                _oChangesMLS.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                //validate...
                var _strMemFullName = GetConcatMemberName(oCM_Curr.Title, oCM_Curr.FirstName, oCM_Curr.MiddleName, oCM_Curr.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving member language spoken " + (!string.IsNullOrEmpty(_strMemFullName) ? "[of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                // save... CI
                // tracker .. error!
                var _reset = _oChangesMLS.Id == 0;
                if (_oChangesMLS.AppGlobalOwner != null) _oChangesMLS.AppGlobalOwner = null; if (_oChangesMLS.AppGlobalOwner != null) _oChangesMLS.ChurchBody = null;
                 
                var oMLSList = _context.MemberLanguageSpoken.AsNoTracking().Include(t=> t.LanguageSpoken)
                    .Where(c => c.AppGlobalOwnerId == _oChangesMLS.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMLS.ChurchBodyId && c.ChurchMemberId == _oChangesMLS.ChurchMemberId).ToList();

                var oPrimList = oMLSList.Where(c => c.IsPrimaryLanguage == true).ToList();
                if (!_oChangesMLS.IsPrimaryLanguage && oPrimList.Count == 0 && oMLSList.Count > 0)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMLS.Id, userMess = "Please choose one primary language", signOutToLogIn = false });

                if (!_oChangesMLS.IsPrimaryLanguage && oPrimList.Count == 0 && oMLSList.Count == 0)
                    _oChangesMLS.IsPrimaryLanguage = true;

                if (_oChangesMLS.IsPrimaryLanguage && oPrimList.Count > 0)
                    foreach (var oMLSPrim in oPrimList)
                        if (oMLSPrim.Id != _oChangesMLS.Id)
                        { 
                            oMLSPrim.IsPrimaryLanguage = false;
                            oMLSPrim.Created = tm;
                            oMLSPrim.LastMod = tm;
                            oMLSPrim.LastModByUserId = this._oLoggedUser.Id;
                            _context.MemberLanguageSpoken.Update(oMLSPrim); 
                        }

                /// check exist...duplicates
                var oMLSList_Dup = oMLSList.Where(c => c.LanguageSpokenId == _oChangesMLS.LanguageSpokenId).ToList();

                if (_oChangesMLS.Id > 0)
                    oMLSList_Dup = oMLSList_Dup.Where(c => c.Id != _oChangesMLS.Id).ToList();
                ///
                var oMLS = oMLSList_Dup.FirstOrDefault();

                if (oMLS != null)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMLS.Id, userMess = "Specified language" + (oMLS.LanguageSpoken != null ? " (" + oMLS.LanguageSpoken?.NVPValue + ") " : "") + "already added)", signOutToLogIn = false });
                   
                /// save...
                _oChangesMLS.LastMod = tm;
                _oChangesMLS.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged;
                if (_oChangesMLS.Id == 0)
                { 
                    _oChangesMLS.Created = tm;
                    _oChangesMLS.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberLanguageSpoken.Add(_oChangesMLS);

                    _userTask = "Added language-spoken of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member language-spoken added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberLanguageSpoken.Update(_oChangesMLS);

                    _userTask =  "Member language-spoken of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member language spoken updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();

                //// ci id may change...
                //if (oCM_Curr.PrimMemberLanguageSpokenId != _oChangesMLS.Id)
                //{
                //    oCM_Curr.PrimMemberLanguageSpokenId = _oChangesMLS.Id;
                //    _context.ChurchMember.Update(oCM_Curr);
                //}

                ////save church member first... 
                //_context.SaveChanges();


                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));


                //_userTask = "Opened " + strDesc.ToLower() + " member biodata";
                //if (oMBModel.oChurchMember.Id > 0) _userTask += "[" + _strMemFullName + " | Member code: " + oMBModel.oChurchMember.GlobalMemberCode + "]";

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );


                //var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);
                //TempData["oVmCurr"] = _vmMod; TempData.Keep();

                // var strMemName = GetConcatMemberName(_oChanges.Title, _oChanges.FirstName, _oChanges.MiddleName, _oChanges.LastName, false, false, false, false, false);
                // var strMemName = GetConcatMemberName(_oChanges.Title, _oChanges.FirstName, _oChanges.MiddleName, _oChanges.LastName, true, true, false, false, true);


                /// update the member roll summary table... when new m added or triggered by user or at refresh 
                /// add new, upd [stat, dob, gen, group ... upd roll] and delete /transfer
                // if (_reset) {
                //var resRollUpd = UpdCBMemRoll(_oChanges.AppGlobalOwnerId, _oChanges.ChurchBodyId, this._oLoggedUser.Id);
                //if (resRollUpd < 0) ViewBag.UserMsg += ". Member roll summary update failed. Try update again later.";
                //else if (resRollUpd == 0) ViewBag.UserMsg += ". Member roll summary update incomplete. Try update again later.";
                // }


                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMLS.ChurchBodyId, currCMId = _oChangesMLS.ChurchMemberId, currId = _oChangesMLS.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMLS.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MFR(MemberFamilyRelationModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Family Relation";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberRelation == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberRelation _oChangesMFR = vm.oMemberRelation;


            /// check attached CB
            if (_oChangesMFR.AppGlobalOwnerId == null) _oChangesMFR.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMFR.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMFR.AppGlobalOwnerId && c.Id == _oChangesMFR.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMFR.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            var oCM_Curr = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMFR.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMFR.ChurchBodyId && c.Id == _oChangesMFR.ChurchMemberId).FirstOrDefault();
            if (oCM_Curr == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberFamilyRelationModel>(arrData) : vm;


            if (_oChangesMFR.RelationScope == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Please select the relation scope.", signOutToLogIn = false });


            // L-local cong, C- Chu Associate..ext cong but within denom, E [not church fellow]
            if ((_oChangesMFR.RelationScope == "L" || _oChangesMFR.RelationScope == "C") && _oChangesMFR.RelationChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Congregation of member relation/associate not indicated. Please check and try again.", signOutToLogIn = false });

            if ((_oChangesMFR.RelationScope == "L" || _oChangesMFR.RelationScope == "C") &&  _oChangesMFR.RelationChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Member relation/associate not specified.", signOutToLogIn = false });

            if (_oChangesMFR.RelationScope == "E")
            {
                if (string.IsNullOrEmpty(_oChangesMFR.ResidenceAddressExtCon) && string.IsNullOrEmpty(_oChangesMFR.LocationExtCon) && string.IsNullOrEmpty(_oChangesMFR.DigitalAddressExtCon) &&
                string.IsNullOrEmpty(_oChangesMFR.CityExtCon) && _oChangesMFR.RegionIdExtCon == null && _oChangesMFR.CtryAlpha3CodeExtCon == null)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Some form of location details required for member relation please", signOutToLogIn = false });

                if (string.IsNullOrEmpty(_oChangesMFR.MobilePhone1ExtCon) && string.IsNullOrEmpty(_oChangesMFR.MobilePhone2ExtCon) && string.IsNullOrEmpty(_oChangesMFR.EmailExtCon))
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Some form of contact details would be helpful. Hint: can be reached through another person's contact", signOutToLogIn = false }); 
            }

            if (_oChangesMFR.RelationScope == "E")
            {
                _oChangesMFR.RelationChurchBodyId = null;
                _oChangesMFR.RelationChurchMemberId = null;
            }
            else
            {
                _oChangesMFR.RelationNameExtCon = null;
                _oChangesMFR.CityExtCon = null;
                _oChangesMFR.DenominationExtCon = null;
                _oChangesMFR.CtryAlpha3CodeExtCon = null;
                _oChangesMFR.DigitalAddressExtCon = null;
                _oChangesMFR.EmailExtCon = null;
                _oChangesMFR.FaithAffiliationExtCon = null;
                _oChangesMFR.LocationExtCon = null;
                _oChangesMFR.MobilePhone1ExtCon = null;
                _oChangesMFR.MobilePhone2ExtCon = null;
                _oChangesMFR.PhotoUrlExtCon = null;
                _oChangesMFR.PostalAddressExtCon = null;
                _oChangesMFR.RegionIdExtCon = null;
                _oChangesMFR.ResAddrSameAsPostAddrExtCon = false;
                _oChangesMFR.ResidenceAddressExtCon = null;
            }

            if (_oChangesMFR.RelationshipCode == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Relationship with person is required please.", signOutToLogIn = false });

            //Email...  
            if (!string.IsNullOrEmpty(_oChangesMFR.EmailExtCon))
            {
                //  ... check validity... REGEX 
                if (!AppUtilties.IsValidEmail(_oChangesMFR.EmailExtCon))
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Please email specified invalid. Please check and try again.", signOutToLogIn = false });                 
            }

            try
            {
                ModelState.Remove("oMemberRelation.AppGlobalOwnerId");
                ModelState.Remove("oMemberRelation.ChurchBodyId");
                ModelState.Remove("oMemberRelation.ChurchMemberId");

                ModelState.Remove("oMemberRelation.LanguageSpokenId");
                ModelState.Remove("oMemberContact.RelationChurchBodyId");
                ModelState.Remove("oMemberContact.RelationChurchMemberId");
                ModelState.Remove("oMemberContact.RegionIdExtCon");
                ModelState.Remove("oMemberContact.CtryAlpha3CodeExtCon");

                ModelState.Remove("oMemberRelation.CreatedByUserId");
                ModelState.Remove("oMemberRelation.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });


                // let's save now...

                _oChangesMFR.LastMod = DateTime.Now;
                _oChangesMFR.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                var tm = DateTime.Now;
                _oChangesMFR.LastMod = tm;
                _oChangesMFR.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                //validate...
                var _strMemFullName = GetConcatMemberName(oCM_Curr.Title, oCM_Curr.FirstName, oCM_Curr.MiddleName, oCM_Curr.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving member family relation " + (!string.IsNullOrEmpty(_strMemFullName) ? "[of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                // save... CI
                // duplicates
                var oMLSList = _context.MemberRelation.AsNoTracking().Include(t => t.RelationshipType).Include(t=> t.RelationChurchBody).Include(t=> t.RelationChurchMember)
                    .Where(c => c.AppGlobalOwnerId == _oChangesMFR.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMFR.ChurchBodyId && c.ChurchMemberId == _oChangesMFR.ChurchMemberId).ToList();

              
                //if (oMLSList.Count(c => c.IsNextOfKin == true) == 0 && oMLSList.Count > 1)
                //    return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Please choose the next-of-kin", signOutToLogIn = false });

                //if (oMLSList.Count(c => c.IsNextOfKin == true) == 0 && oMLSList.Count == 1)
                //    _oChangesMFR.IsNextOfKin = true;
                 
                var oMFRList = oMLSList.Where(c => c.RelationshipCode == _oChangesMFR.RelationshipCode &&
                                    (((_oChangesMFR.RelationScope == "L" || _oChangesMFR.RelationScope == "C") && c.RelationChurchBodyId == _oChangesMFR.RelationChurchBodyId && c.RelationChurchMemberId == _oChangesMFR.RelationChurchMemberId) ||
                                      (_oChangesMFR.RelationScope == "E" && c.MobilePhone1ExtCon == _oChangesMFR.MobilePhone1ExtCon && c.MobilePhone2ExtCon == _oChangesMFR.MobilePhone2ExtCon && c.EmailExtCon == _oChangesMFR.EmailExtCon))
                                     ).ToList();
                 
                ///
                if (_oChangesMFR.Id > 0)
                    oMFRList = oMFRList.Where(c => c.Id != _oChangesMFR.Id).ToList();
                ///
                var oMFR = oMFRList.FirstOrDefault();

                if (oMFR != null) //return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Specified relation" + (oMFR.RelationshipType != null ? " (" + oMFR.RelationshipType?.Name + ") " : "") + "already added)", signOutToLogIn = false });
                {
                    var _strConName = ""; var _strConCB = "External person";
                    if (_oChangesMFR.RelationScope == "E")
                        _strConName = oMFR.RelationNameExtCon;
                    else
                    {
                        _strConCB = oMFR.RelationChurchBody != null ? oMFR.RelationChurchBody.Name : "";
                        _strConName = oMFR.RelationChurchMember != null ? GetConcatMemberName(oMFR.RelationChurchMember.Title, oMFR.RelationChurchMember.FirstName, oMFR.RelationChurchMember.MiddleName, oMFR.RelationChurchMember.LastName, false, false, false, false, false) : "";
                    }
                    _strConName += (!string.IsNullOrEmpty(_strConCB) ? " (" + _strConCB + ")" : "");
                    ///
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Specified relation of member, " + (oMFR.RelationshipType != null ? " (" + oMFR.RelationshipType?.Name + ") " : "") + " already exists. Hint: " + _strConName , signOutToLogIn = false });
                }

                /// next-of-kin not compulsory
                ///  warn!

                /// CheckMemberGlobalUniqueIdentity
                /// save...
                /// 

                if (_oChangesMFR.RelationScope == "E")
                {
                    string uniqueFileName = null;
                    var oFormFile = vm.UserPhotoFile_Ext;
                    if (oFormFile != null && oFormFile.Length > 0)
                    {
                        string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");  //~/frontend/dist/img_db
                        uniqueFileName = Guid.NewGuid().ToString() + "_" + oFormFile.FileName;
                        string filePath = Path.Combine(uploadFolder, uniqueFileName);
                        oFormFile.CopyTo(new FileStream(filePath, FileMode.Create));
                    }

                    else
                        if (_oChangesMFR.Id != 0) uniqueFileName = _oChangesMFR.PhotoUrlExtCon;

                    _oChangesMFR.PhotoUrlExtCon = uniqueFileName;
                } 
                ///
                 
                /// relation category -- nuclear, extended, others
                var oMFR_RLT = _context.RelationshipType.AsNoTracking().Where(c => c.RelationCode == _oChangesMFR.RelationshipCode).FirstOrDefault();
                _oChangesMFR.RelationCategory = oMFR_RLT == null ? "O" : (
                                 (oMFR_RLT.RelationCode == 21 || oMFR_RLT.RelationCode == 22 || oMFR_RLT.RelationCode == 23 || oMFR_RLT.RelationCode == 31 || oMFR_RLT.RelationCode == 32 || oMFR_RLT.RelationCode == 33 || oMFR_RLT.RelationCode == 41 || oMFR_RLT.RelationCode == 42 || oMFR_RLT.RelationCode == 43 || oMFR_RLT.RelationCode == 51 || oMFR_RLT.RelationCode == 52) ? "N" :
                                 (oMFR_RLT.RelationCode == 114 || oMFR_RLT.RelationCode == 115 || oMFR_RLT.RelationCode == 116 || oMFR_RLT.RelationCode == 122 || oMFR_RLT.RelationCode == 123 || oMFR_RLT.RelationCode == 124 || oMFR_RLT.RelationCode == 125) ? "E" : "O"
                            );


                ///// tracker .. error!
                _oChangesMFR.LastMod = tm;
                _oChangesMFR.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged;
                var _reset = _oChangesMFR.Id == 0;
                if (_oChangesMFR.AppGlobalOwner != null) _oChangesMFR.AppGlobalOwner = null; if (_oChangesMFR.AppGlobalOwner != null) _oChangesMFR.ChurchBody = null;
                ///
                if (_oChangesMFR.Id == 0)
                {
                    
                    _oChangesMFR.Created = tm;
                    _oChangesMFR.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberRelation.Add(_oChangesMFR);

                    _userTask = "Added family relation of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member family relation added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberRelation.Update(_oChangesMFR);

                    _userTask = "Member family relation of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member family relation updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();


                /// reverse the relationship... to register in the other person's side... in case it's not!

                //Get the relation pair... add or update
                //var oRelaMemberInt = oMemRel.ChurchMember; // var oRelaMemberExt = oMemRel.ChurchAssociate;
                /// numRelationCodePrev --- ensures this is executed only for new MFR or unconfigured MFR
                if ((_oChangesMFR.RelationScope == "L" || _oChangesMFR.RelationScope == "C") && _oChangesMFR.RelationshipCode != null && _oChangesMFR.RelationshipCode != vm.numRelationCodePrev)  /// && _oChangesMFR.ChurchMemberId != null
                {                    
                    RelationshipType oPrevRLTPair = null;
                    RelationshipType oNewRLTPair = null;
                    //var oRelaMemberInt = oMemRel.ChurchMember;

                    // get the previous relationship specified -- wife  -- that's what's exisitng in the db -- search with that instead! uncless it;s NULL
                    var oPrevRelationType = _context.RelationshipType.AsNoTracking()
                        //.Include(t=>t.RelationshipType_MalePair).Include(t => t.RelationshipType_FemalePair)
                        //.Include(t => t.RelationshipType_GenericPair)
                        .Where(c => c.RelationCode == vm.numRelationCodePrev).FirstOrDefault();


                    // get the current relationship specified -- wife
                    var oNewRelationType = _context.RelationshipType.AsNoTracking()
                        //.Include(t=>t.RelationshipType_MalePair).Include(t => t.RelationshipType_FemalePair)
                        //.Include(t => t.RelationshipType_GenericPair)
                        .Where(c => c.RelationCode == _oChangesMFR.RelationshipCode).FirstOrDefault();

                    // get the relation lists
                    if (oNewRelationType != null)
                    {
                        var oRLTList = _context.RelationshipType.AsNoTracking().ToList(); //.Where(c => c.RelationCode == oCurrRelationType.RelationCode).ToList();
                                                                                          // var oRLTList = _context.RelationshipType.AsNoTracking().Where(c => c.Id == oCurrRelationType.RelationshipTypeMalePairCode).ToList();

                        // check for the gender of member to know which relation to use --- masc, fem or neuter
                        if (oCM_Curr.Gender == "M")
                            oNewRLTPair = oRLTList.Where(c => c.RelationCode == oNewRelationType.RelationshipTypeMalePairCode).FirstOrDefault();
                        // oRelationPair = oCurrRelationType?.RelationshipType_MalePair;  
                        else if (oCM_Curr.Gender == "F")
                            oNewRLTPair = oRLTList.Where(c => c.RelationCode == oNewRelationType.RelationshipTypeFemalePairCode).FirstOrDefault();
                        // oRelationPair = oCurrRelationType?.RelationshipType_FemalePair;
                        else
                            oNewRLTPair = oRLTList.Where(c => c.RelationCode == oNewRelationType.RelationshipTypeGenericPairCode).FirstOrDefault();
                        // oRelationPair = oCurrRelationType?.RelationshipType_GenericPair;

                        //check if relation exist in Pair's fam relation... create /update
                        MemberRelation oMFRPairFound = null;                        
                        if (oPrevRelationType != null)
                        {
                            // get the previous pair... configured...
                            // check for the gender of member to know which relation to use --- masc, fem or neuter
                            if (oCM_Curr.Gender == "M")
                                oPrevRLTPair = oRLTList.Where(c => c.RelationCode == oPrevRelationType.RelationshipTypeMalePairCode).FirstOrDefault();
                            // oRelationPair = oCurrRelationType?.RelationshipType_MalePair;  
                            else if (oCM_Curr.Gender == "F")
                                oPrevRLTPair = oRLTList.Where(c => c.RelationCode == oPrevRelationType.RelationshipTypeFemalePairCode).FirstOrDefault();
                            // oRelationPair = oCurrRelationType?.RelationshipType_FemalePair;
                            else
                                oPrevRLTPair = oRLTList.Where(c => c.RelationCode == oPrevRelationType.RelationshipTypeGenericPairCode).FirstOrDefault();
                            // oRelationPair = oCurrRelationType?.RelationshipType_GenericPair;

                            oMFRPairFound = _context.MemberRelation.AsNoTracking()
                                   .Where(c => c.AppGlobalOwnerId == _oChangesMFR.AppGlobalOwnerId && c.ChurchMemberId == _oChangesMFR.RelationChurchMemberId && c.RelationChurchMemberId == _oChangesMFR.ChurchMemberId &&
                                   c.RelationshipCode == oPrevRLTPair.RelationCode).FirstOrDefault(); // > 0; 
                        }

                        if (oMFRPairFound == null) //create... new since prev does not exist.
                        {
                            var oMFRPair = new MemberRelation();
                            oMFRPair.AppGlobalOwnerId = _oChangesMFR.AppGlobalOwnerId;
                            oMFRPair.ChurchBodyId = _oChangesMFR.RelationChurchBodyId;
                            oMFRPair.RelationChurchBodyId = _oChangesMFR.ChurchBodyId;
                            oMFRPair.ChurchMemberId = _oChangesMFR.RelationChurchMemberId;
                            oMFRPair.RelationChurchMemberId = _oChangesMFR.ChurchMemberId;
                            ///
                            oMFRPair.RelationshipCode = oNewRLTPair != null ? oNewRLTPair.RelationCode : (int?)null;  // saving the code instead of the id --- code is fixed

                            oMFRPair.RelationCategory = oNewRLTPair == null ? "O" : (
                                (oNewRLTPair.RelationCode == 21 || oNewRLTPair.RelationCode == 22 || oNewRLTPair.RelationCode == 23 || oNewRLTPair.RelationCode == 31 || oNewRLTPair.RelationCode == 32 || oNewRLTPair.RelationCode == 33 || oNewRLTPair.RelationCode == 41 || oNewRLTPair.RelationCode == 42 || oNewRLTPair.RelationCode == 43 || oNewRLTPair.RelationCode == 51 || oNewRLTPair.RelationCode == 52) ? "N" :
                                (oNewRLTPair.RelationCode == 114 || oNewRLTPair.RelationCode == 115 || oNewRLTPair.RelationCode == 116 || oNewRLTPair.RelationCode == 122 || oNewRLTPair.RelationCode == 123 || oNewRLTPair.RelationCode == 124 || oNewRLTPair.RelationCode == 125) ? "E" : "O"
                                );

                            oMFRPair.RelationScope = _oChangesMFR.RelationScope;  // L, C or E

                            /// _oChangesMFR.RelationCategory; /// N-uclear, E-xtended, F-aith Related, V-aried relation  ...  (oRelationPair.RelationIndex < 4 ? 'N' : (oRelationPair.RelationIndex < 7 ? 'E' : (oRelationPair.RelationIndex < 10 ? 'A' : 'Q')));  //review later
                            oMFRPair.Status = "A";
                            oMFRPair.Created = tm;
                            oMFRPair.LastMod = tm;
                            oMFRPair.CreatedByUserId = this._oLoggedUser.Id;
                            oMFRPair.LastModByUserId = this._oLoggedUser.Id;

                            //add new mem rel
                            _context.MemberRelation.Add(oMFRPair); 
                        }
                        else  /// previous exist... modify with ...oNewRLTPair
                        {
                            //oMFRPairFound.AppGlobalOwnerId = _oChangesMFR.AppGlobalOwnerId;
                            //oMFRPairFound.ChurchBodyId = _oChangesMFR.RelationChurchBodyId;
                            //oMFRPairFound.RelationChurchBodyId = _oChangesMFR.ChurchBodyId;
                            //oMFRPairFound.ChurchMemberId = _oChangesMFR.RelationChurchMemberId;
                            //oMFRPairFound.RelationChurchMemberId = _oChangesMFR.ChurchMemberId;
                            ///
                            oMFRPairFound.RelationshipCode = oNewRLTPair != null ? oNewRLTPair.RelationCode : (int?)null;  // saving the code instead of the id --- code is fixed

                            oMFRPairFound.RelationCategory = oNewRLTPair == null ? "O" : (
                                (oNewRLTPair.RelationCode == 21 || oNewRLTPair.RelationCode == 22 || oNewRLTPair.RelationCode == 23 || oNewRLTPair.RelationCode == 31 || oNewRLTPair.RelationCode == 32 || oNewRLTPair.RelationCode == 33 || oNewRLTPair.RelationCode == 41 || oNewRLTPair.RelationCode == 42 || oNewRLTPair.RelationCode == 43 || oNewRLTPair.RelationCode == 51 || oNewRLTPair.RelationCode == 52) ? "N" :
                                (oNewRLTPair.RelationCode == 114 || oNewRLTPair.RelationCode == 115 || oNewRLTPair.RelationCode == 116 || oNewRLTPair.RelationCode == 122 || oNewRLTPair.RelationCode == 123 || oNewRLTPair.RelationCode == 124 || oNewRLTPair.RelationCode == 125) ? "E" : "O"
                                );

                            oMFRPairFound.RelationScope = _oChangesMFR.RelationScope;  // L, C or E

                            /// _oChangesMFR.RelationCategory; /// N-uclear, E-xtended, F-aith Related, V-aried relation  ...  (oRelationPair.RelationIndex < 4 ? 'N' : (oRelationPair.RelationIndex < 7 ? 'E' : (oRelationPair.RelationIndex < 10 ? 'A' : 'Q')));  //review later
                            oMFRPairFound.Status = "A";
                            oMFRPairFound.Created = tm;
                            oMFRPairFound.LastMod = tm;
                            oMFRPairFound.CreatedByUserId = this._oLoggedUser.Id;
                            oMFRPairFound.LastModByUserId = this._oLoggedUser.Id;

                            //add new mem rel
                            _context.MemberRelation.Update(oMFRPairFound);
                             
                        }


                        ////save  ... finally
                        _context.SaveChanges();
                    } 
                }
                 

                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));


                //_userTask = "Opened " + strDesc.ToLower() + " member biodata";
                //if (oMBModel.oChurchMember.Id > 0) _userTask += "[" + _strMemFullName + " | Member code: " + oMBModel.oChurchMember.GlobalMemberCode + "]";

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );


                //var _vmMod = Newtonsoft.Json.JsonConvert.SerializeObject(vmMod);
                //TempData["oVmCurr"] = _vmMod; TempData.Keep();

                // var strMemName = GetConcatMemberName(_oChanges.Title, _oChanges.FirstName, _oChanges.MiddleName, _oChanges.LastName, false, false, false, false, false);
                // var strMemName = GetConcatMemberName(_oChanges.Title, _oChanges.FirstName, _oChanges.MiddleName, _oChanges.LastName, true, true, false, false, true);


                /// update the member roll summary table... when new m added or triggered by user or at refresh 
                /// add new, upd [stat, dob, gen, group ... upd roll] and delete /transfer
                // if (_reset) {
                //var resRollUpd = UpdCBMemRoll(_oChanges.AppGlobalOwnerId, _oChanges.ChurchBodyId, this._oLoggedUser.Id);
                //if (resRollUpd < 0) ViewBag.UserMsg += ". Member roll summary update failed. Try update again later.";
                //else if (resRollUpd == 0) ViewBag.UserMsg += ". Member roll summary update incomplete. Try update again later.";
                // }


                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMFR.ChurchBodyId, currCMId = _oChangesMFR.ChurchMemberId, currId = _oChangesMFR.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = "New Relation", signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMFR.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MCP(MemberContactPersonModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Contact Person";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberContact == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberContact _oChangesMCP = vm.oMemberContact;


            /// check attached CB
            if (_oChangesMCP.AppGlobalOwnerId == null) _oChangesMCP.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMCP.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMCP.AppGlobalOwnerId && c.Id == _oChangesMCP.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMCP.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            var oCM_Curr = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMCP.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCP.ChurchBodyId && c.Id == _oChangesMCP.ChurchMemberId).FirstOrDefault();
            if (oCM_Curr == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberFamilyRelationModel>(arrData) : vm;


            if (_oChangesMCP.RelationScope == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Please select the relation scope.", signOutToLogIn = false });


            // L-local cong, C- Chu Associate..ext cong but within denom, E [not church fellow]
            if ((_oChangesMCP.RelationScope == "L" || _oChangesMCP.RelationScope == "C") && _oChangesMCP.ContactChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Congregation of contact person/associate not indicated. Please check and try again.", signOutToLogIn = false });

            if ((_oChangesMCP.RelationScope == "L" || _oChangesMCP.RelationScope == "C") && _oChangesMCP.ContactChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Member contact/associate not specified.", signOutToLogIn = false });

            if (_oChangesMCP.RelationScope == "E")
            {
                if (string.IsNullOrEmpty(_oChangesMCP.ResidenceAddressExtCon) && string.IsNullOrEmpty(_oChangesMCP.LocationExtCon) && string.IsNullOrEmpty(_oChangesMCP.DigitalAddressExtCon) &&
                string.IsNullOrEmpty(_oChangesMCP.CityExtCon) && _oChangesMCP.RegionIdExtCon == null && _oChangesMCP.CtryAlpha3CodeExtCon == null)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Some form of location details required for contact person please", signOutToLogIn = false });

                if (string.IsNullOrEmpty(_oChangesMCP.MobilePhone1ExtCon) && string.IsNullOrEmpty(_oChangesMCP.MobilePhone2ExtCon) && string.IsNullOrEmpty(_oChangesMCP.EmailExtCon))
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Some form of contact details would be helpful. Hint: can be reached through another person's contact", signOutToLogIn = false });
            }

            if (_oChangesMCP.RelationshipCode == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Relationship with person is required please.", signOutToLogIn = false });

            //Email...  
            if (!string.IsNullOrEmpty(_oChangesMCP.EmailExtCon))
            {
                //  ... check validity... REGEX 
                if (!AppUtilties.IsValidEmail(_oChangesMCP.EmailExtCon))
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Please email specified invalid. Please check and try again.", signOutToLogIn = false });
            }

            try
            {
                ModelState.Remove("oMemberContact.AppGlobalOwnerId");
                ModelState.Remove("oMemberContact.ChurchBodyId");
                ModelState.Remove("oMemberContact.ChurchMemberId");
                ///
                ModelState.Remove("oMemberContact.ContactChurchBodyId");
                ModelState.Remove("oMemberContact.ContactChurchMemberId");
                ModelState.Remove("oMemberContact.RegionIdExtCon");
                ModelState.Remove("oMemberContact.CtryAlpha3CodeExtCon");
                ///
                ModelState.Remove("oMemberContact.CreatedByUserId");
                ModelState.Remove("oMemberContact.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });


                // let's save now...

                _oChangesMCP.LastMod = DateTime.Now;
                _oChangesMCP.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                var tm = DateTime.Now;
                _oChangesMCP.LastMod = tm;
                _oChangesMCP.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                //validate...
                var _strMemFullName = GetConcatMemberName(oCM_Curr.Title, oCM_Curr.FirstName, oCM_Curr.MiddleName, oCM_Curr.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving member contact person " + (!string.IsNullOrEmpty(_strMemFullName) ? "[of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                /// CheckMemberGlobalUniqueIdentity
                /// dups
                var oMLSList = _context.MemberContact.AsNoTracking().Include(t => t.RelationshipType).Include(t => t.RelationChurchMember).Include(t => t.RelationChurchBody)
                    .Where(c => c.AppGlobalOwnerId == _oChangesMCP.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCP.ChurchBodyId && c.ChurchMemberId == _oChangesMCP.ChurchMemberId).ToList();
                 
                var oMCPList = oMLSList.Where(c => c.RelationshipCode == _oChangesMCP.RelationshipCode &&
                                    (((_oChangesMCP.RelationScope == "L" || _oChangesMCP.RelationScope == "C") && c.ContactChurchBodyId == _oChangesMCP.ContactChurchBodyId && c.ContactChurchMemberId == _oChangesMCP.ContactChurchMemberId) ||
                                     (_oChangesMCP.RelationScope == "E" && c.MobilePhone1ExtCon == _oChangesMCP.MobilePhone1ExtCon && c.MobilePhone2ExtCon == _oChangesMCP.MobilePhone2ExtCon && c.EmailExtCon == _oChangesMCP.EmailExtCon))
                                    ).ToList();

                if (_oChangesMCP.Id > 0)
                    oMCPList = oMCPList.Where(c => c.Id != _oChangesMCP.Id).ToList();
                ///
                var oMCP = oMCPList.FirstOrDefault();

                if (oMCP != null)
                {
                    var _strConName = ""; var _strConCB = "External person";
                    if (_oChangesMCP.RelationScope == "E")
                        _strConName = oMCP.ContactNameExtCon;
                    else
                    {
                        _strConCB = oMCP.RelationChurchBody != null ? oMCP.RelationChurchBody.Name : "";
                        _strConName = oMCP.RelationChurchMember != null ? GetConcatMemberName(oMCP.RelationChurchMember.Title, oMCP.RelationChurchMember.FirstName, oMCP.RelationChurchMember.MiddleName, oMCP.RelationChurchMember.LastName, false, false, false, false, false) : "";
                    }
                    _strConName += (!string.IsNullOrEmpty(_strConCB) ? " (" + _strConCB + ")" : "");
                    ///
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Specified contact of member, " + _strConName + " already exists.", signOutToLogIn = false });
                }


                if (oMCPList.Count(c => c.IsCurrentContact == true) == 0 && oMCPList.Count > 1)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Please choose member's current conatact", signOutToLogIn = false });

                if (oMCPList.Count(c => c.IsCurrentContact == true) == 0 && oMCPList.Count == 1)
                    _oChangesMCP.IsCurrentContact = true;


                // save... 
                /// save...
                /// 
                if (_oChangesMCP.RelationScope == "E")
                {
                    string uniqueFileName = null;
                    var oFormFile = vm.PhotoFile_ExtCon;
                    if (oFormFile != null && oFormFile.Length > 0)
                    {
                        string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");  //~/frontend/dist/img_db
                        uniqueFileName = Guid.NewGuid().ToString() + "_" + oFormFile.FileName;
                        string filePath = Path.Combine(uploadFolder, uniqueFileName);
                        oFormFile.CopyTo(new FileStream(filePath, FileMode.Create));
                    }

                    else
                        if (_oChangesMCP.Id != 0) uniqueFileName = _oChangesMCP.PhotoUrlExtCon;

                    _oChangesMCP.PhotoUrlExtCon = uniqueFileName;
                }

                ///           
                /// relation category -- nuclear, extended, others
                var oMCP_RLT = _context.RelationshipType.AsNoTracking().Where(c => c.RelationCode == _oChangesMCP.RelationshipCode).FirstOrDefault();
                _oChangesMCP.RelationCategory = oMCP_RLT == null ? "O" : (
                                 (oMCP_RLT.RelationCode == 21 || oMCP_RLT.RelationCode == 22 || oMCP_RLT.RelationCode == 23 || oMCP_RLT.RelationCode == 31 || oMCP_RLT.RelationCode == 32 || oMCP_RLT.RelationCode == 33 || oMCP_RLT.RelationCode == 41 || oMCP_RLT.RelationCode == 42 || oMCP_RLT.RelationCode == 43 || oMCP_RLT.RelationCode == 51 || oMCP_RLT.RelationCode == 52) ? "N" :
                                 (oMCP_RLT.RelationCode == 114 || oMCP_RLT.RelationCode == 115 || oMCP_RLT.RelationCode == 116 || oMCP_RLT.RelationCode == 122 || oMCP_RLT.RelationCode == 123 || oMCP_RLT.RelationCode == 124 || oMCP_RLT.RelationCode == 125) ? "E" : "O"
                            );


                 ///
                _oChangesMCP.LastMod = tm;
                _oChangesMCP.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged;
                var _reset = _oChangesMCP.Id == 0;

                /// // tracker .. error! 
                if (_oChangesMCP.AppGlobalOwner != null) _oChangesMCP.AppGlobalOwner = null; if (_oChangesMCP.AppGlobalOwner != null) _oChangesMCP.ChurchBody = null;

                if (_oChangesMCP.Id == 0)
                {

                    _oChangesMCP.Created = tm;
                    _oChangesMCP.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberContact.Add(_oChangesMCP);

                    _userTask = "Added contact person of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member contact person added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberContact.Update(_oChangesMCP);

                    _userTask = "Member contact person of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member contact person updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();

                 

                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));


                //_userTask = "Opened " + strDesc.ToLower() + " member biodata";
                //if (oMBModel.oChurchMember.Id > 0) _userTask += "[" + _strMemFullName + " | Member code: " + oMBModel.oChurchMember.GlobalMemberCode + "]";

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );



                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMCP.ChurchBodyId, currCMId = _oChangesMCP.ChurchMemberId, currId = _oChangesMCP.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCP.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }
         

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MED(MemberEducationModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Education";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberEducation == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberEducation _oChangesMED = vm.oMemberEducation;


            /// check attached CB
            if (_oChangesMED.AppGlobalOwnerId == null) _oChangesMED.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMED.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMED.AppGlobalOwnerId && c.Id == _oChangesMED.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMED.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            var oMED_Mem = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMED.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMED.ChurchBodyId && c.Id == _oChangesMED.ChurchMemberId).FirstOrDefault();
            if (oMED_Mem == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberEducationModel>(arrData) : vm;


            if (_oChangesMED.InstitutionTypeId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Institution type is not specified.", signOutToLogIn = false });

            if (_oChangesMED.CertificateId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Certificate type is not specified.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(_oChangesMED.Discipline))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Please indicate the discipline or area of training.", signOutToLogIn = false });

            // return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMED.ChurchBodyId, currCMId = _oChangesMED.ChurchMemberId, currId = _oChangesMED.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            //if (_oChangesMED.FromDate == null)
            //    return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Date commenced not specified", signOutToLogIn = false });

            if (_oChangesMED.FromDate != null)
            {
                if (_oChangesMED.FromDate != null)
                    if (_oChangesMED.FromDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Date commenced cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }

            if (_oChangesMED.ToDate != null)
            {
                if (_oChangesMED.ToDate != null)
                    if (_oChangesMED.ToDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Date completed cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }

            if (_oChangesMED.FromDate != null && _oChangesMED.ToDate != null)
            {
                if (_oChangesMED.FromDate != null && _oChangesMED.ToDate != null)
                {
                    if (_oChangesMED.FromDate.Value > _oChangesMED.ToDate.Value)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Date commenced cannot be later than date completed. Leave it blank if unknown", signOutToLogIn = false });
                }  
            }

            try
            {
                ModelState.Remove("oMemberEducation.AppGlobalOwnerId");
                ModelState.Remove("oMemberEducation.ChurchBodyId");
                ModelState.Remove("oMemberEducation.ChurchMemberId");
                ModelState.Remove("oMemberEducation.InstitutionTypeId");
                ModelState.Remove("oMemberEducation.CertificateId");

                ModelState.Remove("oMemberEducation.CreatedByUserId");
                ModelState.Remove("oMemberEducation.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });


                
                //validate...
                var _strMemFullName = GetConcatMemberName(oMED_Mem.Title, oMED_Mem.FirstName, oMED_Mem.MiddleName, oMED_Mem.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving member education " + (!string.IsNullOrEmpty(_strMemFullName) ? "[of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                // /// dups...
                // ///
                //var oMEDList = _context.MemberEducation.AsNoTracking().Include(t => t.InstitutionType_NVP).Include(t => t.CertificateType_NVP) 
                //    .Where(c => c.AppGlobalOwnerId == _oChangesMED.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMED.ChurchBodyId && c.ChurchMemberId == _oChangesMED.ChurchMemberId && 
                //                c.InstitutionTypeId == _oChangesMED.InstitutionTypeId && c.CertificateId==_oChangesMED.CertificateId && 
                //                (((!string.IsNullOrEmpty(c.Discipline) ? c.Discipline : "").Trim().ToLower() == (!string.IsNullOrEmpty(_oChangesMED.Discipline) ? _oChangesMED.Discipline : "").Trim().ToLower()) &&
                //                 (
                //                     (_oChangesMED.FromDate.Value <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMED.ToDate.Value >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMED.FromDate.Value <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMED.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMED.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && _oChangesMED.ToDate.Value >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMED.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMED.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                //                 ))
                //                ).ToList();

                //if (_oChangesMED.Id > 0)
                //    oMEDList = oMEDList.Where(c => c.Id != _oChangesMED.Id).ToList();
                /////
                //var oMED = oMEDList.FirstOrDefault();

                //if (oMED != null)
                //{
                //    var _strEduPair = oMED.CertificateType_NVP != null ? oMED.CertificateType_NVP.NVPValue : "";
                //    var _strCert = oMED.CertificateType_NVP != null ? oMED.CertificateType_NVP.NVPValue : "";
                //    _strEduPair += (!string.IsNullOrEmpty(_strCert) ? " (" + _strCert + ")" : "");
                //    return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Specified education detail, " + _strEduPair + " seems to exist. Check the dates for overlap)", signOutToLogIn = false });
                //}



                /// dups...
                ///
                var oMEDList_Dup = _context.MemberEducation.AsNoTracking().Include(t => t.CertificateType_NVP).Include(t => t.InstitutionType_NVP).Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                    .Where(c => c.AppGlobalOwnerId == _oChangesMED.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMED.ChurchBodyId && c.ChurchMemberId == _oChangesMED.ChurchMemberId &&
                                c.InstitutionTypeId == _oChangesMED.InstitutionTypeId && c.CertificateId == _oChangesMED.CertificateId &&
                                    ((!string.IsNullOrEmpty(c.Discipline) ? c.Discipline : "").Trim().ToLower() == (!string.IsNullOrEmpty(_oChangesMED.Discipline) ? _oChangesMED.Discipline : "").Trim().ToLower())).ToList();
                 
                if (_oChangesMED.FromDate != null && _oChangesMED.ToDate != null)
                {
                    oMEDList_Dup = oMEDList_Dup.Where(c =>
                                         ((_oChangesMED.FromDate != null ? _oChangesMED.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMED.ToDate != null ? _oChangesMED.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMED.FromDate != null ? _oChangesMED.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMED.ToDate != null ? _oChangesMED.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMED.FromDate != null ? _oChangesMED.FromDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && (_oChangesMED.ToDate != null ? _oChangesMED.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMED.FromDate != null ? _oChangesMED.FromDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMED.ToDate != null ? _oChangesMED.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                                          ).ToList();
                }
                else if (_oChangesMED.FromDate != null && _oChangesMED.ToDate == null)
                    oMEDList_Dup = oMEDList_Dup.Where(c => _oChangesMED.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMED.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();

                else if (_oChangesMED.ToDate != null && _oChangesMED.FromDate == null)
                    oMEDList_Dup = oMEDList_Dup.Where(c => _oChangesMED.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMED.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();
                 

                /// exclude current...
                if (_oChangesMED.Id > 0)
                    oMEDList_Dup = oMEDList_Dup.Where(c => c.Id != _oChangesMED.Id).ToList();
                ///
                var oMED_Dup = oMEDList_Dup.FirstOrDefault();

                if (oMED_Dup != null)
                {
                    var _strCR_Dup = oMED_Dup.Discipline + (oMED_Dup.CertificateType_NVP != null ? " (" + oMED_Dup.CertificateType_NVP.NVPValue + ")" : "") ;                       
                    ///
                    var _strCB_Desc = oMED_Dup.ChurchBody != null ? oMED_Dup.ChurchBody.Name : "Congregation";
                    var _strCB_CLDesc = oMED_Dup.ChurchBody != null ? (oMED_Dup.ChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(oMED_Dup.ChurchBody.ChurchLevel.CustomName) ? " (" + oMED_Dup.ChurchBody.ChurchLevel.CustomName + ")" : " (" + oMED_Dup.ChurchBody.ChurchLevel.Name + ")") : "") : "";
                    _strCB_Desc += _strCB_CLDesc;
                    ///
                    var _strMED_Desc_Dup = (!string.IsNullOrEmpty(_strCR_Dup) ? _strCR_Dup : "") + (oMED_Dup.InstitutionType_NVP != null ? ", " + oMED_Dup.InstitutionType_NVP.NVPValue : "");  // President (Youth Wing), Presiding Bishop (CACI)
                     ///
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Specified member education " + _strMED_Desc_Dup + " seems to exist. Check the dates for overlap or source congregation: " + _strCB_Desc, signOutToLogIn = false });
                  
                }




                // let's save now...
                /// 
                string uniqueFileName = null;
                var oFormFile = vm.CertPhotoFile;
                if (oFormFile != null && oFormFile.Length > 0)
                {
                    string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");  //~/frontend/dist/img_db
                    uniqueFileName = Guid.NewGuid().ToString() + "_" + oFormFile.FileName;
                    string filePath = Path.Combine(uploadFolder, uniqueFileName);
                    oFormFile.CopyTo(new FileStream(filePath, FileMode.Create));
                }

                else
                    if (_oChangesMED.Id != 0) uniqueFileName = _oChangesMED.CertificatePhotoUrl;

                _oChangesMED.CertificatePhotoUrl = uniqueFileName;
                ///
                 

                /// save...
                var _reset = _oChangesMED.Id == 0;
                var tm = DateTime.Now;
                _oChangesMED.LastMod = tm;
                _oChangesMED.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged; 
                
                // tracker .. error!                
                if (_oChangesMED.AppGlobalOwner != null) _oChangesMED.AppGlobalOwner = null; if (_oChangesMED.AppGlobalOwner != null) _oChangesMED.ChurchBody = null;
                ///
                if (_oChangesMED.Id == 0)
                {
                    _oChangesMED.Created = tm;
                    _oChangesMED.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberEducation.Add(_oChangesMED);

                    _userTask = "Added education details of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member education added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberEducation.Update(_oChangesMED);

                    _userTask = "Member education of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member education updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();
                 

                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );



                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMED.ChurchBodyId, currCMId = _oChangesMED.ChurchMemberId, currId = _oChangesMED.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMED.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }
         

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MPB(MemberProfessionBrandModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Profession/Brand";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberProfessionBrand == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberProfessionBrand _oChangesMPB = vm.oMemberProfessionBrand;


            /// check attached CB
            if (_oChangesMPB.AppGlobalOwnerId == null) _oChangesMPB.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMPB.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMPB.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMPB.AppGlobalOwnerId && c.Id == _oChangesMPB.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMPB.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMPB.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMPB.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMPB.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            var oMPB_Mem = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMPB.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMPB.ChurchBodyId && c.Id == _oChangesMPB.ChurchMemberId).FirstOrDefault();
            if (oMPB_Mem == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMPB.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberProfessionBrandModel>(arrData) : vm;


            if (string.IsNullOrEmpty(_oChangesMPB.Profession))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMPB.Id, userMess = "Profession or brand description is not specified.", signOutToLogIn = false });

            if (_oChangesMPB.FromDate != null)
            {
                if (_oChangesMPB.FromDate != null)
                    if (_oChangesMPB.FromDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMPB.Id, userMess = "Date started cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }

            if (_oChangesMPB.ToDate != null)
            {
                if (_oChangesMPB.ToDate != null)
                    if (_oChangesMPB.ToDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMPB.Id, userMess = "Date ended cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }

            if (_oChangesMPB.FromDate != null && _oChangesMPB.ToDate != null)
            {
                if (_oChangesMPB.FromDate != null && _oChangesMPB.ToDate != null)
                {
                    if (_oChangesMPB.FromDate.Value > _oChangesMPB.ToDate.Value)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMPB.Id, userMess = "Date started cannot be later than date ended. Leave it blank if unknown", signOutToLogIn = false });
                }
            }
             
            try
            {
                ModelState.Remove("oMemberProfessionBrand.AppGlobalOwnerId");
                ModelState.Remove("oMemberProfessionBrand.ChurchBodyId");
                ModelState.Remove("oMemberProfessionBrand.OwnedByChurchBodyId");
                ModelState.Remove("oMemberProfessionBrand.ChurchMemberId"); 
                ModelState.Remove("oMemberProfessionBrand.FromDate"); 
                ModelState.Remove("oMemberProfessionBrand.ToDate"); 

                ModelState.Remove("oMemberProfessionBrand.CreatedByUserId");
                ModelState.Remove("oMemberProfessionBrand.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMPB.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });
                 

                _oChangesMPB.LastMod = DateTime.Now;
                _oChangesMPB.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                var tm = DateTime.Now;
                _oChangesMPB.LastMod = tm;
                _oChangesMPB.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                //validate...
                var _strMemFullName = GetConcatMemberName(oMPB_Mem.Title, oMPB_Mem.FirstName, oMPB_Mem.MiddleName, oMPB_Mem.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving member profession /brand " + (!string.IsNullOrEmpty(_strMemFullName) ? "[of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                ///// dups...
                /////
                //var oMPBList = _context.MemberProfessionBrand.AsNoTracking() //.Include(t => t.InstitutionType_NVP).Include(t => t.CertificateType_NVP)
                //    .Where(c => c.AppGlobalOwnerId == _oChangesMPB.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMPB.ChurchBodyId && c.ChurchMemberId == _oChangesMPB.ChurchMemberId && 
                //                (((!string.IsNullOrEmpty(c.Profession) ? c.Profession : "").Trim().ToLower() == (!string.IsNullOrEmpty(_oChangesMPB.Profession) ? _oChangesMPB.Profession : "").Trim().ToLower()) &&
                //                 (
                //                     (_oChangesMPB.FromDate.Value <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMPB.ToDate.Value >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMPB.FromDate.Value <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMPB.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMPB.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && _oChangesMPB.ToDate.Value >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMPB.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMPB.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                //                 ))
                //                ).ToList();

                //if (_oChangesMPB.Id > 0)
                //    oMPBList = oMPBList.Where(c => c.Id != _oChangesMPB.Id).ToList();
                /////
                //var oMPB = oMPBList.FirstOrDefault();

                //if (oMPB != null) 
                //    return Json(new { taskSuccess = false, oCurrId = _oChangesMPB.Id, userMess = "Specified profession /brand detail, " + oMPB.Profession + " seems to exist. Check the dates for overlap)", signOutToLogIn = false });


                /// dups...
                ///
                var oMPBList_Dup = _context.MemberProfessionBrand.AsNoTracking().Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                    .Where(c => c.AppGlobalOwnerId == _oChangesMPB.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMPB.ChurchBodyId && c.ChurchMemberId == _oChangesMPB.ChurchMemberId && 
                                    ((!string.IsNullOrEmpty(c.Profession) ? c.Profession : "").Trim().ToLower() == (!string.IsNullOrEmpty(_oChangesMPB.Profession) ? _oChangesMPB.Profession : "").Trim().ToLower())).ToList();

                if (_oChangesMPB.FromDate != null && _oChangesMPB.ToDate != null)
                {
                    oMPBList_Dup = oMPBList_Dup.Where(c =>
                                         ((_oChangesMPB.FromDate != null ? _oChangesMPB.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMPB.ToDate != null ? _oChangesMPB.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMPB.FromDate != null ? _oChangesMPB.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMPB.ToDate != null ? _oChangesMPB.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMPB.FromDate != null ? _oChangesMPB.FromDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && (_oChangesMPB.ToDate != null ? _oChangesMPB.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMPB.FromDate != null ? _oChangesMPB.FromDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMPB.ToDate != null ? _oChangesMPB.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                                          ).ToList();
                }
                else if (_oChangesMPB.FromDate != null && _oChangesMPB.ToDate == null)
                    oMPBList_Dup = oMPBList_Dup.Where(c => _oChangesMPB.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMPB.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();

                else if (_oChangesMPB.ToDate != null && _oChangesMPB.FromDate == null)
                    oMPBList_Dup = oMPBList_Dup.Where(c => _oChangesMPB.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMPB.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();


                /// exclude current...
                if (_oChangesMPB.Id > 0)
                    oMPBList_Dup = oMPBList_Dup.Where(c => c.Id != _oChangesMPB.Id).ToList();
                ///
                var oMPB_Dup = oMPBList_Dup.FirstOrDefault();

                if (oMPB_Dup != null)
                {
                    var _strMPB_Dup = oMPB_Dup.Profession;
                    ///
                    var _strCB_Desc = oMPB_Dup.ChurchBody != null ? oMPB_Dup.ChurchBody.Name : "Congregation";
                    var _strCB_CLDesc = oMPB_Dup.ChurchBody != null ? (oMPB_Dup.ChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(oMPB_Dup.ChurchBody.ChurchLevel.CustomName) ? " (" + oMPB_Dup.ChurchBody.ChurchLevel.CustomName + ")" : " (" + oMPB_Dup.ChurchBody.ChurchLevel.Name + ")") : "") : "";
                    _strCB_Desc += _strCB_CLDesc;
                    ///
                    var _strMPB_Desc_Dup = (!string.IsNullOrEmpty(_strMPB_Dup) ? _strMPB_Dup : ""); // Analytics Specialist, Entrepreneur
                    ///
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMPB.Id, userMess = "Specified member profession/brand " + _strMPB_Desc_Dup + " seems to exist. Check the dates for overlap or source congregation: " + _strCB_Desc, signOutToLogIn = false });

                }




                /// save...
                var _reset = _oChangesMPB.Id == 0;
                _oChangesMPB.LastMod = tm;
                _oChangesMPB.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged; 

                // tracker .. error!                
                if (_oChangesMPB.AppGlobalOwner != null) _oChangesMPB.AppGlobalOwner = null; if (_oChangesMPB.AppGlobalOwner != null) _oChangesMPB.ChurchBody = null;
                ///
                if (_oChangesMPB.Id == 0)
                {
                    _oChangesMPB.Created = tm;
                    _oChangesMPB.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberProfessionBrand.Add(_oChangesMPB);

                    _userTask = "Added profession /brand details of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member profession /brand added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberProfessionBrand.Update(_oChangesMPB);

                    _userTask = "Member profession /brand of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member profession /brand updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();


                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );



                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMPB.ChurchBodyId, currCMId = _oChangesMPB.ChurchMemberId, currId = _oChangesMPB.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMPB.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }
         

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MWE(MemberWorkExperienceModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Profession/Brand";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberWorkExperience == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberWorkExperience _oChangesMWE = vm.oMemberWorkExperience;


            /// check attached CB
            if (_oChangesMWE.AppGlobalOwnerId == null) _oChangesMWE.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMWE.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMWE.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMWE.AppGlobalOwnerId && c.Id == _oChangesMWE.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMWE.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMWE.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMWE.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMWE.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            var oMWE_Mem = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMWE.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMWE.ChurchBodyId && c.Id == _oChangesMWE.ChurchMemberId).FirstOrDefault();
            if (oMWE_Mem == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMWE.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberWorkExperienceModel>(arrData) : vm;


            if (string.IsNullOrEmpty(_oChangesMWE.WorkRole))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMWE.Id, userMess = "Work role is not specified.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(_oChangesMWE.WorkPlace))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMWE.Id, userMess = "Please specify the workplace for the role indicated.", signOutToLogIn = false });

            if (_oChangesMWE.FromDate != null)
            {
                if (_oChangesMWE.FromDate != null)
                    if (_oChangesMWE.FromDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMWE.Id, userMess = "Date commenced cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }

            if (_oChangesMWE.ToDate != null)
            {
                if (_oChangesMWE.ToDate != null)
                    if (_oChangesMWE.ToDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMWE.Id, userMess = "Date completed cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }

            if (_oChangesMWE.FromDate != null && _oChangesMWE.ToDate != null)
            {
                if (_oChangesMWE.FromDate != null && _oChangesMWE.ToDate != null)
                {
                    if (_oChangesMWE.FromDate.Value > _oChangesMWE.ToDate.Value)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMWE.Id, userMess = "Date commenced cannot be later than date completed. Leave it blank if unknown", signOutToLogIn = false });
                }
            }
             

            try
            {
                ModelState.Remove("oMemberWorkExperience.AppGlobalOwnerId");
                ModelState.Remove("oMemberWorkExperience.ChurchBodyId");
                ModelState.Remove("oMemberWorkExperience.OwnedByChurchBodyId");
                ModelState.Remove("oMemberWorkExperience.ChurchMemberId");

                ModelState.Remove("oMemberWorkExperience.CreatedByUserId");
                ModelState.Remove("oMemberWorkExperience.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMWE.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });


                _oChangesMWE.LastMod = DateTime.Now;
                _oChangesMWE.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                var tm = DateTime.Now;
                _oChangesMWE.LastMod = tm;
                _oChangesMWE.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                //validate...
                var _strMemFullName = GetConcatMemberName(oMWE_Mem.Title, oMWE_Mem.FirstName, oMWE_Mem.MiddleName, oMWE_Mem.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving member work experience " + (!string.IsNullOrEmpty(_strMemFullName) ? " [of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                ///// dups...
                /////
                //var oMWEList = _context.MemberWorkExperience.AsNoTracking() //.Include(t => t.InstitutionType_NVP).Include(t => t.CertificateType_NVP)
                //    .Where(c => c.AppGlobalOwnerId == _oChangesMWE.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMWE.ChurchBodyId && c.ChurchMemberId == _oChangesMWE.ChurchMemberId &&
                //                (((!string.IsNullOrEmpty(c.WorkRole) ? c.WorkPlace : "").Trim().ToLower() == (!string.IsNullOrEmpty(_oChangesMWE.WorkRole) ? _oChangesMWE.WorkPlace : "").Trim().ToLower()) &&
                //                ((!string.IsNullOrEmpty(c.WorkRole) ? c.WorkRole : "").Trim().ToLower() == (!string.IsNullOrEmpty(_oChangesMWE.WorkPlace) ? _oChangesMWE.WorkRole : "").Trim().ToLower()) &&
                //                 (
                //                     (_oChangesMWE.FromDate.Value <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMWE.ToDate.Value >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMWE.FromDate.Value <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMWE.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMWE.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && _oChangesMWE.ToDate.Value >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMWE.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMWE.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                //                 ))
                //                ).ToList();

                //if (_oChangesMWE.Id > 0)
                //    oMWEList = oMWEList.Where(c => c.Id != _oChangesMWE.Id).ToList();
                /////
                //var oMWE = oMWEList.FirstOrDefault();

                //if (oMWE != null)
                //{
                //    var _strWork = oMWE.WorkRole; 
                //    _strWork += (!string.IsNullOrEmpty(oMWE.WorkPlace) ? " (" + oMWE.WorkPlace + ")" : "");

                //    return Json(new { taskSuccess = false, oCurrId = _oChangesMWE.Id, userMess = "Specified work experience, " + _strWork + " seems to exist. Check the dates for overlap)", signOutToLogIn = false });
                //}





                /// dups...
                ///
                var oMWEList_Dup = _context.MemberWorkExperience.AsNoTracking() .Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                    .Where(c => c.AppGlobalOwnerId == _oChangesMWE.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMWE.ChurchBodyId && c.ChurchMemberId == _oChangesMWE.ChurchMemberId && 
                                    ((!string.IsNullOrEmpty(c.WorkRole) ? c.WorkRole : "").Trim().ToLower() == (!string.IsNullOrEmpty(_oChangesMWE.WorkRole) ? _oChangesMWE.WorkRole : "").Trim().ToLower()) && 
                                    ((!string.IsNullOrEmpty(c.WorkPlace) ? c.WorkPlace : "").Trim().ToLower() == (!string.IsNullOrEmpty(_oChangesMWE.WorkPlace) ? _oChangesMWE.WorkPlace : "").Trim().ToLower())
                                    ).ToList();

                if (_oChangesMWE.FromDate != null && _oChangesMWE.ToDate != null)
                {
                    oMWEList_Dup = oMWEList_Dup.Where(c =>
                                         ((_oChangesMWE.FromDate != null ? _oChangesMWE.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMWE.ToDate != null ? _oChangesMWE.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMWE.FromDate != null ? _oChangesMWE.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMWE.ToDate != null ? _oChangesMWE.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMWE.FromDate != null ? _oChangesMWE.FromDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && (_oChangesMWE.ToDate != null ? _oChangesMWE.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMWE.FromDate != null ? _oChangesMWE.FromDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMWE.ToDate != null ? _oChangesMWE.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                                          ).ToList();
                }
                else if (_oChangesMWE.FromDate != null && _oChangesMWE.ToDate == null)
                    oMWEList_Dup = oMWEList_Dup.Where(c => _oChangesMWE.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMWE.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();

                else if (_oChangesMWE.ToDate != null && _oChangesMWE.FromDate == null)
                    oMWEList_Dup = oMWEList_Dup.Where(c => _oChangesMWE.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMWE.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();


                /// exclude current...
                if (_oChangesMWE.Id > 0)
                    oMWEList_Dup = oMWEList_Dup.Where(c => c.Id != _oChangesMWE.Id).ToList();
                ///
                var oMWE_Dup = oMWEList_Dup.FirstOrDefault();

                if (oMWE_Dup != null)
                {
                    var _strMWE_Dup = oMWE_Dup.WorkRole + (!string.IsNullOrEmpty(oMWE_Dup.WorkPlace) ? " (" + oMWE_Dup.WorkPlace + ")" : "");   // Programmer (Rhema Systems)
                    ///
                    var _strCB_Desc = oMWE_Dup.ChurchBody != null ? oMWE_Dup.ChurchBody.Name : "Congregation";
                    var _strCB_CLDesc = oMWE_Dup.ChurchBody != null ? (oMWE_Dup.ChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(oMWE_Dup.ChurchBody.ChurchLevel.CustomName) ? " (" + oMWE_Dup.ChurchBody.ChurchLevel.CustomName + ")" : " (" + oMWE_Dup.ChurchBody.ChurchLevel.Name + ")") : "") : "";
                    _strCB_Desc += _strCB_CLDesc;
                    /// 
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMWE.Id, userMess = "Specified member education " + _strMWE_Dup + " seems to exist. Check the dates for overlap or source congregation: " + _strCB_Desc, signOutToLogIn = false });

                }





                /// save...
                var _reset = _oChangesMWE.Id == 0;
                _oChangesMWE.LastMod = tm;
                _oChangesMWE.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged; 

                // tracker .. error!                
                if (_oChangesMWE.AppGlobalOwner != null) _oChangesMWE.AppGlobalOwner = null; if (_oChangesMWE.AppGlobalOwner != null) _oChangesMWE.ChurchBody = null;
                ///
                if (_oChangesMWE.Id == 0)
                {
                    _oChangesMWE.Created = tm;
                    _oChangesMWE.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberWorkExperience.Add(_oChangesMWE);

                    _userTask = "Added work experience of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member work experience added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberWorkExperience.Update(_oChangesMWE);

                    _userTask = "Member work experience of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member work experience updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();


                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );



                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMWE.ChurchBodyId, currCMId = _oChangesMWE.ChurchMemberId, currId = _oChangesMWE.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMWE.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }



        //churchlife...

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MCL(MemberChurchlifeModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Type";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberChurchlife == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberChurchlife _oChangesMCL = vm.oMemberChurchlife;


            /// check attached CB
            if (_oChangesMCL.AppGlobalOwnerId == null) _oChangesMCL.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMCL.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCL.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMCL.AppGlobalOwnerId && c.Id == _oChangesMCL.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCL.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCL.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMCL.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCL.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            var oMCL_Mem = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMCL.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCL.ChurchBodyId && c.Id == _oChangesMCL.ChurchMemberId).FirstOrDefault();
            if (oMCL_Mem == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCL.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberChurchlifeModel>(arrData) : vm;


            if (_oChangesMCL.ChurchBodyServiceId != null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCL.Id, userMess = "Member preferred service is not specified. Hint: Every member need have a service he/she attends.", signOutToLogIn = false });

            if (_oChangesMCL.DateJoined != null)
            {
                if (_oChangesMCL.DateJoined != null)
                    if (_oChangesMCL.DateJoined.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCL.Id, userMess = "Date member joined congregation cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }

            if (_oChangesMCL.DateDeparted != null)
            {
                if (_oChangesMCL.DateDeparted != null)
                    if (_oChangesMCL.DateDeparted.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCL.Id, userMess = "Date left the congregation cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }

            if (_oChangesMCL.DateJoined != null && _oChangesMCL.DateDeparted != null)
            {
                if (_oChangesMCL.DateJoined != null && _oChangesMCL.DateDeparted != null)
                {
                    if (_oChangesMCL.DateJoined.Value > _oChangesMCL.DateDeparted.Value)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCL.Id, userMess = "Date joined cannot be later than date member departed. Leave it blank if unknown", signOutToLogIn = false });
                }
            }

            try
            {
                ModelState.Remove("oMemberChurchlife.AppGlobalOwnerId");
                ModelState.Remove("oMemberChurchlife.ChurchBodyId");
                ModelState.Remove("oMemberChurchlife.ChurchMemberId");

                ModelState.Remove("oMemberChurchlife.ChurchBodyServiceId");

                ModelState.Remove("oMemberChurchlife.CreatedByUserId");
                ModelState.Remove("oMemberChurchlife.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCL.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });
                 
                //validate...
                var _strMemFullName = GetConcatMemberName(oMCL_Mem.Title, oMCL_Mem.FirstName, oMCL_Mem.MiddleName, oMCL_Mem.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving member churchlife " + (!string.IsNullOrEmpty(_strMemFullName) ? "[of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                // let's save now...
                /// 
                string uniqueFileName = null;
                var oFormFile = vm.PhotoFile_CL;
                if (oFormFile != null && oFormFile.Length > 0)
                {
                    string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");  //~/frontend/dist/img_db
                    uniqueFileName = Guid.NewGuid().ToString() + "_" + oFormFile.FileName;
                    string filePath = Path.Combine(uploadFolder, uniqueFileName);
                    oFormFile.CopyTo(new FileStream(filePath, FileMode.Create));
                }

                else
                    if (_oChangesMCL.Id != 0) uniqueFileName = _oChangesMCL.ChurchlifePhotoUrl;

                _oChangesMCL.ChurchlifePhotoUrl = uniqueFileName;
                ///

                /// save...
                var tm = DateTime.Now;
                var _reset = _oChangesMCL.Id == 0;
                _oChangesMCL.LastMod = tm;
                _oChangesMCL.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged; 

                // tracker .. error!                
                if (_oChangesMCL.AppGlobalOwner != null) _oChangesMCL.AppGlobalOwner = null; if (_oChangesMCL.AppGlobalOwner != null) _oChangesMCL.ChurchBody = null;
                ///
                if (_oChangesMCL.Id == 0)
                {
                    _oChangesMCL.Created = tm;
                    _oChangesMCL.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberChurchlife.Add(_oChangesMCL);

                    _userTask = "Added member churchlife " + (!string.IsNullOrEmpty(_strMemFullName) ? "[ for member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member churchlife added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberChurchlife.Update(_oChangesMCL);

                    _userTask = "Member churchlife " + (!string.IsNullOrEmpty(_strMemFullName) ? "[for member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member churchlife updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();


                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );



                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMCL.ChurchBodyId, currCMId = _oChangesMCL.ChurchMemberId, currId = _oChangesMCL.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCL.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MCLAc(MemberChurchlifeActivityModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Churchlife Activity";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberChurchlifeActivity == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberChurchlifeActivity _oChangesMCLAc = vm.oMemberChurchlifeActivity;


            /// check attached CB
            if (_oChangesMCLAc.AppGlobalOwnerId == null) _oChangesMCLAc.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMCLAc.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMCLAc.AppGlobalOwnerId && c.Id == _oChangesMCLAc.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMCLAc.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            var oMCLAc_Mem = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMCLAc.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCLAc.ChurchBodyId && c.Id == _oChangesMCLAc.ChurchMemberId).FirstOrDefault();
            if (oMCLAc_Mem == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberChurchlifeActivityModel>(arrData) : vm;


            if (_oChangesMCLAc.ChurchlifeActivityId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Member churchlife activity is not specified.", signOutToLogIn = false });

            if (_oChangesMCLAc.HostVenueScope != "E" && _oChangesMCLAc.VenueChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Host venue (congregation) not specified. Hint: use external option if unknown", signOutToLogIn = false });

            //// warn!
            //if (_oChangesMCLAc.HostVenueScope == "E" && string.IsNullOrEmpty(_oChangesMCLAc.OfficiatingVenueExt))
            //    return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Host venue (external place) not specified.", signOutToLogIn = false });

            if (_oChangesMCLAc.OfficiatedByScope != "E" && (_oChangesMCLAc.OfficiatedByChurchBodyId == null || _oChangesMCLAc.OfficiatedByChurchMemberId == null))  // MemberChurchRoleId
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Officiating person must be specified. Hint: use external option if unknown", signOutToLogIn = false });

            //// warn!
            //if (_oChangesMCLAc.HostVenueScope == "E" && (string.IsNullOrEmpty(_oChangesMCLAc.OfficiatedByNameExt) || string.IsNullOrEmpty(_oChangesMCLAc.OfficiatedByRoleExt)))
            //    return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Host venue (external place) not specified.", signOutToLogIn = false });

            if (_oChangesMCLAc.EventDate != null)
            {
                if (_oChangesMCLAc.EventDate != null)
                    if (_oChangesMCLAc.EventDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Churchlife activity date cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }

            if (_oChangesMCLAc.IsChurchEvent && _oChangesMCLAc.ChurchEventId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Event connected to member activity must be specified else uncheck Church event.", signOutToLogIn = false });
                
            if (_oChangesMCLAc.ChurchEventId != null)
            {
                var oCCE_MCLAc = _context.ChurchCalendarEvent.AsNoTracking().Where(c => c.Id==_oChangesMCLAc.ChurchEventId && c.AppGlobalOwnerId == _oChangesMCLAc.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCLAc.ChurchBodyId).FirstOrDefault();
                if (oCCE_MCLAc == null)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Calendar event specified could not be verified. Try again else uncheck Church event.", signOutToLogIn = false });
            
                if (oCCE_MCLAc.EventFrom != null && oCCE_MCLAc.EventTo == null)
                {
                    if (oCCE_MCLAc.EventFrom != _oChangesMCLAc.EventDate)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Calendar event date specified and activity date specified differ. Hint: You may uncheck Church event.", signOutToLogIn = false });
                }
                else if (oCCE_MCLAc.EventFrom == null && oCCE_MCLAc.EventTo != null)
                {
                    if (oCCE_MCLAc.EventFrom != _oChangesMCLAc.EventDate)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Calendar event date and activity date specified differ. Hint: You may uncheck Church event.", signOutToLogIn = false });
                }
                else if (oCCE_MCLAc.EventFrom != null && oCCE_MCLAc.EventTo != null)
                {
                    if (!(oCCE_MCLAc.EventFrom >= _oChangesMCLAc.EventDate &&  _oChangesMCLAc.EventDate <= oCCE_MCLAc.EventTo))
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Activity date specified fall outside the attached calendar event date range. Hint: You may uncheck Church event.", signOutToLogIn = false });
                }
            }
        


            try
            {
                ModelState.Remove("oMemberChurchlifeActivity.AppGlobalOwnerId");
                ModelState.Remove("oMemberChurchlifeActivity.ChurchBodyId");
                ModelState.Remove("oMemberChurchlifeActivity.ChurchMemberId");
                ModelState.Remove("oMemberChurchlifeActivity.VenueChurchBodyId");
                ModelState.Remove("oMemberChurchlifeActivity.OfficiatedByChurchBodyId");
                ModelState.Remove("oMemberChurchlifeActivity.OfficiatedByChurchMemberId");
                ModelState.Remove("oMemberChurchlifeActivity.MemberChurchRoleId");

                ModelState.Remove("oMemberChurchlifeActivity.CreatedByUserId");
                ModelState.Remove("oMemberChurchlifeActivity.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });

 
                //validate...
                var _strMemFullName = GetConcatMemberName(oMCLAc_Mem.Title, oMCLAc_Mem.FirstName, oMCLAc_Mem.MiddleName, oMCLAc_Mem.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving member churchlife activity " + (!string.IsNullOrEmpty(_strMemFullName) ? "[of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                /// dups...
                ///
                var oMCLAcList = _context.MemberChurchlifeActivity.AsNoTracking().Include(t => t.ChurchlifeActivity) //.Include(t => t.CertificateType_NVP)
                    .Where(c => c.AppGlobalOwnerId == _oChangesMCLAc.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCLAc.ChurchBodyId && c.ChurchMemberId == _oChangesMCLAc.ChurchMemberId &&
                                c.ChurchlifeActivityId == _oChangesMCLAc.ChurchlifeActivityId && ((c.EventDate != null && _oChangesMCLAc.EventDate != null ? c.EventDate == _oChangesMCLAc.EventDate : false)|| c.ChurchEventId == _oChangesMCLAc.ChurchEventId) 
                                ).ToList();

                if (_oChangesMCLAc.Id > 0)
                    oMCLAcList = oMCLAcList.Where(c => c.Id != _oChangesMCLAc.Id).ToList();
                ///
                var oMCLAc = oMCLAcList.FirstOrDefault();

                if (oMCLAc != null)
                {
                    var _strMCLAcDup = oMCLAc.ChurchlifeActivity != null ? oMCLAc.ChurchlifeActivity.NVPValue : "";
                    /// _strMCLAcDup += (!string.IsNullOrEmpty(_strCert) ? " (" + _strCert + ")" : "");
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Specified churchlife activity, " + _strMCLAcDup + " seems to exist. Check the dates for overlap", signOutToLogIn = false });
                }


                /// 
                string uniqueFileName = null;
                var oFormFile = vm.PhotoFile_CLA;
                if (oFormFile != null && oFormFile.Length > 0)
                {
                    string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");  //~/frontend/dist/img_db
                    uniqueFileName = Guid.NewGuid().ToString() + "_" + oFormFile.FileName;
                    string filePath = Path.Combine(uploadFolder, uniqueFileName);
                    oFormFile.CopyTo(new FileStream(filePath, FileMode.Create));
                }

                else
                    if (_oChangesMCLAc.Id != 0) uniqueFileName = _oChangesMCLAc.EventPhotoUrl;

                _oChangesMCLAc.EventPhotoUrl = uniqueFileName;
                ///


                if (_oChangesMCLAc.HostVenueScope == "E") 
                    _oChangesMCLAc.VenueChurchBodyId = null;
                else 
                    _oChangesMCLAc.OfficiatingVenueExt = null;

                if (_oChangesMCLAc.OfficiatedByScope == "E") 
                { _oChangesMCLAc.OfficiatedByChurchBodyId = null;  _oChangesMCLAc.OfficiatedByChurchMemberId = null; }
                else
                { _oChangesMCLAc.OfficiatedByNameExt = null; _oChangesMCLAc.OfficiatedByRoleExt = null; }

                /// save...
                var tm = DateTime.Now;
                var _reset = _oChangesMCLAc.Id == 0;
                _oChangesMCLAc.LastMod = tm;
                _oChangesMCLAc.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged; 

                // tracker .. error!                
                if (_oChangesMCLAc.AppGlobalOwner != null) _oChangesMCLAc.AppGlobalOwner = null; if (_oChangesMCLAc.AppGlobalOwner != null) _oChangesMCLAc.ChurchBody = null;
                ///
                if (_oChangesMCLAc.Id == 0)
                {
                    _oChangesMCLAc.Created = tm;
                    _oChangesMCLAc.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberChurchlifeActivity.Add(_oChangesMCLAc);

                    _userTask = "Added churchlife activity " + (!string.IsNullOrEmpty(_strMemFullName) ? "[ for member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Churchlife activity added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberChurchlifeActivity.Update(_oChangesMCLAc);

                    _userTask = "Churchlife activity " + (!string.IsNullOrEmpty(_strMemFullName) ? "[for member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member churchlife activity updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();


                /// MCET
                //// church activity added!  ... auto create all the MCET for this activity and assign Pending status... [ P-I-W-C ] allow tasks to be waived anyways!
                ///
                  
                List<MemberChurchlifeEventTask> oMCETList = new List<MemberChurchlifeEventTask>();

                /// the definition list to be picked from...  strNVPCode = "CLA";    // c.Id != oCurrNVP.Id  
                var oCLARDList = _context.AppUtilityNVP.AsNoTracking().Include(t => t.OwnedByChurchBody) //.Include(t => t.AppGlobalOwner) //
                                                   .Where(c => c.AppGlobalOwnerId == _oChangesMCLAc.AppGlobalOwnerId &&
                                                   c.NVPCode == "CLARD" && c.NVPCategoryId == _oChangesMCLAc.ChurchlifeActivityId).ToList();

                oCLARDList = oCLARDList.Where(c =>
                                    (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))
                                   )
                                    .OrderBy(c => c.OrderIndex)
                                    .ToList();

                //var oAppProStepList = _context.ChurchlifeActivityReqDef.Include(t => t.ChurchBody) 
                //    .Where(c => c.ChurchBody.AppGlobalOwnerId == _oChangesMCLAc.AppGlobalOwnerId &&  
                //        c.ApprovalProcess.ChurchLevelId == oMemTransf.RequestorChurchBody.ChurchLevelId &&
                //        c.ApprovalProcess.ProcessCode == "TRF_OT" && c.ApprovalProcess.ProcessSubCode == "MT" && c.ApprovalProcess.ProcessStatus == "A" && c.StepStatus == "A")
                //    .ToList();

                //create approval action... at least  one approval level
                if (oCLARDList.Count > 0)
                {
                    //oMCETList.Add(
                    //    new ApprovalAction
                    //    {
                    //            //Id = 0,
                    //            ChurchBodyId = oMemTransf.RequestorChurchBodyId,
                    //        ChurchBody = oMemTransf.RequestorChurchBody,
                    //        ApprovalActionDesc = "Outgoing Member Transfer",
                    //        ActionStatus = "P",  //Acknowledgement sets it into... ie. the 1st Step[i]... In Progress. leaves remaining Pending until successful Approval
                    //            ProcessCode = "TRF",
                    //        ProcessSubCode = "MT",
                    //        ApprovalProcessId = oAppProStepList.FirstOrDefault().ApprovalProcessId,
                    //        ApprovalProcess = oAppProStepList.FirstOrDefault().ApprovalProcess,
                    //        CallerRefId = oMemTransf.Id,  //reference to the Transfer details
                    //            CurrentScope = "I",
                    //        Status = "A",
                    //            //ActionDate = null,
                    //            //Comments = "",
                    //            ActionRequestDate = DateTime.Now,
                    //        Created = DateTime.Now,
                    //        LastMod = DateTime.Now
                    //    });

                    //if (oAppActionList.Count > 0)
                    //    _context.Add(oAppActionList.FirstOrDefault());

                    //create oMCET steps
                    var stepIndexLowest = oCLARDList[0].OrderIndex;
                    foreach (AppUtilityNVP oCLARD_NVP in oCLARDList)
                    {
                        //var oCurrApprover = _context.MemberLeaderRole.Where(c => c.ChurchBodyId == oMemTransf.RequestorChurchBodyId && c.LeaderRoleId == oAppProStep.ApproverLeaderRoleId && c.IsCurrServing == true && c.IsCoreRole == true).FirstOrDefault();
                        //if (oCurrApprover == null)
                        //{
                        //    // ModelState.AddModelError(string.Empty, "Approver not available for configured approval flow step. Verify and try again.");
                        //    return Json(new { taskSuccess = false, userMess = "Approver not available for configured approval flow step. Verify and try again." });
                        //}

                        // check MCET does not exist
                        ///
                        var oMCETList_Dup = _context.MemberChurchlifeEventTask.AsNoTracking()
                                                //.Include(t => t.ActivityRequirementDef)
                                                //.Include(t => t.MemberChurchlifeActivity).ThenInclude(t => t.ChurchlifeActivity)
                                                //.Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                                            .Where(c => c.AppGlobalOwnerId == _oChangesMCLAc.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCLAc.ChurchBodyId && c.ChurchMemberId == _oChangesMCLAc.ChurchMemberId &&
                                                        c.RequirementDefId == oCLARD_NVP.Id && c.MemberChurchlifeActivityId == _oChangesMCLAc.Id).ToList();

                        if (oMCETList_Dup.Count == 0)
                        {
                            stepIndexLowest = oCLARD_NVP.OrderIndex < stepIndexLowest ? oCLARD_NVP.OrderIndex : stepIndexLowest;
                            ///
                            oMCETList.Add(

                                new MemberChurchlifeEventTask()
                                {
                                    AppGlobalOwnerId = _oChangesMCLAc.AppGlobalOwnerId,
                                    ChurchBodyId = _oChangesMCLAc.ChurchBodyId,
                                    ChurchMemberId = _oChangesMCLAc.ChurchMemberId,
                                    MemberChurchlifeActivityId = _oChangesMCLAc.Id,
                                    RequirementDefId = oCLARD_NVP.Id, 
                                    TaskStatus = "P",   // Pending
                                    SharingStatus = "A",
                                    DateCommenced = _oChangesMCLAc.EventDate != null ? _oChangesMCLAc.EventDate : tm,
                                   // DateCompleted = DateTime.Now
                                    Created = tm,
                                    LastMod = tm,
                                    CreatedByUserId = this._oLoggedUser.Id,
                                    LastModByUserId = this._oLoggedUser.Id
                                });
                        } 
                    }

                    foreach (MemberChurchlifeEventTask oMCET in oMCETList)
                    {
                        oMCET.IsCurrentTask = oMCET.OrderIndex <= stepIndexLowest;  //concurrent will be handled  
                        _context.Add(oMCET);                                              
                    }

                    // save the batch of MCET
                    if (oMCETList.Count > 0) _context.SaveChanges();
                }

                 


                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));

               /// var _connstr = AppUtilties.GetNewDBConnString_MS(_configuration);  ///  this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr
                
                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );



                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMCLAc.ChurchBodyId, currCMId = _oChangesMCLAc.ChurchMemberId, currId = _oChangesMCLAc.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCLAc.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }



        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MCET(MemberChurchlifeEventTaskModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Churchlife Event Task";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberChurchlifeEventTask == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberChurchlifeEventTask _oChangesMCET = vm.oMemberChurchlifeEventTask;


            /// check attached CB
            if (_oChangesMCET.AppGlobalOwnerId == null) _oChangesMCET.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMCET.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCET.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMCET.AppGlobalOwnerId && c.Id == _oChangesMCET.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCET.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCET.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMCET.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCET.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            var oMCET_Mem = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMCET.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCET.ChurchBodyId && c.Id == _oChangesMCET.ChurchMemberId).FirstOrDefault();
            if (oMCET_Mem == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCET.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberChurchlifeEventTaskModel>(arrData) : vm;


            if (_oChangesMCET.MemberChurchlifeActivityId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCET.Id, userMess = "Please select the member churchlife activity to add the task.", signOutToLogIn = false });

             if (_oChangesMCET.RequirementDefId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCET.Id, userMess = "Please select the churchlife activity definition as the reference to add the task.", signOutToLogIn = false });
              
            if (_oChangesMCET.DateCommenced != null)
            {
                if (_oChangesMCET.DateCommenced != null)
                    if (_oChangesMCET.DateCommenced.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCET.Id, userMess = "Date activity task commenced cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }

            if (_oChangesMCET.DateCompleted != null)
            {
                if (_oChangesMCET.DateCompleted != null)
                    if (_oChangesMCET.DateCompleted.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCET.Id, userMess = "Date activity task completed cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }

            if (_oChangesMCET.DateCommenced != null && _oChangesMCET.DateCompleted != null)
            {
                if (_oChangesMCET.DateCommenced != null && _oChangesMCET.DateCompleted != null)
                {
                    if (_oChangesMCET.DateCommenced.Value > _oChangesMCET.DateCompleted.Value)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCET.Id, userMess = "Date activity task commenced cannot be later than date completed. Leave it blank if unknown", signOutToLogIn = false });
                }
            }


            try
            {
                ModelState.Remove("oMemberChurchlifeEventTask.AppGlobalOwnerId");
                ModelState.Remove("oMemberChurchlifeEventTask.ChurchBodyId");
                ModelState.Remove("oMemberChurchlifeEventTask.ChurchMemberId");
                ModelState.Remove("oMemberChurchlifeEventTask.VenueChurchBodyId");
                ModelState.Remove("oMemberChurchlifeEventTask.OfficiatedByChurchBodyId");
                ModelState.Remove("oMemberChurchlifeEventTask.OfficiatedByChurchMemberId");
                ModelState.Remove("oMemberChurchlifeEventTask.MemberChurchRoleId");

                ModelState.Remove("oMemberChurchlifeEventTask.CreatedByUserId");
                ModelState.Remove("oMemberChurchlifeEventTask.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCET.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });


                //validate...
                var _strMemFullName = GetConcatMemberName(oMCET_Mem.Title, oMCET_Mem.FirstName, oMCET_Mem.MiddleName, oMCET_Mem.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving member churchlife event task " + (!string.IsNullOrEmpty(_strMemFullName) ? "[of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                ///// dups...
                /////
                //var oMCETList = _context.MemberChurchlifeEventTask.AsNoTracking().Include(t => t.ActivityRequirementDef).Include(t => t.MemberChurchlifeActivity).ThenInclude(t => t.ChurchlifeActivity)
                //    .Where(c => c.AppGlobalOwnerId == _oChangesMCET.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCET.ChurchBodyId && c.ChurchMemberId == _oChangesMCET.ChurchMemberId &&
                //                c.MemberChurchlifeActivityId == _oChangesMCET.MemberChurchlifeActivityId &&
                //                     (
                //                     (_oChangesMCET.DateCompleted.Value <= (c.DateCompleted != null ? c.DateCompleted.Value : (DateTime?)null) && _oChangesMCET.DateCommenced.Value >= (c.DateCommenced != null ? c.DateCommenced.Value : (DateTime?)null)) ||
                //                     (_oChangesMCET.DateCompleted.Value <= (c.DateCompleted != null ? c.DateCompleted.Value : (DateTime?)null) && _oChangesMCET.DateCommenced.Value >= (c.DateCompleted != null ? c.DateCompleted.Value : (DateTime?)null)) ||
                //                     (_oChangesMCET.DateCompleted.Value <= (c.DateCommenced != null ? c.DateCommenced.Value : (DateTime?)null) && _oChangesMCET.DateCommenced.Value >= (c.DateCommenced != null ? c.DateCommenced.Value : (DateTime?)null)) ||
                //                     (_oChangesMCET.DateCompleted.Value >= (c.DateCompleted != null ? c.DateCompleted.Value : (DateTime?)null) && _oChangesMCET.DateCommenced.Value <= (c.DateCommenced != null ? c.DateCommenced.Value : (DateTime?)null))
                //                 )
                //                ).ToList();

                //if (_oChangesMCET.Id > 0)
                //    oMCETList = oMCETList.Where(c => c.Id != _oChangesMCET.Id).ToList();
                /////
                //var oMCET = oMCETList.FirstOrDefault();

                //if (oMCET != null)
                //{
                //    var _strMCETDup_Task = oMCET.ActivityRequirementDef != null ? oMCET.ActivityRequirementDef.NVPValue : "";
                //    var _strMCETDup_CLA = oMCET.MemberChurchlifeActivity != null ? (oMCET.MemberChurchlifeActivity.ChurchlifeActivity != null ? oMCET.MemberChurchlifeActivity.ChurchlifeActivity.NVPValue : "") : ""; 
                //    return Json(new { taskSuccess = false, oCurrId = _oChangesMCET.Id, userMess = "Specified churchlife event task, " + _strMCETDup_Task + " seems to exist [for: " + _strMCETDup_CLA + "]. Hint: Check the dates for overlap)", signOutToLogIn = false });
                //}




                /// dups...
                ///
                var oMCETList_Dup = _context.MemberChurchlifeEventTask.AsNoTracking()
                                                .Include(t => t.ActivityRequirementDef)
                                                .Include(t => t.MemberChurchlifeActivity).ThenInclude(t => t.ChurchlifeActivity)
                                                .Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                    .Where(c => c.AppGlobalOwnerId == _oChangesMCET.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCET.ChurchBodyId && c.ChurchMemberId == _oChangesMCET.ChurchMemberId &&
                                c.RequirementDefId == _oChangesMCET.RequirementDefId && c.MemberChurchlifeActivityId == _oChangesMCET.MemberChurchlifeActivityId).ToList();

                if (_oChangesMCET.DateCommenced != null && _oChangesMCET.DateCompleted != null)
                {
                    oMCETList_Dup = oMCETList_Dup.Where(c =>
                                         ((_oChangesMCET.DateCommenced != null ? _oChangesMCET.DateCommenced.Value : (DateTime?)null) <= (c.DateCommenced != null ? c.DateCommenced.Value : (DateTime?)null) && (_oChangesMCET.DateCompleted != null ? _oChangesMCET.DateCompleted.Value : (DateTime?)null) >= (c.DateCompleted != null ? c.DateCompleted.Value : (DateTime?)null)) ||
                                         ((_oChangesMCET.DateCommenced != null ? _oChangesMCET.DateCommenced.Value : (DateTime?)null) <= (c.DateCommenced != null ? c.DateCommenced.Value : (DateTime?)null) && (_oChangesMCET.DateCompleted != null ? _oChangesMCET.DateCompleted.Value : (DateTime?)null) >= (c.DateCommenced != null ? c.DateCommenced.Value : (DateTime?)null)) ||
                                         ((_oChangesMCET.DateCommenced != null ? _oChangesMCET.DateCommenced.Value : (DateTime?)null) <= (c.DateCompleted != null ? c.DateCompleted.Value : (DateTime?)null) && (_oChangesMCET.DateCompleted != null ? _oChangesMCET.DateCompleted.Value : (DateTime?)null) >= (c.DateCompleted != null ? c.DateCompleted.Value : (DateTime?)null)) ||
                                         ((_oChangesMCET.DateCommenced != null ? _oChangesMCET.DateCommenced.Value : (DateTime?)null) >= (c.DateCommenced != null ? c.DateCommenced.Value : (DateTime?)null) && (_oChangesMCET.DateCompleted != null ? _oChangesMCET.DateCompleted.Value : (DateTime?)null) <= (c.DateCompleted != null ? c.DateCompleted.Value : (DateTime?)null))
                                          ).ToList();
                }
                else if (_oChangesMCET.DateCommenced != null && _oChangesMCET.DateCompleted == null)
                    oMCETList_Dup = oMCETList_Dup.Where(c => _oChangesMCET.DateCommenced.Value >= (c.DateCommenced != null ? c.DateCommenced.Value : (DateTime?)null) && _oChangesMCET.DateCommenced.Value <= (c.DateCompleted != null ? c.DateCompleted.Value : (DateTime?)null)).ToList();

                else if (_oChangesMCET.DateCompleted != null && _oChangesMCET.DateCommenced == null)
                    oMCETList_Dup = oMCETList_Dup.Where(c => _oChangesMCET.DateCompleted.Value >= (c.DateCommenced != null ? c.DateCommenced.Value : (DateTime?)null) && _oChangesMCET.DateCompleted.Value <= (c.DateCompleted != null ? c.DateCompleted.Value : (DateTime?)null)).ToList();


                /// exclude current...
                if (_oChangesMCET.Id > 0)
                    oMCETList_Dup = oMCETList_Dup.Where(c => c.Id != _oChangesMCET.Id).ToList();
                ///
                var oMCET_Dup = oMCETList_Dup.FirstOrDefault();

                if (oMCET_Dup != null)
                {
                    var _strMCET_Dup = (oMCET_Dup.ActivityRequirementDef != null ? " (" + oMCET_Dup.ActivityRequirementDef.NVPValue + ")" : "") + 
                                     (oMCET_Dup.MemberChurchlifeActivity != null ? (oMCET_Dup.MemberChurchlifeActivity.ChurchlifeActivity != null ? " (" + oMCET_Dup.MemberChurchlifeActivity.ChurchlifeActivity.NVPValue + ")" : "") : "");
                    ///
                    var _strCB_Desc = oMCET_Dup.ChurchBody != null ? oMCET_Dup.ChurchBody.Name : "Congregation";
                    var _strCB_CLDesc = oMCET_Dup.ChurchBody != null ? (oMCET_Dup.ChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(oMCET_Dup.ChurchBody.ChurchLevel.CustomName) ? " (" + oMCET_Dup.ChurchBody.ChurchLevel.CustomName + ")" : " (" + oMCET_Dup.ChurchBody.ChurchLevel.Name + ")") : "") : "";
                    _strCB_Desc += _strCB_CLDesc;
                     ///
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCET.Id, userMess = "Specified member church activity task " + _strMCET_Dup + " seems to exist. Check the dates for overlap or source congregation: " + _strCB_Desc, signOutToLogIn = false });

                }



                /// save... 
                /// 
                string uniqueFileName = null;
                var oFormFile = vm.PhotoFile_CET;
                if (oFormFile != null && oFormFile.Length > 0)
                {
                    string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");  //~/frontend/dist/img_db
                    uniqueFileName = Guid.NewGuid().ToString() + "_" + oFormFile.FileName;
                    string filePath = Path.Combine(uploadFolder, uniqueFileName);
                    oFormFile.CopyTo(new FileStream(filePath, FileMode.Create));
                }

                else
                    if (_oChangesMCET.Id != 0) uniqueFileName = _oChangesMCET.PhotoUrl;

                _oChangesMCET.PhotoUrl = uniqueFileName;
                ///

                var tm = DateTime.Now;
                var _reset = _oChangesMCET.Id == 0;
                _oChangesMCET.LastMod = tm;
                _oChangesMCET.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged; 

                // tracker .. error!                
                if (_oChangesMCET.AppGlobalOwner != null) _oChangesMCET.AppGlobalOwner = null; if (_oChangesMCET.AppGlobalOwner != null) _oChangesMCET.ChurchBody = null;
                ///
                if (_oChangesMCET.Id == 0)
                {
                    _oChangesMCET.Created = tm;
                    _oChangesMCET.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberChurchlifeEventTask.Add(_oChangesMCET);

                    _userTask = "Added churchlife event task " + (!string.IsNullOrEmpty(_strMemFullName) ? "[ for member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Churchlife activity added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberChurchlifeEventTask.Update(_oChangesMCET);

                    _userTask = "Churchlife activity " + (!string.IsNullOrEmpty(_strMemFullName) ? "[for member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member churchlife event task updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();



                /// check if MCET tasks === completed and update member to member (C -- congregant)   --- Completed (A) or Waived (C)
                var _oChangesMCETList = _context.MemberChurchlifeEventTask.AsNoTracking() 
                                        .Where(c => c.AppGlobalOwnerId == _oChangesMCET.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCET.ChurchBodyId && c.ChurchMemberId == _oChangesMCET.ChurchMemberId && 
                                        c.MemberChurchlifeActivityId == _oChangesMCET.MemberChurchlifeActivityId ).ToList();

                var _oChangesMCETList_AC = _oChangesMCETList.Where(c => c.TaskStatus == "A" || c.TaskStatus == "C").ToList();
                ///
                if (_oChangesMCETList_AC.Count == _oChangesMCETList.Count)
                {
                    var _sendNotif = false;

                    /// check if made congregant already
                    var oMCET_MT_BDExist = _context.MemberType.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMCET.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCET.ChurchBodyId &&
                                        c.ChurchMemberId == _oChangesMCET.ChurchMemberId && c.IsCurrent == true && c.MemberTypeCode == "C").FirstOrDefault();   /// 
                    if (oMCET_MT_BDExist == null  )
                    {
                        var oMT_List = _context.MemberType.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMCET.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCET.ChurchBodyId &&
                                    c.ChurchMemberId == _oChangesMCET.ChurchMemberId && c.IsCurrent == true).ToList();

                        if (oMT_List.Count > 0)
                        {
                            foreach (var oMT_DCTV in oMT_List)
                            {
                                oMT_DCTV.IsCurrent = false;
                                oMT_DCTV.ToDate = tm;
                                oMT_DCTV.LastMod = tm;
                                oMT_DCTV.LastModByUserId = this._oLoggedUser.Id;

                                _context.MemberType.Update(oMT_DCTV);
                            }

                            _context.SaveChanges();
                        }


                        //GET THE LOWEST TYPE...
                        var oMCET_MT_BD = new MemberType()
                        {
                            AppGlobalOwnerId = _oChangesMCET.AppGlobalOwnerId,
                            ChurchBodyId = _oChangesMCET.ChurchBodyId,
                            ChurchMemberId = (int)_oChangesMCET.ChurchMemberId,
                            MemberTypeCode = "C", /// vm.strMemTypeCode,
                            IsCurrent = true,
                            SharingStatus = "A",
                            FromDate = tm, ///DateTime.Now,
                            // ToDate = DateTime.Now
                            Created = tm,
                            CreatedByUserId = this._oLoggedUser.Id,
                            LastMod = tm,
                            LastModByUserId = this._oLoggedUser.Id,
                        };


                        _context.MemberType.Add(oMCET_MT_BD);

                        /// update member scope --- from E to I
                        /// 
                        oMCET_Mem.MemberScope = "I";
                        oMCET_Mem.LastMod = tm;
                        oMCET_Mem.LastModByUserId = this._oLoggedUser.Id;
                        ///
                        _context.ChurchMember.Update(oMCET_Mem);

                        _context.SaveChanges();
                        _sendNotif = true;
                    }
                     

                    if (_sendNotif)
                    {
                        /// var _strMemFullName = GetConcatMemberName(_oChanges.Title, _oChanges.FirstName, _oChanges.MiddleName, _oChanges.LastName, false, false, false, false, false);
                        ViewBag.MemMsg = "Congratulations! Please your membership has been moved from 'New Convert' to full 'Member' status. The LORD bless you"; // "[" + _strMemFullName + "]" : "") + " successfully.";


                        var lsCMs = new List<ChurchMember>(); lsCMs.Add(oMCET_Mem);
                        var lsCBs = new List<ChurchBody>(); lsCBs.Add(oCM_CB);
                        var lsMess = new List<string>(); lsMess.Add(ViewBag.MemMsg);

                        SendCustomNotification("Membership", lsCBs, lsCMs, lsMess, false, false, true);
                    } 
                }


                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );



                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMCET.ChurchBodyId, currCMId = _oChangesMCET.ChurchMemberId, currId = _oChangesMCET.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCET.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }
         


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MT(MemberTypeModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Type";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberType == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberType _oChangesMT = vm.oMemberType;


            /// check attached CB
            if (_oChangesMT.AppGlobalOwnerId == null) _oChangesMT.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMT.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMT.AppGlobalOwnerId && c.Id == _oChangesMT.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMT.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            var oMT_Mem = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMT.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMT.ChurchBodyId && c.Id == _oChangesMT.ChurchMemberId).FirstOrDefault();
            if (oMT_Mem == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            ///  var oMCL_Mem = _context.MemberChurchlife.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMT.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMT.ChurchBodyId && c.Id == _oChangesMT.ChurchMemberId).FirstOrDefault();


            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberTypeModel>(arrData) : vm;


            if (string.IsNullOrEmpty(_oChangesMT.MemberTypeCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Member type is not specified.", signOutToLogIn = false });

            /// member cannot have more than one current type ---
            /// 
            var oMTList_ACTV = _context.MemberType.AsNoTracking()  /// .Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                   .Where(c => c.AppGlobalOwnerId == _oChangesMT.AppGlobalOwnerId && c.ChurchMemberId == _oChangesMT.ChurchMemberId && c.ChurchBodyId == _oChangesMT.ChurchBodyId &&
                               c.IsCurrent == true ).ToList();

            if (oMTList_ACTV.Count > 1 && _oChangesMT.Id > 0)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Member cannot have multiple member types current or active. Hint: Make others historical.", signOutToLogIn = false });

            if (oMTList_ACTV.Count > 0 && _oChangesMT.Id == 0)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Member cannot have multiple member types current or active. Hint: Make others historical.", signOutToLogIn = false });
             

            if (_oChangesMT.FromDate == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Please specify the date assigned.", signOutToLogIn = false });

            if (_oChangesMT.FromDate != null && _oChangesMT.ToDate != null)
            {
                if (_oChangesMT.FromDate != null && _oChangesMT.ToDate != null)
                {
                    if (_oChangesMT.FromDate.Value > _oChangesMT.ToDate.Value)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Date assigned cannot be later than date ended. Leave it blank if unknown", signOutToLogIn = false });
                }
            }

            var oMCL_Mem = _context.MemberChurchlife.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMT.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMT.ChurchBodyId && c.ChurchMemberId == _oChangesMT.ChurchMemberId).FirstOrDefault();

            if (_oChangesMT.FromDate != null)
            {
                if (_oChangesMT.FromDate != null)
                {
                    if (_oChangesMT.FromDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Date assigned cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });

                    if (oMT_Mem != null)
                        if (_oChangesMT.FromDate.Value < oMT_Mem.DateOfBirth)
                            return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Date assigned cannot be earlier than member date of birth. Leave it blank if unknown", signOutToLogIn = false });

                    if (oMCL_Mem != null)
                    {
                        if (oMCL_Mem.DateJoined != null)
                            if (_oChangesMT.FromDate.Value < oMCL_Mem.DateJoined)
                                return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Date assigned cannot be earlier than date member enrolled. Leave it blank if unknown", signOutToLogIn = false });
                        
                        if (oMCL_Mem.DateDeparted != null)
                            if (_oChangesMT.FromDate.Value < oMCL_Mem.DateDeparted)
                                return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Date assigned cannot be earlier than date member departed. Leave it blank if unknown", signOutToLogIn = false });
                    } 
                }
            }

            if (_oChangesMT.ToDate != null)
            {
                if (_oChangesMT.ToDate != null)
                {
                   if (_oChangesMT.ToDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Date ended cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });

                    if (oMT_Mem != null)
                    {
                        if (_oChangesMT.ToDate.Value < oMT_Mem.DateOfBirth)
                            return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Date assigned cannot be earlier than member date of birth. Leave it blank if unknown", signOutToLogIn = false });
                    }

                    if (oMCL_Mem != null)
                    {
                        if (oMCL_Mem.DateJoined != null)
                            if (_oChangesMT.ToDate.Value < oMCL_Mem.DateJoined)
                                return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Date ended cannot be earlier than date member enrolled. Leave it blank if unknown", signOutToLogIn = false });

                        if (oMCL_Mem.DateDeparted != null)
                            if (_oChangesMT.ToDate.Value < oMCL_Mem.DateDeparted)
                                return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Date ended cannot be earlier than date member departed. Leave it blank if unknown", signOutToLogIn = false });

                    }
                } 
            }


            
            try
            {
                ModelState.Remove("oMemberType.AppGlobalOwnerId");
                ModelState.Remove("oMemberType.ChurchBodyId");
                ModelState.Remove("oMemberType.ChurchMemberId");
                ModelState.Remove("oMemberType.ChurchMemTypeId"); 
                ModelState.Remove("oMemberType.FromDate"); 
                ModelState.Remove("oMemberType.ToDate"); 

                ModelState.Remove("oMemberType.CreatedByUserId");
                ModelState.Remove("oMemberType.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });


                // let's save now...
                  
                //_oChangesMT.LastMod = DateTime.Now;
                //_oChangesMT.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                //var tm = DateTime.Now;
                //_oChangesMT.LastMod = tm;
                //_oChangesMT.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                //validate...
                var _strMemFullName = GetConcatMemberName(oMT_Mem.Title, oMT_Mem.FirstName, oMT_Mem.MiddleName, oMT_Mem.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving member type " + (!string.IsNullOrEmpty(_strMemFullName) ? "[of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                /// dups...
                ///
                var oMTList = _context.MemberType.AsNoTracking().Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                    .Where(c => c.AppGlobalOwnerId == _oChangesMT.AppGlobalOwnerId && c.ChurchMemberId == _oChangesMT.ChurchMemberId && 
                    (c.ChurchBodyId == _oChangesMT.ChurchBodyId || (c.ChurchBodyId != _oChangesMT.ChurchBodyId && c.SharingStatus != "N"))     /// c.MemberTypeCode == _oChangesMT.MemberTypeCode && 
                                 ).ToList(); 

                //oMTList = oMTList.Where(c =>
                //                     ((_oChangesMT.FromDate != null ? _oChangesMT.ToDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMT.ToDate != null ? _oChangesMT.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMT.FromDate != null ? _oChangesMT.ToDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMT.ToDate != null ? _oChangesMT.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMT.FromDate != null ? _oChangesMT.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && (_oChangesMT.ToDate != null ? _oChangesMT.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMT.FromDate != null ? _oChangesMT.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMT.ToDate != null ? _oChangesMT.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                //    ).ToList();


                if (_oChangesMT.FromDate != null && _oChangesMT.ToDate != null)
                {
                    oMTList = oMTList.Where(c =>
                                         ((_oChangesMT.FromDate != null ? _oChangesMT.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMT.ToDate != null ? _oChangesMT.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMT.FromDate != null ? _oChangesMT.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMT.ToDate != null ? _oChangesMT.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMT.FromDate != null ? _oChangesMT.FromDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && (_oChangesMT.ToDate != null ? _oChangesMT.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMT.FromDate != null ? _oChangesMT.FromDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMT.ToDate != null ? _oChangesMT.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                                          ).ToList();
                }
                else if (_oChangesMT.FromDate != null && _oChangesMT.ToDate == null)
                    oMTList = oMTList.Where(c => _oChangesMT.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMT.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList(); 

                else if (_oChangesMT.ToDate != null && _oChangesMT.FromDate == null) 
                    oMTList = oMTList.Where(c => _oChangesMT.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMT.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();

                else if (_oChangesMT.FromDate == null && _oChangesMT.ToDate == null)
                    oMTList = oMTList.Where(c => c.MemberTypeCode == _oChangesMT.MemberTypeCode).ToList();

                /// exclude current...
                if (_oChangesMT.Id > 0)
                    oMTList = oMTList.Where(c => c.Id != _oChangesMT.Id).ToList();
                ///
                var oMT = oMTList.FirstOrDefault();

                if (oMT != null)
                {
                    var _strMTDup = GetMemTypeDesc(oMT.MemberTypeCode);
                    var _strCB_Desc = oMT.ChurchBody != null ? oMT.ChurchBody.Name : "Congregation";  
                    var _strCL_Desc = oMT.ChurchBody != null ? (oMT.ChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(oMT.ChurchBody.ChurchLevel.CustomName) ? oMT.ChurchBody.ChurchLevel.CustomName : oMT.ChurchBody.ChurchLevel.Name) : "") : "";
                    _strCB_Desc = (!string.IsNullOrEmpty(_strCB_Desc) ? _strCB_Desc : "") + (!string.IsNullOrEmpty(_strCL_Desc) ? " (" + _strCL_Desc + ")" : "");

                    return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Specified member type, '" + _strMTDup + "' seems to exist. Check the dates for overlap or source congregation: " + _strCB_Desc, signOutToLogIn = false });
                }


                /// save...
                var _reset = _oChangesMT.Id == 0; var tm = DateTime.Now;
                _oChangesMT.LastMod = tm;
                _oChangesMT.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged; 

                // tracker .. error!                
                if (_oChangesMT.AppGlobalOwner != null) _oChangesMT.AppGlobalOwner = null; if (_oChangesMT.AppGlobalOwner != null) _oChangesMT.ChurchBody = null;
                ///
                if (_oChangesMT.Id == 0)
                {
                    _oChangesMT.Created = tm;
                    _oChangesMT.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberType.Add(_oChangesMT);

                    _userTask = "Added member type " + (!string.IsNullOrEmpty(_strMemFullName) ? "[ for member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member type added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberType.Update(_oChangesMT);

                    _userTask = "Member type " + (!string.IsNullOrEmpty(_strMemFullName) ? "[for member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member type updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();


                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );



                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMT.ChurchBodyId, currCMId = _oChangesMT.ChurchMemberId, currId = _oChangesMT.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMT.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }
         

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MR(MemberRankModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Rank";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberRank == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberRank _oChangesMR = vm.oMemberRank;


            /// check attached CB
            if (_oChangesMR.AppGlobalOwnerId == null) _oChangesMR.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMR.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMR.AppGlobalOwnerId && c.Id == _oChangesMR.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMR.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            var oMR_Mem = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMR.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMR.ChurchBodyId && c.Id == _oChangesMR.ChurchMemberId).FirstOrDefault();
            if (oMR_Mem == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberRankModel>(arrData) : vm;


            if (_oChangesMR.ChurchRankId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Member rank is not specified.", signOutToLogIn = false });


            /// member cannot have more than one current type ---
            /// 
            var oMRList_ACTV = _context.MemberRank.AsNoTracking()  /// .Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                   .Where(c => c.AppGlobalOwnerId == _oChangesMR.AppGlobalOwnerId && c.ChurchMemberId == _oChangesMR.ChurchMemberId && c.ChurchBodyId == _oChangesMR.ChurchBodyId &&
                               c.IsCurrentRank == true).ToList();

            if (oMRList_ACTV.Count > 1 && _oChangesMR.Id > 0)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Member cannot have multiple ranks current or active. Hint: Make others historical.", signOutToLogIn = false });

            if (oMRList_ACTV.Count > 0 && _oChangesMR.Id == 0)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Member cannot have multiple ranks current or active. Hint: Make others historical.", signOutToLogIn = false });


            if (_oChangesMR.FromDate == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Please specify the date assigned.", signOutToLogIn = false });

            if (_oChangesMR.FromDate != null && _oChangesMR.ToDate != null)
            {
                if (_oChangesMR.FromDate != null && _oChangesMR.ToDate != null)
                {
                    if (_oChangesMR.FromDate.Value > _oChangesMR.ToDate.Value)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Date assigned cannot be later than date ended. Leave it blank if unknown", signOutToLogIn = false });
                }
            }

            var oMCL_Mem = _context.MemberChurchlife.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMR.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMR.ChurchBodyId && c.ChurchMemberId == _oChangesMR.ChurchMemberId).FirstOrDefault();

            if (_oChangesMR.FromDate != null)
            {
                if (_oChangesMR.FromDate != null)
                {
                    if (_oChangesMR.FromDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Date assigned cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });

                    if (oMR_Mem != null)
                        if (_oChangesMR.FromDate.Value < oMR_Mem.DateOfBirth)
                            return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Date assigned cannot be earlier than member date of birth. Leave it blank if unknown", signOutToLogIn = false });

                    if (oMCL_Mem != null)
                    {
                        if (oMCL_Mem.DateJoined != null)
                            if (_oChangesMR.FromDate.Value < oMCL_Mem.DateJoined)
                                return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Date assigned cannot be earlier than date member enrolled. Leave it blank if unknown", signOutToLogIn = false });

                        if (oMCL_Mem.DateDeparted != null)
                            if (_oChangesMR.FromDate.Value < oMCL_Mem.DateDeparted)
                                return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Date assigned cannot be earlier than date member departed. Leave it blank if unknown", signOutToLogIn = false });
                    }
                }
            }

            if (_oChangesMR.ToDate != null)
            {
                if (_oChangesMR.ToDate != null)
                {
                    if (_oChangesMR.ToDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Date ended cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });

                    if (oMR_Mem != null)
                    {
                        if (_oChangesMR.ToDate.Value < oMR_Mem.DateOfBirth)
                            return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Date assigned cannot be earlier than member date of birth. Leave it blank if unknown", signOutToLogIn = false });
                    }

                    if (oMCL_Mem != null)
                    {
                        if (oMCL_Mem.DateJoined != null)
                            if (_oChangesMR.ToDate.Value < oMCL_Mem.DateJoined)
                                return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Date ended cannot be earlier than date member enrolled. Leave it blank if unknown", signOutToLogIn = false });

                        if (oMCL_Mem.DateDeparted != null)
                            if (_oChangesMR.ToDate.Value < oMCL_Mem.DateDeparted)
                                return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Date ended cannot be earlier than date member departed. Leave it blank if unknown", signOutToLogIn = false });

                    }
                }
            }


            try
            {
                ModelState.Remove("oMemberRank.AppGlobalOwnerId");
                ModelState.Remove("oMemberRank.ChurchBodyId");
                ModelState.Remove("oMemberRank.ChurchMemberId");
                ModelState.Remove("oMemberRank.ChurchRankId");

                ModelState.Remove("oMemberRank.CreatedByUserId");
                ModelState.Remove("oMemberRank.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });


                // let's save now... 

                var tm = DateTime.Now;
                _oChangesMR.LastMod = tm;
                _oChangesMR.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                //validate...
                var _strMemFullName = GetConcatMemberName(oMR_Mem.Title, oMR_Mem.FirstName, oMR_Mem.MiddleName, oMR_Mem.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving member rank " + (!string.IsNullOrEmpty(_strMemFullName) ? "[of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                ///// dups...
                /////
                //var oMRList = _context.MemberRank.AsNoTracking().Include(t => t.ChurchRank_NVP) //.Include(t => t.CertificateType_NVP)
                //    .Where(c => c.AppGlobalOwnerId == _oChangesMR.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMR.ChurchBodyId && c.ChurchMemberId == _oChangesMR.ChurchMemberId &&
                //                c.ChurchRankId == _oChangesMR.ChurchRankId && c.ChurchRankId == _oChangesMR.ChurchRankId &&
                //                 (
                //                     (_oChangesMR.FromDate.Value <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMR.ToDate.Value >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMR.FromDate.Value <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMR.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMR.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && _oChangesMR.ToDate.Value >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMR.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMR.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                //                 )
                //                ).ToList();

                //if (_oChangesMR.Id > 0)
                //    oMRList = oMRList.Where(c => c.Id != _oChangesMR.Id).ToList();
                /////
                //var oMR = oMRList.FirstOrDefault();

                //if (oMR != null)
                //{
                //    var _strMRDup = oMR.ChurchRank_NVP != null ? oMR.ChurchRank_NVP.NVPValue : ""; 
                //    return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Specified member rank, " + _strMRDup + " seems to exist. Check the dates for overlap)", signOutToLogIn = false });
                //}



                /// dups...
                ///
                var oMRList = _context.MemberRank.AsNoTracking().Include(t => t.ChurchRank_NVP).Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                    .Where(c => c.AppGlobalOwnerId == _oChangesMR.AppGlobalOwnerId && c.ChurchMemberId == _oChangesMR.ChurchMemberId &&
                    (c.ChurchBodyId == _oChangesMR.ChurchBodyId || (c.ChurchBodyId != _oChangesMR.ChurchBodyId && c.SharingStatus != "N"))     /// c.MemberRankCode == _oChangesMR.MemberRankCode && 
                                 ).ToList();

                //oMRList = oMRList.Where(c =>
                //                     ((_oChangesMR.FromDate != null ? _oChangesMR.ToDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMR.ToDate != null ? _oChangesMR.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMR.FromDate != null ? _oChangesMR.ToDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMR.ToDate != null ? _oChangesMR.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMR.FromDate != null ? _oChangesMR.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && (_oChangesMR.ToDate != null ? _oChangesMR.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMR.FromDate != null ? _oChangesMR.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMR.ToDate != null ? _oChangesMR.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                //    ).ToList();


                if (_oChangesMR.FromDate != null && _oChangesMR.ToDate != null)
                {
                    oMRList = oMRList.Where(c =>
                                         ((_oChangesMR.FromDate != null ? _oChangesMR.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMR.ToDate != null ? _oChangesMR.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMR.FromDate != null ? _oChangesMR.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMR.ToDate != null ? _oChangesMR.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMR.FromDate != null ? _oChangesMR.FromDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && (_oChangesMR.ToDate != null ? _oChangesMR.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMR.FromDate != null ? _oChangesMR.FromDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMR.ToDate != null ? _oChangesMR.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                                          ).ToList();
                }
                else if (_oChangesMR.FromDate != null && _oChangesMR.ToDate == null)
                    oMRList = oMRList.Where(c => _oChangesMR.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMR.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();

                else if (_oChangesMR.ToDate != null && _oChangesMR.FromDate == null)
                    oMRList = oMRList.Where(c => _oChangesMR.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMR.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();

                else if (_oChangesMR.FromDate == null && _oChangesMR.ToDate == null)
                    oMRList = oMRList.Where(c => c.ChurchRankId == _oChangesMR.ChurchRankId).ToList();

                /// exclude current...
                if (_oChangesMR.Id > 0)
                    oMRList = oMRList.Where(c => c.Id != _oChangesMR.Id).ToList();
                ///
                var oMR = oMRList.FirstOrDefault();

                if (oMR != null)
                {
                    var _strMRDup = oMR.ChurchRank_NVP != null ? oMR.ChurchRank_NVP.NVPValue : "";
                    var _strCB_Desc = oMR.ChurchBody != null ? oMR.ChurchBody.Name : "Congregation";
                    var _strCL_Desc = oMR.ChurchBody != null ? (oMR.ChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(oMR.ChurchBody.ChurchLevel.CustomName) ? oMR.ChurchBody.ChurchLevel.CustomName : oMR.ChurchBody.ChurchLevel.Name) : "") : "";
                    _strCB_Desc = (!string.IsNullOrEmpty(_strCB_Desc) ? _strCB_Desc : "") + (!string.IsNullOrEmpty(_strCL_Desc) ? " (" + _strCL_Desc + ")" : "");

                    return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Specified member rank, '" + _strMRDup + "' seems to exist. Check the dates for overlap or source congregation: " + _strCB_Desc, signOutToLogIn = false });
                }






                /// save...
                var _reset = _oChangesMR.Id == 0;
                _oChangesMR.LastMod = tm;
                _oChangesMR.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged; 

                // tracker .. error!                
                if (_oChangesMR.AppGlobalOwner != null) _oChangesMR.AppGlobalOwner = null; if (_oChangesMR.AppGlobalOwner != null) _oChangesMR.ChurchBody = null;
                ///
                if (_oChangesMR.Id == 0)
                {
                    _oChangesMR.Created = tm;
                    _oChangesMR.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberRank.Add(_oChangesMR);

                    _userTask = "Added member rank " + (!string.IsNullOrEmpty(_strMemFullName) ? "[ for member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member rank added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberRank.Update(_oChangesMR);

                    _userTask = "Member rank " + (!string.IsNullOrEmpty(_strMemFullName) ? "[for member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member rank updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();


                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );



                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMR.ChurchBodyId, currCMId = _oChangesMR.ChurchMemberId, currId = _oChangesMR.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMR.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MS(MemberStatusModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Status";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberStatus == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberStatus _oChangesMS = vm.oMemberStatus;


            /// check attached CB
            if (_oChangesMS.AppGlobalOwnerId == null) _oChangesMS.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMS.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMS.AppGlobalOwnerId && c.Id == _oChangesMS.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMS.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            var oMS_Mem = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMS.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMS.ChurchBodyId && c.Id == _oChangesMS.ChurchMemberId).FirstOrDefault();
            if (oMS_Mem == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberStatusModel>(arrData) : vm;


            if (_oChangesMS.ChurchMemStatusId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Member status is not specified.", signOutToLogIn = false });

            /// check MS if any [vm.numMemStatusId] ... past, dead must mave Member Account Status = Closed
            var oMS_Unavail = _context.AppUtilityNVP.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMS.AppGlobalOwnerId && //c.ChurchBodyId == _oChangesMS.ChurchBodyId &&
                                                        c.NVPCode == "CMS" && c.Id == _oChangesMS.ChurchMemStatusId).FirstOrDefault();
            if (oMS_Unavail == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Member status specified could not be verified. Please check with administrator and retry" });


            var tm = DateTime.Now;
            /// UPDATE @member profile...biodata
            if (oMS_Unavail.IsAvailable == false)  /// LET USER confirm ... to continue ???
            {
                oMS_Mem.Status = "X"; // closed
                oMS_Mem.LastMod = tm;
                oMS_Mem.LastModByUserId = this._oLoggedUser.Id;

                _context.ChurchMember.Update(oMS_Mem);  /// wait until next SaveChanges() triggered
            }



            /// member cannot have more than one current type ---
            /// 
            var oMRList_ACTV = _context.MemberStatus.AsNoTracking()  /// .Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                   .Where(c => c.AppGlobalOwnerId == _oChangesMS.AppGlobalOwnerId && c.ChurchMemberId == _oChangesMS.ChurchMemberId && c.ChurchBodyId == _oChangesMS.ChurchBodyId &&
                               c.IsCurrent == true).ToList();

            if (oMRList_ACTV.Count > 1 && _oChangesMS.Id > 0)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Member cannot have multiple status current or active. Hint: Make others historical.", signOutToLogIn = false });

            if (oMRList_ACTV.Count > 0 && _oChangesMS.Id == 0)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Member cannot have multiple status current or active. Hint: Make others historical.", signOutToLogIn = false });


            if (_oChangesMS.FromDate == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Please specify the date assigned.", signOutToLogIn = false });

            if (_oChangesMS.FromDate != null && _oChangesMS.ToDate != null)
            {
                if (_oChangesMS.FromDate != null && _oChangesMS.ToDate != null)
                {
                    if (_oChangesMS.FromDate.Value > _oChangesMS.ToDate.Value)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Date assigned cannot be later than date ended. Leave it blank if unknown", signOutToLogIn = false });
                }
            }

            var oMCL_Mem = _context.MemberChurchlife.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMS.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMS.ChurchBodyId && c.ChurchMemberId == _oChangesMS.ChurchMemberId).FirstOrDefault();

            if (_oChangesMS.FromDate != null)
            {
                if (_oChangesMS.FromDate != null)
                {
                    if (_oChangesMS.FromDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Date assigned cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });

                    if (oMS_Mem != null)
                        if (_oChangesMS.FromDate.Value < oMS_Mem.DateOfBirth)
                            return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Date assigned cannot be earlier than member date of birth. Leave it blank if unknown", signOutToLogIn = false });

                    if (oMCL_Mem != null)
                    {
                        if (oMCL_Mem.DateJoined != null)
                            if (_oChangesMS.FromDate.Value < oMCL_Mem.DateJoined)
                                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Date assigned cannot be earlier than date member enrolled. Leave it blank if unknown", signOutToLogIn = false });

                        if (oMCL_Mem.DateDeparted != null)
                            if (_oChangesMS.FromDate.Value < oMCL_Mem.DateDeparted)
                                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Date assigned cannot be earlier than date member departed. Leave it blank if unknown", signOutToLogIn = false });
                    }
                }
            }

            if (_oChangesMS.ToDate != null)
            {
                if (_oChangesMS.ToDate != null)
                {
                    if (_oChangesMS.ToDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Date ended cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });

                    if (oMS_Mem != null)
                    {
                        if (_oChangesMS.ToDate.Value < oMS_Mem.DateOfBirth)
                            return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Date assigned cannot be earlier than member date of birth. Leave it blank if unknown", signOutToLogIn = false });
                    }

                    if (oMCL_Mem != null)
                    {
                        if (oMCL_Mem.DateJoined != null)
                            if (_oChangesMS.ToDate.Value < oMCL_Mem.DateJoined)
                                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Date ended cannot be earlier than date member enrolled. Leave it blank if unknown", signOutToLogIn = false });

                        if (oMCL_Mem.DateDeparted != null)
                            if (_oChangesMS.ToDate.Value < oMCL_Mem.DateDeparted)
                                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Date ended cannot be earlier than date member departed. Leave it blank if unknown", signOutToLogIn = false });

                    }
                }
            }


            try
            {
                ModelState.Remove("oMemberStatus.AppGlobalOwnerId");
                ModelState.Remove("oMemberStatus.ChurchBodyId");
                ModelState.Remove("oMemberStatus.ChurchMemberId");
                ModelState.Remove("oMemberStatus.ChurchMemStatusId");

                ModelState.Remove("oMemberStatus.FromDate");
                ModelState.Remove("oMemberStatus.ToDate");

                ModelState.Remove("oMemberStatus.CreatedByUserId");
                ModelState.Remove("oMemberStatus.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });


                // let's save now... 
                _oChangesMS.LastMod = tm;
                _oChangesMS.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                //validate...
                var _strMemFullName = GetConcatMemberName(oMS_Mem.Title, oMS_Mem.FirstName, oMS_Mem.MiddleName, oMS_Mem.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving member status " + (!string.IsNullOrEmpty(_strMemFullName) ? "[of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                ///// dups...
                /////
                //var oMSList = _context.MemberStatus.AsNoTracking().Include(t => t.ChurchMemStatus_NVP) //.Include(t => t.CertificateType_NVP)
                //    .Where(c => c.AppGlobalOwnerId == _oChangesMS.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMS.ChurchBodyId && c.ChurchMemberId == _oChangesMS.ChurchMemberId &&
                //                c.ChurchMemStatusId == _oChangesMS.ChurchMemStatusId && c.ChurchMemStatusId == _oChangesMS.ChurchMemStatusId &&
                //                 (
                //                     (_oChangesMS.FromDate.Value <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMS.ToDate.Value >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMS.FromDate.Value <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMS.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMS.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && _oChangesMS.ToDate.Value >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMS.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMS.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                //                 )
                //                ).ToList();

                //if (_oChangesMS.Id > 0)
                //    oMSList = oMSList.Where(c => c.Id != _oChangesMS.Id).ToList();
                /////
                //var oMS = oMSList.FirstOrDefault();

                //if (oMS != null)
                //{
                //    var _strMSDup = oMS.ChurchMemStatus_NVP != null ? oMS.ChurchMemStatus_NVP.NVPValue : "";
                //    return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Specified member status, " + _strMSDup + " seems to exist. Check the dates for overlap)", signOutToLogIn = false });
                //}




                /// dups...
                ///
                var oMSList = _context.MemberStatus.AsNoTracking().Include(t => t.ChurchMemStatus_NVP).Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                    .Where(c => c.AppGlobalOwnerId == _oChangesMS.AppGlobalOwnerId && c.ChurchMemberId == _oChangesMS.ChurchMemberId &&
                    (c.ChurchBodyId == _oChangesMS.ChurchBodyId || (c.ChurchBodyId != _oChangesMS.ChurchBodyId && c.SharingStatus != "N"))     /// c.MemberStatusCode == _oChangesMS.MemberStatusCode && 
                                 ).ToList();

                //oMSList = oMSList.Where(c =>
                //                     ((_oChangesMS.FromDate != null ? _oChangesMS.ToDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMS.ToDate != null ? _oChangesMS.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMS.FromDate != null ? _oChangesMS.ToDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMS.ToDate != null ? _oChangesMS.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMS.FromDate != null ? _oChangesMS.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && (_oChangesMS.ToDate != null ? _oChangesMS.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMS.FromDate != null ? _oChangesMS.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMS.ToDate != null ? _oChangesMS.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                //    ).ToList();


                if (_oChangesMS.FromDate != null && _oChangesMS.ToDate != null)
                {
                    oMSList = oMSList.Where(c =>
                                         ((_oChangesMS.FromDate != null ? _oChangesMS.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMS.ToDate != null ? _oChangesMS.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMS.FromDate != null ? _oChangesMS.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMS.ToDate != null ? _oChangesMS.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMS.FromDate != null ? _oChangesMS.FromDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && (_oChangesMS.ToDate != null ? _oChangesMS.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMS.FromDate != null ? _oChangesMS.FromDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMS.ToDate != null ? _oChangesMS.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                                          ).ToList();
                }
                else if (_oChangesMS.FromDate != null && _oChangesMS.ToDate == null)
                    oMSList = oMSList.Where(c => _oChangesMS.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMS.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();

                else if (_oChangesMS.ToDate != null && _oChangesMS.FromDate == null)
                    oMSList = oMSList.Where(c => _oChangesMS.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMS.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();

                else if (_oChangesMS.FromDate == null && _oChangesMS.ToDate == null)
                    oMSList = oMSList.Where(c => c.ChurchMemStatusId == _oChangesMS.ChurchMemStatusId).ToList();

                /// exclude current...
                if (_oChangesMS.Id > 0)
                    oMSList = oMSList.Where(c => c.Id != _oChangesMS.Id).ToList();
                ///
                var oMS = oMSList.FirstOrDefault();

                if (oMS != null)
                {
                    var _strMSDup = oMS.ChurchMemStatus_NVP != null ? oMS.ChurchMemStatus_NVP.NVPValue : "";
                    var _strCB_Desc = oMS.ChurchBody != null ? oMS.ChurchBody.Name : "Congregation";
                    var _strCL_Desc = oMS.ChurchBody != null ? (oMS.ChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(oMS.ChurchBody.ChurchLevel.CustomName) ? oMS.ChurchBody.ChurchLevel.CustomName : oMS.ChurchBody.ChurchLevel.Name) : "") : "";
                    _strCB_Desc = (!string.IsNullOrEmpty(_strCB_Desc) ? _strCB_Desc : "") + (!string.IsNullOrEmpty(_strCL_Desc) ? " (" + _strCL_Desc + ")" : "");

                    return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Specified member status, '" + _strMSDup + "' seems to exist. Check the dates for overlap or source congregation: " + _strCB_Desc, signOutToLogIn = false });
                }



                /// save...
                var _reset = _oChangesMS.Id == 0;
                _oChangesMS.LastMod = tm;
                _oChangesMS.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged; 

                // tracker .. error!                
                if (_oChangesMS.AppGlobalOwner != null) _oChangesMS.AppGlobalOwner = null; if (_oChangesMS.AppGlobalOwner != null) _oChangesMS.ChurchBody = null;
                ///
                if (_oChangesMS.Id == 0)
                {
                    _oChangesMS.Created = tm;
                    _oChangesMS.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberStatus.Add(_oChangesMS);

                    _userTask = "Added member status " + (!string.IsNullOrEmpty(_strMemFullName) ? "[ for member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member status added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberStatus.Update(_oChangesMS);

                    _userTask = "Member status " + (!string.IsNullOrEmpty(_strMemFullName) ? "[for member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member status updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();


                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );


                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMS.ChurchBodyId, currCMId = _oChangesMS.ChurchMemberId, currId = _oChangesMS.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMS.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }
         

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MCG(MemberChurchGroupingModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Unit";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberChurchUnit == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberChurchUnit _oChangesMCG = vm.oMemberChurchUnit;


            /// check attached CB
            if (_oChangesMCG.AppGlobalOwnerId == null) _oChangesMCG.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMCG.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMCG.AppGlobalOwnerId && c.Id == _oChangesMCG.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMCG.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            var oMCG_Mem = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMCG.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCG.ChurchBodyId && c.Id == _oChangesMCG.ChurchMemberId).FirstOrDefault();
            if (oMCG_Mem == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberChurchGroupingModel>(arrData) : vm;


            if (_oChangesMCG.ChurchUnitId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Church unit is not specified.", signOutToLogIn = false });

            var oMCG_CU = _context.ChurchUnit.AsNoTracking() 
                    .Where(c => c.AppGlobalOwnerId == _oChangesMCG.AppGlobalOwnerId && //c.OrgType == vm.strOrgType &&    && c.OwnedByChurchBodyId == _oChangesMCG.ChurchBodyId 
                                c.Id == _oChangesMCG.ChurchUnitId).FirstOrDefault();

            if (oMCG_CU == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Church unit specified could not be verified. Please refresh and try again", signOutToLogIn = false });

            var _strCU = oMCG_CU.Name;   
            var strCUOrgType = GetChuOrgTypeDesc(oMCG_CU.OrgType);
            strCUOrgType = !string.IsNullOrEmpty(strCUOrgType) ? strCUOrgType : "Church unit";
            ///
            ///

            if (_oChangesMCG.FromDate == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Date joined not specified. Please pick reference date", signOutToLogIn = false });

            if (_oChangesMCG.FromDate != null)
            {
                if (_oChangesMCG.FromDate != null)
                    if (_oChangesMCG.FromDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Date joined cannot be later than today.", signOutToLogIn = false });
            }

            if (_oChangesMCG.ToDate != null)
            {
                if (_oChangesMCG.ToDate != null)
                    if (_oChangesMCG.ToDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Date departed cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }

            if (_oChangesMCG.FromDate != null && _oChangesMCG.ToDate != null)
            {
                if (_oChangesMCG.FromDate != null && _oChangesMCG.ToDate != null)
                {
                    if (_oChangesMCG.FromDate.Value > _oChangesMCG.ToDate.Value)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Date joined cannot be later than date departed. Leave it blank if unknown", signOutToLogIn = false });
                }
            }

            try
            {
                ModelState.Remove("oMemberChurchUnit.AppGlobalOwnerId");
                ModelState.Remove("oMemberChurchUnit.ChurchBodyId");
                ModelState.Remove("oMemberChurchUnit.ChurchMemberId");
                ModelState.Remove("oMemberChurchUnit.ChurchUnitId"); 
                ModelState.Remove("oMemberChurchUnit.FromDate"); 
                ModelState.Remove("oMemberChurchUnit.ToDate"); 

                ModelState.Remove("oMemberChurchUnit.CreatedByUserId");
                ModelState.Remove("oMemberChurchUnit.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });


                //// let's save now...
                ///// 
                //string uniqueFileName = null;
                //var oFormFile = vm.photo;
                //if (oFormFile != null && oFormFile.Length > 0)
                //{
                //    string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");  //~/frontend/dist/img_db
                //    uniqueFileName = Guid.NewGuid().ToString() + "_" + oFormFile.FileName;
                //    string filePath = Path.Combine(uploadFolder, uniqueFileName);
                //    oFormFile.CopyTo(new FileStream(filePath, FileMode.Create));
                //}

                //else
                //    if (_oChangesMCG.Id != 0) uniqueFileName = _oChangesMCG.CertificatePhotoUrl;

                //_oChangesMCG.CertificatePhotoUrl = uniqueFileName;
                /////

                 
                
                //validate...
                var _strMemFullName = GetConcatMemberName(oMCG_Mem.Title, oMCG_Mem.FirstName, oMCG_Mem.MiddleName, oMCG_Mem.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving " + strCUOrgType.ToLower() + (!string.IsNullOrEmpty(_strMemFullName) ? "[of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                ///// dups...
                /////
                //var oMCGList = _context.MemberChurchUnit.AsNoTracking().Include(t => t.ChurchUnit)  
                //    .Where(c => c.AppGlobalOwnerId == _oChangesMCG.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCG.ChurchBodyId && c.ChurchMemberId == _oChangesMCG.ChurchMemberId &&
                //                c.ChurchUnitId == _oChangesMCG.ChurchUnitId  && 
                //                 (
                //                     (_oChangesMCG.FromDate.Value <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMCG.ToDate.Value >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMCG.FromDate.Value <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMCG.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMCG.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && _oChangesMCG.ToDate.Value >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMCG.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMCG.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                //                 )
                //                ).ToList();

                //if (_oChangesMCG.Id > 0)
                //    oMCGList = oMCGList.Where(c => c.Id != _oChangesMCG.Id).ToList();
                /////
                //var oMCG = oMCGList.FirstOrDefault();

                //if (oMCG != null)
                //{
                //    var _strMCG = oMCG.ChurchUnit != null ? oMCG.ChurchUnit.Name : "";
                //    var strOrgTypeDup = oMCG.ChurchUnit != null ? GetChuOrgTypeDesc(oMCG.ChurchUnit.OrgType) : "";
                //    // var _strCert = oMCG.CertificateType_NVP != null ? oMCG.CertificateType_NVP.NVPValue : "";
                //    // _strMCG += (!string.IsNullOrEmpty(_strCert) ? " (" + _strCert + ")" : "");
                //    return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Specified " + (!string.IsNullOrEmpty(strOrgTypeDup) ? strOrgTypeDup : "church unit").ToLower() + " specified, " + _strMCG + " seems to exist. Check the dates for overlap)", signOutToLogIn = false });
                //}




                /// dups...
                ///
                var oMCGList_Dup = _context.MemberChurchUnit.AsNoTracking().Include(t => t.ChurchUnit).Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                    .Where(c => c.AppGlobalOwnerId == _oChangesMCG.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCG.ChurchBodyId && c.ChurchMemberId == _oChangesMCG.ChurchMemberId && 
                                c.ChurchUnitId == _oChangesMCG.ChurchUnitId &&
                    (c.ChurchBodyId == _oChangesMCG.ChurchBodyId || (c.ChurchBodyId != _oChangesMCG.ChurchBodyId && c.SharingStatus != "N"))     /// c.MemberChurchUnitCode == _oChangesMCG.MemberChurchUnitCode && 
                                 ).ToList();

                //oMCGList = oMCGList.Where(c =>
                //                     ((_oChangesMCG.FromDate != null ? _oChangesMCG.ToDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMCG.ToDate != null ? _oChangesMCG.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMCG.FromDate != null ? _oChangesMCG.ToDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMCG.ToDate != null ? _oChangesMCG.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMCG.FromDate != null ? _oChangesMCG.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && (_oChangesMCG.ToDate != null ? _oChangesMCG.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMCG.FromDate != null ? _oChangesMCG.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMCG.ToDate != null ? _oChangesMCG.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                //    ).ToList();


                if (_oChangesMCG.FromDate != null && _oChangesMCG.ToDate != null)
                {
                    oMCGList_Dup = oMCGList_Dup.Where(c =>
                                         ((_oChangesMCG.FromDate != null ? _oChangesMCG.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMCG.ToDate != null ? _oChangesMCG.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMCG.FromDate != null ? _oChangesMCG.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMCG.ToDate != null ? _oChangesMCG.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMCG.FromDate != null ? _oChangesMCG.FromDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && (_oChangesMCG.ToDate != null ? _oChangesMCG.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMCG.FromDate != null ? _oChangesMCG.FromDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMCG.ToDate != null ? _oChangesMCG.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                                          ).ToList();
                }
                else if (_oChangesMCG.FromDate != null && _oChangesMCG.ToDate == null)
                    oMCGList_Dup = oMCGList_Dup.Where(c => _oChangesMCG.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMCG.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();

                else if (_oChangesMCG.ToDate != null && _oChangesMCG.FromDate == null)
                    oMCGList_Dup = oMCGList_Dup.Where(c => _oChangesMCG.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMCG.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();

                else if (_oChangesMCG.FromDate == null && _oChangesMCG.ToDate == null)
                    oMCGList_Dup = oMCGList_Dup.Where(c => c.ChurchUnitId == _oChangesMCG.ChurchUnitId).ToList();

                /// exclude current...
                if (_oChangesMCG.Id > 0)
                    oMCGList_Dup = oMCGList_Dup.Where(c => c.Id != _oChangesMCG.Id).ToList();
                ///
                var oMCG_Dup = oMCGList_Dup.FirstOrDefault();

                if (oMCG_Dup != null)
                {
                    var _strMCGDup = oMCG_Dup.ChurchUnit != null ? oMCG_Dup.ChurchUnit.Name : "";
                    var _strCB_Desc = oMCG_Dup.ChurchBody != null ? oMCG_Dup.ChurchBody.Name : "Congregation";
                    var _strCL_Desc = oMCG_Dup.ChurchBody != null ? (oMCG_Dup.ChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(oMCG_Dup.ChurchBody.ChurchLevel.CustomName) ? oMCG_Dup.ChurchBody.ChurchLevel.CustomName : oMCG_Dup.ChurchBody.ChurchLevel.Name) : "") : "";
                    _strCB_Desc = (!string.IsNullOrEmpty(_strCB_Desc) ? _strCB_Desc : "") + (!string.IsNullOrEmpty(_strCL_Desc) ? " (" + _strCL_Desc + ")" : "");

                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Specified member church unit, '" + _strMCGDup + "' seems to exist. Check the dates for overlap or source congregation: " + _strCB_Desc, signOutToLogIn = false });
                }



                /// save...
                var tm = DateTime.Now; 
                var _reset = _oChangesMCG.Id == 0;
                _oChangesMCG.LastMod = tm;
                _oChangesMCG.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged; 

                // tracker .. error!                
                if (_oChangesMCG.AppGlobalOwner != null) _oChangesMCG.AppGlobalOwner = null; if (_oChangesMCG.AppGlobalOwner != null) _oChangesMCG.ChurchBody = null;
                ///
                if (_oChangesMCG.Id == 0)
                {
                    _oChangesMCG.Created = tm;
                    _oChangesMCG.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberChurchUnit.Add(_oChangesMCG);
                     
                    _userTask = "Added " + strCUOrgType.ToLower() + (!string.IsNullOrEmpty(_strMemFullName) ? " [of member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = strCUOrgType + " added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberChurchUnit.Update(_oChangesMCG);

                    _userTask = strCUOrgType + (!string.IsNullOrEmpty(_strMemFullName) ? " [of member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = strCUOrgType + " updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();


                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );


                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMCG.ChurchBodyId, currCMId = _oChangesMCG.ChurchMemberId, currId = _oChangesMCG.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCG.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }
         

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MCR(MemberRoleDesigModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Role /Designation";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberChurchRole == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberChurchRole _oChangesMCR = vm.oMemberChurchRole;


            /// check attached CB
            if (_oChangesMCR.AppGlobalOwnerId == null) _oChangesMCR.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMCR.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            // IN CASEthe church unit == false... use this CB -- as the mainstream role area
            var oMCR_CB = _context.ChurchBody.AsNoTracking().Include(t => t.ChurchLevel).Where(c => c.AppGlobalOwnerId == _oChangesMCR.AppGlobalOwnerId && c.Id == _oChangesMCR.ChurchBodyId).FirstOrDefault();
            if (oMCR_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oMCR_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMCR.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            var oMCR_Mem = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMCR.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCR.ChurchBodyId && c.Id == _oChangesMCR.ChurchMemberId).FirstOrDefault();
            if (oMCR_Mem == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberChurchGroupingModel>(arrData) : vm;


            if (_oChangesMCR.ChurchRoleId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Church role is not specified.", signOutToLogIn = false });

            if (_oChangesMCR.IsChurchUnit==true && _oChangesMCR.ChurchUnitId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Church unit for the specified role is required. Hint: Uncheck 'Church unit' if role at mainstream congregation", signOutToLogIn = false });
              
            ///
            var oMCR_CR = _context.ChurchRole.AsNoTracking()
                   .Where(c => c.AppGlobalOwnerId == _oChangesMCR.AppGlobalOwnerId && // c.OwnedByChurchBodyId == _oChangesMCR.ChurchBodyId &&
                               c.Id == _oChangesMCR.ChurchRoleId).FirstOrDefault();
            if (oMCR_CR == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Church role specified could not be verified. Please refresh and try again", signOutToLogIn = false });
            
            var _strCR = oMCR_CR.Name; var strCROrgType = GetChuOrgTypeDesc(oMCR_CR.OrgType);
            strCROrgType = !string.IsNullOrEmpty(strCROrgType) ? strCROrgType : "Church role";  // church position /team
            ///
            ///
            var _strMCR_Desc = ""; var _strRoleUnit = ""; var _strRoleUnitOrgType = "";
            if (_oChangesMCR.IsChurchUnit == true)
            {
                var oMCR_CU = _context.ChurchUnit.AsNoTracking()  //.Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel)
                        .Where(c => c.AppGlobalOwnerId == _oChangesMCR.AppGlobalOwnerId && //c.OwnedByChurchBodyId == _oChangesMCR.ChurchBodyId &&
                                    c.Id == _oChangesMCR.ChurchUnitId).FirstOrDefault();
                if (oMCR_CU == null)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Church unit specified could not be verified. Please refresh and try again", signOutToLogIn = false });
                ///
                _strRoleUnit = oMCR_CU.Name;
                _strRoleUnitOrgType = GetChuOrgTypeDesc(oMCR_CU.OrgType);
                _strRoleUnitOrgType = !string.IsNullOrEmpty(_strRoleUnitOrgType) ? _strRoleUnitOrgType : "Church unit";
            }
            else
            {
                _strRoleUnit = oMCR_CB.Name;
                _strRoleUnitOrgType = oMCR_CB != null ? (oMCR_CB.ChurchLevel != null ? (!string.IsNullOrEmpty(oMCR_CB.ChurchLevel.CustomName) ? oMCR_CB.ChurchLevel.CustomName : oMCR_CB.ChurchLevel.Name) : "") : "";
            }

            _strMCR_Desc = (!string.IsNullOrEmpty(_strCR) ? _strCR : "") + (!string.IsNullOrEmpty(_strRoleUnit) ? " (" + _strRoleUnit + ")" : "");  // President (Youth Wing), Presiding Bishop (CACI)
             

            ///
            ///
            if (_oChangesMCR.FromDate == null) 
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Date commenced is not specified. Please inidicate date reference point for role. Hint: Estimate /find out the year and assume the date", signOutToLogIn = false });
            
            if (_oChangesMCR.FromDate != null)
            {
                if (_oChangesMCR.FromDate != null)
                    if (_oChangesMCR.FromDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Date commenced cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }

            if (_oChangesMCR.ToDate != null)
            {
                if (_oChangesMCR.ToDate != null)
                    if (_oChangesMCR.ToDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Date completed cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }

            if (_oChangesMCR.FromDate != null && _oChangesMCR.ToDate != null)
            {
                if (_oChangesMCR.FromDate != null && _oChangesMCR.ToDate != null)
                {
                    if (_oChangesMCR.FromDate.Value > _oChangesMCR.ToDate.Value)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Date commenced cannot be later than date completed. Leave it blank if unknown", signOutToLogIn = false });
                }
            }
            
            try
            {
                ModelState.Remove("oMemberChurchRole.AppGlobalOwnerId");
                ModelState.Remove("oMemberChurchRole.ChurchBodyId");
                ModelState.Remove("oMemberChurchRole.ChurchMemberId");
                ModelState.Remove("oMemberChurchRole.ChurchUnitId");
                ModelState.Remove("oMemberChurchRole.ChurchRoleId");
                ModelState.Remove("oMemberChurchRole.FromDate");
                ModelState.Remove("oMemberChurchRole.ToDate");

                ModelState.Remove("oMemberChurchRole.CreatedByUserId");
                ModelState.Remove("oMemberChurchRole.LastModByUserId");

                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });
                 
                //validate...
                var _strMemFullName = GetConcatMemberName(oMCR_Mem.Title, oMCR_Mem.FirstName, oMCR_Mem.MiddleName, oMCR_Mem.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving " + strCROrgType.ToLower() + ", " + _strMCR_Desc + (!string.IsNullOrEmpty(_strMemFullName) ? " [of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                ///// dups...
                /////
                //var oMCRList = _context.MemberChurchRole.AsNoTracking().Include(t => t.ChurchRole).Include(t => t.ChurchUnit).Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                //    .Where(c => c.AppGlobalOwnerId == _oChangesMCR.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCR.ChurchBodyId && c.ChurchMemberId == _oChangesMCR.ChurchMemberId &&
                //                c.ChurchRoleId == _oChangesMCR.ChurchRoleId && ((c.IsChurchUnit == true && c.ChurchUnitId == _oChangesMCR.ChurchUnitId) || (c.IsChurchUnit == false && c.ChurchUnitId == null)) &&
                //                 (
                //                     (_oChangesMCR.FromDate.Value <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMCR.ToDate.Value >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMCR.FromDate.Value <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMCR.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMCR.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && _oChangesMCR.ToDate.Value >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     (_oChangesMCR.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMCR.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                //                 )
                //                ).ToList();

                //if (_oChangesMCR.Id > 0)
                //    oMCRList = oMCRList.Where(c => c.Id != _oChangesMCR.Id).ToList();
                /////
                //var oMCR = oMCRList.FirstOrDefault();

                //if (oMCR != null)
                //{
                //    var _strCR_Dup = oMCR.ChurchRole != null ? oMCR.ChurchRole.Name : ""; var strCROrgType_Dup = oMCR.ChurchRole != null ? GetChuOrgTypeDesc(oMCR.OrgType) : "";  
                //    strCROrgType = !string.IsNullOrEmpty(strCROrgType_Dup) ? strCROrgType_Dup : "Church role";  // church position /team
                //    ///
                //    ///
                //    var _strMCR_Desc_Dup = ""; var _strRoleUnit_Dup = ""; var _strRoleUnitOrgType_Dup = "";
                //    if (_oChangesMCR.IsChurchUnit == true)
                //    { 
                //        _strRoleUnit_Dup = oMCR.ChurchUnit != null ? oMCR.ChurchUnit.Name : "";
                //        _strRoleUnitOrgType_Dup = oMCR.ChurchUnit != null ? GetChuOrgTypeDesc(oMCR.ChurchUnit.OrgType) : "";
                //        _strRoleUnitOrgType_Dup = !string.IsNullOrEmpty(_strRoleUnitOrgType_Dup) ? _strRoleUnitOrgType_Dup : "Church unit";
                //    }
                //    else
                //    {
                //        _strRoleUnit_Dup = oMCR.ChurchBody != null ? oMCR.ChurchBody.Name : "Congregation"; // oMCR_CB.Name;
                //        _strRoleUnitOrgType_Dup = oMCR.ChurchBody != null ? (oMCR.ChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(oMCR.ChurchBody.ChurchLevel.CustomName) ? oMCR.ChurchBody.ChurchLevel.CustomName : oMCR.ChurchBody.ChurchLevel.Name) : "") : "";
                //    }

                //    _strMCR_Desc_Dup = (!string.IsNullOrEmpty(_strCR_Dup) ? _strCR_Dup : "") + (!string.IsNullOrEmpty(_strRoleUnit_Dup) ? " (" + _strRoleUnit_Dup + ")" : "");  // President (Youth Wing), Presiding Bishop (CACI)
                //    ///  var strOrgTypeDup = oMCR.ChurchUnit != null ? GetChuOrgTypeDesc(oMCR.ChurchUnit.OrgType) : ""; 
                //    return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Specified " + (!string.IsNullOrEmpty(strCROrgType_Dup) ? strCROrgType_Dup : "church role").ToLower() + ", " + _strMCR_Desc_Dup + " seems to exist. Check the dates for overlap)", signOutToLogIn = false });
                //}



                /// dups...
                ///
                var oMCRList_Dup = _context.MemberChurchRole.AsNoTracking().Include(t => t.ChurchRole).Include(t => t.ChurchUnit).Include(t => t.ChurchBody).ThenInclude(t => t.ChurchLevel)
                    .Where(c => c.AppGlobalOwnerId == _oChangesMCR.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMCR.ChurchBodyId && c.ChurchMemberId == _oChangesMCR.ChurchMemberId && 
                    c.ChurchUnitId == _oChangesMCR.ChurchUnitId && c.ChurchRoleId == _oChangesMCR.ChurchRoleId &&
                    (c.ChurchBodyId == _oChangesMCR.ChurchBodyId || (c.ChurchBodyId != _oChangesMCR.ChurchBodyId && c.SharingStatus != "N"))     /// c.MemberChurchRoleCode == _oChangesMCR.MemberChurchRoleCode && 
                                 ).ToList();

                //oMCRList = oMCRList.Where(c =>
                //                     ((_oChangesMCR.FromDate != null ? _oChangesMCR.ToDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMCR.ToDate != null ? _oChangesMCR.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMCR.FromDate != null ? _oChangesMCR.ToDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMCR.ToDate != null ? _oChangesMCR.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMCR.FromDate != null ? _oChangesMCR.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && (_oChangesMCR.ToDate != null ? _oChangesMCR.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                //                     ((_oChangesMCR.FromDate != null ? _oChangesMCR.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMCR.ToDate != null ? _oChangesMCR.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                //    ).ToList();


                if (_oChangesMCR.FromDate != null && _oChangesMCR.ToDate != null)
                {
                    oMCRList_Dup = oMCRList_Dup.Where(c =>
                                         ((_oChangesMCR.FromDate != null ? _oChangesMCR.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMCR.ToDate != null ? _oChangesMCR.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMCR.FromDate != null ? _oChangesMCR.FromDate.Value : (DateTime?)null) <= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMCR.ToDate != null ? _oChangesMCR.ToDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMCR.FromDate != null ? _oChangesMCR.FromDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null) && (_oChangesMCR.ToDate != null ? _oChangesMCR.ToDate.Value : (DateTime?)null) >= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)) ||
                                         ((_oChangesMCR.FromDate != null ? _oChangesMCR.FromDate.Value : (DateTime?)null) >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && (_oChangesMCR.ToDate != null ? _oChangesMCR.ToDate.Value : (DateTime?)null) <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null))
                                          ).ToList();
                }
                else if (_oChangesMCR.FromDate != null && _oChangesMCR.ToDate == null)
                    oMCRList_Dup = oMCRList_Dup.Where(c => _oChangesMCR.FromDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMCR.FromDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();

                else if (_oChangesMCR.ToDate != null && _oChangesMCR.FromDate == null)
                    oMCRList_Dup = oMCRList_Dup.Where(c => _oChangesMCR.ToDate.Value >= (c.FromDate != null ? c.FromDate.Value : (DateTime?)null) && _oChangesMCR.ToDate.Value <= (c.ToDate != null ? c.ToDate.Value : (DateTime?)null)).ToList();

                else if (_oChangesMCR.FromDate == null && _oChangesMCR.ToDate == null)
                    oMCRList_Dup = oMCRList_Dup.Where(c => c.ChurchUnitId == _oChangesMCR.ChurchUnitId).ToList();

                /// exclude current...
                if (_oChangesMCR.Id > 0)
                    oMCRList_Dup = oMCRList_Dup.Where(c => c.Id != _oChangesMCR.Id).ToList();
                ///
                var oMCR_Dup = oMCRList_Dup.FirstOrDefault();

                if (oMCR_Dup != null)
                {
                    var _strCR_Dup = oMCR_Dup.ChurchRole != null ? oMCR_Dup.ChurchRole.Name : ""; var strCROrgType_Dup = oMCR_Dup.ChurchRole != null ? GetChuOrgTypeDesc(oMCR_Dup.OrgType) : "";
                    strCROrgType = !string.IsNullOrEmpty(strCROrgType_Dup) ? strCROrgType_Dup : "Church role";  // church position /team
                    ///
                    ///
                    var _strMCR_Desc_Dup = ""; var _strRoleUnit_Dup = ""; var _strRoleUnitOrgType_Dup = "";
                    if (_oChangesMCR.IsChurchUnit == true)
                    {
                        _strRoleUnit_Dup = oMCR_Dup.ChurchUnit != null ? oMCR_Dup.ChurchUnit.Name : "";
                        _strRoleUnitOrgType_Dup = oMCR_Dup.ChurchUnit != null ? GetChuOrgTypeDesc(oMCR_Dup.ChurchUnit.OrgType) : "";
                        _strRoleUnitOrgType_Dup = !string.IsNullOrEmpty(_strRoleUnitOrgType_Dup) ? _strRoleUnitOrgType_Dup : "Church unit";
                    }
                    else
                    {
                        _strRoleUnit_Dup = oMCR_Dup.ChurchBody != null ? oMCR_Dup.ChurchBody.Name : "Congregation"; // oMCR_CB.Name;
                        _strRoleUnitOrgType_Dup = oMCR_Dup.ChurchBody != null ? (oMCR_Dup.ChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(oMCR_Dup.ChurchBody.ChurchLevel.CustomName) ? oMCR_Dup.ChurchBody.ChurchLevel.CustomName : oMCR_Dup.ChurchBody.ChurchLevel.Name) : "") : "";
                    }

                    var _strCB_Desc = oMCR_Dup.ChurchBody != null ? oMCR_Dup.ChurchBody.Name : "Congregation";
                    var _strCB_CLDesc = oMCR_Dup.ChurchBody != null ? (oMCR_Dup.ChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(oMCR_Dup.ChurchBody.ChurchLevel.CustomName) ? " (" + oMCR_Dup.ChurchBody.ChurchLevel.CustomName + ")" : " (" + oMCR_Dup.ChurchBody.ChurchLevel.Name + ")") : "") : "";
                    _strCB_Desc += _strCB_CLDesc;

                    _strMCR_Desc_Dup = (!string.IsNullOrEmpty(_strCR_Dup) ? _strCR_Dup : "") + (!string.IsNullOrEmpty(_strRoleUnit_Dup) ? " (" + _strRoleUnit_Dup + ")" : "");  // President (Youth Wing), Presiding Bishop (CACI)
                    ///  var strOrgTypeDup = oMCR.ChurchUnit != null ? GetChuOrgTypeDesc(oMCR.ChurchUnit.OrgType) : ""; 
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Specified " + (!string.IsNullOrEmpty(strCROrgType_Dup) ? strCROrgType_Dup : "church role").ToLower() + ", " + _strMCR_Desc_Dup + " seems to exist. Check the dates for overlap or source congregation: " + _strCB_Desc , signOutToLogIn = false });
                     


                    //var _strMCRDup = oMCR_Dup.ChurchUnit != null ? oMCR_Dup.ChurchUnit.Name : "";
                    //var _strCB_Desc = oMCR_Dup.ChurchBody != null ? oMCR_Dup.ChurchBody.Name : "Congregation";
                    //var _strCL_Desc = oMCR_Dup.ChurchBody != null ? (oMCR_Dup.ChurchBody.ChurchLevel != null ? (!string.IsNullOrEmpty(oMCR_Dup.ChurchBody.ChurchLevel.CustomName) ? oMCR_Dup.ChurchBody.ChurchLevel.CustomName : oMCR_Dup.ChurchBody.ChurchLevel.Name) : "") : "";
                    //_strCB_Desc = (!string.IsNullOrEmpty(_strCB_Desc) ? _strCB_Desc : "") + (!string.IsNullOrEmpty(_strCL_Desc) ? " (" + _strCL_Desc + ")" : "");

                    //return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Specified member church role, '" + _strMCRDup + "' seems to exist. Check the dates for overlap or source congregation: " + _strCB_Desc, signOutToLogIn = false });
                }


                // check dates --- memver joined /departed church, joined group and role date


                /// save...
                /// 
                 //// let's save now...
                /// 
                string uniqueFileName = null;
                var oFormFile = vm.PhotoFile_CRL;
                if (oFormFile != null && oFormFile.Length > 0)
                {
                    string uploadFolder = Path.Combine(_hostingEnvironment.WebRootPath, "img_db");  //~/frontend/dist/img_db
                    uniqueFileName = Guid.NewGuid().ToString() + "_" + oFormFile.FileName;
                    string filePath = Path.Combine(uploadFolder, uniqueFileName);
                    oFormFile.CopyTo(new FileStream(filePath, FileMode.Create));
                }

                else
                    if (_oChangesMCR.Id != 0) uniqueFileName = _oChangesMCR.RolePhotoUrl;

                _oChangesMCR.RolePhotoUrl = uniqueFileName;
                ///


                var tm = DateTime.Now; 
                var _reset = _oChangesMCR.Id == 0;
                _oChangesMCR.LastMod = tm;
                _oChangesMCR.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged; 
                 
                // tracker .. error!                
                if (_oChangesMCR.AppGlobalOwner != null) _oChangesMCR.AppGlobalOwner = null; if (_oChangesMCR.AppGlobalOwner != null) _oChangesMCR.ChurchBody = null;
                if (_oChangesMCR.ChurchUnit != null) _oChangesMCR.ChurchUnit = null; if (_oChangesMCR.ChurchRole != null) _oChangesMCR.ChurchRole = null;
                ///
                if (_oChangesMCR.Id == 0)
                {
                    _oChangesMCR.Created = tm;
                    _oChangesMCR.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberChurchRole.Add(_oChangesMCR);

                    _userTask = "Added " + strCROrgType.ToLower() + ", " + _strMCR_Desc + (!string.IsNullOrEmpty(_strMemFullName) ? " [of member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = strCROrgType  + ", " + _strMCR_Desc + " added succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberChurchRole.Update(_oChangesMCR);

                    _userTask = strCROrgType + ", " + _strMCR_Desc + (!string.IsNullOrEmpty(_strMemFullName) ? " [of member, " + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = strCROrgType + ", " + _strMCR_Desc + " updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();


                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );


                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMCR.ChurchBodyId, currCMId = _oChangesMCR.ChurchMemberId, currId = _oChangesMCR.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMCR.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddModCM_MRR(MemberRegistrationModel vm)

        { // vm has 18 sub modules ... save either specific module setIndex = [1-18], or save all ... setIndex = 0

            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            var strDesc = "Member Registration";

            if (vm == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });
            if (vm.oMemberRegistration == null) return Json(new { taskSuccess = false, oCurrId = "", userMess = strDesc + " data to update unavailable. Please refresh and try again." });

            // ChurchMember _oChanges = vm.oChurchMember;
            MemberRegistration _oChangesMRR = vm.oMemberRegistration;


            /// check attached CB
            if (_oChangesMRR.AppGlobalOwnerId == null) _oChangesMRR.AppGlobalOwnerId = this._oLoggedAGO.Id;
            if (_oChangesMRR.ChurchBodyId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMRR.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            var oCM_CB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMRR.AppGlobalOwnerId && c.Id == _oChangesMRR.ChurchBodyId).FirstOrDefault();
            if (oCM_CB == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMRR.Id, userMess = "Specified congregation of member could not be verified. Please refresh and try again.", signOutToLogIn = false });

            if (string.IsNullOrEmpty(oCM_CB.GlobalChurchCode))
                return Json(new { taskSuccess = false, oCurrId = _oChangesMRR.Id, userMess = "Church code for congregation could not be verified. Please verify with System Admin and try again.", signOutToLogIn = false });


            /// check attached CM
            if (_oChangesMRR.ChurchMemberId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMRR.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            var oMRR_Mem = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == _oChangesMRR.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMRR.ChurchBodyId && c.Id == _oChangesMRR.ChurchMemberId).FirstOrDefault();
            if (oMRR_Mem == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMRR.Id, userMess = "Attached member could not be verfied. Please refresh and try again.", signOutToLogIn = false });

            //var arrData = "";
            //arrData = TempData.ContainsKey("oVmCurrMod") ? TempData["oVmCurrMod"] as string : arrData;
            //var vmMod = (!string.IsNullOrEmpty(arrData)) ? Newtonsoft.Json.JsonConvert.DeserializeObject<MemberRegistrationModel>(arrData) : vm;


            if (_oChangesMRR.ChurchPeriodId == null)
                return Json(new { taskSuccess = false, oCurrId = _oChangesMRR.Id, userMess = "Please specify the church period as reference point.", signOutToLogIn = false });


            ///
            var oCP_List_1 = _context.ChurchPeriod.AsNoTracking().Include(t => t.OwnedByChurchBody).ThenInclude(t => t.ChurchLevel) //
                            .Where(c => c.AppGlobalOwnerId == _oChangesMRR.AppGlobalOwnerId && c.Status == "A").ToList();  // && c.PeriodType == "AP"

            oCP_List_1 = oCP_List_1.Where(c =>
                               (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                               (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();

            /// may be more... pick the one up-most ... override lower cong!    
            oCP_List_1 = oCP_List_1.OrderBy(c => c.OwnedByChurchBody?.ChurchLevel?.LevelIndex).ToList();
            this.oCPRDefault = oCP_List_1.FirstOrDefault();// _context.ChurchPeriod.Where(c => c.AppGlobalOwnerId == oAppGloOwnId && c.ChurchBodyId == oCurrChuBodyId && c.Status == "A").FirstOrDefault();  // c.PeriodType == "CP" && 
            ///
            DateTime? maxDate_CY = DateTime.Now;
            DateTime? minDate_CY = maxDate_CY.Value.AddYears(-1);
            string strCY_Year = DateTime.Now.Year.ToString();
            if (this.oCPRDefault != null)
            {
                if (this.oCPRDefault.FromDate != null) minDate_CY = this.oCPRDefault.FromDate.Value;
                if (this.oCPRDefault.ToDate != null) maxDate_CY = this.oCPRDefault.ToDate.Value;
                if (this.oCPRDefault.FromDate != null) strCY_Year = this.oCPRDefault.ToDate.Value.Year.ToString();
            }


            if (_oChangesMRR.RegistrationDate != null)
            {
                if (_oChangesMRR.RegistrationDate != null)
                    if (_oChangesMRR.RegistrationDate.Value > DateTime.Now)
                        return Json(new { taskSuccess = false, oCurrId = _oChangesMRR.Id, userMess = "Registration date cannot be later than today. Leave it blank if unknown", signOutToLogIn = false });
            }


            try
            {
                ModelState.Remove("oMemberRegistration.AppGlobalOwnerId");
                ModelState.Remove("oMemberRegistration.ChurchBodyId");
                ModelState.Remove("oMemberRegistration.OwnedByChurchBodyId");
                ModelState.Remove("oMemberRegistration.ChurchMemberId");
                ModelState.Remove("oMemberRegistration.ChurchPeriodId");

                ModelState.Remove("oMemberRegistration.CreatedByUserId");
                ModelState.Remove("oMemberRegistration.LastModByUserId");


                //finally check error state...
                if (ModelState.IsValid == false)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMRR.Id, userMess = "Failed to load the data to save. Please refresh and try again.", signOutToLogIn = false });


                _oChangesMRR.LastMod = DateTime.Now;
                _oChangesMRR.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                var tm = DateTime.Now;
                _oChangesMRR.LastMod = tm;
                _oChangesMRR.LastModByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged;

                //validate...
                var _strMemFullName = GetConcatMemberName(oMRR_Mem.Title, oMRR_Mem.FirstName, oMRR_Mem.MiddleName, oMRR_Mem.LastName, false, false, false, false, false);
                var _userTask = "Attempted saving member registration details " + (!string.IsNullOrEmpty(_strMemFullName) ? "[of member, " + _strMemFullName + "]" : "");  //    _userTask = "Added new church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";  // _userTask = "Updated church member, " + (!string.IsNullOrEmpty(_oChanges.UserDesc) ? "[" + _oChanges.UserDesc + "]" : "") + " successfully";


                /// dups...
                ///
                var oMRRList = _context.MemberRegistration.AsNoTracking() //.Include(t => t.InstitutionType_NVP).Include(t => t.CertificateType_NVP)
                    .Where(c => c.AppGlobalOwnerId == _oChangesMRR.AppGlobalOwnerId && c.ChurchBodyId == _oChangesMRR.ChurchBodyId && c.ChurchMemberId == _oChangesMRR.ChurchMemberId &&
                                     (c.ChurchPeriodId == _oChangesMRR.ChurchPeriodId || c.RegistrationDate == _oChangesMRR.RegistrationDate ||
                                     (_oChangesMRR.RegistrationDate >= minDate_CY && _oChangesMRR.RegistrationDate <= maxDate_CY))
                                ).ToList();

                if (_oChangesMRR.Id > 0)
                    oMRRList = oMRRList.Where(c => c.Id != _oChangesMRR.Id).ToList();
                ///
                var oMRR = oMRRList.FirstOrDefault();

                if (oMRR != null)
                    return Json(new { taskSuccess = false, oCurrId = _oChangesMRR.Id, userMess = "Member has already been registred. Hint: Registraion date falls within current church year: " + strCY_Year + ")", signOutToLogIn = false });


                /// save...
                var _reset = _oChangesMRR.Id == 0;
                _oChangesMRR.LastMod = tm;
                _oChangesMRR.LastModByUserId = this._oLoggedUser.Id; // vmMod.oUserId_Logged; 

                // tracker .. error!                
                if (_oChangesMRR.AppGlobalOwner != null) _oChangesMRR.AppGlobalOwner = null; if (_oChangesMRR.AppGlobalOwner != null) _oChangesMRR.ChurchBody = null;
                ///
                if (_oChangesMRR.Id == 0)
                {
                    _oChangesMRR.Created = tm;
                    _oChangesMRR.CreatedByUserId = this._oLoggedUser.Id; /// vmMod.oUserId_Logged; 

                    _context.MemberRegistration.Add(_oChangesMRR);

                    _userTask = "Renewed registration details of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member registration renewed succesfully."; // church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully.";
                }
                else
                {
                    _context.MemberRegistration.Update(_oChangesMRR);

                    _userTask = "Member registration details of member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " successfully";
                    ViewBag.UserMsg = "Member registration updated succesfully."; //"Church member, " + (!string.IsNullOrEmpty(_strMemFullName) ? "[" + _strMemFullName + "]" : "") + " updated successfully.";
                }

                //save CI to get Id... 
                _context.SaveChanges();




                if (_reset)
                {
                    var strYr = !string.IsNullOrEmpty(_oChangesMRR.ChurchYear) ? _oChangesMRR.ChurchYear.ToString() : _oChangesMRR.RegistrationDate.Value.Year.ToString();
                    /// (!string.IsNullOrEmpty(_strMemFullName) ? ", " + oCM_CB.Name : "") + " 
                    /// var _strMemFullName = GetConcatMemberName(_oChanges.Title, _oChanges.FirstName, _oChanges.MiddleName, _oChanges.LastName, false, false, false, false, false);
                    ViewBag.MemMsg = "Congratulations! Please your membership for the year " + strYr + " has been renewed. #Registration Code: " + _oChangesMRR.RegCode.ToString() + ". The LORD bless you"; // "[" + _strMemFullName + "]" : "") + " successfully.";


                    var lsCMs = new List<ChurchMember>(); lsCMs.Add(oMRR_Mem);
                    var lsCBs = new List<ChurchBody>(); lsCBs.Add(oCM_CB);
                    var lsMess = new List<string>(); lsMess.Add(ViewBag.MemMsg);

                    SendCustomNotification("Member Registration/Renewals", lsCBs, lsCMs, lsMess, false, false, true);
                }


                //audit...
                var _tm = DateTime.Now;
                //await this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                //                 "RCMS-Client: Church Member", AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, vmMod.oCurrUserId_Logged, _tm, _tm, vmMod.oCurrUserId_Logged, vmMod.oCurrUserId_Logged));

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );


                // AddEditCurrDataCM_moMPC(res.currCBId, res.currCMId, res.currId, res.strItemTag, res.setIndex, 1);  
                return Json(new { taskSuccess = true, userMess = ViewBag.UserMsg, resetNew = _reset, currCBId = _oChangesMRR.ChurchBodyId, currCMId = _oChangesMRR.ChurchMemberId, currId = _oChangesMRR.Id, currParid = -1, currSetIndex = vm.setIndex, currSubIndex = vm.subSetIndex,  strItemTag = _strMemFullName, signOutToLogIn = false });
            }

            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = _oChangesMRR.Id, userMess = "Failed saving church member details. Err: " + ex.Message, signOutToLogIn = false });
            }
        }





        // deleting biomodel == deleting member profile...
        public IActionResult DeleteCM_BD(int? oAGOid, int? oCurrCBid, int? log_uid, int id, int s_ndx, int sb_ndx, bool f_delcfm = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }


            // var strDesc = s_ndx == 1 ? "System profile" : s_ndx == 2 ? "Church admin profile" : "Church church member";
            var strDesc = "Church member"; // (s_ndx == 1 ? "System admin profile" : (s_ndx == 2 ? "Church admin profile" : "Church church member"));
            var _strMemberName = "[member]";
            var tm = DateTime.Now; var _tm = DateTime.Now; var _userTask = "Attempted deleting  " + strDesc;
            //
            try
            {
                var strUserDenom = "Client Admin";
                if (oAGOid == null || oCurrCBid == null)
                    return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Denomination/church of " + strDesc + " unknown. Please refesh and try again." });

                var oAGO = _context.AppGlobalOwner.Find(oAGOid);
                var oCB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && c.Id == oCurrCBid).FirstOrDefault();

                if (oAGO == null || oCB == null)
                    return Json(new { taskSuccess = false, oCurrId = "", userMess = "Specified denomination and church unit could not be retrieved. Please refresh and try again.", signOutToLogIn = false });

                var oAGO_MSTR = _masterContext.MSTRAppGlobalOwner.Find(oAGO.MSTR_AppGlobalOwnerId);
                var oCB_MSTR = _masterContext.MSTRChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && c.Id == oCurrCBid).FirstOrDefault();

                if (oAGO_MSTR == null || oCB_MSTR == null)
                    return Json(new { taskSuccess = false, oCurrId = "", userMess = "Specified denomination and church unit could not be tracked as client modules. Please refresh and try again or see Administrator.", signOutToLogIn = false });


                strUserDenom = oCB.Name + (!string.IsNullOrEmpty(oAGO.Acronym) ? ", " + oAGO.Acronym : oAGO.OwnerName);
                strUserDenom =  (!string.IsNullOrEmpty(strUserDenom) ? "Denomination: " + strUserDenom : strUserDenom);//"--" +

                var oChurchMember = _context.ChurchMember.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid).FirstOrDefault();// .Include(c => c.ChurchUnits)
                if (oChurchMember == null)
                {
                    _strMemberName = oChurchMember.FirstName + " " + oChurchMember.LastName;
                    _userTask = "Attempted deleting " + strDesc.ToLower() + ", " + _strMemberName + " [" + oChurchMember.GlobalMemberCode + "]" + strUserDenom;  // var _userTask = "Attempted saving  " + strDesc;
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, log_uid, _tm, _tm, log_uid, log_uid));

                    return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = strDesc + " to delete could not be retrieved." });
                }

                var saveDelete = true;
                // ensuring cascade delete where there's none!

                //check oMLSs, oMCIs, oMEHs, oMRLs, oMCPs, oMPBs, oMWEs...  UATs for this UP to delete
                var oMLSs = new List<MemberLanguageSpoken>();
                var oMCIs = new List<ContactInfo>();
                var oMEHs = new List<MemberEducation>();
                var oMRLs = new List<MemberRelation>();
                var oMCPs = new List<MemberContact>();
                var oMPBs = new List<MemberProfessionBrand>();
                var oMWEs = new List<MemberWorkExperience>();
                /// church-life...
                var oMTPs = new List<MemberType>(); var oMSTs = new List<MemberStatus>(); var oMRKs = new List<MemberRank>();
                var oMCLs = new List<MemberChurchlife>(); var oMCAs = new List<MemberChurchlifeActivity>(); var oMCUs = new List<MemberChurchUnit>();
                var oMCRs = new List<MemberChurchRole>(); var oMRGs = new List<MemberRegistration>();
                var oMTRs = new List<ChurchTransfer>(); var oMATs = new List<ChurchAttendAttendee>();
                var UATs = new List<UserAuditTrail>();

                var oMUPs = _masterContext.UserProfile.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO_MSTR.Id && c.ChurchBodyId == oCB_MSTR.Id && c.ChurchMemberId == oChurchMember.Id).ToList();    // .... cascade delete together with the roles, groups / permissions assigned
                ///
                if (oMUPs.Count == 0) oMLSs = _context.MemberLanguageSpoken.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                if ((oMUPs.Count + oMLSs.Count) == 0) oMCIs = _context.ContactInfo.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && (c.Id == oChurchMember.PrimContactInfoId || c.ChurchMemberId == oChurchMember.Id)).ToList();
                if ((oMUPs.Count + oMLSs.Count + oMCIs.Count) == 0) oMEHs = _context.MemberEducation.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                if ((oMUPs.Count + oMLSs.Count + oMCIs.Count + oMEHs.Count) == 0) oMRLs = _context.MemberRelation.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                if ((oMUPs.Count + oMLSs.Count + oMCIs.Count + oMEHs.Count + oMRLs.Count) == 0) oMCPs = _context.MemberContact.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                if ((oMUPs.Count + oMLSs.Count + oMCIs.Count + oMEHs.Count + oMRLs.Count + oMCPs.Count) == 0) oMPBs = _context.MemberProfessionBrand.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                if ((oMUPs.Count + oMLSs.Count + oMCIs.Count + oMEHs.Count + oMRLs.Count + oMCPs.Count + oMPBs.Count) == 0) oMWEs = _context.MemberWorkExperience.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                var oMPLCount = oMUPs.Count + oMLSs.Count + oMCIs.Count + oMEHs.Count + oMRLs.Count + oMCPs.Count + oMPBs.Count;
                ///church-life stuff
                if (oMPLCount == 0) oMTPs = _context.MemberType.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                if ((oMPLCount + oMTPs.Count) == 0) oMSTs = _context.MemberStatus.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                if ((oMPLCount + oMTPs.Count + oMSTs.Count) == 0) oMRKs = _context.MemberRank.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                if ((oMPLCount + oMTPs.Count + oMSTs.Count + oMRKs.Count) == 0) oMCLs = _context.MemberChurchlife.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                if ((oMPLCount + oMTPs.Count + oMSTs.Count + oMRKs.Count + oMCLs.Count) == 0) oMCAs = _context.MemberChurchlifeActivity.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                if ((oMPLCount + oMTPs.Count + oMSTs.Count + oMRKs.Count + oMCLs.Count + oMCAs.Count) == 0) oMCUs = _context.MemberChurchUnit.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                if ((oMPLCount + oMTPs.Count + oMSTs.Count + oMRKs.Count + oMCLs.Count + oMCAs.Count + oMCUs.Count) == 0) oMCRs = _context.MemberChurchRole.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                if ((oMPLCount + oMTPs.Count + oMSTs.Count + oMRKs.Count + oMCLs.Count + oMCAs.Count + oMCUs.Count + oMCRs.Count) == 0) oMRGs = _context.MemberRegistration.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                if ((oMPLCount + oMTPs.Count + oMSTs.Count + oMRKs.Count + oMCLs.Count + oMCAs.Count + oMCUs.Count + oMCRs.Count + oMRGs.Count) == 0) oMTRs = _context.ChurchTransfer.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                if ((oMPLCount + oMTPs.Count + oMSTs.Count + oMRKs.Count + oMCLs.Count + oMCAs.Count + oMCUs.Count + oMCRs.Count + oMRGs.Count + oMTRs.Count) == 0) oMATs = _context.ChurchAttendAttendee.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                ///                
                var oMCLCount = oMTPs.Count + oMSTs.Count + oMRKs.Count + oMCLs.Count + oMCAs.Count + oMCUs.Count + oMCRs.Count + oMRGs.Count + oMTRs.Count + oMATs.Count;

                if ((oMPLCount + oMCLCount) == 0) UATs = _masterContext.UserAuditTrail.AsNoTracking().Where(c => c.UserProfile.ChurchMemberId == oChurchMember.Id).ToList();

                ///
                //  using (var _userCtx = new ChurchModelContext(_masterContext.Database.GetDbConnection().ConnectionString))
                //  {
                if ((oMPLCount + oMCLCount + UATs.Count) > 0)
                {
                    if (f_delcfm == false)
                    {
                        var strConnTabs = "Member personal info, Churchlife modules, User audit trail";  //Church member role, Church member group and 
                        saveDelete = false;

                        // check user privileges to determine... administrator rights
                        //log...
                        _userTask = "Attempted deleting " + strDesc.ToLower() + ", " + _strMemberName + " [" + oChurchMember.GlobalMemberCode + "]" + strUserDenom;
                        _tm = DateTime.Now;
                        _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                                         "RCMS-Client:  " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, log_uid, _tm, _tm, log_uid, log_uid));

                        return Json(new
                        {
                            taskSuccess = false,
                            tryForceDelete = false,
                            oCurrId = id,
                            userMess = "Specified " + strDesc.ToLower() +
                                            " to delete has been used elsewhere in the system [" + strConnTabs + "]. Delete cannot be done unless dependent-references are removed."
                        });
                    }

                    //to be executed only for higher privileges... // FORCE-DELETE...
                }

                //successful...
                if (saveDelete)
                {
                    _context.ChurchMember.Remove(oChurchMember);
                    _context.SaveChanges();
                     
                    // DetachAllEntities(_userCtx);
                     

                    //audit...
                    _userTask = "Deleted " + strDesc.ToLower() + ", " + _strMemberName + " [" + oChurchMember.GlobalMemberCode + "]" + strUserDenom;
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                                     "RCMS-Client:  " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, log_uid, _tm, _tm, log_uid, log_uid));

                    /// update the member roll summary table... when new m added or triggered by user or at refresh 
                    /// add new, upd [stat, dob, gen, group ... upd roll] and delete /transfer
                    // if (_reset) {
                    var resRollUpd = UpdCBMemRoll(oChurchMember.AppGlobalOwnerId, oChurchMember.ChurchBodyId, this._oLoggedUser.Id);
                    if (resRollUpd < 0) _userTask += ". Member roll summary update failed. Try update again later.";
                    else if (resRollUpd == 0) _userTask += ". Member roll summary update incomplete. Try update again later.";
                    // }

                    return Json(new { taskSuccess = true, tryForceDelete = false, currCBId = oCurrCBid, userMess = strDesc + " successfully deleted." });
                }
                //  }


                _userTask = "Attempted deleting " + strDesc.ToLower() + "," + _strMemberName + "[" + oChurchMember.GlobalMemberCode + "]" + strUserDenom + " -- but FAILED. Data unavailable.";   // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, log_uid, _tm, _tm, log_uid, log_uid));

                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "No " + strDesc.ToLower() + " data available to delete. Try again" });
            }

            catch (Exception ex)
            {
                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [ ID= " + id + "] FAILED. ERR: " + ex.Message;  // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, log_uid, _tm, _tm, log_uid, log_uid));
                //
                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Failed deleting " + strDesc.ToLower() + ". Err: " + ex.Message });
            }
        }

        public IActionResult DeleteCM_moMPC(int? oAGOid, int? oCurrCBid, int? oCurrCMid, int? log_uid, int id, int s_ndx, int sb_ndx, bool f_delcfm = false)
        {
            if (this._context == null)
            {
                this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                if (this._context == null)
                {
                    RedirectToAction("LoginUserAcc", "UserLogin");

                    // should not get here... Response.StatusCode = 500; 
                    return View("_ErrorPage");
                }
            }

            // var strDesc = s_ndx == 1 ? "System profile" : s_ndx == 2 ? "Church admin profile" : "Church church member";
            var strDesc = "Church member"; // (s_ndx == 1 ? "System admin profile" : (s_ndx == 2 ? "Church admin profile" : "Church church member"));

            ///
            var _strMemberName = "[member]";
            var tm = DateTime.Now; var _tm = DateTime.Now; var _userTask = "Attempted deleting  " + strDesc;
            //
            try
            {
                var strUserDenom = "Client Admin";
                if (oAGOid == null || oCurrCBid == null)
                    return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Denomination/church of " + strDesc + " unknown. Please refesh and try again." });
                                
                if (s_ndx >= 11 && s_ndx <= 18 && this._oLoggedCB.Id != oCurrCBid)
                    return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Only the respective base church unit of member [at the time] can perform this function (delete) on the member's churchlife." });

                var oAGO = _context.AppGlobalOwner.Find(oAGOid);
                var oCB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && c.Id == oCurrCBid).FirstOrDefault();

                if (oAGO == null || oCB == null)
                    return Json(new { taskSuccess = false, oCurrId = "", userMess = "Specified denomination and church unit could not be retrieved. Please refresh and try again.", signOutToLogIn = false });

                var oAGO_MSTR = _masterContext.MSTRAppGlobalOwner.Find(oAGO.MSTR_AppGlobalOwnerId);
                var oCB_MSTR = _masterContext.MSTRChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && c.Id == oCurrCBid).FirstOrDefault();

                if (oAGO_MSTR == null || oCB_MSTR == null)
                    return Json(new { taskSuccess = false, oCurrId = "", userMess = "Specified denomination and church unit could not be tracked as client modules. Please refresh and try again or see Administrator.", signOutToLogIn = false });


                strUserDenom = oCB.Name + (!string.IsNullOrEmpty(oAGO.Acronym) ? ", " + oAGO.Acronym : oAGO.OwnerName);
                strUserDenom = (!string.IsNullOrEmpty(strUserDenom) ? "Denomination: " + strUserDenom : strUserDenom);//"--" +

                // check if member exist first...
                var oChurchMember = _context.ChurchMember.AsNoTracking().Where(c => c.Id == oCurrCMid && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid).FirstOrDefault();
                if (oChurchMember == null)
                    return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Member profile could not be not be determined. Please check and try again." });

                /// 
                strDesc += " -";
                var itemDelFound = false;
                MemberLanguageSpoken oCM_MLS = null;
                ContactInfo oCM_MCI = null;
                MemberRelation oCM_MFR = null;
                MemberContact oCM_MCP = null;
                MemberEducation oCM_MED = null;
                MemberProfessionBrand oCM_MPB = null;
                MemberWorkExperience oCM_MWE = null;

                /// church-life...
                MemberChurchlife oCM_MCL = null; MemberChurchlifeActivity oCM_MCLAc = null; MemberChurchlifeEventTask oCM_MCET = null;
                MemberType oCM_MT = null; MemberRank oCM_MR = null; MemberStatus oCM_MS = null;
                MemberChurchUnit oCM_MCG = null;
                MemberChurchRole oCM_MCR = null;
                MemberRegistration oCM_MRR = null;
                ChurchAttendAttendee oCM_MCA = null;
                ChurchTransfer oCM_MCT = null;
               // ChurchTithePayment oCM_MT = null;
                ///
                switch (s_ndx)
                {
                    // member personal info...    BD-1, MCI-2, MLS-3, MFR-4, MCP-5, MED-6, MPB-7, MWE-8 ... 
                    //case 1: strDesc += "biodata"; // MBD", oMPCModel.oMemberBioModel);
                    //    var oCM_BD = _context.ChurchMember.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid).FirstOrDefault();
                    //    itemDelFound = oCM_BD != null;
                    //    break; 

                    case 2: strDesc += "contact info";  // MCI", oMPCModel.oMemberContactInfoModel);
                        oCM_MCI = _context.ContactInfo.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                        itemDelFound = oCM_MCI != null;
                        break; 
                    case 3: strDesc += "language spoken"; // MLS", oMPCModel.oMemberLanguageSpokenModel);
                        oCM_MLS = _context.MemberLanguageSpoken.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                        itemDelFound = oCM_MLS != null;
                        break;
                    case 4: strDesc += "family relation";  // MFR", oMPCModel);
                        oCM_MFR = _context.MemberRelation.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                        itemDelFound = oCM_MFR != null;
                        break;
                    case 5: strDesc += "contact person"; // MCP", oMPCModel);
                        oCM_MCP = _context.MemberContact.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                        itemDelFound = oCM_MCP != null;
                        break;
                    case 6: strDesc += "education";  // MED", oMPCModel);
                        oCM_MED = _context.MemberEducation.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                        itemDelFound = oCM_MED != null;
                        break;
                    case 7: strDesc += "profession /brand";  // MPB", oMPCModel);
                        oCM_MPB = _context.MemberProfessionBrand.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                        itemDelFound = oCM_MPB != null;
                        break;
                    case 8: strDesc += "work experience"; // MWE", oMPCModel);
                        oCM_MWE = _context.MemberWorkExperience.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                        itemDelFound = oCM_MWE != null;
                        break;

                    /// 
                    // member // -11... MCM-12, MCG-13, MCR-14, MRR-15, MCA-16, MCT-17, MTP-18 
                    case 11:
                        switch (sb_ndx)
                        {
                            case 1: strDesc += "churchlife"; // _MCL ", oMPCModel);
                                oCM_MCL = _context.MemberChurchlife.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                                itemDelFound = oCM_MCL != null;
                                break;
                            case 2: strDesc += "churchlife event"; // _MCL ", oMPCModel);
                                oCM_MCLAc = _context.MemberChurchlifeActivity.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                                itemDelFound = oCM_MCLAc != null;
                                break;
                            case 3: strDesc += "churchlife event task"; // _MCL ", oMPCModel); 
                                oCM_MCET = _context.MemberChurchlifeEventTask.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                                itemDelFound = oCM_MCET != null;
                                break;
                        }
                        break;

                    case 12:
                        switch (sb_ndx)
                        {
                            case 1: strDesc += "member type"; // _MCM", oMPCModel);
                                oCM_MT = _context.MemberType.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                                itemDelFound = oCM_MT != null;
                                break;
                            case 2: strDesc += "member rank";  //_MCM", oMPCModel);
                                oCM_MR = _context.MemberRank.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                                itemDelFound = oCM_MR != null;
                                break;
                            case 3: strDesc += "member status";  // _MCM", oMPCModel);
                                oCM_MS = _context.MemberStatus.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                                itemDelFound = oCM_MS != null;
                                break;
                        }
                        break;

                    case 13: strDesc += "church group"; // _MCG", oMPCModel);
                        oCM_MCG = _context.MemberChurchUnit.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                        itemDelFound = oCM_MCG != null;
                        break;
                    case 14: strDesc += "church role /position"; // _MCR", oMPCModel);
                        oCM_MCR = _context.MemberChurchRole.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                        itemDelFound = oCM_MCR != null;
                        break;
                    case 15: strDesc += "registration /renewal"; // _MRR", oMPCModel);
                        oCM_MRR = _context.MemberRegistration.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                        itemDelFound = oCM_MRR != null;
                        break;
                    case 16: strDesc += "church attendance"; // _MCA", oMPCModel);
                        oCM_MCA = _context.ChurchAttendAttendee.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                        itemDelFound = oCM_MCA != null;
                        break;
                    case 17: strDesc += "church transfer"; // _MCT", oMPCModel);
                        oCM_MCT = _context.ChurchTransfer.AsNoTracking().Where(c => c.Id == id && c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCurrCBid && c.ChurchMemberId == oCurrCMid).FirstOrDefault();
                        itemDelFound = oCM_MCT != null;
                        break;

                   // case 18: strDesc += "payment"; break; // _MTP", oMPCModel);   // tithe details of member... thus where individual tithing is done!

                    default:
                        return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Member item [module] to delete not determined. Please check and try again." });
                }


                                           
                if (!itemDelFound)
                {
                    _strMemberName = oChurchMember.FirstName + " " + oChurchMember.LastName;
                    _userTask = "Attempted deleting " + strDesc.ToLower() + ", " + _strMemberName + " [" + oChurchMember.GlobalMemberCode + "]" + strUserDenom;  // var _userTask = "Attempted saving  " + strDesc;
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                                     "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, log_uid, _tm, _tm, log_uid, log_uid));

                    return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = strDesc + " to delete could not be retrieved." });
                }

                var saveDelete = true;
                // ensuring cascade delete where there's none!

                ////check oMLSs, oMCIs, oMEHs, oMRLs, oMCPs, oMPBs, oMWEs...  UATs for this UP to delete
                //var oMLSs = new List<MemberLanguageSpoken>();
                //var oMCIs = new List<ContactInfo>();                
                //var oMRLs = new List<MemberRelation>();
                //var oMCPs = new List<MemberContact>();
                //var oMEHs = new List<MemberEducation>();
                //var oMPBs = new List<MemberProfessionBrand>();
                //var oMWEs = new List<MemberWorkExperience>();

                ///// church-life...
                //var oMCLs = new List<MemberChurchlife>(); var oMCAs = new List<MemberChurchlifeActivity>();  var oCM_MCLAcs = new List<MemberChurchlifeActivity>(); 
                //var oMTPs = new List<MemberType>(); var oMRKs = new List<MemberRank>(); var oMSTs = new List<MemberStatus>();    
                //var oMCUs = new List<MemberChurchUnit>();             
                //var oMCRs = new List<MemberChurchRole>(); 
                //var oMRGs = new List<MemberRegistration>();
                //var oMATs = new List<ChurchAttendAttendee>();
                //var oMTRs = new List<ChurchTransfer>(); 

                /////
                //var UATs = new List<UserAuditTrail>();

                //var oMUPs = _masterContext.UserProfile.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO_MSTR.Id && c.ChurchBodyId == oCB_MSTR.Id && c.ChurchMemberId == oChurchMember.Id).ToList();    // .... cascade delete together with the roles, groups / permissions assigned
                /////
                //if (oMUPs.Count == 0) oMLSs = _context.MemberLanguageSpoken.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //if ((oMUPs.Count + oMLSs.Count) == 0) oMCIs = _context.ContactInfo.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && (c.Id == oChurchMember.PrimContactInfoId || c.ChurchMemberId == oChurchMember.Id)).ToList();
                //if ((oMUPs.Count + oMLSs.Count + oMCIs.Count) == 0) oMEHs = _context.MemberEducation.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //if ((oMUPs.Count + oMLSs.Count + oMCIs.Count + oMEHs.Count) == 0) oMRLs = _context.MemberRelation.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //if ((oMUPs.Count + oMLSs.Count + oMCIs.Count + oMEHs.Count + oMRLs.Count) == 0) oMCPs = _context.MemberContact.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //if ((oMUPs.Count + oMLSs.Count + oMCIs.Count + oMEHs.Count + oMRLs.Count + oMCPs.Count) == 0) oMPBs = _context.MemberProfessionBrand.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //if ((oMUPs.Count + oMLSs.Count + oMCIs.Count + oMEHs.Count + oMRLs.Count + oMCPs.Count + oMPBs.Count) == 0) oMWEs = _context.MemberWorkExperience.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //var oMPLCount = oMUPs.Count + oMLSs.Count + oMCIs.Count + oMEHs.Count + oMRLs.Count + oMCPs.Count + oMPBs.Count;
                /////church-life stuff
                //if (oMPLCount == 0) oMTPs = _context.MemberType.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //if ((oMPLCount + oMTPs.Count) == 0) oMSTs = _context.MemberStatus.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //if ((oMPLCount + oMTPs.Count + oMSTs.Count) == 0) oMRKs = _context.MemberRank.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //if ((oMPLCount + oMTPs.Count + oMSTs.Count + oMRKs.Count) == 0) oMCLs = _context.MemberChurchlife.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //if ((oMPLCount + oMTPs.Count + oMSTs.Count + oMRKs.Count + oMCLs.Count) == 0) oMCAs = _context.MemberChurchlifeActivity.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //if ((oMPLCount + oMTPs.Count + oMSTs.Count + oMRKs.Count + oMCLs.Count + oMCAs.Count) == 0) oMCUs = _context.MemberChurchUnit.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //if ((oMPLCount + oMTPs.Count + oMSTs.Count + oMRKs.Count + oMCLs.Count + oMCAs.Count + oMCUs.Count) == 0) oMCRs = _context.MemberChurchRole.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //if ((oMPLCount + oMTPs.Count + oMSTs.Count + oMRKs.Count + oMCLs.Count + oMCAs.Count + oMCUs.Count + oMCRs.Count) == 0) oMRGs = _context.MemberRegistration.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //if ((oMPLCount + oMTPs.Count + oMSTs.Count + oMRKs.Count + oMCLs.Count + oMCAs.Count + oMCUs.Count + oMCRs.Count + oMRGs.Count) == 0) oMTRs = _context.ChurchTransfer.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                //if ((oMPLCount + oMTPs.Count + oMSTs.Count + oMRKs.Count + oMCLs.Count + oMCAs.Count + oMCUs.Count + oMCRs.Count + oMRGs.Count + oMTRs.Count) == 0) oMATs = _context.ChurchAttendAttendees.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && c.ChurchMemberId == oChurchMember.Id).ToList();
                /////                
                //var oMCLCount = oMTPs.Count + oMSTs.Count + oMRKs.Count + oMCLs.Count + oMCAs.Count + oMCUs.Count + oMCRs.Count + oMRGs.Count + oMTRs.Count + oMATs.Count;
                // if ((oMPLCount + oMCLCount) == 0) UATs = _masterContext.UserAuditTrail.AsNoTracking().Where(c => c.UserProfile.ChurchMemberId == oChurchMember.Id).ToList();

                
                var oCM_MCETs = new List<MemberChurchlifeEventTask>();
                if (s_ndx == 11 && sb_ndx == 3 && oCM_MCLAc != null)
                {
                    oCM_MCETs = _context.MemberChurchlifeEventTask.AsNoTracking().Where(c => c.MemberChurchlifeActivityId == oCM_MCLAc.Id && c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id && 
                                        c.ChurchMemberId == oChurchMember.Id).ToList();
                }

                var oCM_AASs = new List<ApprovalActionStep>();
                if (s_ndx == 14 && oCM_MCLAc != null)
                {
                    oCM_AASs = _context.ApprovalActionStep.AsNoTracking().Where(c => c.ApproverMemberChurchRoleId == oCM_MCR.Id && c.AppGlobalOwnerId == oAGO.Id && c.ChurchBodyId == oCB.Id).ToList();
                }

                /// --- these 16 modules less [oCM_MCETs, oCM_AASs] can be deleted anytime... no ref...
                //  using (var _userCtx = new ChurchModelContext(_masterContext.Database.GetDbConnection().ConnectionString))
                //  {
                if ((oCM_MCETs.Count + oCM_AASs.Count) > 0)
                {
                    if (f_delcfm == false)
                    {
                        var strConnTabs = "Member Churchlife event task, Approval action step (transfers setup)";  //Church member role, Church member group and 
                        saveDelete = false;

                        // check user privileges to determine... administrator rights
                        //log...
                        _userTask = "Attempted deleting " + strDesc.ToLower() + ", " + _strMemberName + " [" + oChurchMember.GlobalMemberCode + "]" + strUserDenom;
                        _tm = DateTime.Now;
                        _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                                         "RCMS-Client:  " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, log_uid, _tm, _tm, log_uid, log_uid));

                        return Json(new
                        {
                            taskSuccess = false,
                            tryForceDelete = false,
                            oCurrId = id,
                            userMess = "Specified " + strDesc.ToLower() +
                                            " to delete has been used elsewhere in the system [" + strConnTabs + "]. Delete cannot be done unless dependent-references are removed."
                        });
                    }

                    //to be executed only for higher privileges... // FORCE-DELETE...
                }

                //successful...
                if (saveDelete)
                {
                    switch (s_ndx)
                    {
                        case 2: _context.ContactInfo.Remove(oCM_MCI); break;
                        case 3: _context.MemberLanguageSpoken.Remove(oCM_MLS); break;
                        case 4: _context.MemberRelation.Remove(oCM_MFR); break;
                        case 5: _context.MemberContact.Remove(oCM_MCP); break;
                        case 6: _context.MemberEducation.Remove(oCM_MED); break;
                        case 7: _context.MemberProfessionBrand.Remove(oCM_MPB); break;
                        case 8: _context.MemberWorkExperience.Remove(oCM_MWE); break;
                            ///

                        case 11:
                            switch (sb_ndx)
                            {
                                case 1: _context.MemberChurchlife.Remove(oCM_MCL); break;
                                case 2: _context.MemberChurchlifeActivity.Remove(oCM_MCLAc); break;
                                case 3: _context.MemberChurchlifeEventTask.Remove(oCM_MCET); break;
                            } 
                            break;
                        case 12:
                            switch (sb_ndx)
                            {
                                case 1: _context.MemberType.Remove(oCM_MT); break;
                                case 2: _context.MemberRank.Remove(oCM_MR); break;
                                case 3: _context.MemberStatus.Remove(oCM_MS); break;
                            }
                            break;
                        case 13: _context.MemberChurchUnit.Remove(oCM_MCG); break;
                        case 14: _context.MemberChurchRole.Remove(oCM_MCR); break;
                        case 15: _context.MemberRegistration.Remove(oCM_MRR); break;
                        case 16: _context.ChurchAttendAttendee.Remove(oCM_MCA); break;
                        case 17: _context.ChurchTransfer.Remove(oCM_MCT); break;

                        // case 18: _context.TitheTrans.Remove(oCM_MT); break;

                    }

                    // _context.ChurchMember.Remove(oChurchMember);
                    _context.SaveChanges();

                    // DetachAllEntities(_userCtx);


                    //audit...
                    _userTask = "Deleted " + strDesc.ToLower() + " of member, " + _strMemberName + " [" + oChurchMember.GlobalMemberCode + "]" + strUserDenom;
                    _tm = DateTime.Now;
                    _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                                     "RCMS-Client:  " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, log_uid, _tm, _tm, log_uid, log_uid));

                    /// update the member roll summary table... when new m added or triggered by user or at refresh 
                    /// add new, upd [stat, dob, gen, group ... upd roll] and delete /transfer
                    // if (_reset) {

                    var resRollUpd = UpdCBMemRoll(oChurchMember.AppGlobalOwnerId, oChurchMember.ChurchBodyId, this._oLoggedUser.Id);
                    if (resRollUpd < 0) _userTask += ". Member roll summary update failed. Try update again later.";
                    else if (resRollUpd == 0) _userTask += ". Member roll summary update incomplete. Try update again later.";

                    // }

                    return Json(new { taskSuccess = true, tryForceDelete = false, currCBId = oCurrCBid, userMess = strDesc + " successfully deleted." });
                }
                //  }


                _userTask = "Attempted deleting " + strDesc.ToLower() + " of member, " + _strMemberName + "[" + oChurchMember.GlobalMemberCode + "]" + strUserDenom + " -- but FAILED. Data unavailable.";   // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, log_uid, _tm, _tm, log_uid, log_uid));

                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "No " + strDesc.ToLower() + " data available to delete. Try again" });
            }

            catch (Exception ex)
            {
                _userTask = "Attempted deleting " + strDesc.ToLower() + ", [ ID= " + id + "] FAILED. ERR: " + ex.Message;  // var _userTask = "Attempted saving " + strDesc;
                _tm = DateTime.Now;
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "T",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, _tm, log_uid, _tm, _tm, log_uid, log_uid));
                //
                return Json(new { taskSuccess = false, tryForceDelete = false, oCurrId = id, userMess = "Failed deleting " + strDesc.ToLower() + ". Err: " + ex.Message });
            }
        }

        public IActionResult UpdCBMemRoll_Trig(int? oAGOid, int? oCBid = null, int? oUserId_Logged = null)  // -1 - fail, 0 = incomplete, 1 - done
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return View("_ErrorPage");
                    }
                }


                var resRollUpd = UpdCBMemRoll(oAGOid, oCBid, this._oLoggedUser.Id);
                if (resRollUpd < 0) ViewBag.UserMsg = ". Member roll summary update failed. Try update again later.";
                else if (resRollUpd == 0) ViewBag.UserMsg = ". Member roll summary update incomplete. Try update again later.";

                return Json(new { taskSuccess = true, currId = 0, resetNew = false, currCBId = oCBid, userMess = ViewBag.UserMsg, signOutToLogIn = false });
            }
            catch (Exception ex)
            {
                return Json(new { taskSuccess = false, oCurrId = 0, userMess = "Failed updating church member roll. Err: " + ex.Message, signOutToLogIn = false });
            }

        }

        public int UpdCBMemRoll(int? oAGOid, int? oCBid = null, int? oUserId_Logged = null)  // -1 - fail, 0 = incomplete, 1 - done
        { // jux update with data passed and return... 
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here...  
                        ViewData["strRes_UpdCBMemRoll"] = "Member Roll update failed. Client database failed to connect. Try updating roll table later."; 
                        return -1;
                    }
                }

                var strDesc = "Church Body Roll Bal";
                var _userTask = "";


                //// get curr CB 
                var oCBCurr = _context.ChurchBody.AsNoTracking().Include(t => t.ParentChurchBody) //.Include(t => t.ChurchLevel)
                            .Where(c => c.AppGlobalOwnerId == oAGOid && c.Id == oCBid).FirstOrDefault();

                if (oCBCurr == null)
                { ViewData["strRes_UpdCBMemRoll"] = "Updated congregation's member roll summary. Roll update failed. Congregation details could not be retrieved. Try updating roll table later."; return -1; }

                /// get the current year
                var oCP_List_1 = 
                                _context.ChurchPeriod.AsNoTracking().Include(t => t.OwnedByChurchBody) //
                                .Where(c => c.AppGlobalOwnerId == oAGOid && c.Status == "A").ToList();  // && c.PeriodType == "AP"

                oCP_List_1 = oCP_List_1.Where(c =>
                                   (c.OwnedByChurchBodyId == this._oLoggedCB.Id ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "C" && c.OwnedByChurchBodyId == this._oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != this._oLoggedCB.Id && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, this._oLoggedCB)))).ToList();
                ChurchPeriod oCPRDefault = oCP_List_1.FirstOrDefault();
               

                if (oCPRDefault == null)
                { ViewData["strRes_UpdCBMemRoll"] = "Updated congregation's member roll summary. Roll update failed. Church period could not be retrieved. Try updating roll table later."; return -1; }
                var oCPRDefaultId = oCPRDefault != null ? oCPRDefault.Id : (int?)null;  // prompt for error


                // update curr CB ...
                // get list of local members... and save first... then update table afterward
                var oCMList = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.MemberScope == "I" &&
                                                (c.Status == "A" || c.Status == "T")).ToList();  // Active-In Transit-Blocked-Deactive current members only ::- keep oCM.Status in sync with [MemberStatus] ...VIPPP
                foreach (ChurchMember oCM in oCMList)
                {
                    oCM.numMemAge = oCM.DateOfBirth != null ? (int)AppUtilties.CalcDateDiff(oCM.DateOfBirth.Value, DateTime.Now.Date, false, true) : -1;
                }

                ///
                var tm = DateTime.Now;

                // get these value from the settings of the CB... may be inherited too! so check out boy
                //var strNVPCode = "TTL";    // c.Id != oCurrNVP.Id && 
                // c.NVPCode == "GEN_AGE_GRP_C" || "GEN_AGE_GRP_Y" || "GEN_AGE_GRP_YA" || "GEN_AGE_GRP_MA" || "GEN_AGE_GRP_AA"
                var oNVP_List_1 = _context.AppUtilityNVP.AsNoTracking().Include(t => t.AppGlobalOwner).Include(t => t.OwnedByChurchBody)
                                                   .Where(c => c.AppGlobalOwnerId == oAGOid && 
                                                   c.NVPCode.Contains("GEN_AGE_GRP")).ToList();
                oNVP_List_1 = oNVP_List_1.Where(c =>
                                   (c.OwnedByChurchBodyId == oCBid ||
                                   (c.OwnedByChurchBodyId != oCBid && c.SharingStatus == "C" && c.OwnedByChurchBodyId == _oLoggedCB.ParentChurchBodyId) ||
                                   (c.OwnedByChurchBodyId != oCBid && c.SharingStatus == "A" && IsAncestor_ChurchBody(c.OwnedByChurchBody, oCBCurr)))).ToList();

                //vmLkp.lkpPersTitles = oNVP_List_1 //_context.AppUtilityNVP.Where(c => c.AppGlobalOwnerId == oCurrNVP.AppGlobalOwnerId && c.ChurchBodyId == oCurrNVP.ChurchBodyId &&  c.NVPCode == oCurrNVP.NVPCode && c.Id != oCurrNVP.Id)
                //                            .OrderBy(c => c.OrderIndex)
                //                            .ThenBy(c => c.NVPValue)
                //                            .Select(c => new SelectListItem()
                //                            {
                //                                Value = c.NVPValue,
                //                                Text = c.NVPValue
                //                            })
                //                            .ToList();

                var oNVP_List_C = oNVP_List_1.Where(c => c.NVPCode == "GEN_AGE_GRP_C").FirstOrDefault();
                var oNVP_List_Y = oNVP_List_1.Where(c => c.NVPCode == "GEN_AGE_GRP_Y").FirstOrDefault();
                var oNVP_List_YA = oNVP_List_1.Where(c => c.NVPCode == "GEN_AGE_GRP_YA").FirstOrDefault();
                var oNVP_List_MA = oNVP_List_1.Where(c => c.NVPCode == "GEN_AGE_GRP_MA").FirstOrDefault();
                var oNVP_List_AA = oNVP_List_1.Where(c => c.NVPCode == "GEN_AGE_GRP_AA").FirstOrDefault();
               // var ageLim_C = 0; var ageLim_Y = 0; var ageLim_YA = 0; var ageLim_MA = 0; var ageLim_AA = 0;
                var ageMin_C = 0; var ageMin_Y = 0; var ageMin_YA = 0; var ageMin_MA = 0; var ageMin_AA = 0;
                var ageMax_C = 0; var ageMax_Y = 0; var ageMax_YA = 0; var ageMax_MA = 0; var ageMax_AA = 0;
                ///
                if (oNVP_List_C != null)
                {
                    ageMin_C = (int)oNVP_List_C.NVPNumVal >= 0 ? (int)oNVP_List_C.NVPNumVal : 0 ;
                    ageMax_C = (int)oNVP_List_C.NVPNumValTo >= (int)oNVP_List_C.NVPNumVal ? (int)oNVP_List_C.NVPNumValTo : (int)oNVP_List_C.NVPNumVal;
                }
                if (oNVP_List_Y != null)
                {
                    ageMin_Y = (int)oNVP_List_Y.NVPNumVal >= 0 ? (int)oNVP_List_Y.NVPNumVal : 0;
                    ageMax_Y = (int)oNVP_List_Y.NVPNumValTo >= (int)oNVP_List_Y.NVPNumVal ? (int)oNVP_List_Y.NVPNumValTo : (int)oNVP_List_Y.NVPNumVal;
                }
                if (oNVP_List_YA != null)
                {
                    ageMin_YA = (int)oNVP_List_YA.NVPNumVal >= 0 ? (int)oNVP_List_YA.NVPNumVal : 0;
                    ageMax_YA = (int)oNVP_List_YA.NVPNumValTo >= (int)oNVP_List_YA.NVPNumVal ? (int)oNVP_List_YA.NVPNumValTo : (int)oNVP_List_YA.NVPNumVal;
                }
                if (oNVP_List_MA != null)
                {
                    ageMin_MA = (int)oNVP_List_MA.NVPNumVal >= 0 ? (int)oNVP_List_MA.NVPNumVal : 0;
                    ageMax_MA = (int)oNVP_List_MA.NVPNumValTo >= (int)oNVP_List_MA.NVPNumVal ? (int)oNVP_List_MA.NVPNumValTo : (int)oNVP_List_MA.NVPNumVal;
                }
                if (oNVP_List_AA != null)
                {
                    ageMin_AA = (int)oNVP_List_AA.NVPNumVal >= 0 ? (int)oNVP_List_AA.NVPNumVal : 0;
                    ageMax_AA = (int)oNVP_List_AA.NVPNumValTo >= (int)oNVP_List_AA.NVPNumVal ? (int)oNVP_List_AA.NVPNumValTo : (int)oNVP_List_AA.NVPNumVal;
                }
                ///
                 
                ///
                var _countCBRollAdd = 0; var _countCBRollUpd = 0;
                var oCBMemRoll = _context.CBMemberRollBal.AsNoTracking()
                    .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBid && c.ChurchPeriodId == oCPRDefaultId).FirstOrDefault();
                if (oCBMemRoll != null)
                {
                    //oCBMemRoll.AppGlobalOwnerId = oAGOid;
                    //oCBMemRoll.ChurchBodyId = oCBid;
                    // oCBMemRoll.ChurchPeriodId = oCPRDefaultId;   // cannot change jux like that... this na money matters oo

                    oCBMemRoll.Created = tm;
                    oCBMemRoll.LastMod = tm;
                    oCBMemRoll.CreatedByUserId = oUserId_Logged;
                    oCBMemRoll.LastModByUserId = oUserId_Logged;
                     
                     ///
                    oCBMemRoll.TotRoll = oCMList.Count();
                    oCBMemRoll.Tot_M = oCMList.Count(x => x.Gender == "M");
                    oCBMemRoll.Tot_F = oCMList.Count(x => x.Gender == "F");
                    oCBMemRoll.Tot_O = oCMList.Count(x => x.Gender == "O");
                    oCBMemRoll.Tot_C = oCMList.Count(x => x.numMemAge >= ageMin_C && x.numMemAge <= ageMax_C);
                    oCBMemRoll.Tot_Y = oCMList.Count(x => x.numMemAge >= ageMin_Y && x.numMemAge <= ageMax_Y);
                    oCBMemRoll.Tot_YA = oCMList.Count(x => x.numMemAge >= ageMin_YA && x.numMemAge <= ageMax_YA);
                    oCBMemRoll.Tot_MA = oCMList.Count(x => x.numMemAge >= ageMin_MA && x.numMemAge <= ageMax_MA);
                    oCBMemRoll.Tot_AA = oCMList.Count(x => x.numMemAge >= ageMin_AA && x.numMemAge <= ageMax_AA);

                    _context.CBMemberRollBal.Update(oCBMemRoll);
                    _countCBRollUpd++;
                }
                else  // add CB roll to the table
                {
                    oCBMemRoll = new CBMemberRollBal()
                    { 
                        AppGlobalOwnerId = oAGOid,
                        ChurchBodyId = oCBid,
                        ChurchPeriodId = oCPRDefaultId,
                        ///
                        Created = tm,
                        LastMod = tm,
                        CreatedByUserId = oUserId_Logged,
                        LastModByUserId = oUserId_Logged,
                        ///
                        TotRoll = oCMList.Count(), 
                        Tot_M = oCMList.Count(x => x.Gender == "M"),
                        Tot_F = oCMList.Count(x => x.Gender == "F"),
                        Tot_O = oCMList.Count(x => x.Gender == "O"),
                        Tot_C = oCMList.Count(x => x.numMemAge >= ageMin_C && x.numMemAge <= ageMax_C),
                        Tot_Y = oCMList.Count(x => x.numMemAge >= ageMin_Y && x.numMemAge <= ageMax_Y),
                        Tot_YA = oCMList.Count(x => x.numMemAge >= ageMin_YA && x.numMemAge <= ageMax_YA),
                        Tot_MA = oCMList.Count(x => x.numMemAge >= ageMin_MA && x.numMemAge <= ageMax_MA),
                        Tot_AA = oCMList.Count(x => x.numMemAge >= ageMin_AA && x.numMemAge <= ageMax_AA)
                    };

                    _context.CBMemberRollBal.Add(oCBMemRoll);
                    _countCBRollAdd++;
                }

                // save first before updating roll... up
                _context.SaveChanges();
                 

                if (oCBCurr.ParentChurchBody == null)
                { ViewData["strRes_UpdCBMemRoll"] = "Updated congregation's member roll summary. Roll update complete. No further update as congregation has no parent."; return 1; }
                

                //// start roll update with parent >> child CBs 
                var oCBPar = oCBCurr.ParentChurchBody;
                  
                // create CB path up -- >> 
                ///
                var oCBMemRoll_List = new List<CBMemberRollBal>();  // update if CB exists, else add .... batch update
                var oNextCBMemRoll = new CBMemberRollBal();
                //var currCBid = oCBid;
                var _countCBRollAdd_Par = 0; var _countCBRollUpd_Par = 0;
                var _countCBRollAdd_Temp = 0; var _countCBRollUpd_Temp = 0;
                do
                {
                    // get the previous bal ... and add the new current bal.
                    // get these value feom the settings of the CB... may be inherited too! so check out boy
                    // ageLim_C = 0; var ageLim_Y = 0; var ageLim_YA = 0; var ageLim_MA = 0; var ageLim_OA = 0;
                    var oNextCBMemRoll_List = _context.CBMemberRollBal.AsNoTracking()
                        .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBody.ParentChurchBodyId == oCBPar.Id && c.ChurchPeriodId == oCPRDefaultId).ToList();  // Active-Blocked-Deactive current members only ::- keep oCM.Status in sync with [MemberStatus] ...VIPPP
                    ///
                    oNextCBMemRoll = _context.CBMemberRollBal.AsNoTracking()
                        .Where(c => c.AppGlobalOwnerId == oAGOid && c.ChurchBodyId == oCBPar.Id && c.ChurchPeriodId == oCPRDefaultId).FirstOrDefault();  // for curr period

                    if (oNextCBMemRoll_List.Count > 0)
                    {
                        //for (int i = 0; i < oNextCBMemRoll_List.Count; i++)
                        //{
                            // oNextCBMemRoll = oNextCBMemRoll_List[i];
                            if (oNextCBMemRoll != null)
                            {
                                //oNextCBMemRoll.AppGlobalOwnerId = oAGOid;
                                //oNextCBMemRoll.ChurchBodyId = oCBid;
                                // ChurchPeriodId = oCPRDefaultId;

                                oNextCBMemRoll.Created = tm;
                                oNextCBMemRoll.LastMod = tm;
                                oNextCBMemRoll.CreatedByUserId = oUserId_Logged;
                                oNextCBMemRoll.LastModByUserId = oUserId_Logged;
                                ///
                                oNextCBMemRoll.TotRoll = oNextCBMemRoll_List.Sum(x => x.TotRoll);
                                oNextCBMemRoll.Tot_M   = oNextCBMemRoll_List.Sum(x => x.Tot_M);
                                oNextCBMemRoll.Tot_F   = oNextCBMemRoll_List.Sum(x => x.Tot_F);
                                oNextCBMemRoll.Tot_O   = oNextCBMemRoll_List.Sum(x => x.Tot_O);
                                oNextCBMemRoll.Tot_C   = oNextCBMemRoll_List.Sum(x => x.Tot_C);
                                oNextCBMemRoll.Tot_Y   = oNextCBMemRoll_List.Sum(x => x.Tot_Y);
                                oNextCBMemRoll.Tot_YA  = oNextCBMemRoll_List.Sum(x => x.Tot_YA);
                                oNextCBMemRoll.Tot_MA  = oNextCBMemRoll_List.Sum(x => x.Tot_MA);
                                oNextCBMemRoll.Tot_AA  = oNextCBMemRoll_List.Sum(x => x.Tot_AA);

                                _context.CBMemberRollBal.Update(oNextCBMemRoll);
                                _countCBRollUpd_Temp++;
                            }
                            else  // add CB roll to the table
                            {
                                oNextCBMemRoll = new CBMemberRollBal()
                                {
                                    AppGlobalOwnerId = oCBPar.AppGlobalOwnerId,
                                    ChurchBodyId = oCBPar.Id,
                                    ChurchPeriodId = oCPRDefaultId,
                                    ///
                                    Created = tm,
                                    LastMod = tm,
                                    CreatedByUserId = oUserId_Logged,
                                    LastModByUserId = oUserId_Logged,
                                    ///
                                    TotRoll = oNextCBMemRoll_List.Sum(x => x.TotRoll),
                                    Tot_M   = oNextCBMemRoll_List.Sum(x => x.Tot_M),
                                    Tot_F   = oNextCBMemRoll_List.Sum(x => x.Tot_F),
                                    Tot_O   = oNextCBMemRoll_List.Sum(x => x.Tot_O),
                                    Tot_C   = oNextCBMemRoll_List.Sum(x => x.Tot_C),
                                    Tot_Y   = oNextCBMemRoll_List.Sum(x => x.Tot_Y),
                                    Tot_YA  = oNextCBMemRoll_List.Sum(x => x.Tot_YA),
                                    Tot_MA  = oNextCBMemRoll_List.Sum(x => x.Tot_MA),
                                    Tot_AA  = oNextCBMemRoll_List.Sum(x => x.Tot_AA)
                                };

                                _context.CBMemberRollBal.Add(oNextCBMemRoll);
                                _countCBRollAdd_Temp++;
                            }

                            if ((_countCBRollAdd_Temp + _countCBRollUpd_Temp) > 0)
                            {
                                _context.SaveChanges();  // batch can't work... save ... so the list can be upadted!
                                ///
                                _countCBRollAdd_Par += _countCBRollAdd_Temp;
                                _countCBRollUpd_Par += _countCBRollUpd_Temp;

                            _countCBRollAdd_Temp = 0; _countCBRollUpd_Temp = 0;
                            }
                        //}
                    }
                    //else
                    //{
                        //oNextCBMemRoll = new CBMemberRollBal()
                        //{
                        //    AppGlobalOwnerId = oCBPar.AppGlobalOwnerId,
                        //    ChurchBodyId = oCBPar.Id,
                        //    Created = tm,
                        //    LastMod = tm,
                        //    CreatedByUserId = oUserId_Logged,
                        //    LastModByUserId = oUserId_Logged,
                        //    ///
                        //    TotRoll = 0, //oNextCBMemRoll_List.Sum(x => x.TotRoll),
                        //    Tot_M   = 0, //oNextCBMemRoll_List.Sum(x => x.Tot_M),
                        //    Tot_F   = 0, //oNextCBMemRoll_List.Sum(x => x.Tot_F),
                        //    Tot_O   = 0, //oNextCBMemRoll_List.Sum(x => x.Tot_O),
                        //    Tot_C   = 0, //oNextCBMemRoll_List.Sum(x => x.Tot_C),
                        //    Tot_Y   = 0, //oNextCBMemRoll_List.Sum(x => x.Tot_Y),
                        //    Tot_YA  = 0, //oNextCBMemRoll_List.Sum(x => x.Tot_YA),
                        //    Tot_MA  = 0, //oNextCBMemRoll_List.Sum(x => x.Tot_MA),
                        //    Tot_AA  = 0  //oNextCBMemRoll_List.Sum(x => x.Tot_AA)
                        //};

                        //_context.CBMemberRollBal.Add(oNextCBMemRoll);
                        //_countCBRollAdd_Temp++;

                        //if (_countCBRollAdd_Temp > 0)
                        //{
                        //    _context.SaveChanges();  // batch can't work... save ... so the list can be upadted!
                        //    ///
                        //    _countCBRollAdd_Par += _countCBRollAdd_Temp;
                        //    _countCBRollUpd_Par += _countCBRollUpd_Temp;

                        //    _countCBRollAdd_Par = 0; _countCBRollUpd_Par = 0;
                        //}
                    //}

                        //add to list
                        // oCBMemRoll_List.Add(oNextCBMemRoll);

                        //oCBPar becomes curr CB... then loop
                        oCBPar = _context.ChurchBody.AsNoTracking() //.Include(t => t.ParentChurchBody) //.Include(t => t.ChurchLevel)
                                        .Where(c => c.AppGlobalOwnerId == oAGOid && c.Id == oCBPar.ParentChurchBodyId).FirstOrDefault();

                    // stop once the chain breaks --- no parent!
                }
                while (oCBPar != null); // && oCBCurr.ChurchLevel.LevelIndex > 0)


                //// update ... with table built
                //var _countCBRollAdd_Par = 0;  var _countCBRollUpd_Par = 0; 
                //for (int i = 0; i < oCBMemRoll_List.Count; i++)
                //{
                //    var _oChanges = oCBMemRoll_List[i]; 
                //    _oChanges.LastMod = tm;
                //    _oChanges.LastModByUserId = oUserId_Logged;

                //    if (_oChanges.Id > 0)
                //    {
                //        _context.CBMemberRollBal.Update(_oChanges);
                //        _countCBRollUpd_Par++;
                //    }
                //    else
                //    {
                //        _oChanges.Created = tm;
                //        _oChanges.CreatedByUserId = oUserId_Logged;
                //        ///
                //        _context.CBMemberRollBal.Add(_oChanges);
                //        _countCBRollAdd_Par++; 
                //    }
                //}

                if ((_countCBRollAdd + _countCBRollUpd + _countCBRollAdd_Par + _countCBRollUpd_Par) > 0)
                {
                    //_context.SaveChanges();
                    ///
                    _userTask = "Updated member roll balance for " + (_countCBRollAdd + _countCBRollUpd + _countCBRollAdd_Par + _countCBRollUpd_Par) + " congregations [ added:" + _countCBRollAdd + _countCBRollAdd_Par + "; modified: " + _countCBRollAdd_Par + _countCBRollUpd_Par + "] on same route successfully.";
                }


                //audit...
                var _tm = DateTime.Now;

                //var _connstr = this._configuration["ConnectionStrings:DefaultConnection"];   // , _context, _connstr

                //// refreshValues...
                //var _connstr_CL = this.GetCL_DBConnString();
                //if (string.IsNullOrEmpty(_connstr_CL)) RedirectToAction("LoginUserAcc", "UserLogin");



                // register @MSTR
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                //register @CLNT
                _ = this.LogUserActivity_ClientUserAuditTrail(new UserAuditTrail_CL(0, null, null, "V",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, this._oLoggedUser.Id, tm, tm, this._oLoggedUser.Id, this._oLoggedUser.Id)
                    );

                ViewData["strRes_UpdCBMemRoll"] = _userTask;
                return 1;
            }

            catch (Exception ex)
            {
                ViewData["strRes_UpdCBMemRoll"] = "Failed updating member roll summary. Refresh data or contact system admin. Error: " + ex.Message;
                return -1;                
            }
        }

        public ActionResult IndexCM_MRSS(int? oCBid = null, int t_ndx = 1, bool loadLim = false)  //, int filterIndex = 1, int taskIndex = 1, int? numCodeCriteria_1 = (int?)null, string strCodeCriteria_2 = null)  // , int? subSetIndex = 0  int? oAppGloOwnId = null, int? oCurrChuBodyId = null, int setIndex = 0, int subSetIndex = 0) //, int? oParentId = null, int? id = null, int taskIndex = 1)             
        {
            try
            {
                if (this._context == null)
                {
                    this._context = AppUtilties.GetNewDBCtxConn_CL(_masterContext, _configuration, this._oLoggedUser?.AppGlobalOwnerId);
                    if (this._context == null)
                    {
                        RedirectToAction("LoginUserAcc", "UserLogin");

                        // should not get here... Response.StatusCode = 500; 
                        return View("_ErrorPage");
                    }
                }

                if (this._oLoggedAGO_MSTR == null || this._oLoggedCB_MSTR == null || this._oLoggedAGO == null || this._oLoggedCB == null)
                { RedirectToAction("LoginUserAcc", "UserLogin"); }

                if (!loadLim)
                    _ = this.LoadClientDashboardValues();  /// (this._clientDBConnString);


                //if (!InitializeUserLogging())
                //    return RedirectToAction("LoginUserAcc", "UserLogin");

                // Client
                // var oAppGloOwnId = this._oLoggedAGO.Id;

                if (oCBid == null) oCBid = this._oLoggedCB.Id;

                ChurchBody oCB = this._oLoggedCB;
                if (oCBid != this._oLoggedCB.Id)
                    oCB = _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.Id == oCBid).FirstOrDefault();

                var isCBPar = oCB.OrgType == "CR" || oCB.OrgType == "CH";

                // MSTR
                //var oUserId = this._oLoggedUser.Id;
                //var oAGO_MSTR = this._oLoggedAGO_MSTR; var oCB_MSTR = this._oLoggedCB_MSTR;
                //var oAGO = this._oLoggedAGO; var oCB = this._oLoggedCB;

                // if (oAGO_MSTR == null || this._oLoggedCB_MSTR == null || oAGO == null || oCB == null) { return View("_ErrorPage"); }

                // var proScope = "C";
                //get all member from congregation
                //  var oCMList = _context.ChurchMember.AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id && c.ChurchBodyId == this._oLoggedCB.Id).ToList();

                var oMRSSList = new List<CBMemRollModel>();
                
                oMRSSList = (
                from t_mrb in _context.CBMemberRollBal.AsNoTracking().Where(c => c.AppGlobalOwnerId == this._oLoggedAGO.Id &&
                            ((!isCBPar && c.ChurchBodyId == oCBid) || (isCBPar && c.ChurchBody.ParentChurchBodyId == oCBid)))  // both main view, sub view
                from t_cb in _context.ChurchBody.AsNoTracking().Where(c => c.AppGlobalOwnerId == t_mrb.AppGlobalOwnerId && c.Id == t_mrb.ChurchBodyId)
                
                select new CBMemRollModel()
                { 
                    oAppGloOwnId = t_mrb.AppGlobalOwnerId,                    
                    oChurchBodyId = t_mrb.ChurchBodyId,
                    oChurchBody = t_cb,
                    strChurchBody = t_cb.Name,
                    oCBMemberRollBal = t_mrb,
                    ///
                    strTotRoll = string.Format("{0:N0}", t_mrb.TotRoll),  // link to actual mem roll
                    strTot_M = string.Format("{0:N0}", t_mrb.Tot_M),
                    strTot_F = string.Format("{0:N0}", t_mrb.Tot_F),
                    strTot_O = string.Format("{0:N0}", t_mrb.Tot_O),
                    strTot_C = string.Format("{0:N0}", t_mrb.Tot_C),
                    strTot_Y = string.Format("{0:N0}", t_mrb.Tot_Y),
                    strTot_YA = string.Format("{0:N0}", t_mrb.Tot_YA),
                    strTot_MA = string.Format("{0:N0}", t_mrb.Tot_MA),
                    strTot_AA = string.Format("{0:N0}", t_mrb.Tot_AA),
                    ///
                    strTot_GA = string.Format("{0:N0}", (t_mrb.Tot_YA + t_mrb.Tot_MA + t_mrb.Tot_AA)),
                    strTot_OA = string.Format("{0:N0}", t_mrb.Tot_MA + t_mrb.Tot_AA),
                    strTot_NA = string.Format("{0:N0}", t_mrb.Tot_C + t_mrb.Tot_Y),
                })
                // .OrderBy(c => c.strChurchBody).ThenBy(c => c.strMemberFullName) 
                .ToList();

                if (oMRSSList.Count > 0) oMRSSList = oMRSSList
                    .OrderBy(c => (c.oChurchBody.ChurchLevel != null ? c.oChurchBody.ChurchLevel.LevelIndex : (int?)null))
                    .ThenBy(c => c.strChurchBody).ToList();
                          
                


                var oMRSSModel = new CBMemRollModel();
                   
                oMRSSModel.oAppGloOwnId = this._oLoggedAGO.Id;  
                oMRSSModel.oChurchBodyId = oCBid; 
                oMRSSModel.oChurchBody = oCB;
                oMRSSModel.strChurchBody = oCB.Name;

                ///
                //oMRSSModel.oAppGloOwnId_Logged_MSTR = this._oLoggedAGO.MSTR_AppGlobalOwnerId;
                //oMRSSModel.oChurchBodyId_Logged_MSTR = this._oLoggedCB.MSTR_ChurchBodyId;
                oMRSSModel.oAppGloOwnId_Logged = this._oLoggedAGO.Id;
                oMRSSModel.oChurchBodyId_Logged = this._oLoggedCB.Id;
                oMRSSModel.oUserId_Logged = _oLoggedUser.Id;

                oMRSSModel.strGrandTotRoll = string.Format("{0:N0}", oMRSSList.Sum(x=> x.oCBMemberRollBal.TotRoll));  
                oMRSSModel.strGrandTot_M = string.Format("{0:N0}", oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_M));  
                oMRSSModel.strGrandTot_F = string.Format("{0:N0}", oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_F));  
                oMRSSModel.strGrandTot_O = string.Format("{0:N0}", oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_O));  
                oMRSSModel.strGrandTot_C = string.Format("{0:N0}", oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_C));  
                oMRSSModel.strGrandTot_Y = string.Format("{0:N0}", oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_Y));  
                oMRSSModel.strGrandTot_YA = string.Format("{0:N0}", oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_YA));  
                oMRSSModel.strGrandTot_MA = string.Format("{0:N0}", oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_MA));  
                oMRSSModel.strGrandTot_AA = string.Format("{0:N0}", oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_AA));  
                ///
                oMRSSModel.strGrandTot_GA = string.Format("{0:N0}", (oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_YA) + oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_MA)+ oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_AA)));  
                oMRSSModel.strGrandTot_OA = string.Format("{0:N0}", (oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_MA)+ oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_AA)));  
                oMRSSModel.strGrandTot_NA = string.Format("{0:N0}", (oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_C)+ oMRSSList.Sum(x => x.oCBMemberRollBal.Tot_Y)));  
                 

                /// 
                oMRSSModel.lsCBMemRollModels = oMRSSList;
                ViewData["oMRSSModel_List"] = oMRSSModel.lsCBMemRollModels;

                var strDesc = "Church Member Roll Balance";
                var _userTask = "Viewed " + strDesc.ToLower() + " list";
                oMRSSModel.strCurrTask = strDesc;
                oMRSSModel.taskIndex = t_ndx;


                var tm = DateTime.Now;
                _ = this.LogUserActivity_AppMainUserAuditTrail(new UserAuditTrail(0, null, null, "N",
                                 "RCMS-Client: " + strDesc, AppUtilties.GetRawTarget(HttpContext.Request), _userTask, tm, _oLoggedUser.Id, tm, tm, _oLoggedUser.Id, _oLoggedUser.Id));

                ///
                var _oUPModel = Newtonsoft.Json.JsonConvert.SerializeObject(oMRSSModel);
                TempData["oVmCSPModel"] = _oUPModel; TempData.Keep();

                if (loadLim)
                    return PartialView("_vwIndexCM_MRSS", oMRSSModel);
                else
                    return View("IndexCM_MRSS", oMRSSModel);
            }

            catch (Exception ex)
            { 
                return View("ErrorPage");
            }
        }
         
    }
}
